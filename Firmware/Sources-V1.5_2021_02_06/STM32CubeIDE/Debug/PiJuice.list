
PiJuice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001381c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f8c  080138d8  080138d8  000238d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014864  08014864  00030f97  2**0
                  CONTENTS
  4 .ARM          00000000  08014864  08014864  00030f97  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014864  08014864  00030f97  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014864  08014864  00024864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014868  08014868  00024868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a00  20000000  0801486c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 no_init       00000597  20000a00  0801526c  00030a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000aec  20000f98  08015803  00030f98  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001a84  08015803  00031a84  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030f97  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026ce9  00000000  00000000  00030fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061be  00000000  00000000  00057ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  0005de68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c08  00000000  00000000  0005fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f4d  00000000  00000000  00061938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002878c  00000000  00000000  00078885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007a807  00000000  00000000  000a1011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011b818  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e94  00000000  00000000  0011b86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000f98 	.word	0x20000f98
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080138c0 	.word	0x080138c0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000f9c 	.word	0x20000f9c
 8000100:	080138c0 	.word	0x080138c0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fb67 	bl	8000acc <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 faeb 	bl	80009e4 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fb59 	bl	8000acc <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fb4f 	bl	8000acc <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 faf9 	bl	8000a34 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 faef 	bl	8000a34 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_f2uiz>:
 8000464:	219e      	movs	r1, #158	; 0x9e
 8000466:	b510      	push	{r4, lr}
 8000468:	05c9      	lsls	r1, r1, #23
 800046a:	1c04      	adds	r4, r0, #0
 800046c:	f7ff fff0 	bl	8000450 <__aeabi_fcmpge>
 8000470:	2800      	cmp	r0, #0
 8000472:	d103      	bne.n	800047c <__aeabi_f2uiz+0x18>
 8000474:	1c20      	adds	r0, r4, #0
 8000476:	f000 fe55 	bl	8001124 <__aeabi_f2iz>
 800047a:	bd10      	pop	{r4, pc}
 800047c:	219e      	movs	r1, #158	; 0x9e
 800047e:	1c20      	adds	r0, r4, #0
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	f000 fc87 	bl	8000d94 <__aeabi_fsub>
 8000486:	f000 fe4d 	bl	8001124 <__aeabi_f2iz>
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	061b      	lsls	r3, r3, #24
 800048e:	469c      	mov	ip, r3
 8000490:	4460      	add	r0, ip
 8000492:	e7f2      	b.n	800047a <__aeabi_f2uiz+0x16>

08000494 <__aeabi_fadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	4646      	mov	r6, r8
 8000498:	46d6      	mov	lr, sl
 800049a:	464f      	mov	r7, r9
 800049c:	024d      	lsls	r5, r1, #9
 800049e:	0242      	lsls	r2, r0, #9
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a52      	lsrs	r2, r2, #9
 80004a4:	0a6e      	lsrs	r6, r5, #9
 80004a6:	0047      	lsls	r7, r0, #1
 80004a8:	46b0      	mov	r8, r6
 80004aa:	0e3f      	lsrs	r7, r7, #24
 80004ac:	004e      	lsls	r6, r1, #1
 80004ae:	0fc4      	lsrs	r4, r0, #31
 80004b0:	00d0      	lsls	r0, r2, #3
 80004b2:	4694      	mov	ip, r2
 80004b4:	003b      	movs	r3, r7
 80004b6:	4682      	mov	sl, r0
 80004b8:	0e36      	lsrs	r6, r6, #24
 80004ba:	0fc9      	lsrs	r1, r1, #31
 80004bc:	09ad      	lsrs	r5, r5, #6
 80004be:	428c      	cmp	r4, r1
 80004c0:	d06d      	beq.n	800059e <__aeabi_fadd+0x10a>
 80004c2:	1bb8      	subs	r0, r7, r6
 80004c4:	4681      	mov	r9, r0
 80004c6:	2800      	cmp	r0, #0
 80004c8:	dd4d      	ble.n	8000566 <__aeabi_fadd+0xd2>
 80004ca:	2e00      	cmp	r6, #0
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x3c>
 80004ce:	e088      	b.n	80005e2 <__aeabi_fadd+0x14e>
 80004d0:	2fff      	cmp	r7, #255	; 0xff
 80004d2:	d05a      	beq.n	800058a <__aeabi_fadd+0xf6>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	04db      	lsls	r3, r3, #19
 80004d8:	431d      	orrs	r5, r3
 80004da:	464b      	mov	r3, r9
 80004dc:	2201      	movs	r2, #1
 80004de:	2b1b      	cmp	r3, #27
 80004e0:	dc0a      	bgt.n	80004f8 <__aeabi_fadd+0x64>
 80004e2:	002b      	movs	r3, r5
 80004e4:	464a      	mov	r2, r9
 80004e6:	4649      	mov	r1, r9
 80004e8:	40d3      	lsrs	r3, r2
 80004ea:	2220      	movs	r2, #32
 80004ec:	1a52      	subs	r2, r2, r1
 80004ee:	4095      	lsls	r5, r2
 80004f0:	002a      	movs	r2, r5
 80004f2:	1e55      	subs	r5, r2, #1
 80004f4:	41aa      	sbcs	r2, r5
 80004f6:	431a      	orrs	r2, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	1a9a      	subs	r2, r3, r2
 80004fc:	0153      	lsls	r3, r2, #5
 80004fe:	d400      	bmi.n	8000502 <__aeabi_fadd+0x6e>
 8000500:	e0b9      	b.n	8000676 <__aeabi_fadd+0x1e2>
 8000502:	0192      	lsls	r2, r2, #6
 8000504:	0996      	lsrs	r6, r2, #6
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fa96 	bl	8001a38 <__clzsi2>
 800050c:	3805      	subs	r0, #5
 800050e:	4086      	lsls	r6, r0
 8000510:	4287      	cmp	r7, r0
 8000512:	dd00      	ble.n	8000516 <__aeabi_fadd+0x82>
 8000514:	e0d4      	b.n	80006c0 <__aeabi_fadd+0x22c>
 8000516:	0033      	movs	r3, r6
 8000518:	1bc7      	subs	r7, r0, r7
 800051a:	2020      	movs	r0, #32
 800051c:	3701      	adds	r7, #1
 800051e:	40fb      	lsrs	r3, r7
 8000520:	1bc7      	subs	r7, r0, r7
 8000522:	40be      	lsls	r6, r7
 8000524:	0032      	movs	r2, r6
 8000526:	1e56      	subs	r6, r2, #1
 8000528:	41b2      	sbcs	r2, r6
 800052a:	2700      	movs	r7, #0
 800052c:	431a      	orrs	r2, r3
 800052e:	0753      	lsls	r3, r2, #29
 8000530:	d004      	beq.n	800053c <__aeabi_fadd+0xa8>
 8000532:	230f      	movs	r3, #15
 8000534:	4013      	ands	r3, r2
 8000536:	2b04      	cmp	r3, #4
 8000538:	d000      	beq.n	800053c <__aeabi_fadd+0xa8>
 800053a:	3204      	adds	r2, #4
 800053c:	0153      	lsls	r3, r2, #5
 800053e:	d400      	bmi.n	8000542 <__aeabi_fadd+0xae>
 8000540:	e09c      	b.n	800067c <__aeabi_fadd+0x1e8>
 8000542:	1c7b      	adds	r3, r7, #1
 8000544:	2ffe      	cmp	r7, #254	; 0xfe
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0xb6>
 8000548:	e09a      	b.n	8000680 <__aeabi_fadd+0x1ec>
 800054a:	0192      	lsls	r2, r2, #6
 800054c:	0a52      	lsrs	r2, r2, #9
 800054e:	4694      	mov	ip, r2
 8000550:	b2db      	uxtb	r3, r3
 8000552:	05d8      	lsls	r0, r3, #23
 8000554:	4663      	mov	r3, ip
 8000556:	07e4      	lsls	r4, r4, #31
 8000558:	4318      	orrs	r0, r3
 800055a:	4320      	orrs	r0, r4
 800055c:	bce0      	pop	{r5, r6, r7}
 800055e:	46ba      	mov	sl, r7
 8000560:	46b1      	mov	r9, r6
 8000562:	46a8      	mov	r8, r5
 8000564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000566:	2800      	cmp	r0, #0
 8000568:	d049      	beq.n	80005fe <__aeabi_fadd+0x16a>
 800056a:	1bf3      	subs	r3, r6, r7
 800056c:	2f00      	cmp	r7, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_fadd+0xde>
 8000570:	e0b6      	b.n	80006e0 <__aeabi_fadd+0x24c>
 8000572:	4652      	mov	r2, sl
 8000574:	2a00      	cmp	r2, #0
 8000576:	d060      	beq.n	800063a <__aeabi_fadd+0x1a6>
 8000578:	3b01      	subs	r3, #1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0xec>
 800057e:	e0fc      	b.n	800077a <__aeabi_fadd+0x2e6>
 8000580:	2eff      	cmp	r6, #255	; 0xff
 8000582:	d000      	beq.n	8000586 <__aeabi_fadd+0xf2>
 8000584:	e0b4      	b.n	80006f0 <__aeabi_fadd+0x25c>
 8000586:	000c      	movs	r4, r1
 8000588:	4642      	mov	r2, r8
 800058a:	2a00      	cmp	r2, #0
 800058c:	d078      	beq.n	8000680 <__aeabi_fadd+0x1ec>
 800058e:	2080      	movs	r0, #128	; 0x80
 8000590:	03c0      	lsls	r0, r0, #15
 8000592:	4310      	orrs	r0, r2
 8000594:	0242      	lsls	r2, r0, #9
 8000596:	0a53      	lsrs	r3, r2, #9
 8000598:	469c      	mov	ip, r3
 800059a:	23ff      	movs	r3, #255	; 0xff
 800059c:	e7d9      	b.n	8000552 <__aeabi_fadd+0xbe>
 800059e:	1bb9      	subs	r1, r7, r6
 80005a0:	2900      	cmp	r1, #0
 80005a2:	dd71      	ble.n	8000688 <__aeabi_fadd+0x1f4>
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d03f      	beq.n	8000628 <__aeabi_fadd+0x194>
 80005a8:	2fff      	cmp	r7, #255	; 0xff
 80005aa:	d0ee      	beq.n	800058a <__aeabi_fadd+0xf6>
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	04db      	lsls	r3, r3, #19
 80005b0:	431d      	orrs	r5, r3
 80005b2:	2201      	movs	r2, #1
 80005b4:	291b      	cmp	r1, #27
 80005b6:	dc07      	bgt.n	80005c8 <__aeabi_fadd+0x134>
 80005b8:	002a      	movs	r2, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	40ca      	lsrs	r2, r1
 80005be:	1a59      	subs	r1, r3, r1
 80005c0:	408d      	lsls	r5, r1
 80005c2:	1e6b      	subs	r3, r5, #1
 80005c4:	419d      	sbcs	r5, r3
 80005c6:	432a      	orrs	r2, r5
 80005c8:	4452      	add	r2, sl
 80005ca:	0153      	lsls	r3, r2, #5
 80005cc:	d553      	bpl.n	8000676 <__aeabi_fadd+0x1e2>
 80005ce:	3701      	adds	r7, #1
 80005d0:	2fff      	cmp	r7, #255	; 0xff
 80005d2:	d055      	beq.n	8000680 <__aeabi_fadd+0x1ec>
 80005d4:	2301      	movs	r3, #1
 80005d6:	497b      	ldr	r1, [pc, #492]	; (80007c4 <__aeabi_fadd+0x330>)
 80005d8:	4013      	ands	r3, r2
 80005da:	0852      	lsrs	r2, r2, #1
 80005dc:	400a      	ands	r2, r1
 80005de:	431a      	orrs	r2, r3
 80005e0:	e7a5      	b.n	800052e <__aeabi_fadd+0x9a>
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d02c      	beq.n	8000640 <__aeabi_fadd+0x1ac>
 80005e6:	2301      	movs	r3, #1
 80005e8:	425b      	negs	r3, r3
 80005ea:	469c      	mov	ip, r3
 80005ec:	44e1      	add	r9, ip
 80005ee:	464b      	mov	r3, r9
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fadd+0x162>
 80005f4:	e0ad      	b.n	8000752 <__aeabi_fadd+0x2be>
 80005f6:	2fff      	cmp	r7, #255	; 0xff
 80005f8:	d000      	beq.n	80005fc <__aeabi_fadd+0x168>
 80005fa:	e76e      	b.n	80004da <__aeabi_fadd+0x46>
 80005fc:	e7c5      	b.n	800058a <__aeabi_fadd+0xf6>
 80005fe:	20fe      	movs	r0, #254	; 0xfe
 8000600:	1c7e      	adds	r6, r7, #1
 8000602:	4230      	tst	r0, r6
 8000604:	d160      	bne.n	80006c8 <__aeabi_fadd+0x234>
 8000606:	2f00      	cmp	r7, #0
 8000608:	d000      	beq.n	800060c <__aeabi_fadd+0x178>
 800060a:	e093      	b.n	8000734 <__aeabi_fadd+0x2a0>
 800060c:	4652      	mov	r2, sl
 800060e:	2a00      	cmp	r2, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x180>
 8000612:	e0b6      	b.n	8000782 <__aeabi_fadd+0x2ee>
 8000614:	2d00      	cmp	r5, #0
 8000616:	d09c      	beq.n	8000552 <__aeabi_fadd+0xbe>
 8000618:	1b52      	subs	r2, r2, r5
 800061a:	0150      	lsls	r0, r2, #5
 800061c:	d400      	bmi.n	8000620 <__aeabi_fadd+0x18c>
 800061e:	e0c3      	b.n	80007a8 <__aeabi_fadd+0x314>
 8000620:	4653      	mov	r3, sl
 8000622:	000c      	movs	r4, r1
 8000624:	1aea      	subs	r2, r5, r3
 8000626:	e782      	b.n	800052e <__aeabi_fadd+0x9a>
 8000628:	2d00      	cmp	r5, #0
 800062a:	d009      	beq.n	8000640 <__aeabi_fadd+0x1ac>
 800062c:	3901      	subs	r1, #1
 800062e:	2900      	cmp	r1, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x1a0>
 8000632:	e08b      	b.n	800074c <__aeabi_fadd+0x2b8>
 8000634:	2fff      	cmp	r7, #255	; 0xff
 8000636:	d1bc      	bne.n	80005b2 <__aeabi_fadd+0x11e>
 8000638:	e7a7      	b.n	800058a <__aeabi_fadd+0xf6>
 800063a:	000c      	movs	r4, r1
 800063c:	4642      	mov	r2, r8
 800063e:	0037      	movs	r7, r6
 8000640:	2fff      	cmp	r7, #255	; 0xff
 8000642:	d0a2      	beq.n	800058a <__aeabi_fadd+0xf6>
 8000644:	0252      	lsls	r2, r2, #9
 8000646:	0a53      	lsrs	r3, r2, #9
 8000648:	469c      	mov	ip, r3
 800064a:	b2fb      	uxtb	r3, r7
 800064c:	e781      	b.n	8000552 <__aeabi_fadd+0xbe>
 800064e:	21fe      	movs	r1, #254	; 0xfe
 8000650:	3701      	adds	r7, #1
 8000652:	4239      	tst	r1, r7
 8000654:	d165      	bne.n	8000722 <__aeabi_fadd+0x28e>
 8000656:	2b00      	cmp	r3, #0
 8000658:	d17e      	bne.n	8000758 <__aeabi_fadd+0x2c4>
 800065a:	2800      	cmp	r0, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0x1cc>
 800065e:	e0aa      	b.n	80007b6 <__aeabi_fadd+0x322>
 8000660:	2d00      	cmp	r5, #0
 8000662:	d100      	bne.n	8000666 <__aeabi_fadd+0x1d2>
 8000664:	e775      	b.n	8000552 <__aeabi_fadd+0xbe>
 8000666:	002a      	movs	r2, r5
 8000668:	4452      	add	r2, sl
 800066a:	2700      	movs	r7, #0
 800066c:	0153      	lsls	r3, r2, #5
 800066e:	d502      	bpl.n	8000676 <__aeabi_fadd+0x1e2>
 8000670:	4b55      	ldr	r3, [pc, #340]	; (80007c8 <__aeabi_fadd+0x334>)
 8000672:	3701      	adds	r7, #1
 8000674:	401a      	ands	r2, r3
 8000676:	0753      	lsls	r3, r2, #29
 8000678:	d000      	beq.n	800067c <__aeabi_fadd+0x1e8>
 800067a:	e75a      	b.n	8000532 <__aeabi_fadd+0x9e>
 800067c:	08d2      	lsrs	r2, r2, #3
 800067e:	e7df      	b.n	8000640 <__aeabi_fadd+0x1ac>
 8000680:	2200      	movs	r2, #0
 8000682:	23ff      	movs	r3, #255	; 0xff
 8000684:	4694      	mov	ip, r2
 8000686:	e764      	b.n	8000552 <__aeabi_fadd+0xbe>
 8000688:	2900      	cmp	r1, #0
 800068a:	d0e0      	beq.n	800064e <__aeabi_fadd+0x1ba>
 800068c:	1bf3      	subs	r3, r6, r7
 800068e:	2f00      	cmp	r7, #0
 8000690:	d03e      	beq.n	8000710 <__aeabi_fadd+0x27c>
 8000692:	2eff      	cmp	r6, #255	; 0xff
 8000694:	d100      	bne.n	8000698 <__aeabi_fadd+0x204>
 8000696:	e777      	b.n	8000588 <__aeabi_fadd+0xf4>
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	0001      	movs	r1, r0
 800069c:	04d2      	lsls	r2, r2, #19
 800069e:	4311      	orrs	r1, r2
 80006a0:	468a      	mov	sl, r1
 80006a2:	2201      	movs	r2, #1
 80006a4:	2b1b      	cmp	r3, #27
 80006a6:	dc08      	bgt.n	80006ba <__aeabi_fadd+0x226>
 80006a8:	4652      	mov	r2, sl
 80006aa:	2120      	movs	r1, #32
 80006ac:	4650      	mov	r0, sl
 80006ae:	40da      	lsrs	r2, r3
 80006b0:	1acb      	subs	r3, r1, r3
 80006b2:	4098      	lsls	r0, r3
 80006b4:	1e43      	subs	r3, r0, #1
 80006b6:	4198      	sbcs	r0, r3
 80006b8:	4302      	orrs	r2, r0
 80006ba:	0037      	movs	r7, r6
 80006bc:	1952      	adds	r2, r2, r5
 80006be:	e784      	b.n	80005ca <__aeabi_fadd+0x136>
 80006c0:	4a41      	ldr	r2, [pc, #260]	; (80007c8 <__aeabi_fadd+0x334>)
 80006c2:	1a3f      	subs	r7, r7, r0
 80006c4:	4032      	ands	r2, r6
 80006c6:	e732      	b.n	800052e <__aeabi_fadd+0x9a>
 80006c8:	4653      	mov	r3, sl
 80006ca:	1b5e      	subs	r6, r3, r5
 80006cc:	0173      	lsls	r3, r6, #5
 80006ce:	d42d      	bmi.n	800072c <__aeabi_fadd+0x298>
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fadd+0x242>
 80006d4:	e717      	b.n	8000506 <__aeabi_fadd+0x72>
 80006d6:	2200      	movs	r2, #0
 80006d8:	2400      	movs	r4, #0
 80006da:	2300      	movs	r3, #0
 80006dc:	4694      	mov	ip, r2
 80006de:	e738      	b.n	8000552 <__aeabi_fadd+0xbe>
 80006e0:	2eff      	cmp	r6, #255	; 0xff
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0x252>
 80006e4:	e74f      	b.n	8000586 <__aeabi_fadd+0xf2>
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	4650      	mov	r0, sl
 80006ea:	04d2      	lsls	r2, r2, #19
 80006ec:	4310      	orrs	r0, r2
 80006ee:	4682      	mov	sl, r0
 80006f0:	2201      	movs	r2, #1
 80006f2:	2b1b      	cmp	r3, #27
 80006f4:	dc08      	bgt.n	8000708 <__aeabi_fadd+0x274>
 80006f6:	4652      	mov	r2, sl
 80006f8:	2420      	movs	r4, #32
 80006fa:	4650      	mov	r0, sl
 80006fc:	40da      	lsrs	r2, r3
 80006fe:	1ae3      	subs	r3, r4, r3
 8000700:	4098      	lsls	r0, r3
 8000702:	1e43      	subs	r3, r0, #1
 8000704:	4198      	sbcs	r0, r3
 8000706:	4302      	orrs	r2, r0
 8000708:	000c      	movs	r4, r1
 800070a:	0037      	movs	r7, r6
 800070c:	1aaa      	subs	r2, r5, r2
 800070e:	e6f5      	b.n	80004fc <__aeabi_fadd+0x68>
 8000710:	2800      	cmp	r0, #0
 8000712:	d093      	beq.n	800063c <__aeabi_fadd+0x1a8>
 8000714:	3b01      	subs	r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d04f      	beq.n	80007ba <__aeabi_fadd+0x326>
 800071a:	2eff      	cmp	r6, #255	; 0xff
 800071c:	d1c1      	bne.n	80006a2 <__aeabi_fadd+0x20e>
 800071e:	4642      	mov	r2, r8
 8000720:	e733      	b.n	800058a <__aeabi_fadd+0xf6>
 8000722:	2fff      	cmp	r7, #255	; 0xff
 8000724:	d0ac      	beq.n	8000680 <__aeabi_fadd+0x1ec>
 8000726:	4455      	add	r5, sl
 8000728:	086a      	lsrs	r2, r5, #1
 800072a:	e7a4      	b.n	8000676 <__aeabi_fadd+0x1e2>
 800072c:	4653      	mov	r3, sl
 800072e:	000c      	movs	r4, r1
 8000730:	1aee      	subs	r6, r5, r3
 8000732:	e6e8      	b.n	8000506 <__aeabi_fadd+0x72>
 8000734:	4653      	mov	r3, sl
 8000736:	2b00      	cmp	r3, #0
 8000738:	d128      	bne.n	800078c <__aeabi_fadd+0x2f8>
 800073a:	2d00      	cmp	r5, #0
 800073c:	d000      	beq.n	8000740 <__aeabi_fadd+0x2ac>
 800073e:	e722      	b.n	8000586 <__aeabi_fadd+0xf2>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	03db      	lsls	r3, r3, #15
 8000744:	469c      	mov	ip, r3
 8000746:	2400      	movs	r4, #0
 8000748:	23ff      	movs	r3, #255	; 0xff
 800074a:	e702      	b.n	8000552 <__aeabi_fadd+0xbe>
 800074c:	002a      	movs	r2, r5
 800074e:	4452      	add	r2, sl
 8000750:	e73b      	b.n	80005ca <__aeabi_fadd+0x136>
 8000752:	4653      	mov	r3, sl
 8000754:	1b5a      	subs	r2, r3, r5
 8000756:	e6d1      	b.n	80004fc <__aeabi_fadd+0x68>
 8000758:	2800      	cmp	r0, #0
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x2ca>
 800075c:	e714      	b.n	8000588 <__aeabi_fadd+0xf4>
 800075e:	2d00      	cmp	r5, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x2d0>
 8000762:	e712      	b.n	800058a <__aeabi_fadd+0xf6>
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	03db      	lsls	r3, r3, #15
 8000768:	421a      	tst	r2, r3
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x2da>
 800076c:	e70d      	b.n	800058a <__aeabi_fadd+0xf6>
 800076e:	4641      	mov	r1, r8
 8000770:	4219      	tst	r1, r3
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0x2e2>
 8000774:	e709      	b.n	800058a <__aeabi_fadd+0xf6>
 8000776:	4642      	mov	r2, r8
 8000778:	e707      	b.n	800058a <__aeabi_fadd+0xf6>
 800077a:	000c      	movs	r4, r1
 800077c:	0037      	movs	r7, r6
 800077e:	1aaa      	subs	r2, r5, r2
 8000780:	e6bc      	b.n	80004fc <__aeabi_fadd+0x68>
 8000782:	2d00      	cmp	r5, #0
 8000784:	d013      	beq.n	80007ae <__aeabi_fadd+0x31a>
 8000786:	000c      	movs	r4, r1
 8000788:	46c4      	mov	ip, r8
 800078a:	e6e2      	b.n	8000552 <__aeabi_fadd+0xbe>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x2fe>
 8000790:	e6fb      	b.n	800058a <__aeabi_fadd+0xf6>
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	03db      	lsls	r3, r3, #15
 8000796:	421a      	tst	r2, r3
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x308>
 800079a:	e6f6      	b.n	800058a <__aeabi_fadd+0xf6>
 800079c:	4640      	mov	r0, r8
 800079e:	4218      	tst	r0, r3
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fadd+0x310>
 80007a2:	e6f2      	b.n	800058a <__aeabi_fadd+0xf6>
 80007a4:	000c      	movs	r4, r1
 80007a6:	e6ef      	b.n	8000588 <__aeabi_fadd+0xf4>
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0x31a>
 80007ac:	e763      	b.n	8000676 <__aeabi_fadd+0x1e2>
 80007ae:	2200      	movs	r2, #0
 80007b0:	2400      	movs	r4, #0
 80007b2:	4694      	mov	ip, r2
 80007b4:	e6cd      	b.n	8000552 <__aeabi_fadd+0xbe>
 80007b6:	46c4      	mov	ip, r8
 80007b8:	e6cb      	b.n	8000552 <__aeabi_fadd+0xbe>
 80007ba:	002a      	movs	r2, r5
 80007bc:	0037      	movs	r7, r6
 80007be:	4452      	add	r2, sl
 80007c0:	e703      	b.n	80005ca <__aeabi_fadd+0x136>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	7dffffff 	.word	0x7dffffff
 80007c8:	fbffffff 	.word	0xfbffffff

080007cc <__aeabi_fdiv>:
 80007cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ce:	464f      	mov	r7, r9
 80007d0:	4646      	mov	r6, r8
 80007d2:	46d6      	mov	lr, sl
 80007d4:	0245      	lsls	r5, r0, #9
 80007d6:	b5c0      	push	{r6, r7, lr}
 80007d8:	0047      	lsls	r7, r0, #1
 80007da:	1c0c      	adds	r4, r1, #0
 80007dc:	0a6d      	lsrs	r5, r5, #9
 80007de:	0e3f      	lsrs	r7, r7, #24
 80007e0:	0fc6      	lsrs	r6, r0, #31
 80007e2:	2f00      	cmp	r7, #0
 80007e4:	d066      	beq.n	80008b4 <__aeabi_fdiv+0xe8>
 80007e6:	2fff      	cmp	r7, #255	; 0xff
 80007e8:	d06c      	beq.n	80008c4 <__aeabi_fdiv+0xf8>
 80007ea:	2300      	movs	r3, #0
 80007ec:	00ea      	lsls	r2, r5, #3
 80007ee:	2580      	movs	r5, #128	; 0x80
 80007f0:	4699      	mov	r9, r3
 80007f2:	469a      	mov	sl, r3
 80007f4:	04ed      	lsls	r5, r5, #19
 80007f6:	4315      	orrs	r5, r2
 80007f8:	3f7f      	subs	r7, #127	; 0x7f
 80007fa:	0260      	lsls	r0, r4, #9
 80007fc:	0061      	lsls	r1, r4, #1
 80007fe:	0a43      	lsrs	r3, r0, #9
 8000800:	4698      	mov	r8, r3
 8000802:	0e09      	lsrs	r1, r1, #24
 8000804:	0fe4      	lsrs	r4, r4, #31
 8000806:	2900      	cmp	r1, #0
 8000808:	d048      	beq.n	800089c <__aeabi_fdiv+0xd0>
 800080a:	29ff      	cmp	r1, #255	; 0xff
 800080c:	d010      	beq.n	8000830 <__aeabi_fdiv+0x64>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	00d8      	lsls	r0, r3, #3
 8000812:	04d2      	lsls	r2, r2, #19
 8000814:	4302      	orrs	r2, r0
 8000816:	4690      	mov	r8, r2
 8000818:	2000      	movs	r0, #0
 800081a:	397f      	subs	r1, #127	; 0x7f
 800081c:	464a      	mov	r2, r9
 800081e:	0033      	movs	r3, r6
 8000820:	1a7f      	subs	r7, r7, r1
 8000822:	4302      	orrs	r2, r0
 8000824:	496c      	ldr	r1, [pc, #432]	; (80009d8 <__aeabi_fdiv+0x20c>)
 8000826:	0092      	lsls	r2, r2, #2
 8000828:	588a      	ldr	r2, [r1, r2]
 800082a:	4063      	eors	r3, r4
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4697      	mov	pc, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d16d      	bne.n	8000910 <__aeabi_fdiv+0x144>
 8000834:	2002      	movs	r0, #2
 8000836:	3fff      	subs	r7, #255	; 0xff
 8000838:	e033      	b.n	80008a2 <__aeabi_fdiv+0xd6>
 800083a:	2300      	movs	r3, #0
 800083c:	4698      	mov	r8, r3
 800083e:	0026      	movs	r6, r4
 8000840:	4645      	mov	r5, r8
 8000842:	4682      	mov	sl, r0
 8000844:	4653      	mov	r3, sl
 8000846:	2b02      	cmp	r3, #2
 8000848:	d100      	bne.n	800084c <__aeabi_fdiv+0x80>
 800084a:	e07f      	b.n	800094c <__aeabi_fdiv+0x180>
 800084c:	2b03      	cmp	r3, #3
 800084e:	d100      	bne.n	8000852 <__aeabi_fdiv+0x86>
 8000850:	e094      	b.n	800097c <__aeabi_fdiv+0x1b0>
 8000852:	2b01      	cmp	r3, #1
 8000854:	d017      	beq.n	8000886 <__aeabi_fdiv+0xba>
 8000856:	0038      	movs	r0, r7
 8000858:	307f      	adds	r0, #127	; 0x7f
 800085a:	2800      	cmp	r0, #0
 800085c:	dd5f      	ble.n	800091e <__aeabi_fdiv+0x152>
 800085e:	076b      	lsls	r3, r5, #29
 8000860:	d004      	beq.n	800086c <__aeabi_fdiv+0xa0>
 8000862:	230f      	movs	r3, #15
 8000864:	402b      	ands	r3, r5
 8000866:	2b04      	cmp	r3, #4
 8000868:	d000      	beq.n	800086c <__aeabi_fdiv+0xa0>
 800086a:	3504      	adds	r5, #4
 800086c:	012b      	lsls	r3, r5, #4
 800086e:	d503      	bpl.n	8000878 <__aeabi_fdiv+0xac>
 8000870:	0038      	movs	r0, r7
 8000872:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <__aeabi_fdiv+0x210>)
 8000874:	3080      	adds	r0, #128	; 0x80
 8000876:	401d      	ands	r5, r3
 8000878:	28fe      	cmp	r0, #254	; 0xfe
 800087a:	dc67      	bgt.n	800094c <__aeabi_fdiv+0x180>
 800087c:	01ad      	lsls	r5, r5, #6
 800087e:	0a6d      	lsrs	r5, r5, #9
 8000880:	b2c0      	uxtb	r0, r0
 8000882:	e002      	b.n	800088a <__aeabi_fdiv+0xbe>
 8000884:	001e      	movs	r6, r3
 8000886:	2000      	movs	r0, #0
 8000888:	2500      	movs	r5, #0
 800088a:	05c0      	lsls	r0, r0, #23
 800088c:	4328      	orrs	r0, r5
 800088e:	07f6      	lsls	r6, r6, #31
 8000890:	4330      	orrs	r0, r6
 8000892:	bce0      	pop	{r5, r6, r7}
 8000894:	46ba      	mov	sl, r7
 8000896:	46b1      	mov	r9, r6
 8000898:	46a8      	mov	r8, r5
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12b      	bne.n	80008f8 <__aeabi_fdiv+0x12c>
 80008a0:	2001      	movs	r0, #1
 80008a2:	464a      	mov	r2, r9
 80008a4:	0033      	movs	r3, r6
 80008a6:	494e      	ldr	r1, [pc, #312]	; (80009e0 <__aeabi_fdiv+0x214>)
 80008a8:	4302      	orrs	r2, r0
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	588a      	ldr	r2, [r1, r2]
 80008ae:	4063      	eors	r3, r4
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4697      	mov	pc, r2
 80008b4:	2d00      	cmp	r5, #0
 80008b6:	d113      	bne.n	80008e0 <__aeabi_fdiv+0x114>
 80008b8:	2304      	movs	r3, #4
 80008ba:	4699      	mov	r9, r3
 80008bc:	3b03      	subs	r3, #3
 80008be:	2700      	movs	r7, #0
 80008c0:	469a      	mov	sl, r3
 80008c2:	e79a      	b.n	80007fa <__aeabi_fdiv+0x2e>
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d105      	bne.n	80008d4 <__aeabi_fdiv+0x108>
 80008c8:	2308      	movs	r3, #8
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b06      	subs	r3, #6
 80008ce:	27ff      	movs	r7, #255	; 0xff
 80008d0:	469a      	mov	sl, r3
 80008d2:	e792      	b.n	80007fa <__aeabi_fdiv+0x2e>
 80008d4:	230c      	movs	r3, #12
 80008d6:	4699      	mov	r9, r3
 80008d8:	3b09      	subs	r3, #9
 80008da:	27ff      	movs	r7, #255	; 0xff
 80008dc:	469a      	mov	sl, r3
 80008de:	e78c      	b.n	80007fa <__aeabi_fdiv+0x2e>
 80008e0:	0028      	movs	r0, r5
 80008e2:	f001 f8a9 	bl	8001a38 <__clzsi2>
 80008e6:	2776      	movs	r7, #118	; 0x76
 80008e8:	1f43      	subs	r3, r0, #5
 80008ea:	409d      	lsls	r5, r3
 80008ec:	2300      	movs	r3, #0
 80008ee:	427f      	negs	r7, r7
 80008f0:	4699      	mov	r9, r3
 80008f2:	469a      	mov	sl, r3
 80008f4:	1a3f      	subs	r7, r7, r0
 80008f6:	e780      	b.n	80007fa <__aeabi_fdiv+0x2e>
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 f89d 	bl	8001a38 <__clzsi2>
 80008fe:	4642      	mov	r2, r8
 8000900:	1f43      	subs	r3, r0, #5
 8000902:	2176      	movs	r1, #118	; 0x76
 8000904:	409a      	lsls	r2, r3
 8000906:	4249      	negs	r1, r1
 8000908:	1a09      	subs	r1, r1, r0
 800090a:	4690      	mov	r8, r2
 800090c:	2000      	movs	r0, #0
 800090e:	e785      	b.n	800081c <__aeabi_fdiv+0x50>
 8000910:	21ff      	movs	r1, #255	; 0xff
 8000912:	2003      	movs	r0, #3
 8000914:	e782      	b.n	800081c <__aeabi_fdiv+0x50>
 8000916:	001e      	movs	r6, r3
 8000918:	20ff      	movs	r0, #255	; 0xff
 800091a:	2500      	movs	r5, #0
 800091c:	e7b5      	b.n	800088a <__aeabi_fdiv+0xbe>
 800091e:	2301      	movs	r3, #1
 8000920:	1a1b      	subs	r3, r3, r0
 8000922:	2b1b      	cmp	r3, #27
 8000924:	dcaf      	bgt.n	8000886 <__aeabi_fdiv+0xba>
 8000926:	379e      	adds	r7, #158	; 0x9e
 8000928:	0029      	movs	r1, r5
 800092a:	40bd      	lsls	r5, r7
 800092c:	40d9      	lsrs	r1, r3
 800092e:	1e6a      	subs	r2, r5, #1
 8000930:	4195      	sbcs	r5, r2
 8000932:	430d      	orrs	r5, r1
 8000934:	076b      	lsls	r3, r5, #29
 8000936:	d004      	beq.n	8000942 <__aeabi_fdiv+0x176>
 8000938:	230f      	movs	r3, #15
 800093a:	402b      	ands	r3, r5
 800093c:	2b04      	cmp	r3, #4
 800093e:	d000      	beq.n	8000942 <__aeabi_fdiv+0x176>
 8000940:	3504      	adds	r5, #4
 8000942:	016b      	lsls	r3, r5, #5
 8000944:	d544      	bpl.n	80009d0 <__aeabi_fdiv+0x204>
 8000946:	2001      	movs	r0, #1
 8000948:	2500      	movs	r5, #0
 800094a:	e79e      	b.n	800088a <__aeabi_fdiv+0xbe>
 800094c:	20ff      	movs	r0, #255	; 0xff
 800094e:	2500      	movs	r5, #0
 8000950:	e79b      	b.n	800088a <__aeabi_fdiv+0xbe>
 8000952:	2580      	movs	r5, #128	; 0x80
 8000954:	2600      	movs	r6, #0
 8000956:	20ff      	movs	r0, #255	; 0xff
 8000958:	03ed      	lsls	r5, r5, #15
 800095a:	e796      	b.n	800088a <__aeabi_fdiv+0xbe>
 800095c:	2300      	movs	r3, #0
 800095e:	4698      	mov	r8, r3
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	03c0      	lsls	r0, r0, #15
 8000964:	4205      	tst	r5, r0
 8000966:	d009      	beq.n	800097c <__aeabi_fdiv+0x1b0>
 8000968:	4643      	mov	r3, r8
 800096a:	4203      	tst	r3, r0
 800096c:	d106      	bne.n	800097c <__aeabi_fdiv+0x1b0>
 800096e:	4645      	mov	r5, r8
 8000970:	4305      	orrs	r5, r0
 8000972:	026d      	lsls	r5, r5, #9
 8000974:	0026      	movs	r6, r4
 8000976:	20ff      	movs	r0, #255	; 0xff
 8000978:	0a6d      	lsrs	r5, r5, #9
 800097a:	e786      	b.n	800088a <__aeabi_fdiv+0xbe>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	03c0      	lsls	r0, r0, #15
 8000980:	4305      	orrs	r5, r0
 8000982:	026d      	lsls	r5, r5, #9
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	e77f      	b.n	800088a <__aeabi_fdiv+0xbe>
 800098a:	4641      	mov	r1, r8
 800098c:	016a      	lsls	r2, r5, #5
 800098e:	0148      	lsls	r0, r1, #5
 8000990:	4282      	cmp	r2, r0
 8000992:	d219      	bcs.n	80009c8 <__aeabi_fdiv+0x1fc>
 8000994:	211b      	movs	r1, #27
 8000996:	2500      	movs	r5, #0
 8000998:	3f01      	subs	r7, #1
 800099a:	2601      	movs	r6, #1
 800099c:	0014      	movs	r4, r2
 800099e:	006d      	lsls	r5, r5, #1
 80009a0:	0052      	lsls	r2, r2, #1
 80009a2:	2c00      	cmp	r4, #0
 80009a4:	db01      	blt.n	80009aa <__aeabi_fdiv+0x1de>
 80009a6:	4290      	cmp	r0, r2
 80009a8:	d801      	bhi.n	80009ae <__aeabi_fdiv+0x1e2>
 80009aa:	1a12      	subs	r2, r2, r0
 80009ac:	4335      	orrs	r5, r6
 80009ae:	3901      	subs	r1, #1
 80009b0:	2900      	cmp	r1, #0
 80009b2:	d1f3      	bne.n	800099c <__aeabi_fdiv+0x1d0>
 80009b4:	1e50      	subs	r0, r2, #1
 80009b6:	4182      	sbcs	r2, r0
 80009b8:	0038      	movs	r0, r7
 80009ba:	307f      	adds	r0, #127	; 0x7f
 80009bc:	001e      	movs	r6, r3
 80009be:	4315      	orrs	r5, r2
 80009c0:	2800      	cmp	r0, #0
 80009c2:	dd00      	ble.n	80009c6 <__aeabi_fdiv+0x1fa>
 80009c4:	e74b      	b.n	800085e <__aeabi_fdiv+0x92>
 80009c6:	e7aa      	b.n	800091e <__aeabi_fdiv+0x152>
 80009c8:	211a      	movs	r1, #26
 80009ca:	2501      	movs	r5, #1
 80009cc:	1a12      	subs	r2, r2, r0
 80009ce:	e7e4      	b.n	800099a <__aeabi_fdiv+0x1ce>
 80009d0:	01ad      	lsls	r5, r5, #6
 80009d2:	2000      	movs	r0, #0
 80009d4:	0a6d      	lsrs	r5, r5, #9
 80009d6:	e758      	b.n	800088a <__aeabi_fdiv+0xbe>
 80009d8:	080138f8 	.word	0x080138f8
 80009dc:	f7ffffff 	.word	0xf7ffffff
 80009e0:	08013938 	.word	0x08013938

080009e4 <__eqsf2>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	0042      	lsls	r2, r0, #1
 80009e8:	024e      	lsls	r6, r1, #9
 80009ea:	004c      	lsls	r4, r1, #1
 80009ec:	0245      	lsls	r5, r0, #9
 80009ee:	0a6d      	lsrs	r5, r5, #9
 80009f0:	0e12      	lsrs	r2, r2, #24
 80009f2:	0fc3      	lsrs	r3, r0, #31
 80009f4:	0a76      	lsrs	r6, r6, #9
 80009f6:	0e24      	lsrs	r4, r4, #24
 80009f8:	0fc9      	lsrs	r1, r1, #31
 80009fa:	2aff      	cmp	r2, #255	; 0xff
 80009fc:	d00f      	beq.n	8000a1e <__eqsf2+0x3a>
 80009fe:	2cff      	cmp	r4, #255	; 0xff
 8000a00:	d011      	beq.n	8000a26 <__eqsf2+0x42>
 8000a02:	2001      	movs	r0, #1
 8000a04:	42a2      	cmp	r2, r4
 8000a06:	d000      	beq.n	8000a0a <__eqsf2+0x26>
 8000a08:	bd70      	pop	{r4, r5, r6, pc}
 8000a0a:	42b5      	cmp	r5, r6
 8000a0c:	d1fc      	bne.n	8000a08 <__eqsf2+0x24>
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d00d      	beq.n	8000a2e <__eqsf2+0x4a>
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	d1f8      	bne.n	8000a08 <__eqsf2+0x24>
 8000a16:	0028      	movs	r0, r5
 8000a18:	1e45      	subs	r5, r0, #1
 8000a1a:	41a8      	sbcs	r0, r5
 8000a1c:	e7f4      	b.n	8000a08 <__eqsf2+0x24>
 8000a1e:	2001      	movs	r0, #1
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d1f1      	bne.n	8000a08 <__eqsf2+0x24>
 8000a24:	e7eb      	b.n	80009fe <__eqsf2+0x1a>
 8000a26:	2001      	movs	r0, #1
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d1ed      	bne.n	8000a08 <__eqsf2+0x24>
 8000a2c:	e7e9      	b.n	8000a02 <__eqsf2+0x1e>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	e7ea      	b.n	8000a08 <__eqsf2+0x24>
 8000a32:	46c0      	nop			; (mov r8, r8)

08000a34 <__gesf2>:
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	0042      	lsls	r2, r0, #1
 8000a38:	0246      	lsls	r6, r0, #9
 8000a3a:	024d      	lsls	r5, r1, #9
 8000a3c:	004c      	lsls	r4, r1, #1
 8000a3e:	0fc3      	lsrs	r3, r0, #31
 8000a40:	0a76      	lsrs	r6, r6, #9
 8000a42:	0e12      	lsrs	r2, r2, #24
 8000a44:	0a6d      	lsrs	r5, r5, #9
 8000a46:	0e24      	lsrs	r4, r4, #24
 8000a48:	0fc8      	lsrs	r0, r1, #31
 8000a4a:	2aff      	cmp	r2, #255	; 0xff
 8000a4c:	d01f      	beq.n	8000a8e <__gesf2+0x5a>
 8000a4e:	2cff      	cmp	r4, #255	; 0xff
 8000a50:	d010      	beq.n	8000a74 <__gesf2+0x40>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d11f      	bne.n	8000a96 <__gesf2+0x62>
 8000a56:	4271      	negs	r1, r6
 8000a58:	4171      	adcs	r1, r6
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d101      	bne.n	8000a62 <__gesf2+0x2e>
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d01e      	beq.n	8000aa0 <__gesf2+0x6c>
 8000a62:	2900      	cmp	r1, #0
 8000a64:	d10e      	bne.n	8000a84 <__gesf2+0x50>
 8000a66:	4283      	cmp	r3, r0
 8000a68:	d01e      	beq.n	8000aa8 <__gesf2+0x74>
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	1e58      	subs	r0, r3, #1
 8000a6e:	4008      	ands	r0, r1
 8000a70:	3801      	subs	r0, #1
 8000a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d126      	bne.n	8000ac6 <__gesf2+0x92>
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d1f4      	bne.n	8000a66 <__gesf2+0x32>
 8000a7c:	4271      	negs	r1, r6
 8000a7e:	4171      	adcs	r1, r6
 8000a80:	2900      	cmp	r1, #0
 8000a82:	d0f0      	beq.n	8000a66 <__gesf2+0x32>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d1f4      	bne.n	8000a72 <__gesf2+0x3e>
 8000a88:	2001      	movs	r0, #1
 8000a8a:	4240      	negs	r0, r0
 8000a8c:	e7f1      	b.n	8000a72 <__gesf2+0x3e>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	d119      	bne.n	8000ac6 <__gesf2+0x92>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d0ee      	beq.n	8000a74 <__gesf2+0x40>
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d1e5      	bne.n	8000a66 <__gesf2+0x32>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d1e3      	bne.n	8000a66 <__gesf2+0x32>
 8000a9e:	e7e4      	b.n	8000a6a <__gesf2+0x36>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d0e5      	beq.n	8000a72 <__gesf2+0x3e>
 8000aa6:	e7e0      	b.n	8000a6a <__gesf2+0x36>
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	dc05      	bgt.n	8000ab8 <__gesf2+0x84>
 8000aac:	dbea      	blt.n	8000a84 <__gesf2+0x50>
 8000aae:	42ae      	cmp	r6, r5
 8000ab0:	d802      	bhi.n	8000ab8 <__gesf2+0x84>
 8000ab2:	d3e7      	bcc.n	8000a84 <__gesf2+0x50>
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	e7dc      	b.n	8000a72 <__gesf2+0x3e>
 8000ab8:	4241      	negs	r1, r0
 8000aba:	4141      	adcs	r1, r0
 8000abc:	4248      	negs	r0, r1
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4008      	ands	r0, r1
 8000ac2:	3801      	subs	r0, #1
 8000ac4:	e7d5      	b.n	8000a72 <__gesf2+0x3e>
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	4240      	negs	r0, r0
 8000aca:	e7d2      	b.n	8000a72 <__gesf2+0x3e>

08000acc <__lesf2>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	0042      	lsls	r2, r0, #1
 8000ad0:	0246      	lsls	r6, r0, #9
 8000ad2:	024d      	lsls	r5, r1, #9
 8000ad4:	004c      	lsls	r4, r1, #1
 8000ad6:	0fc3      	lsrs	r3, r0, #31
 8000ad8:	0a76      	lsrs	r6, r6, #9
 8000ada:	0e12      	lsrs	r2, r2, #24
 8000adc:	0a6d      	lsrs	r5, r5, #9
 8000ade:	0e24      	lsrs	r4, r4, #24
 8000ae0:	0fc8      	lsrs	r0, r1, #31
 8000ae2:	2aff      	cmp	r2, #255	; 0xff
 8000ae4:	d00d      	beq.n	8000b02 <__lesf2+0x36>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d00f      	beq.n	8000b0a <__lesf2+0x3e>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d123      	bne.n	8000b36 <__lesf2+0x6a>
 8000aee:	4271      	negs	r1, r6
 8000af0:	4171      	adcs	r1, r6
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	d10f      	bne.n	8000b16 <__lesf2+0x4a>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d10d      	bne.n	8000b16 <__lesf2+0x4a>
 8000afa:	2000      	movs	r0, #0
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d014      	beq.n	8000b2a <__lesf2+0x5e>
 8000b00:	e00d      	b.n	8000b1e <__lesf2+0x52>
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d110      	bne.n	8000b28 <__lesf2+0x5c>
 8000b06:	2cff      	cmp	r4, #255	; 0xff
 8000b08:	d115      	bne.n	8000b36 <__lesf2+0x6a>
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d10c      	bne.n	8000b28 <__lesf2+0x5c>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d103      	bne.n	8000b1a <__lesf2+0x4e>
 8000b12:	4271      	negs	r1, r6
 8000b14:	4171      	adcs	r1, r6
 8000b16:	2900      	cmp	r1, #0
 8000b18:	d108      	bne.n	8000b2c <__lesf2+0x60>
 8000b1a:	4283      	cmp	r3, r0
 8000b1c:	d010      	beq.n	8000b40 <__lesf2+0x74>
 8000b1e:	2102      	movs	r1, #2
 8000b20:	1e58      	subs	r0, r3, #1
 8000b22:	4008      	ands	r0, r1
 8000b24:	3801      	subs	r0, #1
 8000b26:	e000      	b.n	8000b2a <__lesf2+0x5e>
 8000b28:	2002      	movs	r0, #2
 8000b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d1fc      	bne.n	8000b2a <__lesf2+0x5e>
 8000b30:	2001      	movs	r0, #1
 8000b32:	4240      	negs	r0, r0
 8000b34:	e7f9      	b.n	8000b2a <__lesf2+0x5e>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d1ef      	bne.n	8000b1a <__lesf2+0x4e>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d1ed      	bne.n	8000b1a <__lesf2+0x4e>
 8000b3e:	e7ee      	b.n	8000b1e <__lesf2+0x52>
 8000b40:	42a2      	cmp	r2, r4
 8000b42:	dc05      	bgt.n	8000b50 <__lesf2+0x84>
 8000b44:	dbf2      	blt.n	8000b2c <__lesf2+0x60>
 8000b46:	42ae      	cmp	r6, r5
 8000b48:	d802      	bhi.n	8000b50 <__lesf2+0x84>
 8000b4a:	d3ef      	bcc.n	8000b2c <__lesf2+0x60>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e7ec      	b.n	8000b2a <__lesf2+0x5e>
 8000b50:	4241      	negs	r1, r0
 8000b52:	4141      	adcs	r1, r0
 8000b54:	4248      	negs	r0, r1
 8000b56:	2102      	movs	r1, #2
 8000b58:	4008      	ands	r0, r1
 8000b5a:	3801      	subs	r0, #1
 8000b5c:	e7e5      	b.n	8000b2a <__lesf2+0x5e>
 8000b5e:	46c0      	nop			; (mov r8, r8)

08000b60 <__aeabi_fmul>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	4657      	mov	r7, sl
 8000b64:	464e      	mov	r6, r9
 8000b66:	4645      	mov	r5, r8
 8000b68:	46de      	mov	lr, fp
 8000b6a:	0244      	lsls	r4, r0, #9
 8000b6c:	b5e0      	push	{r5, r6, r7, lr}
 8000b6e:	0045      	lsls	r5, r0, #1
 8000b70:	1c0f      	adds	r7, r1, #0
 8000b72:	0a64      	lsrs	r4, r4, #9
 8000b74:	0e2d      	lsrs	r5, r5, #24
 8000b76:	0fc6      	lsrs	r6, r0, #31
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d047      	beq.n	8000c0c <__aeabi_fmul+0xac>
 8000b7c:	2dff      	cmp	r5, #255	; 0xff
 8000b7e:	d04d      	beq.n	8000c1c <__aeabi_fmul+0xbc>
 8000b80:	2300      	movs	r3, #0
 8000b82:	2080      	movs	r0, #128	; 0x80
 8000b84:	469a      	mov	sl, r3
 8000b86:	469b      	mov	fp, r3
 8000b88:	00e4      	lsls	r4, r4, #3
 8000b8a:	04c0      	lsls	r0, r0, #19
 8000b8c:	4304      	orrs	r4, r0
 8000b8e:	3d7f      	subs	r5, #127	; 0x7f
 8000b90:	0278      	lsls	r0, r7, #9
 8000b92:	0a43      	lsrs	r3, r0, #9
 8000b94:	4699      	mov	r9, r3
 8000b96:	007a      	lsls	r2, r7, #1
 8000b98:	0ffb      	lsrs	r3, r7, #31
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	0e12      	lsrs	r2, r2, #24
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	d044      	beq.n	8000c2c <__aeabi_fmul+0xcc>
 8000ba2:	2aff      	cmp	r2, #255	; 0xff
 8000ba4:	d011      	beq.n	8000bca <__aeabi_fmul+0x6a>
 8000ba6:	00d8      	lsls	r0, r3, #3
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	04db      	lsls	r3, r3, #19
 8000bac:	4303      	orrs	r3, r0
 8000bae:	4699      	mov	r9, r3
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	3a7f      	subs	r2, #127	; 0x7f
 8000bb4:	18ad      	adds	r5, r5, r2
 8000bb6:	4647      	mov	r7, r8
 8000bb8:	4653      	mov	r3, sl
 8000bba:	4077      	eors	r7, r6
 8000bbc:	1c69      	adds	r1, r5, #1
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d83f      	bhi.n	8000c42 <__aeabi_fmul+0xe2>
 8000bc2:	4a72      	ldr	r2, [pc, #456]	; (8000d8c <__aeabi_fmul+0x22c>)
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	58d3      	ldr	r3, [r2, r3]
 8000bc8:	469f      	mov	pc, r3
 8000bca:	35ff      	adds	r5, #255	; 0xff
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_fmul+0x72>
 8000bd0:	e079      	b.n	8000cc6 <__aeabi_fmul+0x166>
 8000bd2:	4652      	mov	r2, sl
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	4692      	mov	sl, r2
 8000bda:	2002      	movs	r0, #2
 8000bdc:	e7eb      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000bde:	4647      	mov	r7, r8
 8000be0:	464c      	mov	r4, r9
 8000be2:	4683      	mov	fp, r0
 8000be4:	465b      	mov	r3, fp
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d028      	beq.n	8000c3c <__aeabi_fmul+0xdc>
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_fmul+0x90>
 8000bee:	e0c6      	b.n	8000d7e <__aeabi_fmul+0x21e>
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d14f      	bne.n	8000c94 <__aeabi_fmul+0x134>
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	05c0      	lsls	r0, r0, #23
 8000bfa:	07ff      	lsls	r7, r7, #31
 8000bfc:	4320      	orrs	r0, r4
 8000bfe:	4338      	orrs	r0, r7
 8000c00:	bcf0      	pop	{r4, r5, r6, r7}
 8000c02:	46bb      	mov	fp, r7
 8000c04:	46b2      	mov	sl, r6
 8000c06:	46a9      	mov	r9, r5
 8000c08:	46a0      	mov	r8, r4
 8000c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c0c:	2c00      	cmp	r4, #0
 8000c0e:	d171      	bne.n	8000cf4 <__aeabi_fmul+0x194>
 8000c10:	2304      	movs	r3, #4
 8000c12:	469a      	mov	sl, r3
 8000c14:	3b03      	subs	r3, #3
 8000c16:	2500      	movs	r5, #0
 8000c18:	469b      	mov	fp, r3
 8000c1a:	e7b9      	b.n	8000b90 <__aeabi_fmul+0x30>
 8000c1c:	2c00      	cmp	r4, #0
 8000c1e:	d163      	bne.n	8000ce8 <__aeabi_fmul+0x188>
 8000c20:	2308      	movs	r3, #8
 8000c22:	469a      	mov	sl, r3
 8000c24:	3b06      	subs	r3, #6
 8000c26:	25ff      	movs	r5, #255	; 0xff
 8000c28:	469b      	mov	fp, r3
 8000c2a:	e7b1      	b.n	8000b90 <__aeabi_fmul+0x30>
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d150      	bne.n	8000cd2 <__aeabi_fmul+0x172>
 8000c30:	4652      	mov	r2, sl
 8000c32:	3301      	adds	r3, #1
 8000c34:	431a      	orrs	r2, r3
 8000c36:	4692      	mov	sl, r2
 8000c38:	2001      	movs	r0, #1
 8000c3a:	e7bc      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000c3c:	20ff      	movs	r0, #255	; 0xff
 8000c3e:	2400      	movs	r4, #0
 8000c40:	e7da      	b.n	8000bf8 <__aeabi_fmul+0x98>
 8000c42:	4648      	mov	r0, r9
 8000c44:	0c26      	lsrs	r6, r4, #16
 8000c46:	0424      	lsls	r4, r4, #16
 8000c48:	0c22      	lsrs	r2, r4, #16
 8000c4a:	0404      	lsls	r4, r0, #16
 8000c4c:	0c24      	lsrs	r4, r4, #16
 8000c4e:	464b      	mov	r3, r9
 8000c50:	0020      	movs	r0, r4
 8000c52:	0c1b      	lsrs	r3, r3, #16
 8000c54:	4350      	muls	r0, r2
 8000c56:	4374      	muls	r4, r6
 8000c58:	435a      	muls	r2, r3
 8000c5a:	435e      	muls	r6, r3
 8000c5c:	1912      	adds	r2, r2, r4
 8000c5e:	0c03      	lsrs	r3, r0, #16
 8000c60:	189b      	adds	r3, r3, r2
 8000c62:	429c      	cmp	r4, r3
 8000c64:	d903      	bls.n	8000c6e <__aeabi_fmul+0x10e>
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	0252      	lsls	r2, r2, #9
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	4466      	add	r6, ip
 8000c6e:	0400      	lsls	r0, r0, #16
 8000c70:	041a      	lsls	r2, r3, #16
 8000c72:	0c00      	lsrs	r0, r0, #16
 8000c74:	1812      	adds	r2, r2, r0
 8000c76:	0194      	lsls	r4, r2, #6
 8000c78:	1e60      	subs	r0, r4, #1
 8000c7a:	4184      	sbcs	r4, r0
 8000c7c:	0c1b      	lsrs	r3, r3, #16
 8000c7e:	0e92      	lsrs	r2, r2, #26
 8000c80:	199b      	adds	r3, r3, r6
 8000c82:	4314      	orrs	r4, r2
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	431c      	orrs	r4, r3
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	d572      	bpl.n	8000d72 <__aeabi_fmul+0x212>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0863      	lsrs	r3, r4, #1
 8000c90:	4004      	ands	r4, r0
 8000c92:	431c      	orrs	r4, r3
 8000c94:	0008      	movs	r0, r1
 8000c96:	307f      	adds	r0, #127	; 0x7f
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	dd3c      	ble.n	8000d16 <__aeabi_fmul+0x1b6>
 8000c9c:	0763      	lsls	r3, r4, #29
 8000c9e:	d004      	beq.n	8000caa <__aeabi_fmul+0x14a>
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	4023      	ands	r3, r4
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fmul+0x14a>
 8000ca8:	3404      	adds	r4, #4
 8000caa:	0123      	lsls	r3, r4, #4
 8000cac:	d503      	bpl.n	8000cb6 <__aeabi_fmul+0x156>
 8000cae:	3180      	adds	r1, #128	; 0x80
 8000cb0:	0008      	movs	r0, r1
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <__aeabi_fmul+0x230>)
 8000cb4:	401c      	ands	r4, r3
 8000cb6:	28fe      	cmp	r0, #254	; 0xfe
 8000cb8:	dcc0      	bgt.n	8000c3c <__aeabi_fmul+0xdc>
 8000cba:	01a4      	lsls	r4, r4, #6
 8000cbc:	0a64      	lsrs	r4, r4, #9
 8000cbe:	b2c0      	uxtb	r0, r0
 8000cc0:	e79a      	b.n	8000bf8 <__aeabi_fmul+0x98>
 8000cc2:	0037      	movs	r7, r6
 8000cc4:	e78e      	b.n	8000be4 <__aeabi_fmul+0x84>
 8000cc6:	4652      	mov	r2, sl
 8000cc8:	2303      	movs	r3, #3
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	4692      	mov	sl, r2
 8000cce:	2003      	movs	r0, #3
 8000cd0:	e771      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000cd2:	4648      	mov	r0, r9
 8000cd4:	f000 feb0 	bl	8001a38 <__clzsi2>
 8000cd8:	464a      	mov	r2, r9
 8000cda:	1f43      	subs	r3, r0, #5
 8000cdc:	409a      	lsls	r2, r3
 8000cde:	1a2d      	subs	r5, r5, r0
 8000ce0:	4691      	mov	r9, r2
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	3d76      	subs	r5, #118	; 0x76
 8000ce6:	e766      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000ce8:	230c      	movs	r3, #12
 8000cea:	469a      	mov	sl, r3
 8000cec:	3b09      	subs	r3, #9
 8000cee:	25ff      	movs	r5, #255	; 0xff
 8000cf0:	469b      	mov	fp, r3
 8000cf2:	e74d      	b.n	8000b90 <__aeabi_fmul+0x30>
 8000cf4:	0020      	movs	r0, r4
 8000cf6:	f000 fe9f 	bl	8001a38 <__clzsi2>
 8000cfa:	2576      	movs	r5, #118	; 0x76
 8000cfc:	1f43      	subs	r3, r0, #5
 8000cfe:	409c      	lsls	r4, r3
 8000d00:	2300      	movs	r3, #0
 8000d02:	426d      	negs	r5, r5
 8000d04:	469a      	mov	sl, r3
 8000d06:	469b      	mov	fp, r3
 8000d08:	1a2d      	subs	r5, r5, r0
 8000d0a:	e741      	b.n	8000b90 <__aeabi_fmul+0x30>
 8000d0c:	2480      	movs	r4, #128	; 0x80
 8000d0e:	2700      	movs	r7, #0
 8000d10:	20ff      	movs	r0, #255	; 0xff
 8000d12:	03e4      	lsls	r4, r4, #15
 8000d14:	e770      	b.n	8000bf8 <__aeabi_fmul+0x98>
 8000d16:	2301      	movs	r3, #1
 8000d18:	1a1b      	subs	r3, r3, r0
 8000d1a:	2b1b      	cmp	r3, #27
 8000d1c:	dd00      	ble.n	8000d20 <__aeabi_fmul+0x1c0>
 8000d1e:	e769      	b.n	8000bf4 <__aeabi_fmul+0x94>
 8000d20:	319e      	adds	r1, #158	; 0x9e
 8000d22:	0020      	movs	r0, r4
 8000d24:	408c      	lsls	r4, r1
 8000d26:	40d8      	lsrs	r0, r3
 8000d28:	1e63      	subs	r3, r4, #1
 8000d2a:	419c      	sbcs	r4, r3
 8000d2c:	4304      	orrs	r4, r0
 8000d2e:	0763      	lsls	r3, r4, #29
 8000d30:	d004      	beq.n	8000d3c <__aeabi_fmul+0x1dc>
 8000d32:	230f      	movs	r3, #15
 8000d34:	4023      	ands	r3, r4
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d000      	beq.n	8000d3c <__aeabi_fmul+0x1dc>
 8000d3a:	3404      	adds	r4, #4
 8000d3c:	0163      	lsls	r3, r4, #5
 8000d3e:	d51a      	bpl.n	8000d76 <__aeabi_fmul+0x216>
 8000d40:	2001      	movs	r0, #1
 8000d42:	2400      	movs	r4, #0
 8000d44:	e758      	b.n	8000bf8 <__aeabi_fmul+0x98>
 8000d46:	2080      	movs	r0, #128	; 0x80
 8000d48:	03c0      	lsls	r0, r0, #15
 8000d4a:	4204      	tst	r4, r0
 8000d4c:	d009      	beq.n	8000d62 <__aeabi_fmul+0x202>
 8000d4e:	464b      	mov	r3, r9
 8000d50:	4203      	tst	r3, r0
 8000d52:	d106      	bne.n	8000d62 <__aeabi_fmul+0x202>
 8000d54:	464c      	mov	r4, r9
 8000d56:	4304      	orrs	r4, r0
 8000d58:	0264      	lsls	r4, r4, #9
 8000d5a:	4647      	mov	r7, r8
 8000d5c:	20ff      	movs	r0, #255	; 0xff
 8000d5e:	0a64      	lsrs	r4, r4, #9
 8000d60:	e74a      	b.n	8000bf8 <__aeabi_fmul+0x98>
 8000d62:	2080      	movs	r0, #128	; 0x80
 8000d64:	03c0      	lsls	r0, r0, #15
 8000d66:	4304      	orrs	r4, r0
 8000d68:	0264      	lsls	r4, r4, #9
 8000d6a:	0037      	movs	r7, r6
 8000d6c:	20ff      	movs	r0, #255	; 0xff
 8000d6e:	0a64      	lsrs	r4, r4, #9
 8000d70:	e742      	b.n	8000bf8 <__aeabi_fmul+0x98>
 8000d72:	0029      	movs	r1, r5
 8000d74:	e78e      	b.n	8000c94 <__aeabi_fmul+0x134>
 8000d76:	01a4      	lsls	r4, r4, #6
 8000d78:	2000      	movs	r0, #0
 8000d7a:	0a64      	lsrs	r4, r4, #9
 8000d7c:	e73c      	b.n	8000bf8 <__aeabi_fmul+0x98>
 8000d7e:	2080      	movs	r0, #128	; 0x80
 8000d80:	03c0      	lsls	r0, r0, #15
 8000d82:	4304      	orrs	r4, r0
 8000d84:	0264      	lsls	r4, r4, #9
 8000d86:	20ff      	movs	r0, #255	; 0xff
 8000d88:	0a64      	lsrs	r4, r4, #9
 8000d8a:	e735      	b.n	8000bf8 <__aeabi_fmul+0x98>
 8000d8c:	08013978 	.word	0x08013978
 8000d90:	f7ffffff 	.word	0xf7ffffff

08000d94 <__aeabi_fsub>:
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d96:	4646      	mov	r6, r8
 8000d98:	46d6      	mov	lr, sl
 8000d9a:	464f      	mov	r7, r9
 8000d9c:	0243      	lsls	r3, r0, #9
 8000d9e:	0a5b      	lsrs	r3, r3, #9
 8000da0:	00da      	lsls	r2, r3, #3
 8000da2:	4694      	mov	ip, r2
 8000da4:	024a      	lsls	r2, r1, #9
 8000da6:	b5c0      	push	{r6, r7, lr}
 8000da8:	0044      	lsls	r4, r0, #1
 8000daa:	0a56      	lsrs	r6, r2, #9
 8000dac:	1c05      	adds	r5, r0, #0
 8000dae:	46b0      	mov	r8, r6
 8000db0:	0e24      	lsrs	r4, r4, #24
 8000db2:	004e      	lsls	r6, r1, #1
 8000db4:	0992      	lsrs	r2, r2, #6
 8000db6:	001f      	movs	r7, r3
 8000db8:	0020      	movs	r0, r4
 8000dba:	4692      	mov	sl, r2
 8000dbc:	0fed      	lsrs	r5, r5, #31
 8000dbe:	0e36      	lsrs	r6, r6, #24
 8000dc0:	0fc9      	lsrs	r1, r1, #31
 8000dc2:	2eff      	cmp	r6, #255	; 0xff
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fsub+0x34>
 8000dc6:	e07f      	b.n	8000ec8 <__aeabi_fsub+0x134>
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4051      	eors	r1, r2
 8000dcc:	428d      	cmp	r5, r1
 8000dce:	d051      	beq.n	8000e74 <__aeabi_fsub+0xe0>
 8000dd0:	1ba2      	subs	r2, r4, r6
 8000dd2:	4691      	mov	r9, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	dc00      	bgt.n	8000dda <__aeabi_fsub+0x46>
 8000dd8:	e07e      	b.n	8000ed8 <__aeabi_fsub+0x144>
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_fsub+0x4c>
 8000dde:	e099      	b.n	8000f14 <__aeabi_fsub+0x180>
 8000de0:	2cff      	cmp	r4, #255	; 0xff
 8000de2:	d100      	bne.n	8000de6 <__aeabi_fsub+0x52>
 8000de4:	e08c      	b.n	8000f00 <__aeabi_fsub+0x16c>
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	4652      	mov	r2, sl
 8000dea:	04db      	lsls	r3, r3, #19
 8000dec:	431a      	orrs	r2, r3
 8000dee:	4692      	mov	sl, r2
 8000df0:	464a      	mov	r2, r9
 8000df2:	2301      	movs	r3, #1
 8000df4:	2a1b      	cmp	r2, #27
 8000df6:	dc08      	bgt.n	8000e0a <__aeabi_fsub+0x76>
 8000df8:	4653      	mov	r3, sl
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	40d3      	lsrs	r3, r2
 8000dfe:	1a89      	subs	r1, r1, r2
 8000e00:	4652      	mov	r2, sl
 8000e02:	408a      	lsls	r2, r1
 8000e04:	1e51      	subs	r1, r2, #1
 8000e06:	418a      	sbcs	r2, r1
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	4662      	mov	r2, ip
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	015a      	lsls	r2, r3, #5
 8000e10:	d400      	bmi.n	8000e14 <__aeabi_fsub+0x80>
 8000e12:	e0f3      	b.n	8000ffc <__aeabi_fsub+0x268>
 8000e14:	019b      	lsls	r3, r3, #6
 8000e16:	099e      	lsrs	r6, r3, #6
 8000e18:	0030      	movs	r0, r6
 8000e1a:	f000 fe0d 	bl	8001a38 <__clzsi2>
 8000e1e:	3805      	subs	r0, #5
 8000e20:	4086      	lsls	r6, r0
 8000e22:	4284      	cmp	r4, r0
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_fsub+0x94>
 8000e26:	e0f7      	b.n	8001018 <__aeabi_fsub+0x284>
 8000e28:	0032      	movs	r2, r6
 8000e2a:	1b04      	subs	r4, r0, r4
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	3401      	adds	r4, #1
 8000e30:	40e2      	lsrs	r2, r4
 8000e32:	1b04      	subs	r4, r0, r4
 8000e34:	40a6      	lsls	r6, r4
 8000e36:	0033      	movs	r3, r6
 8000e38:	1e5e      	subs	r6, r3, #1
 8000e3a:	41b3      	sbcs	r3, r6
 8000e3c:	2400      	movs	r4, #0
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	075a      	lsls	r2, r3, #29
 8000e42:	d004      	beq.n	8000e4e <__aeabi_fsub+0xba>
 8000e44:	220f      	movs	r2, #15
 8000e46:	401a      	ands	r2, r3
 8000e48:	2a04      	cmp	r2, #4
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_fsub+0xba>
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	015a      	lsls	r2, r3, #5
 8000e50:	d400      	bmi.n	8000e54 <__aeabi_fsub+0xc0>
 8000e52:	e0d6      	b.n	8001002 <__aeabi_fsub+0x26e>
 8000e54:	1c62      	adds	r2, r4, #1
 8000e56:	2cfe      	cmp	r4, #254	; 0xfe
 8000e58:	d100      	bne.n	8000e5c <__aeabi_fsub+0xc8>
 8000e5a:	e0da      	b.n	8001012 <__aeabi_fsub+0x27e>
 8000e5c:	019b      	lsls	r3, r3, #6
 8000e5e:	0a5f      	lsrs	r7, r3, #9
 8000e60:	b2d0      	uxtb	r0, r2
 8000e62:	05c0      	lsls	r0, r0, #23
 8000e64:	4338      	orrs	r0, r7
 8000e66:	07ed      	lsls	r5, r5, #31
 8000e68:	4328      	orrs	r0, r5
 8000e6a:	bce0      	pop	{r5, r6, r7}
 8000e6c:	46ba      	mov	sl, r7
 8000e6e:	46b1      	mov	r9, r6
 8000e70:	46a8      	mov	r8, r5
 8000e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e74:	1ba2      	subs	r2, r4, r6
 8000e76:	4691      	mov	r9, r2
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	dd63      	ble.n	8000f44 <__aeabi_fsub+0x1b0>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_fsub+0xee>
 8000e80:	e099      	b.n	8000fb6 <__aeabi_fsub+0x222>
 8000e82:	2cff      	cmp	r4, #255	; 0xff
 8000e84:	d03c      	beq.n	8000f00 <__aeabi_fsub+0x16c>
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	4652      	mov	r2, sl
 8000e8a:	04db      	lsls	r3, r3, #19
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	4692      	mov	sl, r2
 8000e90:	464a      	mov	r2, r9
 8000e92:	2301      	movs	r3, #1
 8000e94:	2a1b      	cmp	r2, #27
 8000e96:	dc08      	bgt.n	8000eaa <__aeabi_fsub+0x116>
 8000e98:	4653      	mov	r3, sl
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	40d3      	lsrs	r3, r2
 8000e9e:	1a89      	subs	r1, r1, r2
 8000ea0:	4652      	mov	r2, sl
 8000ea2:	408a      	lsls	r2, r1
 8000ea4:	1e51      	subs	r1, r2, #1
 8000ea6:	418a      	sbcs	r2, r1
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	4463      	add	r3, ip
 8000eac:	015a      	lsls	r2, r3, #5
 8000eae:	d400      	bmi.n	8000eb2 <__aeabi_fsub+0x11e>
 8000eb0:	e0a4      	b.n	8000ffc <__aeabi_fsub+0x268>
 8000eb2:	3401      	adds	r4, #1
 8000eb4:	2cff      	cmp	r4, #255	; 0xff
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fsub+0x126>
 8000eb8:	e0ab      	b.n	8001012 <__aeabi_fsub+0x27e>
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4997      	ldr	r1, [pc, #604]	; (800111c <__aeabi_fsub+0x388>)
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	085b      	lsrs	r3, r3, #1
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	e7bb      	b.n	8000e40 <__aeabi_fsub+0xac>
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	d032      	beq.n	8000f32 <__aeabi_fsub+0x19e>
 8000ecc:	428d      	cmp	r5, r1
 8000ece:	d035      	beq.n	8000f3c <__aeabi_fsub+0x1a8>
 8000ed0:	22ff      	movs	r2, #255	; 0xff
 8000ed2:	4252      	negs	r2, r2
 8000ed4:	4691      	mov	r9, r2
 8000ed6:	44a1      	add	r9, r4
 8000ed8:	464a      	mov	r2, r9
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	d051      	beq.n	8000f82 <__aeabi_fsub+0x1ee>
 8000ede:	1b30      	subs	r0, r6, r4
 8000ee0:	2c00      	cmp	r4, #0
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_fsub+0x152>
 8000ee4:	e09c      	b.n	8001020 <__aeabi_fsub+0x28c>
 8000ee6:	4663      	mov	r3, ip
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x15a>
 8000eec:	e0df      	b.n	80010ae <__aeabi_fsub+0x31a>
 8000eee:	3801      	subs	r0, #1
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_fsub+0x162>
 8000ef4:	e0f7      	b.n	80010e6 <__aeabi_fsub+0x352>
 8000ef6:	2eff      	cmp	r6, #255	; 0xff
 8000ef8:	d000      	beq.n	8000efc <__aeabi_fsub+0x168>
 8000efa:	e099      	b.n	8001030 <__aeabi_fsub+0x29c>
 8000efc:	000d      	movs	r5, r1
 8000efe:	4643      	mov	r3, r8
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x172>
 8000f04:	e085      	b.n	8001012 <__aeabi_fsub+0x27e>
 8000f06:	2780      	movs	r7, #128	; 0x80
 8000f08:	03ff      	lsls	r7, r7, #15
 8000f0a:	431f      	orrs	r7, r3
 8000f0c:	027f      	lsls	r7, r7, #9
 8000f0e:	20ff      	movs	r0, #255	; 0xff
 8000f10:	0a7f      	lsrs	r7, r7, #9
 8000f12:	e7a6      	b.n	8000e62 <__aeabi_fsub+0xce>
 8000f14:	4652      	mov	r2, sl
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	d074      	beq.n	8001004 <__aeabi_fsub+0x270>
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4252      	negs	r2, r2
 8000f1e:	4690      	mov	r8, r2
 8000f20:	44c1      	add	r9, r8
 8000f22:	464a      	mov	r2, r9
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fsub+0x196>
 8000f28:	e0c8      	b.n	80010bc <__aeabi_fsub+0x328>
 8000f2a:	2cff      	cmp	r4, #255	; 0xff
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_fsub+0x19c>
 8000f2e:	e75f      	b.n	8000df0 <__aeabi_fsub+0x5c>
 8000f30:	e7e6      	b.n	8000f00 <__aeabi_fsub+0x16c>
 8000f32:	2201      	movs	r2, #1
 8000f34:	4051      	eors	r1, r2
 8000f36:	42a9      	cmp	r1, r5
 8000f38:	d000      	beq.n	8000f3c <__aeabi_fsub+0x1a8>
 8000f3a:	e749      	b.n	8000dd0 <__aeabi_fsub+0x3c>
 8000f3c:	22ff      	movs	r2, #255	; 0xff
 8000f3e:	4252      	negs	r2, r2
 8000f40:	4691      	mov	r9, r2
 8000f42:	44a1      	add	r9, r4
 8000f44:	464a      	mov	r2, r9
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d043      	beq.n	8000fd2 <__aeabi_fsub+0x23e>
 8000f4a:	1b31      	subs	r1, r6, r4
 8000f4c:	2c00      	cmp	r4, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x1be>
 8000f50:	e08c      	b.n	800106c <__aeabi_fsub+0x2d8>
 8000f52:	2eff      	cmp	r6, #255	; 0xff
 8000f54:	d100      	bne.n	8000f58 <__aeabi_fsub+0x1c4>
 8000f56:	e092      	b.n	800107e <__aeabi_fsub+0x2ea>
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	4662      	mov	r2, ip
 8000f5c:	04db      	lsls	r3, r3, #19
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	4694      	mov	ip, r2
 8000f62:	2301      	movs	r3, #1
 8000f64:	291b      	cmp	r1, #27
 8000f66:	dc09      	bgt.n	8000f7c <__aeabi_fsub+0x1e8>
 8000f68:	2020      	movs	r0, #32
 8000f6a:	4663      	mov	r3, ip
 8000f6c:	4662      	mov	r2, ip
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	1a41      	subs	r1, r0, r1
 8000f72:	408a      	lsls	r2, r1
 8000f74:	0011      	movs	r1, r2
 8000f76:	1e48      	subs	r0, r1, #1
 8000f78:	4181      	sbcs	r1, r0
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	0034      	movs	r4, r6
 8000f7e:	4453      	add	r3, sl
 8000f80:	e794      	b.n	8000eac <__aeabi_fsub+0x118>
 8000f82:	22fe      	movs	r2, #254	; 0xfe
 8000f84:	1c66      	adds	r6, r4, #1
 8000f86:	4232      	tst	r2, r6
 8000f88:	d164      	bne.n	8001054 <__aeabi_fsub+0x2c0>
 8000f8a:	2c00      	cmp	r4, #0
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_fsub+0x1fc>
 8000f8e:	e082      	b.n	8001096 <__aeabi_fsub+0x302>
 8000f90:	4663      	mov	r3, ip
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x204>
 8000f96:	e0ab      	b.n	80010f0 <__aeabi_fsub+0x35c>
 8000f98:	4653      	mov	r3, sl
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x20c>
 8000f9e:	e760      	b.n	8000e62 <__aeabi_fsub+0xce>
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	4652      	mov	r2, sl
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	015a      	lsls	r2, r3, #5
 8000fa8:	d400      	bmi.n	8000fac <__aeabi_fsub+0x218>
 8000faa:	e0aa      	b.n	8001102 <__aeabi_fsub+0x36e>
 8000fac:	4663      	mov	r3, ip
 8000fae:	4652      	mov	r2, sl
 8000fb0:	000d      	movs	r5, r1
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	e744      	b.n	8000e40 <__aeabi_fsub+0xac>
 8000fb6:	4652      	mov	r2, sl
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d023      	beq.n	8001004 <__aeabi_fsub+0x270>
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4252      	negs	r2, r2
 8000fc0:	4690      	mov	r8, r2
 8000fc2:	44c1      	add	r9, r8
 8000fc4:	464a      	mov	r2, r9
 8000fc6:	2a00      	cmp	r2, #0
 8000fc8:	d075      	beq.n	80010b6 <__aeabi_fsub+0x322>
 8000fca:	2cff      	cmp	r4, #255	; 0xff
 8000fcc:	d000      	beq.n	8000fd0 <__aeabi_fsub+0x23c>
 8000fce:	e75f      	b.n	8000e90 <__aeabi_fsub+0xfc>
 8000fd0:	e796      	b.n	8000f00 <__aeabi_fsub+0x16c>
 8000fd2:	26fe      	movs	r6, #254	; 0xfe
 8000fd4:	3401      	adds	r4, #1
 8000fd6:	4226      	tst	r6, r4
 8000fd8:	d153      	bne.n	8001082 <__aeabi_fsub+0x2ee>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d172      	bne.n	80010c4 <__aeabi_fsub+0x330>
 8000fde:	4663      	mov	r3, ip
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x252>
 8000fe4:	e093      	b.n	800110e <__aeabi_fsub+0x37a>
 8000fe6:	4653      	mov	r3, sl
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d100      	bne.n	8000fee <__aeabi_fsub+0x25a>
 8000fec:	e739      	b.n	8000e62 <__aeabi_fsub+0xce>
 8000fee:	4463      	add	r3, ip
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	015a      	lsls	r2, r3, #5
 8000ff4:	d502      	bpl.n	8000ffc <__aeabi_fsub+0x268>
 8000ff6:	4a4a      	ldr	r2, [pc, #296]	; (8001120 <__aeabi_fsub+0x38c>)
 8000ff8:	3401      	adds	r4, #1
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	075a      	lsls	r2, r3, #29
 8000ffe:	d000      	beq.n	8001002 <__aeabi_fsub+0x26e>
 8001000:	e720      	b.n	8000e44 <__aeabi_fsub+0xb0>
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	2cff      	cmp	r4, #255	; 0xff
 8001006:	d100      	bne.n	800100a <__aeabi_fsub+0x276>
 8001008:	e77a      	b.n	8000f00 <__aeabi_fsub+0x16c>
 800100a:	025b      	lsls	r3, r3, #9
 800100c:	0a5f      	lsrs	r7, r3, #9
 800100e:	b2e0      	uxtb	r0, r4
 8001010:	e727      	b.n	8000e62 <__aeabi_fsub+0xce>
 8001012:	20ff      	movs	r0, #255	; 0xff
 8001014:	2700      	movs	r7, #0
 8001016:	e724      	b.n	8000e62 <__aeabi_fsub+0xce>
 8001018:	4b41      	ldr	r3, [pc, #260]	; (8001120 <__aeabi_fsub+0x38c>)
 800101a:	1a24      	subs	r4, r4, r0
 800101c:	4033      	ands	r3, r6
 800101e:	e70f      	b.n	8000e40 <__aeabi_fsub+0xac>
 8001020:	2eff      	cmp	r6, #255	; 0xff
 8001022:	d100      	bne.n	8001026 <__aeabi_fsub+0x292>
 8001024:	e76a      	b.n	8000efc <__aeabi_fsub+0x168>
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	4662      	mov	r2, ip
 800102a:	04db      	lsls	r3, r3, #19
 800102c:	431a      	orrs	r2, r3
 800102e:	4694      	mov	ip, r2
 8001030:	2301      	movs	r3, #1
 8001032:	281b      	cmp	r0, #27
 8001034:	dc09      	bgt.n	800104a <__aeabi_fsub+0x2b6>
 8001036:	2420      	movs	r4, #32
 8001038:	4663      	mov	r3, ip
 800103a:	4662      	mov	r2, ip
 800103c:	40c3      	lsrs	r3, r0
 800103e:	1a20      	subs	r0, r4, r0
 8001040:	4082      	lsls	r2, r0
 8001042:	0010      	movs	r0, r2
 8001044:	1e44      	subs	r4, r0, #1
 8001046:	41a0      	sbcs	r0, r4
 8001048:	4303      	orrs	r3, r0
 800104a:	4652      	mov	r2, sl
 800104c:	000d      	movs	r5, r1
 800104e:	0034      	movs	r4, r6
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	e6dc      	b.n	8000e0e <__aeabi_fsub+0x7a>
 8001054:	4663      	mov	r3, ip
 8001056:	4652      	mov	r2, sl
 8001058:	1a9e      	subs	r6, r3, r2
 800105a:	0173      	lsls	r3, r6, #5
 800105c:	d417      	bmi.n	800108e <__aeabi_fsub+0x2fa>
 800105e:	2e00      	cmp	r6, #0
 8001060:	d000      	beq.n	8001064 <__aeabi_fsub+0x2d0>
 8001062:	e6d9      	b.n	8000e18 <__aeabi_fsub+0x84>
 8001064:	2500      	movs	r5, #0
 8001066:	2000      	movs	r0, #0
 8001068:	2700      	movs	r7, #0
 800106a:	e6fa      	b.n	8000e62 <__aeabi_fsub+0xce>
 800106c:	4663      	mov	r3, ip
 800106e:	2b00      	cmp	r3, #0
 8001070:	d044      	beq.n	80010fc <__aeabi_fsub+0x368>
 8001072:	3901      	subs	r1, #1
 8001074:	2900      	cmp	r1, #0
 8001076:	d04c      	beq.n	8001112 <__aeabi_fsub+0x37e>
 8001078:	2eff      	cmp	r6, #255	; 0xff
 800107a:	d000      	beq.n	800107e <__aeabi_fsub+0x2ea>
 800107c:	e771      	b.n	8000f62 <__aeabi_fsub+0x1ce>
 800107e:	4643      	mov	r3, r8
 8001080:	e73e      	b.n	8000f00 <__aeabi_fsub+0x16c>
 8001082:	2cff      	cmp	r4, #255	; 0xff
 8001084:	d0c5      	beq.n	8001012 <__aeabi_fsub+0x27e>
 8001086:	4652      	mov	r2, sl
 8001088:	4462      	add	r2, ip
 800108a:	0853      	lsrs	r3, r2, #1
 800108c:	e7b6      	b.n	8000ffc <__aeabi_fsub+0x268>
 800108e:	4663      	mov	r3, ip
 8001090:	000d      	movs	r5, r1
 8001092:	1ad6      	subs	r6, r2, r3
 8001094:	e6c0      	b.n	8000e18 <__aeabi_fsub+0x84>
 8001096:	4662      	mov	r2, ip
 8001098:	2a00      	cmp	r2, #0
 800109a:	d116      	bne.n	80010ca <__aeabi_fsub+0x336>
 800109c:	4653      	mov	r3, sl
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d000      	beq.n	80010a4 <__aeabi_fsub+0x310>
 80010a2:	e72b      	b.n	8000efc <__aeabi_fsub+0x168>
 80010a4:	2780      	movs	r7, #128	; 0x80
 80010a6:	2500      	movs	r5, #0
 80010a8:	20ff      	movs	r0, #255	; 0xff
 80010aa:	03ff      	lsls	r7, r7, #15
 80010ac:	e6d9      	b.n	8000e62 <__aeabi_fsub+0xce>
 80010ae:	000d      	movs	r5, r1
 80010b0:	4643      	mov	r3, r8
 80010b2:	0034      	movs	r4, r6
 80010b4:	e7a6      	b.n	8001004 <__aeabi_fsub+0x270>
 80010b6:	4653      	mov	r3, sl
 80010b8:	4463      	add	r3, ip
 80010ba:	e6f7      	b.n	8000eac <__aeabi_fsub+0x118>
 80010bc:	4663      	mov	r3, ip
 80010be:	4652      	mov	r2, sl
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	e6a4      	b.n	8000e0e <__aeabi_fsub+0x7a>
 80010c4:	4662      	mov	r2, ip
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	d0d9      	beq.n	800107e <__aeabi_fsub+0x2ea>
 80010ca:	4652      	mov	r2, sl
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	d100      	bne.n	80010d2 <__aeabi_fsub+0x33e>
 80010d0:	e716      	b.n	8000f00 <__aeabi_fsub+0x16c>
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	03d2      	lsls	r2, r2, #15
 80010d6:	4213      	tst	r3, r2
 80010d8:	d100      	bne.n	80010dc <__aeabi_fsub+0x348>
 80010da:	e711      	b.n	8000f00 <__aeabi_fsub+0x16c>
 80010dc:	4640      	mov	r0, r8
 80010de:	4210      	tst	r0, r2
 80010e0:	d000      	beq.n	80010e4 <__aeabi_fsub+0x350>
 80010e2:	e70d      	b.n	8000f00 <__aeabi_fsub+0x16c>
 80010e4:	e70a      	b.n	8000efc <__aeabi_fsub+0x168>
 80010e6:	4652      	mov	r2, sl
 80010e8:	000d      	movs	r5, r1
 80010ea:	0034      	movs	r4, r6
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	e68e      	b.n	8000e0e <__aeabi_fsub+0x7a>
 80010f0:	4653      	mov	r3, sl
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <__aeabi_fsub+0x374>
 80010f6:	000d      	movs	r5, r1
 80010f8:	4647      	mov	r7, r8
 80010fa:	e6b2      	b.n	8000e62 <__aeabi_fsub+0xce>
 80010fc:	4643      	mov	r3, r8
 80010fe:	0034      	movs	r4, r6
 8001100:	e780      	b.n	8001004 <__aeabi_fsub+0x270>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d000      	beq.n	8001108 <__aeabi_fsub+0x374>
 8001106:	e779      	b.n	8000ffc <__aeabi_fsub+0x268>
 8001108:	2500      	movs	r5, #0
 800110a:	2700      	movs	r7, #0
 800110c:	e6a9      	b.n	8000e62 <__aeabi_fsub+0xce>
 800110e:	4647      	mov	r7, r8
 8001110:	e6a7      	b.n	8000e62 <__aeabi_fsub+0xce>
 8001112:	4653      	mov	r3, sl
 8001114:	0034      	movs	r4, r6
 8001116:	4463      	add	r3, ip
 8001118:	e6c8      	b.n	8000eac <__aeabi_fsub+0x118>
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	7dffffff 	.word	0x7dffffff
 8001120:	fbffffff 	.word	0xfbffffff

08001124 <__aeabi_f2iz>:
 8001124:	0241      	lsls	r1, r0, #9
 8001126:	0042      	lsls	r2, r0, #1
 8001128:	0fc3      	lsrs	r3, r0, #31
 800112a:	0a49      	lsrs	r1, r1, #9
 800112c:	2000      	movs	r0, #0
 800112e:	0e12      	lsrs	r2, r2, #24
 8001130:	2a7e      	cmp	r2, #126	; 0x7e
 8001132:	d903      	bls.n	800113c <__aeabi_f2iz+0x18>
 8001134:	2a9d      	cmp	r2, #157	; 0x9d
 8001136:	d902      	bls.n	800113e <__aeabi_f2iz+0x1a>
 8001138:	4a09      	ldr	r2, [pc, #36]	; (8001160 <__aeabi_f2iz+0x3c>)
 800113a:	1898      	adds	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	2080      	movs	r0, #128	; 0x80
 8001140:	0400      	lsls	r0, r0, #16
 8001142:	4301      	orrs	r1, r0
 8001144:	2a95      	cmp	r2, #149	; 0x95
 8001146:	dc07      	bgt.n	8001158 <__aeabi_f2iz+0x34>
 8001148:	2096      	movs	r0, #150	; 0x96
 800114a:	1a82      	subs	r2, r0, r2
 800114c:	40d1      	lsrs	r1, r2
 800114e:	4248      	negs	r0, r1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f3      	bne.n	800113c <__aeabi_f2iz+0x18>
 8001154:	0008      	movs	r0, r1
 8001156:	e7f1      	b.n	800113c <__aeabi_f2iz+0x18>
 8001158:	3a96      	subs	r2, #150	; 0x96
 800115a:	4091      	lsls	r1, r2
 800115c:	e7f7      	b.n	800114e <__aeabi_f2iz+0x2a>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	7fffffff 	.word	0x7fffffff

08001164 <__aeabi_i2f>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	2800      	cmp	r0, #0
 8001168:	d013      	beq.n	8001192 <__aeabi_i2f+0x2e>
 800116a:	17c3      	asrs	r3, r0, #31
 800116c:	18c5      	adds	r5, r0, r3
 800116e:	405d      	eors	r5, r3
 8001170:	0fc4      	lsrs	r4, r0, #31
 8001172:	0028      	movs	r0, r5
 8001174:	f000 fc60 	bl	8001a38 <__clzsi2>
 8001178:	239e      	movs	r3, #158	; 0x9e
 800117a:	0001      	movs	r1, r0
 800117c:	1a1b      	subs	r3, r3, r0
 800117e:	2b96      	cmp	r3, #150	; 0x96
 8001180:	dc0f      	bgt.n	80011a2 <__aeabi_i2f+0x3e>
 8001182:	2808      	cmp	r0, #8
 8001184:	dd01      	ble.n	800118a <__aeabi_i2f+0x26>
 8001186:	3908      	subs	r1, #8
 8001188:	408d      	lsls	r5, r1
 800118a:	026d      	lsls	r5, r5, #9
 800118c:	0a6d      	lsrs	r5, r5, #9
 800118e:	b2d8      	uxtb	r0, r3
 8001190:	e002      	b.n	8001198 <__aeabi_i2f+0x34>
 8001192:	2400      	movs	r4, #0
 8001194:	2000      	movs	r0, #0
 8001196:	2500      	movs	r5, #0
 8001198:	05c0      	lsls	r0, r0, #23
 800119a:	4328      	orrs	r0, r5
 800119c:	07e4      	lsls	r4, r4, #31
 800119e:	4320      	orrs	r0, r4
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
 80011a2:	2b99      	cmp	r3, #153	; 0x99
 80011a4:	dd0b      	ble.n	80011be <__aeabi_i2f+0x5a>
 80011a6:	2205      	movs	r2, #5
 80011a8:	002e      	movs	r6, r5
 80011aa:	1a12      	subs	r2, r2, r0
 80011ac:	40d6      	lsrs	r6, r2
 80011ae:	0002      	movs	r2, r0
 80011b0:	321b      	adds	r2, #27
 80011b2:	4095      	lsls	r5, r2
 80011b4:	0028      	movs	r0, r5
 80011b6:	1e45      	subs	r5, r0, #1
 80011b8:	41a8      	sbcs	r0, r5
 80011ba:	0035      	movs	r5, r6
 80011bc:	4305      	orrs	r5, r0
 80011be:	2905      	cmp	r1, #5
 80011c0:	dd01      	ble.n	80011c6 <__aeabi_i2f+0x62>
 80011c2:	1f4a      	subs	r2, r1, #5
 80011c4:	4095      	lsls	r5, r2
 80011c6:	002a      	movs	r2, r5
 80011c8:	4e08      	ldr	r6, [pc, #32]	; (80011ec <__aeabi_i2f+0x88>)
 80011ca:	4032      	ands	r2, r6
 80011cc:	0768      	lsls	r0, r5, #29
 80011ce:	d009      	beq.n	80011e4 <__aeabi_i2f+0x80>
 80011d0:	200f      	movs	r0, #15
 80011d2:	4028      	ands	r0, r5
 80011d4:	2804      	cmp	r0, #4
 80011d6:	d005      	beq.n	80011e4 <__aeabi_i2f+0x80>
 80011d8:	3204      	adds	r2, #4
 80011da:	0150      	lsls	r0, r2, #5
 80011dc:	d502      	bpl.n	80011e4 <__aeabi_i2f+0x80>
 80011de:	239f      	movs	r3, #159	; 0x9f
 80011e0:	4032      	ands	r2, r6
 80011e2:	1a5b      	subs	r3, r3, r1
 80011e4:	0192      	lsls	r2, r2, #6
 80011e6:	0a55      	lsrs	r5, r2, #9
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	e7d5      	b.n	8001198 <__aeabi_i2f+0x34>
 80011ec:	fbffffff 	.word	0xfbffffff

080011f0 <__aeabi_ui2f>:
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	1e05      	subs	r5, r0, #0
 80011f4:	d00e      	beq.n	8001214 <__aeabi_ui2f+0x24>
 80011f6:	f000 fc1f 	bl	8001a38 <__clzsi2>
 80011fa:	239e      	movs	r3, #158	; 0x9e
 80011fc:	0004      	movs	r4, r0
 80011fe:	1a1b      	subs	r3, r3, r0
 8001200:	2b96      	cmp	r3, #150	; 0x96
 8001202:	dc0c      	bgt.n	800121e <__aeabi_ui2f+0x2e>
 8001204:	2808      	cmp	r0, #8
 8001206:	dd01      	ble.n	800120c <__aeabi_ui2f+0x1c>
 8001208:	3c08      	subs	r4, #8
 800120a:	40a5      	lsls	r5, r4
 800120c:	026d      	lsls	r5, r5, #9
 800120e:	0a6d      	lsrs	r5, r5, #9
 8001210:	b2d8      	uxtb	r0, r3
 8001212:	e001      	b.n	8001218 <__aeabi_ui2f+0x28>
 8001214:	2000      	movs	r0, #0
 8001216:	2500      	movs	r5, #0
 8001218:	05c0      	lsls	r0, r0, #23
 800121a:	4328      	orrs	r0, r5
 800121c:	bd70      	pop	{r4, r5, r6, pc}
 800121e:	2b99      	cmp	r3, #153	; 0x99
 8001220:	dd09      	ble.n	8001236 <__aeabi_ui2f+0x46>
 8001222:	0002      	movs	r2, r0
 8001224:	0029      	movs	r1, r5
 8001226:	321b      	adds	r2, #27
 8001228:	4091      	lsls	r1, r2
 800122a:	1e4a      	subs	r2, r1, #1
 800122c:	4191      	sbcs	r1, r2
 800122e:	2205      	movs	r2, #5
 8001230:	1a12      	subs	r2, r2, r0
 8001232:	40d5      	lsrs	r5, r2
 8001234:	430d      	orrs	r5, r1
 8001236:	2c05      	cmp	r4, #5
 8001238:	dd01      	ble.n	800123e <__aeabi_ui2f+0x4e>
 800123a:	1f62      	subs	r2, r4, #5
 800123c:	4095      	lsls	r5, r2
 800123e:	0029      	movs	r1, r5
 8001240:	4e08      	ldr	r6, [pc, #32]	; (8001264 <__aeabi_ui2f+0x74>)
 8001242:	4031      	ands	r1, r6
 8001244:	076a      	lsls	r2, r5, #29
 8001246:	d009      	beq.n	800125c <__aeabi_ui2f+0x6c>
 8001248:	200f      	movs	r0, #15
 800124a:	4028      	ands	r0, r5
 800124c:	2804      	cmp	r0, #4
 800124e:	d005      	beq.n	800125c <__aeabi_ui2f+0x6c>
 8001250:	3104      	adds	r1, #4
 8001252:	014a      	lsls	r2, r1, #5
 8001254:	d502      	bpl.n	800125c <__aeabi_ui2f+0x6c>
 8001256:	239f      	movs	r3, #159	; 0x9f
 8001258:	4031      	ands	r1, r6
 800125a:	1b1b      	subs	r3, r3, r4
 800125c:	0189      	lsls	r1, r1, #6
 800125e:	0a4d      	lsrs	r5, r1, #9
 8001260:	b2d8      	uxtb	r0, r3
 8001262:	e7d9      	b.n	8001218 <__aeabi_ui2f+0x28>
 8001264:	fbffffff 	.word	0xfbffffff

08001268 <__aeabi_dadd>:
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	464f      	mov	r7, r9
 800126c:	46d6      	mov	lr, sl
 800126e:	4646      	mov	r6, r8
 8001270:	000d      	movs	r5, r1
 8001272:	0001      	movs	r1, r0
 8001274:	0018      	movs	r0, r3
 8001276:	b5c0      	push	{r6, r7, lr}
 8001278:	0017      	movs	r7, r2
 800127a:	032b      	lsls	r3, r5, #12
 800127c:	0a5a      	lsrs	r2, r3, #9
 800127e:	0f4b      	lsrs	r3, r1, #29
 8001280:	4313      	orrs	r3, r2
 8001282:	00ca      	lsls	r2, r1, #3
 8001284:	4691      	mov	r9, r2
 8001286:	0302      	lsls	r2, r0, #12
 8001288:	006e      	lsls	r6, r5, #1
 800128a:	0041      	lsls	r1, r0, #1
 800128c:	0a52      	lsrs	r2, r2, #9
 800128e:	0fec      	lsrs	r4, r5, #31
 8001290:	0f7d      	lsrs	r5, r7, #29
 8001292:	4315      	orrs	r5, r2
 8001294:	0d76      	lsrs	r6, r6, #21
 8001296:	0d49      	lsrs	r1, r1, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	4682      	mov	sl, r0
 800129c:	46ac      	mov	ip, r5
 800129e:	00ff      	lsls	r7, r7, #3
 80012a0:	1a72      	subs	r2, r6, r1
 80012a2:	4284      	cmp	r4, r0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_dadd+0x40>
 80012a6:	e098      	b.n	80013da <__aeabi_dadd+0x172>
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	dc00      	bgt.n	80012ae <__aeabi_dadd+0x46>
 80012ac:	e081      	b.n	80013b2 <__aeabi_dadd+0x14a>
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dadd+0x4c>
 80012b2:	e0b6      	b.n	8001422 <__aeabi_dadd+0x1ba>
 80012b4:	49c9      	ldr	r1, [pc, #804]	; (80015dc <__aeabi_dadd+0x374>)
 80012b6:	428e      	cmp	r6, r1
 80012b8:	d100      	bne.n	80012bc <__aeabi_dadd+0x54>
 80012ba:	e172      	b.n	80015a2 <__aeabi_dadd+0x33a>
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	0028      	movs	r0, r5
 80012c0:	0409      	lsls	r1, r1, #16
 80012c2:	4308      	orrs	r0, r1
 80012c4:	4684      	mov	ip, r0
 80012c6:	2a38      	cmp	r2, #56	; 0x38
 80012c8:	dd00      	ble.n	80012cc <__aeabi_dadd+0x64>
 80012ca:	e15e      	b.n	800158a <__aeabi_dadd+0x322>
 80012cc:	2a1f      	cmp	r2, #31
 80012ce:	dd00      	ble.n	80012d2 <__aeabi_dadd+0x6a>
 80012d0:	e1ee      	b.n	80016b0 <__aeabi_dadd+0x448>
 80012d2:	2020      	movs	r0, #32
 80012d4:	0039      	movs	r1, r7
 80012d6:	4665      	mov	r5, ip
 80012d8:	1a80      	subs	r0, r0, r2
 80012da:	4087      	lsls	r7, r0
 80012dc:	40d1      	lsrs	r1, r2
 80012de:	4085      	lsls	r5, r0
 80012e0:	430d      	orrs	r5, r1
 80012e2:	0039      	movs	r1, r7
 80012e4:	1e4f      	subs	r7, r1, #1
 80012e6:	41b9      	sbcs	r1, r7
 80012e8:	4667      	mov	r7, ip
 80012ea:	40d7      	lsrs	r7, r2
 80012ec:	4329      	orrs	r1, r5
 80012ee:	1bdb      	subs	r3, r3, r7
 80012f0:	464a      	mov	r2, r9
 80012f2:	1a55      	subs	r5, r2, r1
 80012f4:	45a9      	cmp	r9, r5
 80012f6:	4189      	sbcs	r1, r1
 80012f8:	4249      	negs	r1, r1
 80012fa:	1a5b      	subs	r3, r3, r1
 80012fc:	4698      	mov	r8, r3
 80012fe:	4643      	mov	r3, r8
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	d400      	bmi.n	8001306 <__aeabi_dadd+0x9e>
 8001304:	e0cc      	b.n	80014a0 <__aeabi_dadd+0x238>
 8001306:	4643      	mov	r3, r8
 8001308:	025b      	lsls	r3, r3, #9
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	4698      	mov	r8, r3
 800130e:	4643      	mov	r3, r8
 8001310:	2b00      	cmp	r3, #0
 8001312:	d100      	bne.n	8001316 <__aeabi_dadd+0xae>
 8001314:	e12c      	b.n	8001570 <__aeabi_dadd+0x308>
 8001316:	4640      	mov	r0, r8
 8001318:	f000 fb8e 	bl	8001a38 <__clzsi2>
 800131c:	0001      	movs	r1, r0
 800131e:	3908      	subs	r1, #8
 8001320:	2220      	movs	r2, #32
 8001322:	0028      	movs	r0, r5
 8001324:	4643      	mov	r3, r8
 8001326:	1a52      	subs	r2, r2, r1
 8001328:	408b      	lsls	r3, r1
 800132a:	40d0      	lsrs	r0, r2
 800132c:	408d      	lsls	r5, r1
 800132e:	4303      	orrs	r3, r0
 8001330:	428e      	cmp	r6, r1
 8001332:	dd00      	ble.n	8001336 <__aeabi_dadd+0xce>
 8001334:	e117      	b.n	8001566 <__aeabi_dadd+0x2fe>
 8001336:	1b8e      	subs	r6, r1, r6
 8001338:	1c72      	adds	r2, r6, #1
 800133a:	2a1f      	cmp	r2, #31
 800133c:	dd00      	ble.n	8001340 <__aeabi_dadd+0xd8>
 800133e:	e1a7      	b.n	8001690 <__aeabi_dadd+0x428>
 8001340:	2120      	movs	r1, #32
 8001342:	0018      	movs	r0, r3
 8001344:	002e      	movs	r6, r5
 8001346:	1a89      	subs	r1, r1, r2
 8001348:	408d      	lsls	r5, r1
 800134a:	4088      	lsls	r0, r1
 800134c:	40d6      	lsrs	r6, r2
 800134e:	40d3      	lsrs	r3, r2
 8001350:	1e69      	subs	r1, r5, #1
 8001352:	418d      	sbcs	r5, r1
 8001354:	4330      	orrs	r0, r6
 8001356:	4698      	mov	r8, r3
 8001358:	2600      	movs	r6, #0
 800135a:	4305      	orrs	r5, r0
 800135c:	076b      	lsls	r3, r5, #29
 800135e:	d009      	beq.n	8001374 <__aeabi_dadd+0x10c>
 8001360:	230f      	movs	r3, #15
 8001362:	402b      	ands	r3, r5
 8001364:	2b04      	cmp	r3, #4
 8001366:	d005      	beq.n	8001374 <__aeabi_dadd+0x10c>
 8001368:	1d2b      	adds	r3, r5, #4
 800136a:	42ab      	cmp	r3, r5
 800136c:	41ad      	sbcs	r5, r5
 800136e:	426d      	negs	r5, r5
 8001370:	44a8      	add	r8, r5
 8001372:	001d      	movs	r5, r3
 8001374:	4643      	mov	r3, r8
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	d400      	bmi.n	800137c <__aeabi_dadd+0x114>
 800137a:	e094      	b.n	80014a6 <__aeabi_dadd+0x23e>
 800137c:	4b97      	ldr	r3, [pc, #604]	; (80015dc <__aeabi_dadd+0x374>)
 800137e:	1c72      	adds	r2, r6, #1
 8001380:	429a      	cmp	r2, r3
 8001382:	d100      	bne.n	8001386 <__aeabi_dadd+0x11e>
 8001384:	e09d      	b.n	80014c2 <__aeabi_dadd+0x25a>
 8001386:	4641      	mov	r1, r8
 8001388:	4b95      	ldr	r3, [pc, #596]	; (80015e0 <__aeabi_dadd+0x378>)
 800138a:	08ed      	lsrs	r5, r5, #3
 800138c:	4019      	ands	r1, r3
 800138e:	000b      	movs	r3, r1
 8001390:	0552      	lsls	r2, r2, #21
 8001392:	0749      	lsls	r1, r1, #29
 8001394:	025b      	lsls	r3, r3, #9
 8001396:	4329      	orrs	r1, r5
 8001398:	0b1b      	lsrs	r3, r3, #12
 800139a:	0d52      	lsrs	r2, r2, #21
 800139c:	0512      	lsls	r2, r2, #20
 800139e:	4313      	orrs	r3, r2
 80013a0:	07e4      	lsls	r4, r4, #31
 80013a2:	4323      	orrs	r3, r4
 80013a4:	0008      	movs	r0, r1
 80013a6:	0019      	movs	r1, r3
 80013a8:	bce0      	pop	{r5, r6, r7}
 80013aa:	46ba      	mov	sl, r7
 80013ac:	46b1      	mov	r9, r6
 80013ae:	46a8      	mov	r8, r5
 80013b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	d043      	beq.n	800143e <__aeabi_dadd+0x1d6>
 80013b6:	1b8a      	subs	r2, r1, r6
 80013b8:	2e00      	cmp	r6, #0
 80013ba:	d000      	beq.n	80013be <__aeabi_dadd+0x156>
 80013bc:	e12a      	b.n	8001614 <__aeabi_dadd+0x3ac>
 80013be:	464c      	mov	r4, r9
 80013c0:	431c      	orrs	r4, r3
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x15e>
 80013c4:	e1d1      	b.n	800176a <__aeabi_dadd+0x502>
 80013c6:	1e54      	subs	r4, r2, #1
 80013c8:	2a01      	cmp	r2, #1
 80013ca:	d100      	bne.n	80013ce <__aeabi_dadd+0x166>
 80013cc:	e21f      	b.n	800180e <__aeabi_dadd+0x5a6>
 80013ce:	4d83      	ldr	r5, [pc, #524]	; (80015dc <__aeabi_dadd+0x374>)
 80013d0:	42aa      	cmp	r2, r5
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dadd+0x16e>
 80013d4:	e272      	b.n	80018bc <__aeabi_dadd+0x654>
 80013d6:	0022      	movs	r2, r4
 80013d8:	e123      	b.n	8001622 <__aeabi_dadd+0x3ba>
 80013da:	2a00      	cmp	r2, #0
 80013dc:	dc00      	bgt.n	80013e0 <__aeabi_dadd+0x178>
 80013de:	e098      	b.n	8001512 <__aeabi_dadd+0x2aa>
 80013e0:	2900      	cmp	r1, #0
 80013e2:	d042      	beq.n	800146a <__aeabi_dadd+0x202>
 80013e4:	497d      	ldr	r1, [pc, #500]	; (80015dc <__aeabi_dadd+0x374>)
 80013e6:	428e      	cmp	r6, r1
 80013e8:	d100      	bne.n	80013ec <__aeabi_dadd+0x184>
 80013ea:	e0da      	b.n	80015a2 <__aeabi_dadd+0x33a>
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	0028      	movs	r0, r5
 80013f0:	0409      	lsls	r1, r1, #16
 80013f2:	4308      	orrs	r0, r1
 80013f4:	4684      	mov	ip, r0
 80013f6:	2a38      	cmp	r2, #56	; 0x38
 80013f8:	dd00      	ble.n	80013fc <__aeabi_dadd+0x194>
 80013fa:	e129      	b.n	8001650 <__aeabi_dadd+0x3e8>
 80013fc:	2a1f      	cmp	r2, #31
 80013fe:	dc00      	bgt.n	8001402 <__aeabi_dadd+0x19a>
 8001400:	e187      	b.n	8001712 <__aeabi_dadd+0x4aa>
 8001402:	0011      	movs	r1, r2
 8001404:	4665      	mov	r5, ip
 8001406:	3920      	subs	r1, #32
 8001408:	40cd      	lsrs	r5, r1
 800140a:	2a20      	cmp	r2, #32
 800140c:	d004      	beq.n	8001418 <__aeabi_dadd+0x1b0>
 800140e:	2040      	movs	r0, #64	; 0x40
 8001410:	4661      	mov	r1, ip
 8001412:	1a82      	subs	r2, r0, r2
 8001414:	4091      	lsls	r1, r2
 8001416:	430f      	orrs	r7, r1
 8001418:	0039      	movs	r1, r7
 800141a:	1e4f      	subs	r7, r1, #1
 800141c:	41b9      	sbcs	r1, r7
 800141e:	430d      	orrs	r5, r1
 8001420:	e11b      	b.n	800165a <__aeabi_dadd+0x3f2>
 8001422:	0029      	movs	r1, r5
 8001424:	4339      	orrs	r1, r7
 8001426:	d100      	bne.n	800142a <__aeabi_dadd+0x1c2>
 8001428:	e0b5      	b.n	8001596 <__aeabi_dadd+0x32e>
 800142a:	1e51      	subs	r1, r2, #1
 800142c:	2a01      	cmp	r2, #1
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x1ca>
 8001430:	e1ab      	b.n	800178a <__aeabi_dadd+0x522>
 8001432:	486a      	ldr	r0, [pc, #424]	; (80015dc <__aeabi_dadd+0x374>)
 8001434:	4282      	cmp	r2, r0
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x1d2>
 8001438:	e1b2      	b.n	80017a0 <__aeabi_dadd+0x538>
 800143a:	000a      	movs	r2, r1
 800143c:	e743      	b.n	80012c6 <__aeabi_dadd+0x5e>
 800143e:	4969      	ldr	r1, [pc, #420]	; (80015e4 <__aeabi_dadd+0x37c>)
 8001440:	1c75      	adds	r5, r6, #1
 8001442:	420d      	tst	r5, r1
 8001444:	d000      	beq.n	8001448 <__aeabi_dadd+0x1e0>
 8001446:	e0cf      	b.n	80015e8 <__aeabi_dadd+0x380>
 8001448:	2e00      	cmp	r6, #0
 800144a:	d000      	beq.n	800144e <__aeabi_dadd+0x1e6>
 800144c:	e193      	b.n	8001776 <__aeabi_dadd+0x50e>
 800144e:	4649      	mov	r1, r9
 8001450:	4319      	orrs	r1, r3
 8001452:	d100      	bne.n	8001456 <__aeabi_dadd+0x1ee>
 8001454:	e1d1      	b.n	80017fa <__aeabi_dadd+0x592>
 8001456:	4661      	mov	r1, ip
 8001458:	4339      	orrs	r1, r7
 800145a:	d000      	beq.n	800145e <__aeabi_dadd+0x1f6>
 800145c:	e1e3      	b.n	8001826 <__aeabi_dadd+0x5be>
 800145e:	4649      	mov	r1, r9
 8001460:	0758      	lsls	r0, r3, #29
 8001462:	08c9      	lsrs	r1, r1, #3
 8001464:	4301      	orrs	r1, r0
 8001466:	08db      	lsrs	r3, r3, #3
 8001468:	e026      	b.n	80014b8 <__aeabi_dadd+0x250>
 800146a:	0029      	movs	r1, r5
 800146c:	4339      	orrs	r1, r7
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x20a>
 8001470:	e091      	b.n	8001596 <__aeabi_dadd+0x32e>
 8001472:	1e51      	subs	r1, r2, #1
 8001474:	2a01      	cmp	r2, #1
 8001476:	d005      	beq.n	8001484 <__aeabi_dadd+0x21c>
 8001478:	4858      	ldr	r0, [pc, #352]	; (80015dc <__aeabi_dadd+0x374>)
 800147a:	4282      	cmp	r2, r0
 800147c:	d100      	bne.n	8001480 <__aeabi_dadd+0x218>
 800147e:	e18f      	b.n	80017a0 <__aeabi_dadd+0x538>
 8001480:	000a      	movs	r2, r1
 8001482:	e7b8      	b.n	80013f6 <__aeabi_dadd+0x18e>
 8001484:	003d      	movs	r5, r7
 8001486:	444d      	add	r5, r9
 8001488:	454d      	cmp	r5, r9
 800148a:	4189      	sbcs	r1, r1
 800148c:	4463      	add	r3, ip
 800148e:	4698      	mov	r8, r3
 8001490:	4249      	negs	r1, r1
 8001492:	4488      	add	r8, r1
 8001494:	4643      	mov	r3, r8
 8001496:	2602      	movs	r6, #2
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	d500      	bpl.n	800149e <__aeabi_dadd+0x236>
 800149c:	e0eb      	b.n	8001676 <__aeabi_dadd+0x40e>
 800149e:	3e01      	subs	r6, #1
 80014a0:	076b      	lsls	r3, r5, #29
 80014a2:	d000      	beq.n	80014a6 <__aeabi_dadd+0x23e>
 80014a4:	e75c      	b.n	8001360 <__aeabi_dadd+0xf8>
 80014a6:	4643      	mov	r3, r8
 80014a8:	08e9      	lsrs	r1, r5, #3
 80014aa:	075a      	lsls	r2, r3, #29
 80014ac:	4311      	orrs	r1, r2
 80014ae:	0032      	movs	r2, r6
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	484a      	ldr	r0, [pc, #296]	; (80015dc <__aeabi_dadd+0x374>)
 80014b4:	4282      	cmp	r2, r0
 80014b6:	d021      	beq.n	80014fc <__aeabi_dadd+0x294>
 80014b8:	031b      	lsls	r3, r3, #12
 80014ba:	0552      	lsls	r2, r2, #21
 80014bc:	0b1b      	lsrs	r3, r3, #12
 80014be:	0d52      	lsrs	r2, r2, #21
 80014c0:	e76c      	b.n	800139c <__aeabi_dadd+0x134>
 80014c2:	2300      	movs	r3, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	e769      	b.n	800139c <__aeabi_dadd+0x134>
 80014c8:	002a      	movs	r2, r5
 80014ca:	433a      	orrs	r2, r7
 80014cc:	d069      	beq.n	80015a2 <__aeabi_dadd+0x33a>
 80014ce:	464a      	mov	r2, r9
 80014d0:	0758      	lsls	r0, r3, #29
 80014d2:	08d1      	lsrs	r1, r2, #3
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	031b      	lsls	r3, r3, #12
 80014da:	4308      	orrs	r0, r1
 80014dc:	421a      	tst	r2, r3
 80014de:	d007      	beq.n	80014f0 <__aeabi_dadd+0x288>
 80014e0:	0029      	movs	r1, r5
 80014e2:	08ed      	lsrs	r5, r5, #3
 80014e4:	421d      	tst	r5, r3
 80014e6:	d103      	bne.n	80014f0 <__aeabi_dadd+0x288>
 80014e8:	002a      	movs	r2, r5
 80014ea:	08ff      	lsrs	r7, r7, #3
 80014ec:	0748      	lsls	r0, r1, #29
 80014ee:	4338      	orrs	r0, r7
 80014f0:	0f43      	lsrs	r3, r0, #29
 80014f2:	00c1      	lsls	r1, r0, #3
 80014f4:	075b      	lsls	r3, r3, #29
 80014f6:	08c9      	lsrs	r1, r1, #3
 80014f8:	4319      	orrs	r1, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	000a      	movs	r2, r1
 80014fe:	431a      	orrs	r2, r3
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x29c>
 8001502:	e213      	b.n	800192c <__aeabi_dadd+0x6c4>
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	0312      	lsls	r2, r2, #12
 8001508:	4313      	orrs	r3, r2
 800150a:	031b      	lsls	r3, r3, #12
 800150c:	4a33      	ldr	r2, [pc, #204]	; (80015dc <__aeabi_dadd+0x374>)
 800150e:	0b1b      	lsrs	r3, r3, #12
 8001510:	e744      	b.n	800139c <__aeabi_dadd+0x134>
 8001512:	2a00      	cmp	r2, #0
 8001514:	d04b      	beq.n	80015ae <__aeabi_dadd+0x346>
 8001516:	1b8a      	subs	r2, r1, r6
 8001518:	2e00      	cmp	r6, #0
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x2b6>
 800151c:	e0e7      	b.n	80016ee <__aeabi_dadd+0x486>
 800151e:	482f      	ldr	r0, [pc, #188]	; (80015dc <__aeabi_dadd+0x374>)
 8001520:	4281      	cmp	r1, r0
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x2be>
 8001524:	e195      	b.n	8001852 <__aeabi_dadd+0x5ea>
 8001526:	2080      	movs	r0, #128	; 0x80
 8001528:	0400      	lsls	r0, r0, #16
 800152a:	4303      	orrs	r3, r0
 800152c:	2a38      	cmp	r2, #56	; 0x38
 800152e:	dd00      	ble.n	8001532 <__aeabi_dadd+0x2ca>
 8001530:	e143      	b.n	80017ba <__aeabi_dadd+0x552>
 8001532:	2a1f      	cmp	r2, #31
 8001534:	dd00      	ble.n	8001538 <__aeabi_dadd+0x2d0>
 8001536:	e1db      	b.n	80018f0 <__aeabi_dadd+0x688>
 8001538:	2020      	movs	r0, #32
 800153a:	001d      	movs	r5, r3
 800153c:	464e      	mov	r6, r9
 800153e:	1a80      	subs	r0, r0, r2
 8001540:	4085      	lsls	r5, r0
 8001542:	40d6      	lsrs	r6, r2
 8001544:	4335      	orrs	r5, r6
 8001546:	464e      	mov	r6, r9
 8001548:	4086      	lsls	r6, r0
 800154a:	0030      	movs	r0, r6
 800154c:	40d3      	lsrs	r3, r2
 800154e:	1e46      	subs	r6, r0, #1
 8001550:	41b0      	sbcs	r0, r6
 8001552:	449c      	add	ip, r3
 8001554:	4305      	orrs	r5, r0
 8001556:	19ed      	adds	r5, r5, r7
 8001558:	42bd      	cmp	r5, r7
 800155a:	419b      	sbcs	r3, r3
 800155c:	425b      	negs	r3, r3
 800155e:	4463      	add	r3, ip
 8001560:	4698      	mov	r8, r3
 8001562:	000e      	movs	r6, r1
 8001564:	e07f      	b.n	8001666 <__aeabi_dadd+0x3fe>
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <__aeabi_dadd+0x378>)
 8001568:	1a76      	subs	r6, r6, r1
 800156a:	4013      	ands	r3, r2
 800156c:	4698      	mov	r8, r3
 800156e:	e6f5      	b.n	800135c <__aeabi_dadd+0xf4>
 8001570:	0028      	movs	r0, r5
 8001572:	f000 fa61 	bl	8001a38 <__clzsi2>
 8001576:	0001      	movs	r1, r0
 8001578:	3118      	adds	r1, #24
 800157a:	291f      	cmp	r1, #31
 800157c:	dc00      	bgt.n	8001580 <__aeabi_dadd+0x318>
 800157e:	e6cf      	b.n	8001320 <__aeabi_dadd+0xb8>
 8001580:	002b      	movs	r3, r5
 8001582:	3808      	subs	r0, #8
 8001584:	4083      	lsls	r3, r0
 8001586:	2500      	movs	r5, #0
 8001588:	e6d2      	b.n	8001330 <__aeabi_dadd+0xc8>
 800158a:	4662      	mov	r2, ip
 800158c:	433a      	orrs	r2, r7
 800158e:	0011      	movs	r1, r2
 8001590:	1e4f      	subs	r7, r1, #1
 8001592:	41b9      	sbcs	r1, r7
 8001594:	e6ac      	b.n	80012f0 <__aeabi_dadd+0x88>
 8001596:	4649      	mov	r1, r9
 8001598:	0758      	lsls	r0, r3, #29
 800159a:	08c9      	lsrs	r1, r1, #3
 800159c:	4301      	orrs	r1, r0
 800159e:	08db      	lsrs	r3, r3, #3
 80015a0:	e787      	b.n	80014b2 <__aeabi_dadd+0x24a>
 80015a2:	4649      	mov	r1, r9
 80015a4:	075a      	lsls	r2, r3, #29
 80015a6:	08c9      	lsrs	r1, r1, #3
 80015a8:	4311      	orrs	r1, r2
 80015aa:	08db      	lsrs	r3, r3, #3
 80015ac:	e7a6      	b.n	80014fc <__aeabi_dadd+0x294>
 80015ae:	490d      	ldr	r1, [pc, #52]	; (80015e4 <__aeabi_dadd+0x37c>)
 80015b0:	1c70      	adds	r0, r6, #1
 80015b2:	4208      	tst	r0, r1
 80015b4:	d000      	beq.n	80015b8 <__aeabi_dadd+0x350>
 80015b6:	e0bb      	b.n	8001730 <__aeabi_dadd+0x4c8>
 80015b8:	2e00      	cmp	r6, #0
 80015ba:	d000      	beq.n	80015be <__aeabi_dadd+0x356>
 80015bc:	e114      	b.n	80017e8 <__aeabi_dadd+0x580>
 80015be:	4649      	mov	r1, r9
 80015c0:	4319      	orrs	r1, r3
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x35e>
 80015c4:	e175      	b.n	80018b2 <__aeabi_dadd+0x64a>
 80015c6:	0029      	movs	r1, r5
 80015c8:	4339      	orrs	r1, r7
 80015ca:	d000      	beq.n	80015ce <__aeabi_dadd+0x366>
 80015cc:	e17e      	b.n	80018cc <__aeabi_dadd+0x664>
 80015ce:	4649      	mov	r1, r9
 80015d0:	0758      	lsls	r0, r3, #29
 80015d2:	08c9      	lsrs	r1, r1, #3
 80015d4:	4301      	orrs	r1, r0
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	e76e      	b.n	80014b8 <__aeabi_dadd+0x250>
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	000007ff 	.word	0x000007ff
 80015e0:	ff7fffff 	.word	0xff7fffff
 80015e4:	000007fe 	.word	0x000007fe
 80015e8:	4649      	mov	r1, r9
 80015ea:	1bcd      	subs	r5, r1, r7
 80015ec:	4661      	mov	r1, ip
 80015ee:	1a58      	subs	r0, r3, r1
 80015f0:	45a9      	cmp	r9, r5
 80015f2:	4189      	sbcs	r1, r1
 80015f4:	4249      	negs	r1, r1
 80015f6:	4688      	mov	r8, r1
 80015f8:	0001      	movs	r1, r0
 80015fa:	4640      	mov	r0, r8
 80015fc:	1a09      	subs	r1, r1, r0
 80015fe:	4688      	mov	r8, r1
 8001600:	0209      	lsls	r1, r1, #8
 8001602:	d500      	bpl.n	8001606 <__aeabi_dadd+0x39e>
 8001604:	e0a6      	b.n	8001754 <__aeabi_dadd+0x4ec>
 8001606:	4641      	mov	r1, r8
 8001608:	4329      	orrs	r1, r5
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x3a6>
 800160c:	e67f      	b.n	800130e <__aeabi_dadd+0xa6>
 800160e:	2300      	movs	r3, #0
 8001610:	2400      	movs	r4, #0
 8001612:	e751      	b.n	80014b8 <__aeabi_dadd+0x250>
 8001614:	4cc7      	ldr	r4, [pc, #796]	; (8001934 <__aeabi_dadd+0x6cc>)
 8001616:	42a1      	cmp	r1, r4
 8001618:	d100      	bne.n	800161c <__aeabi_dadd+0x3b4>
 800161a:	e0c7      	b.n	80017ac <__aeabi_dadd+0x544>
 800161c:	2480      	movs	r4, #128	; 0x80
 800161e:	0424      	lsls	r4, r4, #16
 8001620:	4323      	orrs	r3, r4
 8001622:	2a38      	cmp	r2, #56	; 0x38
 8001624:	dc54      	bgt.n	80016d0 <__aeabi_dadd+0x468>
 8001626:	2a1f      	cmp	r2, #31
 8001628:	dd00      	ble.n	800162c <__aeabi_dadd+0x3c4>
 800162a:	e0cc      	b.n	80017c6 <__aeabi_dadd+0x55e>
 800162c:	2420      	movs	r4, #32
 800162e:	4648      	mov	r0, r9
 8001630:	1aa4      	subs	r4, r4, r2
 8001632:	001d      	movs	r5, r3
 8001634:	464e      	mov	r6, r9
 8001636:	40a0      	lsls	r0, r4
 8001638:	40d6      	lsrs	r6, r2
 800163a:	40a5      	lsls	r5, r4
 800163c:	0004      	movs	r4, r0
 800163e:	40d3      	lsrs	r3, r2
 8001640:	4662      	mov	r2, ip
 8001642:	4335      	orrs	r5, r6
 8001644:	1e66      	subs	r6, r4, #1
 8001646:	41b4      	sbcs	r4, r6
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	469c      	mov	ip, r3
 800164c:	4325      	orrs	r5, r4
 800164e:	e044      	b.n	80016da <__aeabi_dadd+0x472>
 8001650:	4662      	mov	r2, ip
 8001652:	433a      	orrs	r2, r7
 8001654:	0015      	movs	r5, r2
 8001656:	1e6f      	subs	r7, r5, #1
 8001658:	41bd      	sbcs	r5, r7
 800165a:	444d      	add	r5, r9
 800165c:	454d      	cmp	r5, r9
 800165e:	4189      	sbcs	r1, r1
 8001660:	4249      	negs	r1, r1
 8001662:	4688      	mov	r8, r1
 8001664:	4498      	add	r8, r3
 8001666:	4643      	mov	r3, r8
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	d400      	bmi.n	800166e <__aeabi_dadd+0x406>
 800166c:	e718      	b.n	80014a0 <__aeabi_dadd+0x238>
 800166e:	4bb1      	ldr	r3, [pc, #708]	; (8001934 <__aeabi_dadd+0x6cc>)
 8001670:	3601      	adds	r6, #1
 8001672:	429e      	cmp	r6, r3
 8001674:	d049      	beq.n	800170a <__aeabi_dadd+0x4a2>
 8001676:	4642      	mov	r2, r8
 8001678:	4baf      	ldr	r3, [pc, #700]	; (8001938 <__aeabi_dadd+0x6d0>)
 800167a:	2101      	movs	r1, #1
 800167c:	401a      	ands	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	086a      	lsrs	r2, r5, #1
 8001682:	400d      	ands	r5, r1
 8001684:	4315      	orrs	r5, r2
 8001686:	07d9      	lsls	r1, r3, #31
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	4698      	mov	r8, r3
 800168c:	430d      	orrs	r5, r1
 800168e:	e665      	b.n	800135c <__aeabi_dadd+0xf4>
 8001690:	0018      	movs	r0, r3
 8001692:	3e1f      	subs	r6, #31
 8001694:	40f0      	lsrs	r0, r6
 8001696:	2a20      	cmp	r2, #32
 8001698:	d003      	beq.n	80016a2 <__aeabi_dadd+0x43a>
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	1a8a      	subs	r2, r1, r2
 800169e:	4093      	lsls	r3, r2
 80016a0:	431d      	orrs	r5, r3
 80016a2:	1e69      	subs	r1, r5, #1
 80016a4:	418d      	sbcs	r5, r1
 80016a6:	2300      	movs	r3, #0
 80016a8:	2600      	movs	r6, #0
 80016aa:	4698      	mov	r8, r3
 80016ac:	4305      	orrs	r5, r0
 80016ae:	e6f7      	b.n	80014a0 <__aeabi_dadd+0x238>
 80016b0:	0011      	movs	r1, r2
 80016b2:	4665      	mov	r5, ip
 80016b4:	3920      	subs	r1, #32
 80016b6:	40cd      	lsrs	r5, r1
 80016b8:	2a20      	cmp	r2, #32
 80016ba:	d004      	beq.n	80016c6 <__aeabi_dadd+0x45e>
 80016bc:	2040      	movs	r0, #64	; 0x40
 80016be:	4661      	mov	r1, ip
 80016c0:	1a82      	subs	r2, r0, r2
 80016c2:	4091      	lsls	r1, r2
 80016c4:	430f      	orrs	r7, r1
 80016c6:	0039      	movs	r1, r7
 80016c8:	1e4f      	subs	r7, r1, #1
 80016ca:	41b9      	sbcs	r1, r7
 80016cc:	4329      	orrs	r1, r5
 80016ce:	e60f      	b.n	80012f0 <__aeabi_dadd+0x88>
 80016d0:	464a      	mov	r2, r9
 80016d2:	4313      	orrs	r3, r2
 80016d4:	001d      	movs	r5, r3
 80016d6:	1e6b      	subs	r3, r5, #1
 80016d8:	419d      	sbcs	r5, r3
 80016da:	1b7d      	subs	r5, r7, r5
 80016dc:	42af      	cmp	r7, r5
 80016de:	419b      	sbcs	r3, r3
 80016e0:	4662      	mov	r2, ip
 80016e2:	425b      	negs	r3, r3
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	4698      	mov	r8, r3
 80016e8:	4654      	mov	r4, sl
 80016ea:	000e      	movs	r6, r1
 80016ec:	e607      	b.n	80012fe <__aeabi_dadd+0x96>
 80016ee:	4648      	mov	r0, r9
 80016f0:	4318      	orrs	r0, r3
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0x48e>
 80016f4:	e0b3      	b.n	800185e <__aeabi_dadd+0x5f6>
 80016f6:	1e50      	subs	r0, r2, #1
 80016f8:	2a01      	cmp	r2, #1
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x496>
 80016fc:	e10d      	b.n	800191a <__aeabi_dadd+0x6b2>
 80016fe:	4d8d      	ldr	r5, [pc, #564]	; (8001934 <__aeabi_dadd+0x6cc>)
 8001700:	42aa      	cmp	r2, r5
 8001702:	d100      	bne.n	8001706 <__aeabi_dadd+0x49e>
 8001704:	e0a5      	b.n	8001852 <__aeabi_dadd+0x5ea>
 8001706:	0002      	movs	r2, r0
 8001708:	e710      	b.n	800152c <__aeabi_dadd+0x2c4>
 800170a:	0032      	movs	r2, r6
 800170c:	2300      	movs	r3, #0
 800170e:	2100      	movs	r1, #0
 8001710:	e644      	b.n	800139c <__aeabi_dadd+0x134>
 8001712:	2120      	movs	r1, #32
 8001714:	0038      	movs	r0, r7
 8001716:	1a89      	subs	r1, r1, r2
 8001718:	4665      	mov	r5, ip
 800171a:	408f      	lsls	r7, r1
 800171c:	408d      	lsls	r5, r1
 800171e:	40d0      	lsrs	r0, r2
 8001720:	1e79      	subs	r1, r7, #1
 8001722:	418f      	sbcs	r7, r1
 8001724:	4305      	orrs	r5, r0
 8001726:	433d      	orrs	r5, r7
 8001728:	4667      	mov	r7, ip
 800172a:	40d7      	lsrs	r7, r2
 800172c:	19db      	adds	r3, r3, r7
 800172e:	e794      	b.n	800165a <__aeabi_dadd+0x3f2>
 8001730:	4a80      	ldr	r2, [pc, #512]	; (8001934 <__aeabi_dadd+0x6cc>)
 8001732:	4290      	cmp	r0, r2
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x4d0>
 8001736:	e0ec      	b.n	8001912 <__aeabi_dadd+0x6aa>
 8001738:	0039      	movs	r1, r7
 800173a:	4449      	add	r1, r9
 800173c:	4549      	cmp	r1, r9
 800173e:	4192      	sbcs	r2, r2
 8001740:	4463      	add	r3, ip
 8001742:	4252      	negs	r2, r2
 8001744:	189b      	adds	r3, r3, r2
 8001746:	07dd      	lsls	r5, r3, #31
 8001748:	0849      	lsrs	r1, r1, #1
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	4698      	mov	r8, r3
 800174e:	0006      	movs	r6, r0
 8001750:	430d      	orrs	r5, r1
 8001752:	e6a5      	b.n	80014a0 <__aeabi_dadd+0x238>
 8001754:	464a      	mov	r2, r9
 8001756:	1abd      	subs	r5, r7, r2
 8001758:	42af      	cmp	r7, r5
 800175a:	4189      	sbcs	r1, r1
 800175c:	4662      	mov	r2, ip
 800175e:	4249      	negs	r1, r1
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	1a5b      	subs	r3, r3, r1
 8001764:	4698      	mov	r8, r3
 8001766:	4654      	mov	r4, sl
 8001768:	e5d1      	b.n	800130e <__aeabi_dadd+0xa6>
 800176a:	076c      	lsls	r4, r5, #29
 800176c:	08f9      	lsrs	r1, r7, #3
 800176e:	4321      	orrs	r1, r4
 8001770:	08eb      	lsrs	r3, r5, #3
 8001772:	0004      	movs	r4, r0
 8001774:	e69d      	b.n	80014b2 <__aeabi_dadd+0x24a>
 8001776:	464a      	mov	r2, r9
 8001778:	431a      	orrs	r2, r3
 800177a:	d175      	bne.n	8001868 <__aeabi_dadd+0x600>
 800177c:	4661      	mov	r1, ip
 800177e:	4339      	orrs	r1, r7
 8001780:	d114      	bne.n	80017ac <__aeabi_dadd+0x544>
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	2400      	movs	r4, #0
 8001786:	031b      	lsls	r3, r3, #12
 8001788:	e6bc      	b.n	8001504 <__aeabi_dadd+0x29c>
 800178a:	464a      	mov	r2, r9
 800178c:	1bd5      	subs	r5, r2, r7
 800178e:	45a9      	cmp	r9, r5
 8001790:	4189      	sbcs	r1, r1
 8001792:	4662      	mov	r2, ip
 8001794:	4249      	negs	r1, r1
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	1a5b      	subs	r3, r3, r1
 800179a:	4698      	mov	r8, r3
 800179c:	2601      	movs	r6, #1
 800179e:	e5ae      	b.n	80012fe <__aeabi_dadd+0x96>
 80017a0:	464a      	mov	r2, r9
 80017a2:	08d1      	lsrs	r1, r2, #3
 80017a4:	075a      	lsls	r2, r3, #29
 80017a6:	4311      	orrs	r1, r2
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	e6a7      	b.n	80014fc <__aeabi_dadd+0x294>
 80017ac:	4663      	mov	r3, ip
 80017ae:	08f9      	lsrs	r1, r7, #3
 80017b0:	075a      	lsls	r2, r3, #29
 80017b2:	4654      	mov	r4, sl
 80017b4:	4311      	orrs	r1, r2
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	e6a0      	b.n	80014fc <__aeabi_dadd+0x294>
 80017ba:	464a      	mov	r2, r9
 80017bc:	4313      	orrs	r3, r2
 80017be:	001d      	movs	r5, r3
 80017c0:	1e6b      	subs	r3, r5, #1
 80017c2:	419d      	sbcs	r5, r3
 80017c4:	e6c7      	b.n	8001556 <__aeabi_dadd+0x2ee>
 80017c6:	0014      	movs	r4, r2
 80017c8:	001e      	movs	r6, r3
 80017ca:	3c20      	subs	r4, #32
 80017cc:	40e6      	lsrs	r6, r4
 80017ce:	2a20      	cmp	r2, #32
 80017d0:	d005      	beq.n	80017de <__aeabi_dadd+0x576>
 80017d2:	2440      	movs	r4, #64	; 0x40
 80017d4:	1aa2      	subs	r2, r4, r2
 80017d6:	4093      	lsls	r3, r2
 80017d8:	464a      	mov	r2, r9
 80017da:	431a      	orrs	r2, r3
 80017dc:	4691      	mov	r9, r2
 80017de:	464d      	mov	r5, r9
 80017e0:	1e6b      	subs	r3, r5, #1
 80017e2:	419d      	sbcs	r5, r3
 80017e4:	4335      	orrs	r5, r6
 80017e6:	e778      	b.n	80016da <__aeabi_dadd+0x472>
 80017e8:	464a      	mov	r2, r9
 80017ea:	431a      	orrs	r2, r3
 80017ec:	d000      	beq.n	80017f0 <__aeabi_dadd+0x588>
 80017ee:	e66b      	b.n	80014c8 <__aeabi_dadd+0x260>
 80017f0:	076b      	lsls	r3, r5, #29
 80017f2:	08f9      	lsrs	r1, r7, #3
 80017f4:	4319      	orrs	r1, r3
 80017f6:	08eb      	lsrs	r3, r5, #3
 80017f8:	e680      	b.n	80014fc <__aeabi_dadd+0x294>
 80017fa:	4661      	mov	r1, ip
 80017fc:	4339      	orrs	r1, r7
 80017fe:	d054      	beq.n	80018aa <__aeabi_dadd+0x642>
 8001800:	4663      	mov	r3, ip
 8001802:	08f9      	lsrs	r1, r7, #3
 8001804:	075c      	lsls	r4, r3, #29
 8001806:	4321      	orrs	r1, r4
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	0004      	movs	r4, r0
 800180c:	e654      	b.n	80014b8 <__aeabi_dadd+0x250>
 800180e:	464a      	mov	r2, r9
 8001810:	1abd      	subs	r5, r7, r2
 8001812:	42af      	cmp	r7, r5
 8001814:	4189      	sbcs	r1, r1
 8001816:	4662      	mov	r2, ip
 8001818:	4249      	negs	r1, r1
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	1a5b      	subs	r3, r3, r1
 800181e:	4698      	mov	r8, r3
 8001820:	0004      	movs	r4, r0
 8001822:	2601      	movs	r6, #1
 8001824:	e56b      	b.n	80012fe <__aeabi_dadd+0x96>
 8001826:	464a      	mov	r2, r9
 8001828:	1bd5      	subs	r5, r2, r7
 800182a:	45a9      	cmp	r9, r5
 800182c:	4189      	sbcs	r1, r1
 800182e:	4662      	mov	r2, ip
 8001830:	4249      	negs	r1, r1
 8001832:	1a9a      	subs	r2, r3, r2
 8001834:	1a52      	subs	r2, r2, r1
 8001836:	4690      	mov	r8, r2
 8001838:	0212      	lsls	r2, r2, #8
 800183a:	d532      	bpl.n	80018a2 <__aeabi_dadd+0x63a>
 800183c:	464a      	mov	r2, r9
 800183e:	1abd      	subs	r5, r7, r2
 8001840:	42af      	cmp	r7, r5
 8001842:	4189      	sbcs	r1, r1
 8001844:	4662      	mov	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	1a5b      	subs	r3, r3, r1
 800184c:	4698      	mov	r8, r3
 800184e:	0004      	movs	r4, r0
 8001850:	e584      	b.n	800135c <__aeabi_dadd+0xf4>
 8001852:	4663      	mov	r3, ip
 8001854:	08f9      	lsrs	r1, r7, #3
 8001856:	075a      	lsls	r2, r3, #29
 8001858:	4311      	orrs	r1, r2
 800185a:	08db      	lsrs	r3, r3, #3
 800185c:	e64e      	b.n	80014fc <__aeabi_dadd+0x294>
 800185e:	08f9      	lsrs	r1, r7, #3
 8001860:	0768      	lsls	r0, r5, #29
 8001862:	4301      	orrs	r1, r0
 8001864:	08eb      	lsrs	r3, r5, #3
 8001866:	e624      	b.n	80014b2 <__aeabi_dadd+0x24a>
 8001868:	4662      	mov	r2, ip
 800186a:	433a      	orrs	r2, r7
 800186c:	d100      	bne.n	8001870 <__aeabi_dadd+0x608>
 800186e:	e698      	b.n	80015a2 <__aeabi_dadd+0x33a>
 8001870:	464a      	mov	r2, r9
 8001872:	08d1      	lsrs	r1, r2, #3
 8001874:	075a      	lsls	r2, r3, #29
 8001876:	4311      	orrs	r1, r2
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	421a      	tst	r2, r3
 8001880:	d008      	beq.n	8001894 <__aeabi_dadd+0x62c>
 8001882:	4660      	mov	r0, ip
 8001884:	08c5      	lsrs	r5, r0, #3
 8001886:	421d      	tst	r5, r3
 8001888:	d104      	bne.n	8001894 <__aeabi_dadd+0x62c>
 800188a:	4654      	mov	r4, sl
 800188c:	002a      	movs	r2, r5
 800188e:	08f9      	lsrs	r1, r7, #3
 8001890:	0743      	lsls	r3, r0, #29
 8001892:	4319      	orrs	r1, r3
 8001894:	0f4b      	lsrs	r3, r1, #29
 8001896:	00c9      	lsls	r1, r1, #3
 8001898:	075b      	lsls	r3, r3, #29
 800189a:	08c9      	lsrs	r1, r1, #3
 800189c:	4319      	orrs	r1, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	e62c      	b.n	80014fc <__aeabi_dadd+0x294>
 80018a2:	4641      	mov	r1, r8
 80018a4:	4329      	orrs	r1, r5
 80018a6:	d000      	beq.n	80018aa <__aeabi_dadd+0x642>
 80018a8:	e5fa      	b.n	80014a0 <__aeabi_dadd+0x238>
 80018aa:	2300      	movs	r3, #0
 80018ac:	000a      	movs	r2, r1
 80018ae:	2400      	movs	r4, #0
 80018b0:	e602      	b.n	80014b8 <__aeabi_dadd+0x250>
 80018b2:	076b      	lsls	r3, r5, #29
 80018b4:	08f9      	lsrs	r1, r7, #3
 80018b6:	4319      	orrs	r1, r3
 80018b8:	08eb      	lsrs	r3, r5, #3
 80018ba:	e5fd      	b.n	80014b8 <__aeabi_dadd+0x250>
 80018bc:	4663      	mov	r3, ip
 80018be:	08f9      	lsrs	r1, r7, #3
 80018c0:	075b      	lsls	r3, r3, #29
 80018c2:	4319      	orrs	r1, r3
 80018c4:	4663      	mov	r3, ip
 80018c6:	0004      	movs	r4, r0
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	e617      	b.n	80014fc <__aeabi_dadd+0x294>
 80018cc:	003d      	movs	r5, r7
 80018ce:	444d      	add	r5, r9
 80018d0:	4463      	add	r3, ip
 80018d2:	454d      	cmp	r5, r9
 80018d4:	4189      	sbcs	r1, r1
 80018d6:	4698      	mov	r8, r3
 80018d8:	4249      	negs	r1, r1
 80018da:	4488      	add	r8, r1
 80018dc:	4643      	mov	r3, r8
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	d400      	bmi.n	80018e4 <__aeabi_dadd+0x67c>
 80018e2:	e5dd      	b.n	80014a0 <__aeabi_dadd+0x238>
 80018e4:	4642      	mov	r2, r8
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <__aeabi_dadd+0x6d0>)
 80018e8:	2601      	movs	r6, #1
 80018ea:	401a      	ands	r2, r3
 80018ec:	4690      	mov	r8, r2
 80018ee:	e5d7      	b.n	80014a0 <__aeabi_dadd+0x238>
 80018f0:	0010      	movs	r0, r2
 80018f2:	001e      	movs	r6, r3
 80018f4:	3820      	subs	r0, #32
 80018f6:	40c6      	lsrs	r6, r0
 80018f8:	2a20      	cmp	r2, #32
 80018fa:	d005      	beq.n	8001908 <__aeabi_dadd+0x6a0>
 80018fc:	2040      	movs	r0, #64	; 0x40
 80018fe:	1a82      	subs	r2, r0, r2
 8001900:	4093      	lsls	r3, r2
 8001902:	464a      	mov	r2, r9
 8001904:	431a      	orrs	r2, r3
 8001906:	4691      	mov	r9, r2
 8001908:	464d      	mov	r5, r9
 800190a:	1e6b      	subs	r3, r5, #1
 800190c:	419d      	sbcs	r5, r3
 800190e:	4335      	orrs	r5, r6
 8001910:	e621      	b.n	8001556 <__aeabi_dadd+0x2ee>
 8001912:	0002      	movs	r2, r0
 8001914:	2300      	movs	r3, #0
 8001916:	2100      	movs	r1, #0
 8001918:	e540      	b.n	800139c <__aeabi_dadd+0x134>
 800191a:	464a      	mov	r2, r9
 800191c:	19d5      	adds	r5, r2, r7
 800191e:	42bd      	cmp	r5, r7
 8001920:	4189      	sbcs	r1, r1
 8001922:	4463      	add	r3, ip
 8001924:	4698      	mov	r8, r3
 8001926:	4249      	negs	r1, r1
 8001928:	4488      	add	r8, r1
 800192a:	e5b3      	b.n	8001494 <__aeabi_dadd+0x22c>
 800192c:	2100      	movs	r1, #0
 800192e:	4a01      	ldr	r2, [pc, #4]	; (8001934 <__aeabi_dadd+0x6cc>)
 8001930:	000b      	movs	r3, r1
 8001932:	e533      	b.n	800139c <__aeabi_dadd+0x134>
 8001934:	000007ff 	.word	0x000007ff
 8001938:	ff7fffff 	.word	0xff7fffff

0800193c <__aeabi_d2iz>:
 800193c:	000a      	movs	r2, r1
 800193e:	b530      	push	{r4, r5, lr}
 8001940:	4c13      	ldr	r4, [pc, #76]	; (8001990 <__aeabi_d2iz+0x54>)
 8001942:	0053      	lsls	r3, r2, #1
 8001944:	0309      	lsls	r1, r1, #12
 8001946:	0005      	movs	r5, r0
 8001948:	0b09      	lsrs	r1, r1, #12
 800194a:	2000      	movs	r0, #0
 800194c:	0d5b      	lsrs	r3, r3, #21
 800194e:	0fd2      	lsrs	r2, r2, #31
 8001950:	42a3      	cmp	r3, r4
 8001952:	dd04      	ble.n	800195e <__aeabi_d2iz+0x22>
 8001954:	480f      	ldr	r0, [pc, #60]	; (8001994 <__aeabi_d2iz+0x58>)
 8001956:	4283      	cmp	r3, r0
 8001958:	dd02      	ble.n	8001960 <__aeabi_d2iz+0x24>
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <__aeabi_d2iz+0x5c>)
 800195c:	18d0      	adds	r0, r2, r3
 800195e:	bd30      	pop	{r4, r5, pc}
 8001960:	2080      	movs	r0, #128	; 0x80
 8001962:	0340      	lsls	r0, r0, #13
 8001964:	4301      	orrs	r1, r0
 8001966:	480d      	ldr	r0, [pc, #52]	; (800199c <__aeabi_d2iz+0x60>)
 8001968:	1ac0      	subs	r0, r0, r3
 800196a:	281f      	cmp	r0, #31
 800196c:	dd08      	ble.n	8001980 <__aeabi_d2iz+0x44>
 800196e:	480c      	ldr	r0, [pc, #48]	; (80019a0 <__aeabi_d2iz+0x64>)
 8001970:	1ac3      	subs	r3, r0, r3
 8001972:	40d9      	lsrs	r1, r3
 8001974:	000b      	movs	r3, r1
 8001976:	4258      	negs	r0, r3
 8001978:	2a00      	cmp	r2, #0
 800197a:	d1f0      	bne.n	800195e <__aeabi_d2iz+0x22>
 800197c:	0018      	movs	r0, r3
 800197e:	e7ee      	b.n	800195e <__aeabi_d2iz+0x22>
 8001980:	4c08      	ldr	r4, [pc, #32]	; (80019a4 <__aeabi_d2iz+0x68>)
 8001982:	40c5      	lsrs	r5, r0
 8001984:	46a4      	mov	ip, r4
 8001986:	4463      	add	r3, ip
 8001988:	4099      	lsls	r1, r3
 800198a:	000b      	movs	r3, r1
 800198c:	432b      	orrs	r3, r5
 800198e:	e7f2      	b.n	8001976 <__aeabi_d2iz+0x3a>
 8001990:	000003fe 	.word	0x000003fe
 8001994:	0000041d 	.word	0x0000041d
 8001998:	7fffffff 	.word	0x7fffffff
 800199c:	00000433 	.word	0x00000433
 80019a0:	00000413 	.word	0x00000413
 80019a4:	fffffbed 	.word	0xfffffbed

080019a8 <__aeabi_f2d>:
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	0043      	lsls	r3, r0, #1
 80019ac:	0246      	lsls	r6, r0, #9
 80019ae:	0fc4      	lsrs	r4, r0, #31
 80019b0:	20fe      	movs	r0, #254	; 0xfe
 80019b2:	0e1b      	lsrs	r3, r3, #24
 80019b4:	1c59      	adds	r1, r3, #1
 80019b6:	0a75      	lsrs	r5, r6, #9
 80019b8:	4208      	tst	r0, r1
 80019ba:	d00c      	beq.n	80019d6 <__aeabi_f2d+0x2e>
 80019bc:	22e0      	movs	r2, #224	; 0xe0
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4694      	mov	ip, r2
 80019c2:	076d      	lsls	r5, r5, #29
 80019c4:	0b36      	lsrs	r6, r6, #12
 80019c6:	4463      	add	r3, ip
 80019c8:	051b      	lsls	r3, r3, #20
 80019ca:	4333      	orrs	r3, r6
 80019cc:	07e4      	lsls	r4, r4, #31
 80019ce:	4323      	orrs	r3, r4
 80019d0:	0028      	movs	r0, r5
 80019d2:	0019      	movs	r1, r3
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d114      	bne.n	8001a04 <__aeabi_f2d+0x5c>
 80019da:	2d00      	cmp	r5, #0
 80019dc:	d01b      	beq.n	8001a16 <__aeabi_f2d+0x6e>
 80019de:	0028      	movs	r0, r5
 80019e0:	f000 f82a 	bl	8001a38 <__clzsi2>
 80019e4:	280a      	cmp	r0, #10
 80019e6:	dc1c      	bgt.n	8001a22 <__aeabi_f2d+0x7a>
 80019e8:	230b      	movs	r3, #11
 80019ea:	002a      	movs	r2, r5
 80019ec:	1a1b      	subs	r3, r3, r0
 80019ee:	40da      	lsrs	r2, r3
 80019f0:	0003      	movs	r3, r0
 80019f2:	3315      	adds	r3, #21
 80019f4:	409d      	lsls	r5, r3
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <__aeabi_f2d+0x88>)
 80019f8:	0312      	lsls	r2, r2, #12
 80019fa:	1a1b      	subs	r3, r3, r0
 80019fc:	055b      	lsls	r3, r3, #21
 80019fe:	0b16      	lsrs	r6, r2, #12
 8001a00:	0d5b      	lsrs	r3, r3, #21
 8001a02:	e7e1      	b.n	80019c8 <__aeabi_f2d+0x20>
 8001a04:	2d00      	cmp	r5, #0
 8001a06:	d009      	beq.n	8001a1c <__aeabi_f2d+0x74>
 8001a08:	0b32      	lsrs	r2, r6, #12
 8001a0a:	2680      	movs	r6, #128	; 0x80
 8001a0c:	0336      	lsls	r6, r6, #12
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <__aeabi_f2d+0x8c>)
 8001a10:	076d      	lsls	r5, r5, #29
 8001a12:	4316      	orrs	r6, r2
 8001a14:	e7d8      	b.n	80019c8 <__aeabi_f2d+0x20>
 8001a16:	2300      	movs	r3, #0
 8001a18:	2600      	movs	r6, #0
 8001a1a:	e7d5      	b.n	80019c8 <__aeabi_f2d+0x20>
 8001a1c:	2600      	movs	r6, #0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <__aeabi_f2d+0x8c>)
 8001a20:	e7d2      	b.n	80019c8 <__aeabi_f2d+0x20>
 8001a22:	0003      	movs	r3, r0
 8001a24:	002a      	movs	r2, r5
 8001a26:	3b0b      	subs	r3, #11
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	e7e3      	b.n	80019f6 <__aeabi_f2d+0x4e>
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	00000389 	.word	0x00000389
 8001a34:	000007ff 	.word	0x000007ff

08001a38 <__clzsi2>:
 8001a38:	211c      	movs	r1, #28
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	4298      	cmp	r0, r3
 8001a40:	d301      	bcc.n	8001a46 <__clzsi2+0xe>
 8001a42:	0c00      	lsrs	r0, r0, #16
 8001a44:	3910      	subs	r1, #16
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	4298      	cmp	r0, r3
 8001a4a:	d301      	bcc.n	8001a50 <__clzsi2+0x18>
 8001a4c:	0a00      	lsrs	r0, r0, #8
 8001a4e:	3908      	subs	r1, #8
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	4298      	cmp	r0, r3
 8001a54:	d301      	bcc.n	8001a5a <__clzsi2+0x22>
 8001a56:	0900      	lsrs	r0, r0, #4
 8001a58:	3904      	subs	r1, #4
 8001a5a:	a202      	add	r2, pc, #8	; (adr r2, 8001a64 <__clzsi2+0x2c>)
 8001a5c:	5c10      	ldrb	r0, [r2, r0]
 8001a5e:	1840      	adds	r0, r0, r1
 8001a60:	4770      	bx	lr
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	02020304 	.word	0x02020304
 8001a68:	01010101 	.word	0x01010101
	...

08001a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	if ( (executionState != EXECUTION_STATE_NORMAL) &&
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <main+0xdc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a35      	ldr	r2, [pc, #212]	; (8001b54 <main+0xe0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d016      	beq.n	8001ab0 <main+0x3c>
			(executionState != EXECUTION_STATE_UPDATE) &&
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <main+0xdc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
	if ( (executionState != EXECUTION_STATE_NORMAL) &&
 8001a86:	4a34      	ldr	r2, [pc, #208]	; (8001b58 <main+0xe4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d011      	beq.n	8001ab0 <main+0x3c>
			(executionState != EXECUTION_STATE_CONFIG_RESET) )
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <main+0xdc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
			(executionState != EXECUTION_STATE_UPDATE) &&
 8001a90:	4a32      	ldr	r2, [pc, #200]	; (8001b5c <main+0xe8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00c      	beq.n	8001ab0 <main+0x3c>
	{
		if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8001a96:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <main+0xec>)
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	051b      	lsls	r3, r3, #20
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d003      	beq.n	8001aaa <main+0x36>
		{
			executionState = EXECUTION_STATE_POWER_RESET;
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <main+0xdc>)
 8001aa4:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <main+0xf0>)
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e002      	b.n	8001ab0 <main+0x3c>
		}
		else
		{
			// updating from old firmware without executionState defined
			executionState = EXECUTION_STATE_UPDATE;
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <main+0xdc>)
 8001aac:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <main+0xe4>)
 8001aae:	601a      	str	r2, [r3, #0]
		}
	}



	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001ab0:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <main+0xec>)
 8001ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <main+0xec>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0449      	lsls	r1, r1, #17
 8001aba:	430a      	orrs	r2, r1
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <main+0xf4>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <main+0xf4>)
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aca:	f001 faa7 	bl	800301c <HAL_Init>

  /* USER CODE BEGIN Init */

	NV_Init();
 8001ace:	f00e ff91 	bl	80109f4 <NV_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad2:	f000 f84b 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad6:	f000 fca7 	bl	8002428 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ada:	f000 fc8f 	bl	80023fc <MX_DMA_Init>
  MX_ADC_Init();
 8001ade:	f000 f8b9 	bl	8001c54 <MX_ADC_Init>
  MX_RTC_Init();
 8001ae2:	f000 fa27 	bl	8001f34 <MX_RTC_Init>
  MX_TIM6_Init();
 8001ae6:	f000 fb3f 	bl	8002168 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001aea:	f000 fac7 	bl	800207c <MX_TIM3_Init>
  MX_TIM15_Init();
 8001aee:	f000 fb5d 	bl	80021ac <MX_TIM15_Init>
  MX_TIM17_Init();
 8001af2:	f000 fbfd 	bl	80022f0 <MX_TIM17_Init>
  MX_I2C2_Init();
 8001af6:	f000 f9dd 	bl	8001eb4 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001afa:	f000 f999 	bl	8001e30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	if ( (HAL_GPIO_ReadPin(IODRV_PIN_POW_EN_GPIO, IODRV_PIN_POW_EN_PIN_Pos) == GPIO_PIN_RESET) &&
 8001afe:	2390      	movs	r3, #144	; 0x90
 8001b00:	05db      	lsls	r3, r3, #23
 8001b02:	210a      	movs	r1, #10
 8001b04:	0018      	movs	r0, r3
 8001b06:	f002 feb3 	bl	8004870 <HAL_GPIO_ReadPin>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d107      	bne.n	8001b1e <main+0xaa>
			(executionState == EXECUTION_STATE_POWER_RESET)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <main+0xdc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
	if ( (HAL_GPIO_ReadPin(IODRV_PIN_POW_EN_GPIO, IODRV_PIN_POW_EN_PIN_Pos) == GPIO_PIN_RESET) &&
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <main+0xf0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d102      	bne.n	8001b1e <main+0xaa>
			)
	{
		executionState = EXECUTION_STATE_POWER_ON;
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <main+0xdc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
	}

	// For debugging.
	executionState = EXECUTION_STATE_POWER_RESET;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <main+0xdc>)
 8001b20:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <main+0xf0>)
 8001b22:	601a      	str	r2, [r3, #0]

	OSLOOP_Init();
 8001b24:	f00f f8ae 	bl	8010c84 <OSLOOP_Init>

	// Wait for the adc to become ready
	while (false == ADC_GetFilterReady())
 8001b28:	e000      	b.n	8001b2c <main+0xb8>
	{
		asm volatile ("nop");
 8001b2a:	46c0      	nop			; (mov r8, r8)
	while (false == ADC_GetFilterReady())
 8001b2c:	f005 fdb2 	bl	8007694 <ADC_GetFilterReady>
 8001b30:	0003      	movs	r3, r0
 8001b32:	001a      	movs	r2, r3
 8001b34:	2301      	movs	r3, #1
 8001b36:	4053      	eors	r3, r2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f5      	bne.n	8001b2a <main+0xb6>
	}

	TASKMAN_Init();
 8001b3e:	f011 fbdd 	bl	80132fc <TASKMAN_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	executionState = EXECUTION_STATE_NORMAL; // after initialization indicate it for future wd resets
 8001b42:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <main+0xdc>)
 8001b44:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <main+0xe0>)
 8001b46:	601a      	str	r2, [r3, #0]

	TASKMAN_Run();
 8001b48:	f011 fc0c 	bl	8013364 <TASKMAN_Run>
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <main+0xd8>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	2000185c 	.word	0x2000185c
 8001b54:	aaaaaaaa 	.word	0xaaaaaaaa
 8001b58:	a1a15151 	.word	0xa1a15151
 8001b5c:	a5a5a5a5 	.word	0xa5a5a5a5
 8001b60:	40021000 	.word	0x40021000
 8001b64:	11111111 	.word	0x11111111
 8001b68:	40022000 	.word	0x40022000

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b095      	sub	sp, #84	; 0x54
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	2420      	movs	r4, #32
 8001b74:	193b      	adds	r3, r7, r4
 8001b76:	0018      	movs	r0, r3
 8001b78:	2330      	movs	r3, #48	; 0x30
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f011 fe96 	bl	80138ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b82:	2310      	movs	r3, #16
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	0018      	movs	r0, r3
 8001b88:	2310      	movs	r3, #16
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f011 fe8e 	bl	80138ae <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b92:	003b      	movs	r3, r7
 8001b94:	0018      	movs	r0, r3
 8001b96:	2310      	movs	r3, #16
 8001b98:	001a      	movs	r2, r3
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	f011 fe87 	bl	80138ae <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ba0:	f003 f8b2 	bl	8004d08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8001ba4:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <SystemClock_Config+0xe0>)
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <SystemClock_Config+0xe0>)
 8001baa:	2118      	movs	r1, #24
 8001bac:	430a      	orrs	r2, r1
 8001bae:	621a      	str	r2, [r3, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001bb0:	0021      	movs	r1, r4
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	221e      	movs	r2, #30
 8001bb6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	2201      	movs	r2, #1
 8001bbc:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2210      	movs	r2, #16
 8001bce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	2201      	movs	r2, #1
 8001bda:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	0018      	movs	r0, r3
 8001be6:	f003 f8ed 	bl	8004dc4 <HAL_RCC_OscConfig>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001bee:	f000 fd41 	bl	8002674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2100      	movs	r1, #0
 8001c10:	0018      	movs	r0, r3
 8001c12:	f003 fbf5 	bl	8005400 <HAL_RCC_ClockConfig>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001c1a:	f000 fd2b 	bl	8002674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8001c1e:	003b      	movs	r3, r7
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <SystemClock_Config+0xe4>)
 8001c22:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001c24:	003b      	movs	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	0052      	lsls	r2, r2, #1
 8001c30:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c32:	003b      	movs	r3, r7
 8001c34:	0018      	movs	r0, r3
 8001c36:	f003 fd13 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001c3e:	f000 fd19 	bl	8002674 <Error_Handler>
  }
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b015      	add	sp, #84	; 0x54
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	00010020 	.word	0x00010020

08001c54 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5a:	2314      	movs	r3, #20
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	0018      	movs	r0, r3
 8001c60:	230c      	movs	r3, #12
 8001c62:	001a      	movs	r2, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	f011 fe22 	bl	80138ae <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001c6a:	003b      	movs	r3, r7
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	2314      	movs	r3, #20
 8001c70:	001a      	movs	r2, r3
 8001c72:	2100      	movs	r1, #0
 8001c74:	f011 fe1b 	bl	80138ae <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001c78:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001c7a:	4a6c      	ldr	r2, [pc, #432]	; (8001e2c <MX_ADC_Init+0x1d8>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c7e:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c8a:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001c90:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c96:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001c98:	2208      	movs	r2, #8
 8001c9a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001ca2:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001ca8:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001cae:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb4:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001cb6:	22c2      	movs	r2, #194	; 0xc2
 8001cb8:	32ff      	adds	r2, #255	; 0xff
 8001cba:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001cc2:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001cc4:	2224      	movs	r2, #36	; 0x24
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cca:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001cd0:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f001 fa46 	bl	8003164 <HAL_ADC_Init>
 8001cd8:	1e03      	subs	r3, r0, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_ADC_Init+0x8c>
  {
    Error_Handler();
 8001cdc:	f000 fcca 	bl	8002674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ce0:	2114      	movs	r1, #20
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	0152      	lsls	r2, r2, #5
 8001cee:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2206      	movs	r2, #6
 8001cf4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001cf6:	187a      	adds	r2, r7, r1
 8001cf8:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f001 fc81 	bl	8003604 <HAL_ADC_ConfigChannel>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001d06:	f000 fcb5 	bl	8002674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d0a:	2114      	movs	r1, #20
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d12:	187a      	adds	r2, r7, r1
 8001d14:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f001 fc73 	bl	8003604 <HAL_ADC_ConfigChannel>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d001      	beq.n	8001d26 <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 8001d22:	f000 fca7 	bl	8002674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d26:	2114      	movs	r1, #20
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d2e:	187a      	adds	r2, r7, r1
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001d32:	0011      	movs	r1, r2
 8001d34:	0018      	movs	r0, r3
 8001d36:	f001 fc65 	bl	8003604 <HAL_ADC_ConfigChannel>
 8001d3a:	1e03      	subs	r3, r0, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_ADC_Init+0xee>
  {
    Error_Handler();
 8001d3e:	f000 fc99 	bl	8002674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d42:	2114      	movs	r1, #20
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2203      	movs	r2, #3
 8001d48:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d4a:	187a      	adds	r2, r7, r1
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001d4e:	0011      	movs	r1, r2
 8001d50:	0018      	movs	r0, r3
 8001d52:	f001 fc57 	bl	8003604 <HAL_ADC_ConfigChannel>
 8001d56:	1e03      	subs	r3, r0, #0
 8001d58:	d001      	beq.n	8001d5e <MX_ADC_Init+0x10a>
  {
    Error_Handler();
 8001d5a:	f000 fc8b 	bl	8002674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d5e:	2114      	movs	r1, #20
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	2204      	movs	r2, #4
 8001d64:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d66:	187a      	adds	r2, r7, r1
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001d6a:	0011      	movs	r1, r2
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f001 fc49 	bl	8003604 <HAL_ADC_ConfigChannel>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d001      	beq.n	8001d7a <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8001d76:	f000 fc7d 	bl	8002674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d7a:	2114      	movs	r1, #20
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	2205      	movs	r2, #5
 8001d80:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d82:	187a      	adds	r2, r7, r1
 8001d84:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001d86:	0011      	movs	r1, r2
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f001 fc3b 	bl	8003604 <HAL_ADC_ConfigChannel>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d001      	beq.n	8001d96 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8001d92:	f000 fc6f 	bl	8002674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d96:	2114      	movs	r1, #20
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d9e:	187a      	adds	r2, r7, r1
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001da2:	0011      	movs	r1, r2
 8001da4:	0018      	movs	r0, r3
 8001da6:	f001 fc2d 	bl	8003604 <HAL_ADC_ConfigChannel>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <MX_ADC_Init+0x15e>
  {
    Error_Handler();
 8001dae:	f000 fc61 	bl	8002674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001db2:	2114      	movs	r1, #20
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	2210      	movs	r2, #16
 8001db8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001dba:	187a      	adds	r2, r7, r1
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f001 fc1f 	bl	8003604 <HAL_ADC_ConfigChannel>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d001      	beq.n	8001dce <MX_ADC_Init+0x17a>
  {
    Error_Handler();
 8001dca:	f000 fc53 	bl	8002674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001dce:	2114      	movs	r1, #20
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	2211      	movs	r2, #17
 8001dd4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001dd6:	187a      	adds	r2, r7, r1
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001dda:	0011      	movs	r1, r2
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f001 fc11 	bl	8003604 <HAL_ADC_ConfigChannel>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d001      	beq.n	8001dea <MX_ADC_Init+0x196>
  {
    Error_Handler();
 8001de6:	f000 fc45 	bl	8002674 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001dea:	003b      	movs	r3, r7
 8001dec:	22c0      	movs	r2, #192	; 0xc0
 8001dee:	0412      	lsls	r2, r2, #16
 8001df0:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001df2:	003b      	movs	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.ITMode = DISABLE;
 8001df8:	003b      	movs	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	721a      	strb	r2, [r3, #8]
  AnalogWDGConfig.HighThreshold = 0;
 8001dfe:	003b      	movs	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  AnalogWDGConfig.LowThreshold = 0;
 8001e04:	003b      	movs	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001e0a:	003a      	movs	r2, r7
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_ADC_Init+0x1d4>)
 8001e0e:	0011      	movs	r1, r2
 8001e10:	0018      	movs	r0, r3
 8001e12:	f001 fced 	bl	80037f0 <HAL_ADC_AnalogWDGConfig>
 8001e16:	1e03      	subs	r3, r0, #0
 8001e18:	d001      	beq.n	8001e1e <MX_ADC_Init+0x1ca>
  {
    Error_Handler();
 8001e1a:	f000 fc2b 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b008      	add	sp, #32
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	20001930 	.word	0x20001930
 8001e2c:	40012400 	.word	0x40012400

08001e30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <MX_I2C1_Init+0x7c>)
 8001e38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <MX_I2C1_Init+0x80>)
 8001e3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	0212      	lsls	r2, r2, #8
 8001e52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f002 fd54 	bl	800491c <HAL_I2C_Init>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d001      	beq.n	8001e7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e78:	f000 fbfc 	bl	8002674 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	0018      	movs	r0, r3
 8001e82:	f002 fea9 	bl	8004bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8001e86:	1e03      	subs	r3, r0, #0
 8001e88:	d001      	beq.n	8001e8e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001e8a:	f000 fbf3 	bl	8002674 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_I2C1_Init+0x78>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	0018      	movs	r0, r3
 8001e94:	f002 feec 	bl	8004c70 <HAL_I2CEx_ConfigDigitalFilter>
 8001e98:	1e03      	subs	r3, r0, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e9c:	f000 fbea 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	20001634 	.word	0x20001634
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	2000090e 	.word	0x2000090e

08001eb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <MX_I2C2_Init+0x78>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <MX_I2C2_Init+0x7c>)
 8001ec2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f002 fd13 	bl	800491c <HAL_I2C_Init>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d001      	beq.n	8001efe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001efa:	f000 fbbb 	bl	8002674 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001f00:	2100      	movs	r1, #0
 8001f02:	0018      	movs	r0, r3
 8001f04:	f002 fe68 	bl	8004bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f0c:	f000 fbb2 	bl	8002674 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001f12:	2100      	movs	r1, #0
 8001f14:	0018      	movs	r0, r3
 8001f16:	f002 feab 	bl	8004c70 <HAL_I2CEx_ConfigDigitalFilter>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f1e:	f000 fba9 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200016d8 	.word	0x200016d8
 8001f2c:	40005800 	.word	0x40005800
 8001f30:	2000090e 	.word	0x2000090e

08001f34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b090      	sub	sp, #64	; 0x40
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f3a:	232c      	movs	r3, #44	; 0x2c
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	0018      	movs	r0, r3
 8001f40:	2314      	movs	r3, #20
 8001f42:	001a      	movs	r2, r3
 8001f44:	2100      	movs	r1, #0
 8001f46:	f011 fcb2 	bl	80138ae <memset>
  RTC_DateTypeDef sDate = {0};
 8001f4a:	2328      	movs	r3, #40	; 0x28
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001f52:	003b      	movs	r3, r7
 8001f54:	0018      	movs	r0, r3
 8001f56:	2328      	movs	r3, #40	; 0x28
 8001f58:	001a      	movs	r2, r3
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f011 fca7 	bl	80138ae <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f60:	4b44      	ldr	r3, [pc, #272]	; (8002074 <MX_RTC_Init+0x140>)
 8001f62:	4a45      	ldr	r2, [pc, #276]	; (8002078 <MX_RTC_Init+0x144>)
 8001f64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <MX_RTC_Init+0x140>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f6c:	4b41      	ldr	r3, [pc, #260]	; (8002074 <MX_RTC_Init+0x140>)
 8001f6e:	227f      	movs	r2, #127	; 0x7f
 8001f70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f72:	4b40      	ldr	r3, [pc, #256]	; (8002074 <MX_RTC_Init+0x140>)
 8001f74:	22ff      	movs	r2, #255	; 0xff
 8001f76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <MX_RTC_Init+0x140>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <MX_RTC_Init+0x140>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <MX_RTC_Init+0x140>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <MX_RTC_Init+0x140>)
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f003 fc35 	bl	80057fc <HAL_RTC_Init>
 8001f92:	1e03      	subs	r3, r0, #0
 8001f94:	d001      	beq.n	8001f9a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001f96:	f000 fb6d 	bl	8002674 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	2200      	movs	r2, #0
 8001fac:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fba:	1879      	adds	r1, r7, r1
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <MX_RTC_Init+0x140>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f003 fcaf 	bl	8005924 <HAL_RTC_SetTime>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d001      	beq.n	8001fce <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001fca:	f000 fb53 	bl	8002674 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fce:	2128      	movs	r1, #40	; 0x28
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2201      	movs	r2, #1
 8001fda:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2201      	movs	r2, #1
 8001fe0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001fe8:	1879      	adds	r1, r7, r1
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <MX_RTC_Init+0x140>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f003 fdb2 	bl	8005b58 <HAL_RTC_SetDate>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001ff8:	f000 fb3c 	bl	8002674 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ffc:	003b      	movs	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002002:	003b      	movs	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002008:	003b      	movs	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800200e:	003b      	movs	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002014:	003b      	movs	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800201a:	003b      	movs	r3, r7
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002020:	003b      	movs	r3, r7
 8002022:	2200      	movs	r2, #0
 8002024:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002026:	003b      	movs	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800202c:	003b      	movs	r3, r7
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002032:	003b      	movs	r3, r7
 8002034:	2220      	movs	r2, #32
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800203a:	003b      	movs	r3, r7
 800203c:	2280      	movs	r2, #128	; 0x80
 800203e:	0052      	lsls	r2, r2, #1
 8002040:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002042:	0039      	movs	r1, r7
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_RTC_Init+0x140>)
 8002046:	2201      	movs	r2, #1
 8002048:	0018      	movs	r0, r3
 800204a:	f003 fe7b 	bl	8005d44 <HAL_RTC_SetAlarm_IT>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d001      	beq.n	8002056 <MX_RTC_Init+0x122>
  {
    Error_Handler();
 8002052:	f000 fb0f 	bl	8002674 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <MX_RTC_Init+0x140>)
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	0018      	movs	r0, r3
 800205e:	f004 f907 	bl	8006270 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d001      	beq.n	800206a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002066:	f000 fb05 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b010      	add	sp, #64	; 0x40
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	2000183c 	.word	0x2000183c
 8002078:	40002800 	.word	0x40002800

0800207c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002082:	2320      	movs	r3, #32
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	0018      	movs	r0, r3
 8002088:	2308      	movs	r3, #8
 800208a:	001a      	movs	r2, r3
 800208c:	2100      	movs	r1, #0
 800208e:	f011 fc0e 	bl	80138ae <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	0018      	movs	r0, r3
 8002096:	231c      	movs	r3, #28
 8002098:	001a      	movs	r2, r3
 800209a:	2100      	movs	r1, #0
 800209c:	f011 fc07 	bl	80138ae <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <MX_TIM3_Init+0xe0>)
 80020a2:	4a2f      	ldr	r2, [pc, #188]	; (8002160 <MX_TIM3_Init+0xe4>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020a6:	4b2d      	ldr	r3, [pc, #180]	; (800215c <MX_TIM3_Init+0xe0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <MX_TIM3_Init+0xe0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <MX_TIM3_Init+0xe0>)
 80020b4:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <MX_TIM3_Init+0xe8>)
 80020b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b8:	4b28      	ldr	r3, [pc, #160]	; (800215c <MX_TIM3_Init+0xe0>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <MX_TIM3_Init+0xe0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <MX_TIM3_Init+0xe0>)
 80020c6:	0018      	movs	r0, r3
 80020c8:	f004 fa76 	bl	80065b8 <HAL_TIM_PWM_Init>
 80020cc:	1e03      	subs	r3, r0, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80020d0:	f000 fad0 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2120      	movs	r1, #32
 80020d6:	187b      	adds	r3, r7, r1
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	2200      	movs	r2, #0
 80020e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020e2:	187a      	adds	r2, r7, r1
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_TIM3_Init+0xe0>)
 80020e6:	0011      	movs	r1, r2
 80020e8:	0018      	movs	r0, r3
 80020ea:	f005 f899 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	1e03      	subs	r3, r0, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80020f2:	f000 fabf 	bl	8002674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2260      	movs	r2, #96	; 0x60
 80020fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2200      	movs	r2, #0
 8002100:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800210e:	1d39      	adds	r1, r7, #4
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <MX_TIM3_Init+0xe0>)
 8002112:	2200      	movs	r2, #0
 8002114:	0018      	movs	r0, r3
 8002116:	f004 fbcd 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800211e:	f000 faa9 	bl	8002674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002122:	1d39      	adds	r1, r7, #4
 8002124:	4b0d      	ldr	r3, [pc, #52]	; (800215c <MX_TIM3_Init+0xe0>)
 8002126:	2204      	movs	r2, #4
 8002128:	0018      	movs	r0, r3
 800212a:	f004 fbc3 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002132:	f000 fa9f 	bl	8002674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002136:	1d39      	adds	r1, r7, #4
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_TIM3_Init+0xe0>)
 800213a:	2208      	movs	r2, #8
 800213c:	0018      	movs	r0, r3
 800213e:	f004 fbb9 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 8002142:	1e03      	subs	r3, r0, #0
 8002144:	d001      	beq.n	800214a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8002146:	f000 fa95 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <MX_TIM3_Init+0xe0>)
 800214c:	0018      	movs	r0, r3
 800214e:	f000 fdfb 	bl	8002d48 <HAL_TIM_MspPostInit>

}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	b00a      	add	sp, #40	; 0x28
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	2000176c 	.word	0x2000176c
 8002160:	40000400 	.word	0x40000400
 8002164:	0000ffff 	.word	0x0000ffff

08002168 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_TIM6_Init+0x38>)
 800216e:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <MX_TIM6_Init+0x3c>)
 8002170:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8 - 1;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <MX_TIM6_Init+0x38>)
 8002174:	2207      	movs	r2, #7
 8002176:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_TIM6_Init+0x38>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <MX_TIM6_Init+0x38>)
 8002180:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <MX_TIM6_Init+0x40>)
 8002182:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_TIM6_Init+0x38>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <MX_TIM6_Init+0x38>)
 800218c:	0018      	movs	r0, r3
 800218e:	f004 f9c3 	bl	8006518 <HAL_TIM_Base_Init>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d001      	beq.n	800219a <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8002196:	f000 fa6d 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20001860 	.word	0x20001860
 80021a4:	40001000 	.word	0x40001000
 80021a8:	000003e7 	.word	0x000003e7

080021ac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b092      	sub	sp, #72	; 0x48
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b2:	2340      	movs	r3, #64	; 0x40
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	0018      	movs	r0, r3
 80021b8:	2308      	movs	r3, #8
 80021ba:	001a      	movs	r2, r3
 80021bc:	2100      	movs	r1, #0
 80021be:	f011 fb76 	bl	80138ae <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c2:	2324      	movs	r3, #36	; 0x24
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	0018      	movs	r0, r3
 80021c8:	231c      	movs	r3, #28
 80021ca:	001a      	movs	r2, r3
 80021cc:	2100      	movs	r1, #0
 80021ce:	f011 fb6e 	bl	80138ae <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	0018      	movs	r0, r3
 80021d6:	2320      	movs	r3, #32
 80021d8:	001a      	movs	r2, r3
 80021da:	2100      	movs	r1, #0
 80021dc:	f011 fb67 	bl	80138ae <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <MX_TIM15_Init+0x138>)
 80021e2:	4a41      	ldr	r2, [pc, #260]	; (80022e8 <MX_TIM15_Init+0x13c>)
 80021e4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80021e6:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <MX_TIM15_Init+0x138>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <MX_TIM15_Init+0x138>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <MX_TIM15_Init+0x138>)
 80021f4:	4a3d      	ldr	r2, [pc, #244]	; (80022ec <MX_TIM15_Init+0x140>)
 80021f6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <MX_TIM15_Init+0x138>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <MX_TIM15_Init+0x138>)
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002204:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <MX_TIM15_Init+0x138>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <MX_TIM15_Init+0x138>)
 800220c:	0018      	movs	r0, r3
 800220e:	f004 f9d3 	bl	80065b8 <HAL_TIM_PWM_Init>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d001      	beq.n	800221a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002216:	f000 fa2d 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221a:	2140      	movs	r1, #64	; 0x40
 800221c:	187b      	adds	r3, r7, r1
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002222:	187b      	adds	r3, r7, r1
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002228:	187a      	adds	r2, r7, r1
 800222a:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <MX_TIM15_Init+0x138>)
 800222c:	0011      	movs	r1, r2
 800222e:	0018      	movs	r0, r3
 8002230:	f004 fff6 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002238:	f000 fa1c 	bl	8002674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223c:	2124      	movs	r1, #36	; 0x24
 800223e:	187b      	adds	r3, r7, r1
 8002240:	2260      	movs	r2, #96	; 0x60
 8002242:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2200      	movs	r2, #0
 8002248:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800225c:	187b      	adds	r3, r7, r1
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002268:	1879      	adds	r1, r7, r1
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <MX_TIM15_Init+0x138>)
 800226c:	2200      	movs	r2, #0
 800226e:	0018      	movs	r0, r3
 8002270:	f004 fb20 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d001      	beq.n	800227c <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8002278:	f000 f9fc 	bl	8002674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800227c:	2324      	movs	r3, #36	; 0x24
 800227e:	18f9      	adds	r1, r7, r3
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MX_TIM15_Init+0x138>)
 8002282:	2204      	movs	r2, #4
 8002284:	0018      	movs	r0, r3
 8002286:	f004 fb15 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 800228e:	f000 f9f1 	bl	8002674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	2200      	movs	r2, #0
 800229c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2280      	movs	r2, #128	; 0x80
 80022b4:	0192      	lsls	r2, r2, #6
 80022b6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80022be:	1d3a      	adds	r2, r7, #4
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <MX_TIM15_Init+0x138>)
 80022c2:	0011      	movs	r1, r2
 80022c4:	0018      	movs	r0, r3
 80022c6:	f005 f803 	bl	80072d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM15_Init+0x126>
  {
    Error_Handler();
 80022ce:	f000 f9d1 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <MX_TIM15_Init+0x138>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 fd37 	bl	8002d48 <HAL_TIM_MspPostInit>

}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b012      	add	sp, #72	; 0x48
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	20001680 	.word	0x20001680
 80022e8:	40014000 	.word	0x40014000
 80022ec:	0000ffff 	.word	0x0000ffff

080022f0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b090      	sub	sp, #64	; 0x40
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f6:	2324      	movs	r3, #36	; 0x24
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	0018      	movs	r0, r3
 80022fc:	231c      	movs	r3, #28
 80022fe:	001a      	movs	r2, r3
 8002300:	2100      	movs	r1, #0
 8002302:	f011 fad4 	bl	80138ae <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	0018      	movs	r0, r3
 800230a:	2320      	movs	r3, #32
 800230c:	001a      	movs	r2, r3
 800230e:	2100      	movs	r1, #0
 8002310:	f011 facd 	bl	80138ae <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002316:	4a37      	ldr	r2, [pc, #220]	; (80023f4 <MX_TIM17_Init+0x104>)
 8002318:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <MX_TIM17_Init+0x100>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002328:	4a33      	ldr	r2, [pc, #204]	; (80023f8 <MX_TIM17_Init+0x108>)
 800232a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <MX_TIM17_Init+0x100>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002334:	2200      	movs	r2, #0
 8002336:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <MX_TIM17_Init+0x100>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800233e:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002340:	0018      	movs	r0, r3
 8002342:	f004 f8e9 	bl	8006518 <HAL_TIM_Base_Init>
 8002346:	1e03      	subs	r3, r0, #0
 8002348:	d001      	beq.n	800234e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800234a:	f000 f993 	bl	8002674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002350:	0018      	movs	r0, r3
 8002352:	f004 f931 	bl	80065b8 <HAL_TIM_PWM_Init>
 8002356:	1e03      	subs	r3, r0, #0
 8002358:	d001      	beq.n	800235e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800235a:	f000 f98b 	bl	8002674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800235e:	2124      	movs	r1, #36	; 0x24
 8002360:	187b      	adds	r3, r7, r1
 8002362:	2260      	movs	r2, #96	; 0x60
 8002364:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002384:	187b      	adds	r3, r7, r1
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800238a:	1879      	adds	r1, r7, r1
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <MX_TIM17_Init+0x100>)
 800238e:	2200      	movs	r2, #0
 8002390:	0018      	movs	r0, r3
 8002392:	f004 fa8f 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 8002396:	1e03      	subs	r3, r0, #0
 8002398:	d001      	beq.n	800239e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800239a:	f000 f96b 	bl	8002674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2200      	movs	r2, #0
 80023a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	0192      	lsls	r2, r2, #6
 80023c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80023ca:	1d3a      	adds	r2, r7, #4
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <MX_TIM17_Init+0x100>)
 80023ce:	0011      	movs	r1, r2
 80023d0:	0018      	movs	r0, r3
 80023d2:	f004 ff7d 	bl	80072d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80023d6:	1e03      	subs	r3, r0, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 80023da:	f000 f94b 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <MX_TIM17_Init+0x100>)
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fcb1 	bl	8002d48 <HAL_TIM_MspPostInit>

}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b010      	add	sp, #64	; 0x40
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	20001724 	.word	0x20001724
 80023f4:	40014800 	.word	0x40014800
 80023f8:	0000ffff 	.word	0x0000ffff

080023fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_DMA_Init+0x28>)
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <MX_DMA_Init+0x28>)
 8002408:	2101      	movs	r1, #1
 800240a:	430a      	orrs	r2, r1
 800240c:	615a      	str	r2, [r3, #20]
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <MX_DMA_Init+0x28>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]

}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	40021000 	.word	0x40021000

08002428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b08b      	sub	sp, #44	; 0x2c
 800242c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242e:	2414      	movs	r4, #20
 8002430:	193b      	adds	r3, r7, r4
 8002432:	0018      	movs	r0, r3
 8002434:	2314      	movs	r3, #20
 8002436:	001a      	movs	r2, r3
 8002438:	2100      	movs	r1, #0
 800243a:	f011 fa38 	bl	80138ae <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800243e:	4b85      	ldr	r3, [pc, #532]	; (8002654 <MX_GPIO_Init+0x22c>)
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	4b84      	ldr	r3, [pc, #528]	; (8002654 <MX_GPIO_Init+0x22c>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	0309      	lsls	r1, r1, #12
 8002448:	430a      	orrs	r2, r1
 800244a:	615a      	str	r2, [r3, #20]
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <MX_GPIO_Init+0x22c>)
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	031b      	lsls	r3, r3, #12
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800245a:	4b7e      	ldr	r3, [pc, #504]	; (8002654 <MX_GPIO_Init+0x22c>)
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	4b7d      	ldr	r3, [pc, #500]	; (8002654 <MX_GPIO_Init+0x22c>)
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	03c9      	lsls	r1, r1, #15
 8002464:	430a      	orrs	r2, r1
 8002466:	615a      	str	r2, [r3, #20]
 8002468:	4b7a      	ldr	r3, [pc, #488]	; (8002654 <MX_GPIO_Init+0x22c>)
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	03db      	lsls	r3, r3, #15
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	4b77      	ldr	r3, [pc, #476]	; (8002654 <MX_GPIO_Init+0x22c>)
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	4b76      	ldr	r3, [pc, #472]	; (8002654 <MX_GPIO_Init+0x22c>)
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	0289      	lsls	r1, r1, #10
 8002480:	430a      	orrs	r2, r1
 8002482:	615a      	str	r2, [r3, #20]
 8002484:	4b73      	ldr	r3, [pc, #460]	; (8002654 <MX_GPIO_Init+0x22c>)
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	029b      	lsls	r3, r3, #10
 800248c:	4013      	ands	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	4b70      	ldr	r3, [pc, #448]	; (8002654 <MX_GPIO_Init+0x22c>)
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <MX_GPIO_Init+0x22c>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	02c9      	lsls	r1, r1, #11
 800249c:	430a      	orrs	r2, r1
 800249e:	615a      	str	r2, [r3, #20]
 80024a0:	4b6c      	ldr	r3, [pc, #432]	; (8002654 <MX_GPIO_Init+0x22c>)
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	02db      	lsls	r3, r3, #11
 80024a8:	4013      	ands	r3, r2
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESYSLIM_GPIO_Port, ESYSLIM_Pin, GPIO_PIN_RESET);
 80024ae:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <MX_GPIO_Init+0x230>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	2102      	movs	r1, #2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f002 f9f8 	bl	80048aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TS_CTR1_Pin|POWDET_EN_Pin|TS_CTL2_Pin, GPIO_PIN_RESET);
 80024ba:	4968      	ldr	r1, [pc, #416]	; (800265c <MX_GPIO_Init+0x234>)
 80024bc:	2390      	movs	r3, #144	; 0x90
 80024be:	05db      	lsls	r3, r3, #23
 80024c0:	2200      	movs	r2, #0
 80024c2:	0018      	movs	r0, r3
 80024c4:	f002 f9f1 	bl	80048aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_SET);
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	019b      	lsls	r3, r3, #6
 80024cc:	4864      	ldr	r0, [pc, #400]	; (8002660 <MX_GPIO_Init+0x238>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	0019      	movs	r1, r3
 80024d2:	f002 f9ea 	bl	80048aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EE_A_Pin|EE_WP_Pin, GPIO_PIN_RESET);
 80024d6:	2384      	movs	r3, #132	; 0x84
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4861      	ldr	r0, [pc, #388]	; (8002660 <MX_GPIO_Init+0x238>)
 80024dc:	2200      	movs	r2, #0
 80024de:	0019      	movs	r1, r3
 80024e0:	f002 f9e3 	bl	80048aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WKUP_SW2_Pin */
  GPIO_InitStruct.Pin = WKUP_SW2_Pin;
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	0192      	lsls	r2, r2, #6
 80024ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ec:	193b      	adds	r3, r7, r4
 80024ee:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <MX_GPIO_Init+0x23c>)
 80024f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024f2:	193b      	adds	r3, r7, r4
 80024f4:	2202      	movs	r2, #2
 80024f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(WKUP_SW2_GPIO_Port, &GPIO_InitStruct);
 80024f8:	193b      	adds	r3, r7, r4
 80024fa:	4a5b      	ldr	r2, [pc, #364]	; (8002668 <MX_GPIO_Init+0x240>)
 80024fc:	0019      	movs	r1, r3
 80024fe:	0010      	movs	r0, r2
 8002500:	f001 ff76 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_INT_Pin */
  GPIO_InitStruct.Pin = CH_INT_Pin;
 8002504:	193b      	adds	r3, r7, r4
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800250a:	193b      	adds	r3, r7, r4
 800250c:	4a57      	ldr	r2, [pc, #348]	; (800266c <MX_GPIO_Init+0x244>)
 800250e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002510:	193b      	adds	r3, r7, r4
 8002512:	2201      	movs	r2, #1
 8002514:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CH_INT_GPIO_Port, &GPIO_InitStruct);
 8002516:	193b      	adds	r3, r7, r4
 8002518:	4a4f      	ldr	r2, [pc, #316]	; (8002658 <MX_GPIO_Init+0x230>)
 800251a:	0019      	movs	r1, r3
 800251c:	0010      	movs	r0, r2
 800251e:	f001 ff67 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESYSLIM_Pin */
  GPIO_InitStruct.Pin = ESYSLIM_Pin;
 8002522:	193b      	adds	r3, r7, r4
 8002524:	2202      	movs	r2, #2
 8002526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002528:	193b      	adds	r3, r7, r4
 800252a:	2211      	movs	r2, #17
 800252c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	193b      	adds	r3, r7, r4
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	193b      	adds	r3, r7, r4
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ESYSLIM_GPIO_Port, &GPIO_InitStruct);
 800253a:	193b      	adds	r3, r7, r4
 800253c:	4a46      	ldr	r2, [pc, #280]	; (8002658 <MX_GPIO_Init+0x230>)
 800253e:	0019      	movs	r1, r3
 8002540:	0010      	movs	r0, r2
 8002542:	f001 ff55 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CTR1_Pin POWDET_EN_Pin TS_CTL2_Pin */
  GPIO_InitStruct.Pin = TS_CTR1_Pin|POWDET_EN_Pin|TS_CTL2_Pin;
 8002546:	193b      	adds	r3, r7, r4
 8002548:	4a44      	ldr	r2, [pc, #272]	; (800265c <MX_GPIO_Init+0x234>)
 800254a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254c:	193b      	adds	r3, r7, r4
 800254e:	2201      	movs	r2, #1
 8002550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	193b      	adds	r3, r7, r4
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	193b      	adds	r3, r7, r4
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	193a      	adds	r2, r7, r4
 8002560:	2390      	movs	r3, #144	; 0x90
 8002562:	05db      	lsls	r3, r3, #23
 8002564:	0011      	movs	r1, r2
 8002566:	0018      	movs	r0, r3
 8002568:	f001 ff42 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BGINT_Pin */
  GPIO_InitStruct.Pin = BGINT_Pin;
 800256c:	193b      	adds	r3, r7, r4
 800256e:	2202      	movs	r2, #2
 8002570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002572:	193b      	adds	r3, r7, r4
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	193b      	adds	r3, r7, r4
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BGINT_GPIO_Port, &GPIO_InitStruct);
 800257e:	193b      	adds	r3, r7, r4
 8002580:	4a37      	ldr	r2, [pc, #220]	; (8002660 <MX_GPIO_Init+0x238>)
 8002582:	0019      	movs	r1, r3
 8002584:	0010      	movs	r0, r2
 8002586:	f001 ff33 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW1_Pin;
 800258a:	193b      	adds	r3, r7, r4
 800258c:	4a38      	ldr	r2, [pc, #224]	; (8002670 <MX_GPIO_Init+0x248>)
 800258e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002590:	193b      	adds	r3, r7, r4
 8002592:	4a34      	ldr	r2, [pc, #208]	; (8002664 <MX_GPIO_Init+0x23c>)
 8002594:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002596:	193b      	adds	r3, r7, r4
 8002598:	2202      	movs	r2, #2
 800259a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	193b      	adds	r3, r7, r4
 800259e:	4a30      	ldr	r2, [pc, #192]	; (8002660 <MX_GPIO_Init+0x238>)
 80025a0:	0019      	movs	r1, r3
 80025a2:	0010      	movs	r0, r2
 80025a4:	f001 ff24 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RUN_Pin */
  GPIO_InitStruct.Pin = RUN_Pin;
 80025a8:	0021      	movs	r1, r4
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	0192      	lsls	r2, r2, #6
 80025b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80025b2:	000c      	movs	r4, r1
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	2211      	movs	r2, #17
 80025b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	193b      	adds	r3, r7, r4
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	4a25      	ldr	r2, [pc, #148]	; (8002660 <MX_GPIO_Init+0x238>)
 80025ca:	0019      	movs	r1, r3
 80025cc:	0010      	movs	r0, r2
 80025ce:	f001 ff0f 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO2_Pin BID_Pin POW_EN_Pin EXTVS_EN_Pin */
  GPIO_InitStruct.Pin = IO2_Pin|BID_Pin|POW_EN_Pin|EXTVS_EN_Pin;
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	22b8      	movs	r2, #184	; 0xb8
 80025d6:	0152      	lsls	r2, r2, #5
 80025d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	193b      	adds	r3, r7, r4
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	193a      	adds	r2, r7, r4
 80025e8:	2390      	movs	r3, #144	; 0x90
 80025ea:	05db      	lsls	r3, r3, #23
 80025ec:	0011      	movs	r1, r2
 80025ee:	0018      	movs	r0, r3
 80025f0:	f001 fefe 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EE_A_Pin EE_WP_Pin */
  GPIO_InitStruct.Pin = EE_A_Pin|EE_WP_Pin;
 80025f4:	0021      	movs	r1, r4
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	2284      	movs	r2, #132	; 0x84
 80025fa:	0052      	lsls	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	2201      	movs	r2, #1
 8002602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002610:	187b      	adds	r3, r7, r1
 8002612:	4a13      	ldr	r2, [pc, #76]	; (8002660 <MX_GPIO_Init+0x238>)
 8002614:	0019      	movs	r1, r3
 8002616:	0010      	movs	r0, r2
 8002618:	f001 feea 	bl	80043f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2103      	movs	r1, #3
 8002620:	2005      	movs	r0, #5
 8002622:	f001 fcab 	bl	8003f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002626:	2005      	movs	r0, #5
 8002628:	f001 fcbd 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2103      	movs	r1, #3
 8002630:	2006      	movs	r0, #6
 8002632:	f001 fca3 	bl	8003f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002636:	2006      	movs	r0, #6
 8002638:	f001 fcb5 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2103      	movs	r1, #3
 8002640:	2007      	movs	r0, #7
 8002642:	f001 fc9b 	bl	8003f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002646:	2007      	movs	r0, #7
 8002648:	f001 fcad 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

}
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b00b      	add	sp, #44	; 0x2c
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	48001400 	.word	0x48001400
 800265c:	00008840 	.word	0x00008840
 8002660:	48000400 	.word	0x48000400
 8002664:	10110000 	.word	0x10110000
 8002668:	48000800 	.word	0x48000800
 800266c:	10210000 	.word	0x10210000
 8002670:	00001004 	.word	0x00001004

08002674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002678:	b672      	cpsid	i
}
 800267a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800267c:	e7fe      	b.n	800267c <Error_Handler+0x8>
	...

08002680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_MspInit+0x44>)
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_MspInit+0x44>)
 800268c:	2101      	movs	r1, #1
 800268e:	430a      	orrs	r2, r1
 8002690:	619a      	str	r2, [r3, #24]
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_MspInit+0x44>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2201      	movs	r2, #1
 8002698:	4013      	ands	r3, r2
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_MspInit+0x44>)
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_MspInit+0x44>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0549      	lsls	r1, r1, #21
 80026a8:	430a      	orrs	r2, r1
 80026aa:	61da      	str	r2, [r3, #28]
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_MspInit+0x44>)
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	4013      	ands	r3, r2
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	b002      	add	sp, #8
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b08b      	sub	sp, #44	; 0x2c
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	2414      	movs	r4, #20
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	0018      	movs	r0, r3
 80026d6:	2314      	movs	r3, #20
 80026d8:	001a      	movs	r2, r3
 80026da:	2100      	movs	r1, #0
 80026dc:	f011 f8e7 	bl	80138ae <memset>
  if(hadc->Instance==ADC1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a35      	ldr	r2, [pc, #212]	; (80027bc <HAL_ADC_MspInit+0xf4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d163      	bne.n	80027b2 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ea:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <HAL_ADC_MspInit+0xf8>)
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <HAL_ADC_MspInit+0xf8>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0089      	lsls	r1, r1, #2
 80026f4:	430a      	orrs	r2, r1
 80026f6:	619a      	str	r2, [r3, #24]
 80026f8:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_ADC_MspInit+0xf8>)
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_ADC_MspInit+0xf8>)
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_ADC_MspInit+0xf8>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0289      	lsls	r1, r1, #10
 8002710:	430a      	orrs	r2, r1
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_ADC_MspInit+0xf8>)
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	029b      	lsls	r3, r3, #10
 800271c:	4013      	ands	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|BAT_SEN_Pin|NTCR10_Pin
 8002722:	193b      	adds	r3, r7, r4
 8002724:	22bf      	movs	r2, #191	; 0xbf
 8002726:	601a      	str	r2, [r3, #0]
                          |POW_DET_SEN_Pin|CHG_CUR_Pin|IO1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002728:	193b      	adds	r3, r7, r4
 800272a:	2203      	movs	r2, #3
 800272c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	193b      	adds	r3, r7, r4
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002734:	193a      	adds	r2, r7, r4
 8002736:	2390      	movs	r3, #144	; 0x90
 8002738:	05db      	lsls	r3, r3, #23
 800273a:	0011      	movs	r1, r2
 800273c:	0018      	movs	r0, r3
 800273e:	f001 fe57 	bl	80043f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 8002744:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <HAL_ADC_MspInit+0x100>)
 8002746:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 800274a:	2200      	movs	r2, #0
 800274c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	0052      	lsls	r2, r2, #1
 8002760:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	00d2      	lsls	r2, r2, #3
 8002768:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 800276c:	2220      	movs	r2, #32
 800276e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 8002778:	0018      	movs	r0, r3
 800277a:	f001 fc51 	bl	8004020 <HAL_DMA_Init>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d001      	beq.n	8002786 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002782:	f7ff ff77 	bl	8002674 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8002786:	4a11      	ldr	r2, [pc, #68]	; (80027cc <HAL_ADC_MspInit+0x104>)
 8002788:	23a8      	movs	r3, #168	; 0xa8
 800278a:	58d3      	ldr	r3, [r2, r3]
 800278c:	490f      	ldr	r1, [pc, #60]	; (80027cc <HAL_ADC_MspInit+0x104>)
 800278e:	220f      	movs	r2, #15
 8002790:	4393      	bics	r3, r2
 8002792:	22a8      	movs	r2, #168	; 0xa8
 8002794:	508b      	str	r3, [r1, r2]
 8002796:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_ADC_MspInit+0x104>)
 8002798:	23a8      	movs	r3, #168	; 0xa8
 800279a:	58d3      	ldr	r3, [r2, r3]
 800279c:	490b      	ldr	r1, [pc, #44]	; (80027cc <HAL_ADC_MspInit+0x104>)
 800279e:	2201      	movs	r2, #1
 80027a0:	4313      	orrs	r3, r2
 80027a2:	22a8      	movs	r2, #168	; 0xa8
 80027a4:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_ADC_MspInit+0xfc>)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b00b      	add	sp, #44	; 0x2c
 80027b8:	bd90      	pop	{r4, r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	40012400 	.word	0x40012400
 80027c0:	40021000 	.word	0x40021000
 80027c4:	200018ec 	.word	0x200018ec
 80027c8:	40020008 	.word	0x40020008
 80027cc:	40020000 	.word	0x40020000

080027d0 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0b      	ldr	r2, [pc, #44]	; (800280c <HAL_ADC_MspDeInit+0x3c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d110      	bne.n	8002804 <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_ADC_MspDeInit+0x40>)
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_ADC_MspDeInit+0x40>)
 80027e8:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_ADC_MspDeInit+0x44>)
 80027ea:	400a      	ands	r2, r1
 80027ec:	619a      	str	r2, [r3, #24]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA7     ------> ADC_IN7
    */
    HAL_GPIO_DeInit(GPIOA, CS1_Pin|CS2_Pin|BAT_SEN_Pin|NTCR10_Pin
 80027ee:	2390      	movs	r3, #144	; 0x90
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	21bf      	movs	r1, #191	; 0xbf
 80027f4:	0018      	movs	r0, r3
 80027f6:	f001 ff6b 	bl	80046d0 <HAL_GPIO_DeInit>
                          |POW_DET_SEN_Pin|CHG_CUR_Pin|IO1_Pin);

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	0018      	movs	r0, r3
 8002800:	f001 fc56 	bl	80040b0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40012400 	.word	0x40012400
 8002810:	40021000 	.word	0x40021000
 8002814:	fffffdff 	.word	0xfffffdff

08002818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b08d      	sub	sp, #52	; 0x34
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	241c      	movs	r4, #28
 8002822:	193b      	adds	r3, r7, r4
 8002824:	0018      	movs	r0, r3
 8002826:	2314      	movs	r3, #20
 8002828:	001a      	movs	r2, r3
 800282a:	2100      	movs	r1, #0
 800282c:	f011 f83f 	bl	80138ae <memset>
  if(hi2c->Instance==I2C1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4aaf      	ldr	r2, [pc, #700]	; (8002af4 <HAL_I2C_MspInit+0x2dc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d000      	beq.n	800283c <HAL_I2C_MspInit+0x24>
 800283a:	e0a7      	b.n	800298c <HAL_I2C_MspInit+0x174>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283c:	4bae      	ldr	r3, [pc, #696]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	4bad      	ldr	r3, [pc, #692]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	02c9      	lsls	r1, r1, #11
 8002846:	430a      	orrs	r2, r1
 8002848:	615a      	str	r2, [r3, #20]
 800284a:	4bab      	ldr	r3, [pc, #684]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	02db      	lsls	r3, r3, #11
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002858:	0021      	movs	r1, r4
 800285a:	187b      	adds	r3, r7, r1
 800285c:	22c0      	movs	r2, #192	; 0xc0
 800285e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002860:	187b      	adds	r3, r7, r1
 8002862:	2212      	movs	r2, #18
 8002864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002866:	187b      	adds	r3, r7, r1
 8002868:	2201      	movs	r2, #1
 800286a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2203      	movs	r2, #3
 8002870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2201      	movs	r2, #1
 8002876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002878:	187b      	adds	r3, r7, r1
 800287a:	4aa0      	ldr	r2, [pc, #640]	; (8002afc <HAL_I2C_MspInit+0x2e4>)
 800287c:	0019      	movs	r1, r3
 800287e:	0010      	movs	r0, r2
 8002880:	f001 fdb6 	bl	80043f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002884:	4b9c      	ldr	r3, [pc, #624]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	4b9b      	ldr	r3, [pc, #620]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 800288a:	2180      	movs	r1, #128	; 0x80
 800288c:	0389      	lsls	r1, r1, #14
 800288e:	430a      	orrs	r2, r1
 8002890:	61da      	str	r2, [r3, #28]
 8002892:	4b99      	ldr	r3, [pc, #612]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	039b      	lsls	r3, r3, #14
 800289a:	4013      	ands	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80028a0:	4b97      	ldr	r3, [pc, #604]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 80028a2:	4a98      	ldr	r2, [pc, #608]	; (8002b04 <HAL_I2C_MspInit+0x2ec>)
 80028a4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a6:	4b96      	ldr	r3, [pc, #600]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ac:	4b94      	ldr	r3, [pc, #592]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b2:	4b93      	ldr	r3, [pc, #588]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b8:	4b91      	ldr	r3, [pc, #580]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028be:	4b90      	ldr	r3, [pc, #576]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80028c4:	4b8e      	ldr	r3, [pc, #568]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ca:	4b8d      	ldr	r3, [pc, #564]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80028d0:	4b8b      	ldr	r3, [pc, #556]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f001 fba4 	bl	8004020 <HAL_DMA_Init>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 80028dc:	f7ff feca 	bl	8002674 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_I2C1_RX);
 80028e0:	4a89      	ldr	r2, [pc, #548]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 80028e2:	23a8      	movs	r3, #168	; 0xa8
 80028e4:	58d3      	ldr	r3, [r2, r3]
 80028e6:	4988      	ldr	r1, [pc, #544]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 80028e8:	4a88      	ldr	r2, [pc, #544]	; (8002b0c <HAL_I2C_MspInit+0x2f4>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	22a8      	movs	r2, #168	; 0xa8
 80028ee:	508b      	str	r3, [r1, r2]
 80028f0:	4a85      	ldr	r2, [pc, #532]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 80028f2:	23a8      	movs	r3, #168	; 0xa8
 80028f4:	58d3      	ldr	r3, [r2, r3]
 80028f6:	4984      	ldr	r1, [pc, #528]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 80028f8:	2280      	movs	r2, #128	; 0x80
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4313      	orrs	r3, r2
 80028fe:	22a8      	movs	r2, #168	; 0xa8
 8002900:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a7e      	ldr	r2, [pc, #504]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
 8002908:	4b7d      	ldr	r3, [pc, #500]	; (8002b00 <HAL_I2C_MspInit+0x2e8>)
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800290e:	4b80      	ldr	r3, [pc, #512]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 8002910:	4a80      	ldr	r2, [pc, #512]	; (8002b14 <HAL_I2C_MspInit+0x2fc>)
 8002912:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002914:	4b7e      	ldr	r3, [pc, #504]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 8002916:	2210      	movs	r2, #16
 8002918:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800291a:	4b7d      	ldr	r3, [pc, #500]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002920:	4b7b      	ldr	r3, [pc, #492]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002926:	4b7a      	ldr	r3, [pc, #488]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292c:	4b78      	ldr	r3, [pc, #480]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002932:	4b77      	ldr	r3, [pc, #476]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002938:	4b75      	ldr	r3, [pc, #468]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800293e:	4b74      	ldr	r3, [pc, #464]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 8002940:	0018      	movs	r0, r3
 8002942:	f001 fb6d 	bl	8004020 <HAL_DMA_Init>
 8002946:	1e03      	subs	r3, r0, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 800294a:	f7ff fe93 	bl	8002674 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_I2C1_TX);
 800294e:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002950:	23a8      	movs	r3, #168	; 0xa8
 8002952:	58d3      	ldr	r3, [r2, r3]
 8002954:	496c      	ldr	r1, [pc, #432]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002956:	22f0      	movs	r2, #240	; 0xf0
 8002958:	4393      	bics	r3, r2
 800295a:	22a8      	movs	r2, #168	; 0xa8
 800295c:	508b      	str	r3, [r1, r2]
 800295e:	4a6a      	ldr	r2, [pc, #424]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002960:	23a8      	movs	r3, #168	; 0xa8
 8002962:	58d3      	ldr	r3, [r2, r3]
 8002964:	4968      	ldr	r1, [pc, #416]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002966:	2220      	movs	r2, #32
 8002968:	4313      	orrs	r3, r2
 800296a:	22a8      	movs	r2, #168	; 0xa8
 800296c:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a67      	ldr	r2, [pc, #412]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
 8002974:	4b66      	ldr	r3, [pc, #408]	; (8002b10 <HAL_I2C_MspInit+0x2f8>)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2017      	movs	r0, #23
 8002980:	f001 fafc 	bl	8003f7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002984:	2017      	movs	r0, #23
 8002986:	f001 fb0e 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800298a:	e0ae      	b.n	8002aea <HAL_I2C_MspInit+0x2d2>
  else if(hi2c->Instance==I2C2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a61      	ldr	r2, [pc, #388]	; (8002b18 <HAL_I2C_MspInit+0x300>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d000      	beq.n	8002998 <HAL_I2C_MspInit+0x180>
 8002996:	e0a8      	b.n	8002aea <HAL_I2C_MspInit+0x2d2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	02c9      	lsls	r1, r1, #11
 80029a2:	430a      	orrs	r2, r1
 80029a4:	615a      	str	r2, [r3, #20]
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	02db      	lsls	r3, r3, #11
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029b4:	211c      	movs	r1, #28
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	22c0      	movs	r2, #192	; 0xc0
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	2212      	movs	r2, #18
 80029c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c4:	187b      	adds	r3, r7, r1
 80029c6:	2201      	movs	r2, #1
 80029c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ca:	187b      	adds	r3, r7, r1
 80029cc:	2203      	movs	r2, #3
 80029ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2201      	movs	r2, #1
 80029d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_I2C_MspInit+0x2e4>)
 80029da:	0019      	movs	r1, r3
 80029dc:	0010      	movs	r0, r2
 80029de:	f001 fd07 	bl	80043f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029e2:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	03c9      	lsls	r1, r1, #15
 80029ec:	430a      	orrs	r2, r1
 80029ee:	61da      	str	r2, [r3, #28]
 80029f0:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <HAL_I2C_MspInit+0x2e0>)
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	03db      	lsls	r3, r3, #15
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a00:	4a47      	ldr	r2, [pc, #284]	; (8002b20 <HAL_I2C_MspInit+0x308>)
 8002a02:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a04:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0a:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a10:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002a22:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a28:	4b3c      	ldr	r3, [pc, #240]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a30:	0018      	movs	r0, r3
 8002a32:	f001 faf5 	bl	8004020 <HAL_DMA_Init>
 8002a36:	1e03      	subs	r3, r0, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_MspInit+0x226>
      Error_Handler();
 8002a3a:	f7ff fe1b 	bl	8002674 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH5_I2C2_RX);
 8002a3e:	4a32      	ldr	r2, [pc, #200]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002a40:	23a8      	movs	r3, #168	; 0xa8
 8002a42:	58d3      	ldr	r3, [r2, r3]
 8002a44:	4930      	ldr	r1, [pc, #192]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002a46:	4a37      	ldr	r2, [pc, #220]	; (8002b24 <HAL_I2C_MspInit+0x30c>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	22a8      	movs	r2, #168	; 0xa8
 8002a4c:	508b      	str	r3, [r1, r2]
 8002a4e:	4a2e      	ldr	r2, [pc, #184]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002a50:	23a8      	movs	r3, #168	; 0xa8
 8002a52:	58d3      	ldr	r3, [r2, r3]
 8002a54:	492c      	ldr	r1, [pc, #176]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	0292      	lsls	r2, r2, #10
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	22a8      	movs	r2, #168	; 0xa8
 8002a5e:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a2e      	ldr	r2, [pc, #184]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a64:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_I2C_MspInit+0x304>)
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <HAL_I2C_MspInit+0x314>)
 8002a70:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a72:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002a74:	2210      	movs	r2, #16
 8002a76:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7e:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a96:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f001 fabe 	bl	8004020 <HAL_DMA_Init>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_MspInit+0x294>
      Error_Handler();
 8002aa8:	f7ff fde4 	bl	8002674 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH4_I2C2_TX);
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002aae:	23a8      	movs	r3, #168	; 0xa8
 8002ab0:	58d3      	ldr	r3, [r2, r3]
 8002ab2:	4915      	ldr	r1, [pc, #84]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_I2C_MspInit+0x318>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	22a8      	movs	r2, #168	; 0xa8
 8002aba:	508b      	str	r3, [r1, r2]
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002abe:	23a8      	movs	r3, #168	; 0xa8
 8002ac0:	58d3      	ldr	r3, [r2, r3]
 8002ac2:	4911      	ldr	r1, [pc, #68]	; (8002b08 <HAL_I2C_MspInit+0x2f0>)
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	0192      	lsls	r2, r2, #6
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	22a8      	movs	r2, #168	; 0xa8
 8002acc:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_I2C_MspInit+0x310>)
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2018      	movs	r0, #24
 8002ae0:	f001 fa4c 	bl	8003f7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8002ae4:	2018      	movs	r0, #24
 8002ae6:	f001 fa5e 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b00d      	add	sp, #52	; 0x34
 8002af0:	bd90      	pop	{r4, r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	40005400 	.word	0x40005400
 8002af8:	40021000 	.word	0x40021000
 8002afc:	48000400 	.word	0x48000400
 8002b00:	200018a8 	.word	0x200018a8
 8002b04:	40020030 	.word	0x40020030
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	fffff0ff 	.word	0xfffff0ff
 8002b10:	200015f0 	.word	0x200015f0
 8002b14:	4002001c 	.word	0x4002001c
 8002b18:	40005800 	.word	0x40005800
 8002b1c:	200017b4 	.word	0x200017b4
 8002b20:	40020058 	.word	0x40020058
 8002b24:	fff0ffff 	.word	0xfff0ffff
 8002b28:	200017f8 	.word	0x200017f8
 8002b2c:	40020044 	.word	0x40020044
 8002b30:	ffff0fff 	.word	0xffff0fff

08002b34 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <HAL_I2C_MspDeInit+0xa4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d11d      	bne.n	8002b82 <HAL_I2C_MspDeInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b46:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <HAL_I2C_MspDeInit+0xa8>)
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_I2C_MspDeInit+0xa8>)
 8002b4c:	4924      	ldr	r1, [pc, #144]	; (8002be0 <HAL_I2C_MspDeInit+0xac>)
 8002b4e:	400a      	ands	r2, r1
 8002b50:	61da      	str	r2, [r3, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_I2C_MspDeInit+0xb0>)
 8002b54:	2140      	movs	r1, #64	; 0x40
 8002b56:	0018      	movs	r0, r3
 8002b58:	f001 fdba 	bl	80046d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002b5c:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_I2C_MspDeInit+0xb0>)
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0018      	movs	r0, r3
 8002b62:	f001 fdb5 	bl	80046d0 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f001 faa0 	bl	80040b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	0018      	movs	r0, r3
 8002b76:	f001 fa9b 	bl	80040b0 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8002b7a:	2017      	movs	r0, #23
 8002b7c:	f001 fa23 	bl	8003fc6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002b80:	e025      	b.n	8002bce <HAL_I2C_MspDeInit+0x9a>
  else if(hi2c->Instance==I2C2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_I2C_MspDeInit+0xb4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d120      	bne.n	8002bce <HAL_I2C_MspDeInit+0x9a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_I2C_MspDeInit+0xa8>)
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_I2C_MspDeInit+0xa8>)
 8002b92:	4916      	ldr	r1, [pc, #88]	; (8002bec <HAL_I2C_MspDeInit+0xb8>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4a11      	ldr	r2, [pc, #68]	; (8002be4 <HAL_I2C_MspDeInit+0xb0>)
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	f001 fd95 	bl	80046d0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <HAL_I2C_MspDeInit+0xb0>)
 8002bac:	0019      	movs	r1, r3
 8002bae:	0010      	movs	r0, r2
 8002bb0:	f001 fd8e 	bl	80046d0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f001 fa79 	bl	80040b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f001 fa74 	bl	80040b0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_IRQn);
 8002bc8:	2018      	movs	r0, #24
 8002bca:	f001 f9fc 	bl	8003fc6 <HAL_NVIC_DisableIRQ>
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	40005400 	.word	0x40005400
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	ffdfffff 	.word	0xffdfffff
 8002be4:	48000400 	.word	0x48000400
 8002be8:	40005800 	.word	0x40005800
 8002bec:	ffbfffff 	.word	0xffbfffff

08002bf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <HAL_RTC_MspInit+0x38>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10e      	bne.n	8002c20 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_RTC_MspInit+0x3c>)
 8002c04:	6a1a      	ldr	r2, [r3, #32]
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_RTC_MspInit+0x3c>)
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	0209      	lsls	r1, r1, #8
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	621a      	str	r2, [r3, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	2100      	movs	r1, #0
 8002c14:	2002      	movs	r0, #2
 8002c16:	f001 f9b1 	bl	8003f7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f001 f9c3 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40002800 	.word	0x40002800
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_RTC_MspDeInit+0x2c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <HAL_RTC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_RTC_MspDeInit+0x30>)
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RTC_MspDeInit+0x30>)
 8002c48:	4906      	ldr	r1, [pc, #24]	; (8002c64 <HAL_RTC_MspDeInit+0x34>)
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	621a      	str	r2, [r3, #32]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f001 f9b9 	bl	8003fc6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40002800 	.word	0x40002800
 8002c60:	40021000 	.word	0x40021000
 8002c64:	ffff7fff 	.word	0xffff7fff

08002c68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10c      	bne.n	8002c94 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x60>)
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x60>)
 8002c80:	2102      	movs	r1, #2
 8002c82:	430a      	orrs	r2, r1
 8002c84:	61da      	str	r2, [r3, #28]
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x60>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002c92:	e012      	b.n	8002cba <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM15)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <HAL_TIM_PWM_MspInit+0x64>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d10d      	bne.n	8002cba <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x60>)
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x60>)
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	0249      	lsls	r1, r1, #9
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	619a      	str	r2, [r3, #24]
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x60>)
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	025b      	lsls	r3, r3, #9
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40014000 	.word	0x40014000

08002cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <HAL_TIM_Base_MspInit+0x6c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d114      	bne.n	8002d0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_TIM_Base_MspInit+0x70>)
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_TIM_Base_MspInit+0x70>)
 8002ce8:	2110      	movs	r1, #16
 8002cea:	430a      	orrs	r2, r1
 8002cec:	61da      	str	r2, [r3, #28]
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_TIM_Base_MspInit+0x70>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	2011      	movs	r0, #17
 8002d00:	f001 f93c 	bl	8003f7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002d04:	2011      	movs	r0, #17
 8002d06:	f001 f94e 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002d0a:	e012      	b.n	8002d32 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM17)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <HAL_TIM_Base_MspInit+0x74>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10d      	bne.n	8002d32 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_TIM_Base_MspInit+0x70>)
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_TIM_Base_MspInit+0x70>)
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	02c9      	lsls	r1, r1, #11
 8002d20:	430a      	orrs	r2, r1
 8002d22:	619a      	str	r2, [r3, #24]
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_TIM_Base_MspInit+0x70>)
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	02db      	lsls	r3, r3, #11
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b004      	add	sp, #16
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	40001000 	.word	0x40001000
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40014800 	.word	0x40014800

08002d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b08b      	sub	sp, #44	; 0x2c
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	2414      	movs	r4, #20
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	0018      	movs	r0, r3
 8002d56:	2314      	movs	r3, #20
 8002d58:	001a      	movs	r2, r3
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f010 fda7 	bl	80138ae <memset>
  if(htim->Instance==TIM3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <HAL_TIM_MspPostInit+0x120>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d124      	bne.n	8002db4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_TIM_MspPostInit+0x124>)
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_TIM_MspPostInit+0x124>)
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	02c9      	lsls	r1, r1, #11
 8002d74:	430a      	orrs	r2, r1
 8002d76:	615a      	str	r2, [r3, #20]
 8002d78:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <HAL_TIM_MspPostInit+0x124>)
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	02db      	lsls	r3, r3, #11
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED2_B_Pin|LED2_R_Pin|LED2_G_Pin;
 8002d86:	0021      	movs	r1, r4
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2231      	movs	r2, #49	; 0x31
 8002d8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2202      	movs	r2, #2
 8002d92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	2201      	movs	r2, #1
 8002da4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	4a31      	ldr	r2, [pc, #196]	; (8002e70 <HAL_TIM_MspPostInit+0x128>)
 8002daa:	0019      	movs	r1, r3
 8002dac:	0010      	movs	r0, r2
 8002dae:	f001 fb1f 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002db2:	e054      	b.n	8002e5e <HAL_TIM_MspPostInit+0x116>
  else if(htim->Instance==TIM15)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <HAL_TIM_MspPostInit+0x12c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d125      	bne.n	8002e0a <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_TIM_MspPostInit+0x124>)
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_TIM_MspPostInit+0x124>)
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	02c9      	lsls	r1, r1, #11
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	615a      	str	r2, [r3, #20]
 8002dcc:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <HAL_TIM_MspPostInit+0x124>)
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	02db      	lsls	r3, r3, #11
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin;
 8002dda:	2114      	movs	r1, #20
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	22c0      	movs	r2, #192	; 0xc0
 8002de0:	0212      	lsls	r2, r2, #8
 8002de2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2202      	movs	r2, #2
 8002de8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002df6:	187b      	adds	r3, r7, r1
 8002df8:	2201      	movs	r2, #1
 8002dfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_TIM_MspPostInit+0x128>)
 8002e00:	0019      	movs	r1, r3
 8002e02:	0010      	movs	r0, r2
 8002e04:	f001 faf4 	bl	80043f0 <HAL_GPIO_Init>
}
 8002e08:	e029      	b.n	8002e5e <HAL_TIM_MspPostInit+0x116>
  else if(htim->Instance==TIM17)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <HAL_TIM_MspPostInit+0x130>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d124      	bne.n	8002e5e <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_TIM_MspPostInit+0x124>)
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <HAL_TIM_MspPostInit+0x124>)
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	02c9      	lsls	r1, r1, #11
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	615a      	str	r2, [r3, #20]
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_TIM_MspPostInit+0x124>)
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	02db      	lsls	r3, r3, #11
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED1_B_Pin;
 8002e30:	2114      	movs	r1, #20
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	2200      	movs	r2, #0
 8002e4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	2202      	movs	r2, #2
 8002e50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED1_B_GPIO_Port, &GPIO_InitStruct);
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <HAL_TIM_MspPostInit+0x128>)
 8002e56:	0019      	movs	r1, r3
 8002e58:	0010      	movs	r0, r2
 8002e5a:	f001 fac9 	bl	80043f0 <HAL_GPIO_Init>
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b00b      	add	sp, #44	; 0x2c
 8002e64:	bd90      	pop	{r4, r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	48000400 	.word	0x48000400
 8002e74:	40014000 	.word	0x40014000
 8002e78:	40014800 	.word	0x40014800

08002e7c <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <HAL_TIM_PWM_MspDeInit+0x40>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d106      	bne.n	8002e9c <HAL_TIM_PWM_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspDeInit 0 */

  /* USER CODE END TIM3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM3_CLK_DISABLE();
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_TIM_PWM_MspDeInit+0x44>)
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_TIM_PWM_MspDeInit+0x44>)
 8002e94:	2102      	movs	r1, #2
 8002e96:	438a      	bics	r2, r1
 8002e98:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM15_MspDeInit 1 */

  /* USER CODE END TIM15_MspDeInit 1 */
  }

}
 8002e9a:	e00a      	b.n	8002eb2 <HAL_TIM_PWM_MspDeInit+0x36>
  else if(htim_pwm->Instance==TIM15)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <HAL_TIM_PWM_MspDeInit+0x48>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d105      	bne.n	8002eb2 <HAL_TIM_PWM_MspDeInit+0x36>
    __HAL_RCC_TIM15_CLK_DISABLE();
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_TIM_PWM_MspDeInit+0x44>)
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_TIM_PWM_MspDeInit+0x44>)
 8002eac:	4906      	ldr	r1, [pc, #24]	; (8002ec8 <HAL_TIM_PWM_MspDeInit+0x4c>)
 8002eae:	400a      	ands	r2, r1
 8002eb0:	619a      	str	r2, [r3, #24]
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b002      	add	sp, #8
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	fffeffff 	.word	0xfffeffff

08002ecc <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <HAL_TIM_Base_MspDeInit+0x44>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d109      	bne.n	8002ef2 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_TIM_Base_MspDeInit+0x48>)
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_TIM_Base_MspDeInit+0x48>)
 8002ee4:	2110      	movs	r1, #16
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	61da      	str	r2, [r3, #28]

    /* TIM6 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_IRQn);
 8002eea:	2011      	movs	r0, #17
 8002eec:	f001 f86b 	bl	8003fc6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM17_MspDeInit 1 */

  /* USER CODE END TIM17_MspDeInit 1 */
  }

}
 8002ef0:	e00a      	b.n	8002f08 <HAL_TIM_Base_MspDeInit+0x3c>
  else if(htim_base->Instance==TIM17)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <HAL_TIM_Base_MspDeInit+0x4c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d105      	bne.n	8002f08 <HAL_TIM_Base_MspDeInit+0x3c>
    __HAL_RCC_TIM17_CLK_DISABLE();
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_TIM_Base_MspDeInit+0x48>)
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <HAL_TIM_Base_MspDeInit+0x48>)
 8002f02:	4906      	ldr	r1, [pc, #24]	; (8002f1c <HAL_TIM_Base_MspDeInit+0x50>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	619a      	str	r2, [r3, #24]
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40001000 	.word	0x40001000
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40014800 	.word	0x40014800
 8002f1c:	fffbffff 	.word	0xfffbffff

08002f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <NMI_Handler+0x4>

08002f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <HardFault_Handler+0x4>

08002f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f44:	f000 f8b2 	bl	80030ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC Interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <RTC_IRQHandler+0x1c>)
 8002f56:	0018      	movs	r0, r3
 8002f58:	f003 f8c4 	bl	80060e4 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <RTC_IRQHandler+0x1c>)
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f003 faa2 	bl	80064a8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	2000183c 	.word	0x2000183c

08002f70 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f74:	2001      	movs	r0, #1
 8002f76:	f001 fcb5 	bl	80048e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002f84:	2004      	movs	r0, #4
 8002f86:	f001 fcad 	bl	80048e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7); // IO1
 8002f94:	2080      	movs	r0, #128	; 0x80
 8002f96:	f001 fca5 	bl	80048e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8); // IO2
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f001 fca0 	bl	80048e4 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	015b      	lsls	r3, r3, #5
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f001 fc9b 	bl	80048e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f001 fc96 	bl	80048e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fc8:	480d      	ldr	r0, [pc, #52]	; (8003000 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fcc:	480d      	ldr	r0, [pc, #52]	; (8003004 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fce:	490e      	ldr	r1, [pc, #56]	; (8003008 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	; (800300c <LoopForever+0xe>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fe4:	4c0b      	ldr	r4, [pc, #44]	; (8003014 <LoopForever+0x16>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ff2:	f7ff ffe4 	bl	8002fbe <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ff6:	f010 fc2d 	bl	8013854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ffa:	f7fe fd3b 	bl	8001a74 <main>

08002ffe <LoopForever>:

LoopForever:
    b LoopForever
 8002ffe:	e7fe      	b.n	8002ffe <LoopForever>
  ldr   r0, =_estack
 8003000:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003008:	20000a00 	.word	0x20000a00
  ldr r2, =_sidata
 800300c:	0801486c 	.word	0x0801486c
  ldr r2, =_sbss
 8003010:	20000f98 	.word	0x20000f98
  ldr r4, =_ebss
 8003014:	20001a84 	.word	0x20001a84

08003018 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003018:	e7fe      	b.n	8003018 <ADC1_IRQHandler>
	...

0800301c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_Init+0x24>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_Init+0x24>)
 8003026:	2110      	movs	r1, #16
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800302c:	2001      	movs	r0, #1
 800302e:	f000 f809 	bl	8003044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003032:	f7ff fb25 	bl	8002680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	40022000 	.word	0x40022000

08003044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_InitTick+0x5c>)
 800304e:	681c      	ldr	r4, [r3, #0]
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_InitTick+0x60>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	0019      	movs	r1, r3
 8003056:	23fa      	movs	r3, #250	; 0xfa
 8003058:	0098      	lsls	r0, r3, #2
 800305a:	f7fd f853 	bl	8000104 <__udivsi3>
 800305e:	0003      	movs	r3, r0
 8003060:	0019      	movs	r1, r3
 8003062:	0020      	movs	r0, r4
 8003064:	f7fd f84e 	bl	8000104 <__udivsi3>
 8003068:	0003      	movs	r3, r0
 800306a:	0018      	movs	r0, r3
 800306c:	f000 ffbb 	bl	8003fe6 <HAL_SYSTICK_Config>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d001      	beq.n	8003078 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e00f      	b.n	8003098 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d80b      	bhi.n	8003096 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	2301      	movs	r3, #1
 8003082:	425b      	negs	r3, r3
 8003084:	2200      	movs	r2, #0
 8003086:	0018      	movs	r0, r3
 8003088:	f000 ff78 	bl	8003f7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_InitTick+0x64>)
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b003      	add	sp, #12
 800309e:	bd90      	pop	{r4, r7, pc}
 80030a0:	20000000 	.word	0x20000000
 80030a4:	20000008 	.word	0x20000008
 80030a8:	20000004 	.word	0x20000004

080030ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_IncTick+0x1c>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	001a      	movs	r2, r3
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_IncTick+0x20>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	18d2      	adds	r2, r2, r3
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_IncTick+0x20>)
 80030be:	601a      	str	r2, [r3, #0]
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	20000008 	.word	0x20000008
 80030cc:	20001970 	.word	0x20001970

080030d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  return uwTick;
 80030d4:	4b02      	ldr	r3, [pc, #8]	; (80030e0 <HAL_GetTick+0x10>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	20001970 	.word	0x20001970

080030e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7ff fff0 	bl	80030d0 <HAL_GetTick>
 80030f0:	0003      	movs	r3, r0
 80030f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3301      	adds	r3, #1
 80030fc:	d005      	beq.n	800310a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_Delay+0x44>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	001a      	movs	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	189b      	adds	r3, r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	f7ff ffe0 	bl	80030d0 <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d8f7      	bhi.n	800310c <HAL_Delay+0x28>
  {
  }
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	20000008 	.word	0x20000008

0800312c <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <HAL_SuspendTick+0x18>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_SuspendTick+0x18>)
 8003136:	2102      	movs	r1, #2
 8003138:	438a      	bics	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	e000e010 	.word	0xe000e010

08003148 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <HAL_ResumeTick+0x18>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_ResumeTick+0x18>)
 8003152:	2102      	movs	r1, #2
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	e000e010 	.word	0xe000e010

08003164 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316c:	230f      	movs	r3, #15
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e125      	b.n	80033ce <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2234      	movs	r2, #52	; 0x34
 8003194:	2100      	movs	r1, #0
 8003196:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	0018      	movs	r0, r3
 800319c:	f7ff fa94 	bl	80026c8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	2210      	movs	r2, #16
 80031a6:	4013      	ands	r3, r2
 80031a8:	d000      	beq.n	80031ac <HAL_ADC_Init+0x48>
 80031aa:	e103      	b.n	80033b4 <HAL_ADC_Init+0x250>
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d000      	beq.n	80031b8 <HAL_ADC_Init+0x54>
 80031b6:	e0fd      	b.n	80033b4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2204      	movs	r2, #4
 80031c0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80031c2:	d000      	beq.n	80031c6 <HAL_ADC_Init+0x62>
 80031c4:	e0f6      	b.n	80033b4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	4a83      	ldr	r2, [pc, #524]	; (80033d8 <HAL_ADC_Init+0x274>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	2202      	movs	r2, #2
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2203      	movs	r2, #3
 80031de:	4013      	ands	r3, r2
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d112      	bne.n	800320a <HAL_ADC_Init+0xa6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2201      	movs	r2, #1
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d009      	beq.n	8003206 <HAL_ADC_Init+0xa2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	401a      	ands	r2, r3
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	429a      	cmp	r2, r3
 8003204:	d101      	bne.n	800320a <HAL_ADC_Init+0xa6>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_ADC_Init+0xa8>
 800320a:	2300      	movs	r3, #0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d116      	bne.n	800323e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2218      	movs	r2, #24
 8003218:	4393      	bics	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	0899      	lsrs	r1, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4964      	ldr	r1, [pc, #400]	; (80033dc <HAL_ADC_Init+0x278>)
 800324a:	400a      	ands	r2, r1
 800324c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7e1b      	ldrb	r3, [r3, #24]
 8003252:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7e5b      	ldrb	r3, [r3, #25]
 8003258:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800325a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7e9b      	ldrb	r3, [r3, #26]
 8003260:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003262:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	2b01      	cmp	r3, #1
 800326a:	d002      	beq.n	8003272 <HAL_ADC_Init+0x10e>
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	015b      	lsls	r3, r3, #5
 8003270:	e000      	b.n	8003274 <HAL_ADC_Init+0x110>
 8003272:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003274:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800327a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d101      	bne.n	8003288 <HAL_ADC_Init+0x124>
 8003284:	2304      	movs	r3, #4
 8003286:	e000      	b.n	800328a <HAL_ADC_Init+0x126>
 8003288:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800328a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2124      	movs	r1, #36	; 0x24
 8003290:	5c5b      	ldrb	r3, [r3, r1]
 8003292:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003294:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4313      	orrs	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7edb      	ldrb	r3, [r3, #27]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d115      	bne.n	80032d0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7e9b      	ldrb	r3, [r3, #26]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	0252      	lsls	r2, r2, #9
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	e00b      	b.n	80032d0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	2220      	movs	r2, #32
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	2201      	movs	r2, #1
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	23c2      	movs	r3, #194	; 0xc2
 80032d6:	33ff      	adds	r3, #255	; 0xff
 80032d8:	429a      	cmp	r2, r3
 80032da:	d007      	beq.n	80032ec <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80032e4:	4313      	orrs	r3, r2
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68d9      	ldr	r1, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	055b      	lsls	r3, r3, #21
 8003304:	429a      	cmp	r2, r3
 8003306:	d01b      	beq.n	8003340 <HAL_ADC_Init+0x1dc>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d017      	beq.n	8003340 <HAL_ADC_Init+0x1dc>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2b02      	cmp	r3, #2
 8003316:	d013      	beq.n	8003340 <HAL_ADC_Init+0x1dc>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	2b03      	cmp	r3, #3
 800331e:	d00f      	beq.n	8003340 <HAL_ADC_Init+0x1dc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	2b04      	cmp	r3, #4
 8003326:	d00b      	beq.n	8003340 <HAL_ADC_Init+0x1dc>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2b05      	cmp	r3, #5
 800332e:	d007      	beq.n	8003340 <HAL_ADC_Init+0x1dc>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	2b06      	cmp	r3, #6
 8003336:	d003      	beq.n	8003340 <HAL_ADC_Init+0x1dc>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2b07      	cmp	r3, #7
 800333e:	d112      	bne.n	8003366 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2107      	movs	r1, #7
 800334c:	438a      	bics	r2, r1
 800334e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6959      	ldr	r1, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	2207      	movs	r2, #7
 800335c:	401a      	ands	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_ADC_Init+0x27c>)
 800336e:	4013      	ands	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d10b      	bne.n	800338e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	2203      	movs	r2, #3
 8003382:	4393      	bics	r3, r2
 8003384:	2201      	movs	r2, #1
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800338c:	e01c      	b.n	80033c8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	2212      	movs	r2, #18
 8003394:	4393      	bics	r3, r2
 8003396:	2210      	movs	r2, #16
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	2201      	movs	r2, #1
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80033aa:	230f      	movs	r3, #15
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80033b2:	e009      	b.n	80033c8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	2210      	movs	r2, #16
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80033c0:	230f      	movs	r3, #15
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033c8:	230f      	movs	r3, #15
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	781b      	ldrb	r3, [r3, #0]
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b004      	add	sp, #16
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	fffffefd 	.word	0xfffffefd
 80033dc:	fffe0219 	.word	0xfffe0219
 80033e0:	833fffe7 	.word	0x833fffe7

080033e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f0:	2317      	movs	r3, #23
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2204      	movs	r2, #4
 8003400:	4013      	ands	r3, r2
 8003402:	d15e      	bne.n	80034c2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2234      	movs	r2, #52	; 0x34
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_ADC_Start_DMA+0x2e>
 800340e:	2302      	movs	r3, #2
 8003410:	e05e      	b.n	80034d0 <HAL_ADC_Start_DMA+0xec>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2234      	movs	r2, #52	; 0x34
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	7e5b      	ldrb	r3, [r3, #25]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d007      	beq.n	8003432 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003422:	2317      	movs	r3, #23
 8003424:	18fc      	adds	r4, r7, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fa6f 	bl	800390c <ADC_Enable>
 800342e:	0003      	movs	r3, r0
 8003430:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003432:	2317      	movs	r3, #23
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d146      	bne.n	80034ca <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_ADC_Start_DMA+0xf4>)
 8003442:	4013      	ands	r3, r2
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	0052      	lsls	r2, r2, #1
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2234      	movs	r2, #52	; 0x34
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_ADC_Start_DMA+0xf8>)
 8003462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <HAL_ADC_Start_DMA+0xfc>)
 800346a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <HAL_ADC_Start_DMA+0x100>)
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	221c      	movs	r2, #28
 800347a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2110      	movs	r1, #16
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2101      	movs	r1, #1
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3340      	adds	r3, #64	; 0x40
 80034a6:	0019      	movs	r1, r3
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f000 fe49 	bl	8004142 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2104      	movs	r1, #4
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	e003      	b.n	80034ca <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034c2:	2317      	movs	r3, #23
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2202      	movs	r2, #2
 80034c8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80034ca:	2317      	movs	r3, #23
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	781b      	ldrb	r3, [r3, #0]
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b007      	add	sp, #28
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	fffff0fe 	.word	0xfffff0fe
 80034dc:	08003b65 	.word	0x08003b65
 80034e0:	08003c19 	.word	0x08003c19
 80034e4:	08003c37 	.word	0x08003c37

080034e8 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80034e8:	b5b0      	push	{r4, r5, r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f0:	230f      	movs	r3, #15
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2234      	movs	r2, #52	; 0x34
 80034fc:	5c9b      	ldrb	r3, [r3, r2]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_ADC_Stop_DMA+0x1e>
 8003502:	2302      	movs	r3, #2
 8003504:	e05f      	b.n	80035c6 <HAL_ADC_Stop_DMA+0xde>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2234      	movs	r2, #52	; 0x34
 800350a:	2101      	movs	r1, #1
 800350c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800350e:	250f      	movs	r5, #15
 8003510:	197c      	adds	r4, r7, r5
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 fadf 	bl	8003ad8 <ADC_ConversionStop>
 800351a:	0003      	movs	r3, r0
 800351c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800351e:	0028      	movs	r0, r5
 8003520:	183b      	adds	r3, r7, r0
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d147      	bne.n	80035b8 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2101      	movs	r1, #1
 8003534:	438a      	bics	r2, r1
 8003536:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	2221      	movs	r2, #33	; 0x21
 800353e:	5c9b      	ldrb	r3, [r3, r2]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d112      	bne.n	800356c <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	0005      	movs	r5, r0
 800354c:	183c      	adds	r4, r7, r0
 800354e:	0018      	movs	r0, r3
 8003550:	f000 fe5d 	bl	800420e <HAL_DMA_Abort>
 8003554:	0003      	movs	r3, r0
 8003556:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003558:	197b      	adds	r3, r7, r5
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	2240      	movs	r2, #64	; 0x40
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2110      	movs	r1, #16
 8003578:	438a      	bics	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 800357c:	220f      	movs	r2, #15
 800357e:	18bb      	adds	r3, r7, r2
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003586:	18bc      	adds	r4, r7, r2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 fa3a 	bl	8003a04 <ADC_Disable>
 8003590:	0003      	movs	r3, r0
 8003592:	7023      	strb	r3, [r4, #0]
 8003594:	e003      	b.n	800359e <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	0018      	movs	r0, r3
 800359a:	f000 fa33 	bl	8003a04 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800359e:	230f      	movs	r3, #15
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <HAL_ADC_Stop_DMA+0xe8>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	2201      	movs	r2, #1
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2234      	movs	r2, #52	; 0x34
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80035c0:	230f      	movs	r3, #15
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	781b      	ldrb	r3, [r3, #0]
}
 80035c6:	0018      	movs	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b004      	add	sp, #16
 80035cc:	bdb0      	pop	{r4, r5, r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	fffffefe 	.word	0xfffffefe

080035d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800360e:	230f      	movs	r3, #15
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	055b      	lsls	r3, r3, #21
 8003622:	429a      	cmp	r2, r3
 8003624:	d011      	beq.n	800364a <HAL_ADC_ConfigChannel+0x46>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d00d      	beq.n	800364a <HAL_ADC_ConfigChannel+0x46>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	2b02      	cmp	r3, #2
 8003634:	d009      	beq.n	800364a <HAL_ADC_ConfigChannel+0x46>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	2b03      	cmp	r3, #3
 800363c:	d005      	beq.n	800364a <HAL_ADC_ConfigChannel+0x46>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	2b04      	cmp	r3, #4
 8003644:	d001      	beq.n	800364a <HAL_ADC_ConfigChannel+0x46>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2234      	movs	r2, #52	; 0x34
 800364e:	5c9b      	ldrb	r3, [r3, r2]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x54>
 8003654:	2302      	movs	r3, #2
 8003656:	e0bb      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x1cc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2234      	movs	r2, #52	; 0x34
 800365c:	2101      	movs	r1, #1
 800365e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2204      	movs	r2, #4
 8003668:	4013      	ands	r3, r2
 800366a:	d000      	beq.n	800366e <HAL_ADC_ConfigChannel+0x6a>
 800366c:	e09f      	b.n	80037ae <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4a59      	ldr	r2, [pc, #356]	; (80037d8 <HAL_ADC_ConfigChannel+0x1d4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d100      	bne.n	800367a <HAL_ADC_ConfigChannel+0x76>
 8003678:	e077      	b.n	800376a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2201      	movs	r2, #1
 8003686:	409a      	lsls	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	055b      	lsls	r3, r3, #21
 8003698:	429a      	cmp	r2, r3
 800369a:	d037      	beq.n	800370c <HAL_ADC_ConfigChannel+0x108>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d033      	beq.n	800370c <HAL_ADC_ConfigChannel+0x108>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d02f      	beq.n	800370c <HAL_ADC_ConfigChannel+0x108>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d02b      	beq.n	800370c <HAL_ADC_ConfigChannel+0x108>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d027      	beq.n	800370c <HAL_ADC_ConfigChannel+0x108>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d023      	beq.n	800370c <HAL_ADC_ConfigChannel+0x108>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d01f      	beq.n	800370c <HAL_ADC_ConfigChannel+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	2b07      	cmp	r3, #7
 80036d2:	d01b      	beq.n	800370c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2107      	movs	r1, #7
 80036e0:	400b      	ands	r3, r1
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d012      	beq.n	800370c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2107      	movs	r1, #7
 80036f2:	438a      	bics	r2, r1
 80036f4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6959      	ldr	r1, [r3, #20]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2207      	movs	r2, #7
 8003702:	401a      	ands	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b10      	cmp	r3, #16
 8003712:	d003      	beq.n	800371c <HAL_ADC_ConfigChannel+0x118>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b11      	cmp	r3, #17
 800371a:	d152      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800371c:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <HAL_ADC_ConfigChannel+0x1d8>)
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b10      	cmp	r3, #16
 8003726:	d102      	bne.n	800372e <HAL_ADC_ConfigChannel+0x12a>
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	e001      	b.n	8003732 <HAL_ADC_ConfigChannel+0x12e>
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	03db      	lsls	r3, r3, #15
 8003732:	4a2a      	ldr	r2, [pc, #168]	; (80037dc <HAL_ADC_ConfigChannel+0x1d8>)
 8003734:	430b      	orrs	r3, r1
 8003736:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b10      	cmp	r3, #16
 800373e:	d140      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003740:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_ADC_ConfigChannel+0x1dc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4927      	ldr	r1, [pc, #156]	; (80037e4 <HAL_ADC_ConfigChannel+0x1e0>)
 8003746:	0018      	movs	r0, r3
 8003748:	f7fc fcdc 	bl	8000104 <__udivsi3>
 800374c:	0003      	movs	r3, r0
 800374e:	001a      	movs	r2, r3
 8003750:	0013      	movs	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	189b      	adds	r3, r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800375a:	e002      	b.n	8003762 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	3b01      	subs	r3, #1
 8003760:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f9      	bne.n	800375c <HAL_ADC_ConfigChannel+0x158>
 8003768:	e02b      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2101      	movs	r1, #1
 8003776:	4099      	lsls	r1, r3
 8003778:	000b      	movs	r3, r1
 800377a:	43d9      	mvns	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	400a      	ands	r2, r1
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b10      	cmp	r3, #16
 800378a:	d003      	beq.n	8003794 <HAL_ADC_ConfigChannel+0x190>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b11      	cmp	r3, #17
 8003792:	d116      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_ADC_ConfigChannel+0x1d8>)
 8003796:	6819      	ldr	r1, [r3, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b10      	cmp	r3, #16
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x1a0>
 80037a0:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <HAL_ADC_ConfigChannel+0x1e4>)
 80037a2:	e000      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x1a2>
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_ADC_ConfigChannel+0x1e8>)
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <HAL_ADC_ConfigChannel+0x1d8>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e009      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	2220      	movs	r2, #32
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80037ba:	230f      	movs	r3, #15
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2234      	movs	r2, #52	; 0x34
 80037c6:	2100      	movs	r1, #0
 80037c8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80037ca:	230f      	movs	r3, #15
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	781b      	ldrb	r3, [r3, #0]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	00001001 	.word	0x00001001
 80037dc:	40012708 	.word	0x40012708
 80037e0:	20000000 	.word	0x20000000
 80037e4:	000f4240 	.word	0x000f4240
 80037e8:	ff7fffff 	.word	0xff7fffff
 80037ec:	ffbfffff 	.word	0xffbfffff

080037f0 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037fa:	2317      	movs	r3, #23
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2234      	movs	r2, #52	; 0x34
 8003806:	5c9b      	ldrb	r3, [r3, r2]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_ADC_AnalogWDGConfig+0x20>
 800380c:	2302      	movs	r3, #2
 800380e:	e074      	b.n	80038fa <HAL_ADC_AnalogWDGConfig+0x10a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2234      	movs	r2, #52	; 0x34
 8003814:	2101      	movs	r1, #1
 8003816:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2204      	movs	r2, #4
 8003820:	4013      	ands	r3, r2
 8003822:	d159      	bne.n	80038d8 <HAL_ADC_AnalogWDGConfig+0xe8>
    /* Configuration of analog watchdog:                                      */
    /*  - Set the analog watchdog enable mode: one or overall group of        */
    /*    channels.                                                           */
    /*  - Set the Analog watchdog channel (is not used if watchdog            */
    /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                           */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4935      	ldr	r1, [pc, #212]	; (8003904 <HAL_ADC_AnalogWDGConfig+0x114>)
 8003830:	400a      	ands	r2, r1
 8003832:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_AWDEN  |
                                ADC_CFGR1_AWDCH   );
    
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68d9      	ldr	r1, [r3, #12]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
                               ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	069b      	lsls	r3, r3, #26
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	60da      	str	r2, [r3, #12]

    /* Shift the offset in function of the selected ADC resolution: Thresholds*/
    /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0   */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	08db      	lsrs	r3, r3, #3
 800385a:	2103      	movs	r1, #3
 800385c:	400b      	ands	r3, r1
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	409a      	lsls	r2, r3
 8003862:	0013      	movs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	08db      	lsrs	r3, r3, #3
 8003872:	2103      	movs	r1, #3
 8003874:	400b      	ands	r3, r1
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	409a      	lsls	r2, r3
 800387a:	0013      	movs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
    
    /* Set the high and low thresholds */
    hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a1a      	ldr	r2, [r3, #32]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	491f      	ldr	r1, [pc, #124]	; (8003908 <HAL_ADC_AnalogWDGConfig+0x118>)
 800388a:	400a      	ands	r2, r1
 800388c:	621a      	str	r2, [r3, #32]
    hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a19      	ldr	r1, [r3, #32]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	041a      	lsls	r2, r3, #16
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	621a      	str	r2, [r3, #32]
                             tmpAWDLowThresholdShifted                           );
    
    /* Clear the ADC Analog watchdog flag (in case of left enabled by         */
    /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler()   */
    /* or HAL_ADC_PollForEvent().                                             */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	601a      	str	r2, [r3, #0]
    
    /* Configure ADC Analog watchdog interrupt */
    if(AnalogWDGConfig->ITMode == ENABLE)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	7a1b      	ldrb	r3, [r3, #8]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d108      	bne.n	80038c6 <HAL_ADC_AnalogWDGConfig+0xd6>
    {
      /* Enable the ADC Analog watchdog interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2180      	movs	r1, #128	; 0x80
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	e012      	b.n	80038ec <HAL_ADC_AnalogWDGConfig+0xfc>
    }
    else
    {
      /* Disable the ADC Analog watchdog interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	438a      	bics	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e009      	b.n	80038ec <HAL_ADC_AnalogWDGConfig+0xfc>
  /* If a conversion is on going on regular group, no update could be done    */
  /* on neither of the AWD configuration structure parameters.                */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	2220      	movs	r2, #32
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80038e4:	2317      	movs	r3, #23
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
  }
  
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2234      	movs	r2, #52	; 0x34
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80038f4:	2317      	movs	r3, #23
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	781b      	ldrb	r3, [r3, #0]
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b006      	add	sp, #24
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	833fffff 	.word	0x833fffff
 8003908:	f000f000 	.word	0xf000f000

0800390c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2203      	movs	r2, #3
 8003924:	4013      	ands	r3, r2
 8003926:	2b01      	cmp	r3, #1
 8003928:	d112      	bne.n	8003950 <ADC_Enable+0x44>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2201      	movs	r2, #1
 8003932:	4013      	ands	r3, r2
 8003934:	2b01      	cmp	r3, #1
 8003936:	d009      	beq.n	800394c <ADC_Enable+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	401a      	ands	r2, r3
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	429a      	cmp	r2, r3
 800394a:	d101      	bne.n	8003950 <ADC_Enable+0x44>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <ADC_Enable+0x46>
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d14b      	bne.n	80039ee <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <ADC_Enable+0xec>)
 800395e:	4013      	ands	r3, r2
 8003960:	d00d      	beq.n	800397e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	2210      	movs	r2, #16
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	2201      	movs	r2, #1
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e038      	b.n	80039f0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2101      	movs	r1, #1
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <ADC_Enable+0xf0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	491b      	ldr	r1, [pc, #108]	; (8003a00 <ADC_Enable+0xf4>)
 8003994:	0018      	movs	r0, r3
 8003996:	f7fc fbb5 	bl	8000104 <__udivsi3>
 800399a:	0003      	movs	r3, r0
 800399c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800399e:	e002      	b.n	80039a6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f9      	bne.n	80039a0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ac:	f7ff fb90 	bl	80030d0 <HAL_GetTick>
 80039b0:	0003      	movs	r3, r0
 80039b2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80039b4:	e014      	b.n	80039e0 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039b6:	f7ff fb8b 	bl	80030d0 <HAL_GetTick>
 80039ba:	0002      	movs	r2, r0
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d90d      	bls.n	80039e0 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	2210      	movs	r2, #16
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	2201      	movs	r2, #1
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e007      	b.n	80039f0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2201      	movs	r2, #1
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d1e3      	bne.n	80039b6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	80000017 	.word	0x80000017
 80039fc:	20000000 	.word	0x20000000
 8003a00:	000f4240 	.word	0x000f4240

08003a04 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2203      	movs	r2, #3
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d112      	bne.n	8003a44 <ADC_Disable+0x40>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2201      	movs	r2, #1
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d009      	beq.n	8003a40 <ADC_Disable+0x3c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	401a      	ands	r2, r3
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d101      	bne.n	8003a44 <ADC_Disable+0x40>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <ADC_Disable+0x42>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d041      	beq.n	8003ace <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2205      	movs	r2, #5
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d110      	bne.n	8003a7a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2102      	movs	r1, #2
 8003a64:	430a      	orrs	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a70:	f7ff fb2e 	bl	80030d0 <HAL_GetTick>
 8003a74:	0003      	movs	r3, r0
 8003a76:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a78:	e022      	b.n	8003ac0 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	2210      	movs	r2, #16
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e01c      	b.n	8003ad0 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a96:	f7ff fb1b 	bl	80030d0 <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d90d      	bls.n	8003ac0 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d0e3      	beq.n	8003a96 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b004      	add	sp, #16
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2204      	movs	r2, #4
 8003aec:	4013      	ands	r3, r2
 8003aee:	d034      	beq.n	8003b5a <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2204      	movs	r2, #4
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d10d      	bne.n	8003b1a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b08:	d107      	bne.n	8003b1a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2110      	movs	r1, #16
 8003b16:	430a      	orrs	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b1a:	f7ff fad9 	bl	80030d0 <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003b22:	e014      	b.n	8003b4e <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b24:	f7ff fad4 	bl	80030d0 <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d90d      	bls.n	8003b4e <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	2210      	movs	r2, #16
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	2201      	movs	r2, #1
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e006      	b.n	8003b5c <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2204      	movs	r2, #4
 8003b56:	4013      	ands	r3, r2
 8003b58:	d1e4      	bne.n	8003b24 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b004      	add	sp, #16
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	2250      	movs	r2, #80	; 0x50
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d140      	bne.n	8003bfe <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	0092      	lsls	r2, r2, #2
 8003b84:	431a      	orrs	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	23c0      	movs	r3, #192	; 0xc0
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	4013      	ands	r3, r2
 8003b96:	d12d      	bne.n	8003bf4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d129      	bne.n	8003bf4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d122      	bne.n	8003bf4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d110      	bne.n	8003bdc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	210c      	movs	r1, #12
 8003bc6:	438a      	bics	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <ADC_DMAConvCplt+0xb0>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8003bda:	e00b      	b.n	8003bf4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	2220      	movs	r2, #32
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	2201      	movs	r2, #1
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7ff fcec 	bl	80035d4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003bfc:	e005      	b.n	8003c0a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	0010      	movs	r0, r2
 8003c08:	4798      	blx	r3
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	fffffefe 	.word	0xfffffefe

08003c18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7ff fcdb 	bl	80035e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b004      	add	sp, #16
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	2204      	movs	r2, #4
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7ff fcc8 	bl	80035f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c74:	2317      	movs	r3, #23
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2234      	movs	r2, #52	; 0x34
 8003c88:	5c9b      	ldrb	r3, [r3, r2]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADCEx_Calibration_Start+0x26>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e084      	b.n	8003d9c <HAL_ADCEx_Calibration_Start+0x130>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2234      	movs	r2, #52	; 0x34
 8003c96:	2101      	movs	r1, #1
 8003c98:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d112      	bne.n	8003cce <HAL_ADCEx_Calibration_Start+0x62>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d009      	beq.n	8003cca <HAL_ADCEx_Calibration_Start+0x5e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d101      	bne.n	8003cce <HAL_ADCEx_Calibration_Start+0x62>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_ADCEx_Calibration_Start+0x64>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d152      	bne.n	8003d7a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	4a32      	ldr	r2, [pc, #200]	; (8003da4 <HAL_ADCEx_Calibration_Start+0x138>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2202      	movs	r2, #2
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2203      	movs	r2, #3
 8003cec:	4013      	ands	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2103      	movs	r1, #3
 8003cfc:	438a      	bics	r2, r1
 8003cfe:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2180      	movs	r1, #128	; 0x80
 8003d0c:	0609      	lsls	r1, r1, #24
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003d12:	f7ff f9dd 	bl	80030d0 <HAL_GetTick>
 8003d16:	0003      	movs	r3, r0
 8003d18:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003d1a:	e014      	b.n	8003d46 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003d1c:	f7ff f9d8 	bl	80030d0 <HAL_GetTick>
 8003d20:	0002      	movs	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d90d      	bls.n	8003d46 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	2212      	movs	r2, #18
 8003d30:	4393      	bics	r3, r2
 8003d32:	2210      	movs	r2, #16
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2234      	movs	r2, #52	; 0x34
 8003d3e:	2100      	movs	r1, #0
 8003d40:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e02a      	b.n	8003d9c <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	0fdb      	lsrs	r3, r3, #31
 8003d4e:	07da      	lsls	r2, r3, #31
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d0e1      	beq.n	8003d1c <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68d9      	ldr	r1, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	4393      	bics	r3, r2
 8003d70:	2201      	movs	r2, #1
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
 8003d78:	e009      	b.n	8003d8e <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	2220      	movs	r2, #32
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003d86:	2317      	movs	r3, #23
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2234      	movs	r2, #52	; 0x34
 8003d92:	2100      	movs	r1, #0
 8003d94:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003d96:	2317      	movs	r3, #23
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	781b      	ldrb	r3, [r3, #0]
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b006      	add	sp, #24
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	fffffefd 	.word	0xfffffefd

08003da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	0002      	movs	r2, r0
 8003db0:	1dfb      	adds	r3, r7, #7
 8003db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003db4:	1dfb      	adds	r3, r7, #7
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dba:	d809      	bhi.n	8003dd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dbc:	1dfb      	adds	r3, r7, #7
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	231f      	movs	r3, #31
 8003dc4:	401a      	ands	r2, r3
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__NVIC_EnableIRQ+0x30>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4091      	lsls	r1, r2
 8003dcc:	000a      	movs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
  }
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	e000e100 	.word	0xe000e100

08003ddc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	0002      	movs	r2, r0
 8003de4:	1dfb      	adds	r3, r7, #7
 8003de6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003de8:	1dfb      	adds	r3, r7, #7
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b7f      	cmp	r3, #127	; 0x7f
 8003dee:	d810      	bhi.n	8003e12 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df0:	1dfb      	adds	r3, r7, #7
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	001a      	movs	r2, r3
 8003df6:	231f      	movs	r3, #31
 8003df8:	4013      	ands	r3, r2
 8003dfa:	4908      	ldr	r1, [pc, #32]	; (8003e1c <__NVIC_DisableIRQ+0x40>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	0013      	movs	r3, r2
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e06:	f3bf 8f4f 	dsb	sy
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003e0c:	f3bf 8f6f 	isb	sy
}
 8003e10:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b002      	add	sp, #8
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	e000e100 	.word	0xe000e100

08003e20 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	0002      	movs	r2, r0
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	1dfb      	adds	r3, r7, #7
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b7f      	cmp	r3, #127	; 0x7f
 8003e32:	d80a      	bhi.n	8003e4a <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e34:	1dfb      	adds	r3, r7, #7
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	001a      	movs	r2, r3
 8003e3a:	231f      	movs	r3, #31
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	4905      	ldr	r1, [pc, #20]	; (8003e54 <__NVIC_ClearPendingIRQ+0x34>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	409a      	lsls	r2, r3
 8003e44:	23c0      	movs	r3, #192	; 0xc0
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	50ca      	str	r2, [r1, r3]
  }
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	e000e100 	.word	0xe000e100

08003e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	0002      	movs	r2, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	1dfb      	adds	r3, r7, #7
 8003e64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e66:	1dfb      	adds	r3, r7, #7
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e6c:	d828      	bhi.n	8003ec0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e6e:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <__NVIC_SetPriority+0xd4>)
 8003e70:	1dfb      	adds	r3, r7, #7
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b25b      	sxtb	r3, r3
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	33c0      	adds	r3, #192	; 0xc0
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	589b      	ldr	r3, [r3, r2]
 8003e7e:	1dfa      	adds	r2, r7, #7
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	0011      	movs	r1, r2
 8003e84:	2203      	movs	r2, #3
 8003e86:	400a      	ands	r2, r1
 8003e88:	00d2      	lsls	r2, r2, #3
 8003e8a:	21ff      	movs	r1, #255	; 0xff
 8003e8c:	4091      	lsls	r1, r2
 8003e8e:	000a      	movs	r2, r1
 8003e90:	43d2      	mvns	r2, r2
 8003e92:	401a      	ands	r2, r3
 8003e94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	22ff      	movs	r2, #255	; 0xff
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	4003      	ands	r3, r0
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eac:	481f      	ldr	r0, [pc, #124]	; (8003f2c <__NVIC_SetPriority+0xd4>)
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	33c0      	adds	r3, #192	; 0xc0
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ebe:	e031      	b.n	8003f24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ec0:	4a1b      	ldr	r2, [pc, #108]	; (8003f30 <__NVIC_SetPriority+0xd8>)
 8003ec2:	1dfb      	adds	r3, r7, #7
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	230f      	movs	r3, #15
 8003eca:	400b      	ands	r3, r1
 8003ecc:	3b08      	subs	r3, #8
 8003ece:	089b      	lsrs	r3, r3, #2
 8003ed0:	3306      	adds	r3, #6
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1dfa      	adds	r2, r7, #7
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	0011      	movs	r1, r2
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	00d2      	lsls	r2, r2, #3
 8003ee6:	21ff      	movs	r1, #255	; 0xff
 8003ee8:	4091      	lsls	r1, r2
 8003eea:	000a      	movs	r2, r1
 8003eec:	43d2      	mvns	r2, r2
 8003eee:	401a      	ands	r2, r3
 8003ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	019b      	lsls	r3, r3, #6
 8003ef6:	22ff      	movs	r2, #255	; 0xff
 8003ef8:	401a      	ands	r2, r3
 8003efa:	1dfb      	adds	r3, r7, #7
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	0018      	movs	r0, r3
 8003f00:	2303      	movs	r3, #3
 8003f02:	4003      	ands	r3, r0
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f08:	4809      	ldr	r0, [pc, #36]	; (8003f30 <__NVIC_SetPriority+0xd8>)
 8003f0a:	1dfb      	adds	r3, r7, #7
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	001c      	movs	r4, r3
 8003f10:	230f      	movs	r3, #15
 8003f12:	4023      	ands	r3, r4
 8003f14:	3b08      	subs	r3, #8
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	3306      	adds	r3, #6
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	18c3      	adds	r3, r0, r3
 8003f20:	3304      	adds	r3, #4
 8003f22:	601a      	str	r2, [r3, #0]
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b003      	add	sp, #12
 8003f2a:	bd90      	pop	{r4, r7, pc}
 8003f2c:	e000e100 	.word	0xe000e100
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	1e5a      	subs	r2, r3, #1
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	045b      	lsls	r3, r3, #17
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d301      	bcc.n	8003f4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e010      	b.n	8003f6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <SysTick_Config+0x44>)
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	3a01      	subs	r2, #1
 8003f52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f54:	2301      	movs	r3, #1
 8003f56:	425b      	negs	r3, r3
 8003f58:	2103      	movs	r1, #3
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff ff7c 	bl	8003e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <SysTick_Config+0x44>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f66:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <SysTick_Config+0x44>)
 8003f68:	2207      	movs	r2, #7
 8003f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	0018      	movs	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b002      	add	sp, #8
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	e000e010 	.word	0xe000e010

08003f7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	210f      	movs	r1, #15
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	1c02      	adds	r2, r0, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b25b      	sxtb	r3, r3
 8003f96:	0011      	movs	r1, r2
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff ff5d 	bl	8003e58 <__NVIC_SetPriority>
}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b004      	add	sp, #16
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	0002      	movs	r2, r0
 8003fae:	1dfb      	adds	r3, r7, #7
 8003fb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	b25b      	sxtb	r3, r3
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7ff fef5 	bl	8003da8 <__NVIC_EnableIRQ>
}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	0002      	movs	r2, r0
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fd2:	1dfb      	adds	r3, r7, #7
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	b25b      	sxtb	r3, r3
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff feff 	bl	8003ddc <__NVIC_DisableIRQ>
}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b002      	add	sp, #8
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff ff9f 	bl	8003f34 <SysTick_Config>
 8003ff6:	0003      	movs	r3, r0
}
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	0002      	movs	r2, r0
 8004008:	1dfb      	adds	r3, r7, #7
 800400a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800400c:	1dfb      	adds	r3, r7, #7
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b25b      	sxtb	r3, r3
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff ff04 	bl	8003e20 <__NVIC_ClearPendingIRQ>
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e036      	b.n	80040a4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2221      	movs	r2, #33	; 0x21
 800403a:	2102      	movs	r1, #2
 800403c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <HAL_DMA_Init+0x8c>)
 800404a:	4013      	ands	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0018      	movs	r0, r3
 8004088:	f000 f926 	bl	80042d8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2221      	movs	r2, #33	; 0x21
 8004096:	2101      	movs	r1, #1
 8004098:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	2100      	movs	r1, #0
 80040a0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}  
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b004      	add	sp, #16
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	ffffc00f 	.word	0xffffc00f

080040b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e03b      	b.n	800413a <HAL_DMA_DeInit+0x8a>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2101      	movs	r1, #1
 80040ce:	438a      	bics	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2200      	movs	r2, #0
 80040e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	60da      	str	r2, [r3, #12]

/* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0018      	movs	r0, r3
 80040f6:	f000 f8ef 	bl	80042d8 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	2101      	movs	r1, #1
 8004104:	4091      	lsls	r1, r2
 8004106:	000a      	movs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2221      	movs	r2, #33	; 0x21
 800412c:	2100      	movs	r1, #0
 800412e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	2100      	movs	r1, #0
 8004136:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b002      	add	sp, #8
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004150:	2317      	movs	r3, #23
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	5c9b      	ldrb	r3, [r3, r2]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_DMA_Start_IT+0x24>
 8004162:	2302      	movs	r3, #2
 8004164:	e04f      	b.n	8004206 <HAL_DMA_Start_IT+0xc4>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	2101      	movs	r1, #1
 800416c:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2221      	movs	r2, #33	; 0x21
 8004172:	5c9b      	ldrb	r3, [r3, r2]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d13a      	bne.n	80041f0 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2221      	movs	r2, #33	; 0x21
 800417e:	2102      	movs	r1, #2
 8004180:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2101      	movs	r1, #1
 8004194:	438a      	bics	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f86d 	bl	800427e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	210e      	movs	r1, #14
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e00f      	b.n	80041de <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	210a      	movs	r1, #10
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2104      	movs	r1, #4
 80041da:	438a      	bics	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2101      	movs	r1, #1
 80041ea:	430a      	orrs	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e007      	b.n	8004200 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	2100      	movs	r1, #0
 80041f6:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80041f8:	2317      	movs	r3, #23
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2202      	movs	r2, #2
 80041fe:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004200:	2317      	movs	r3, #23
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	781b      	ldrb	r3, [r3, #0]
} 
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b006      	add	sp, #24
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2221      	movs	r2, #33	; 0x21
 800421a:	5c9b      	ldrb	r3, [r3, r2]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d008      	beq.n	8004234 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2204      	movs	r2, #4
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	2100      	movs	r1, #0
 800422e:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e020      	b.n	8004276 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	210e      	movs	r1, #14
 8004240:	438a      	bics	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2101      	movs	r1, #1
 8004250:	438a      	bics	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	2101      	movs	r1, #1
 800425e:	4091      	lsls	r1, r2
 8004260:	000a      	movs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2221      	movs	r2, #33	; 0x21
 8004268:	2101      	movs	r1, #1
 800426a:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	2100      	movs	r1, #0
 8004272:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	0018      	movs	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	b002      	add	sp, #8
 800427c:	bd80      	pop	{r7, pc}

0800427e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	2101      	movs	r1, #1
 8004296:	4091      	lsls	r1, r2
 8004298:	000a      	movs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d108      	bne.n	80042be <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042bc:	e007      	b.n	80042ce <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	60da      	str	r2, [r3, #12]
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a08      	ldr	r2, [pc, #32]	; (8004308 <DMA_CalcBaseAndBitshift+0x30>)
 80042e6:	4694      	mov	ip, r2
 80042e8:	4463      	add	r3, ip
 80042ea:	2114      	movs	r1, #20
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7fb ff09 	bl	8000104 <__udivsi3>
 80042f2:	0003      	movs	r3, r0
 80042f4:	009a      	lsls	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a03      	ldr	r2, [pc, #12]	; (800430c <DMA_CalcBaseAndBitshift+0x34>)
 80042fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b002      	add	sp, #8
 8004306:	bd80      	pop	{r7, pc}
 8004308:	bffdfff8 	.word	0xbffdfff8
 800430c:	40020000 	.word	0x40020000

08004310 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004318:	f7fe feda 	bl	80030d0 <HAL_GetTick>
 800431c:	0003      	movs	r3, r0
 800431e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004320:	e00f      	b.n	8004342 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3301      	adds	r3, #1
 8004326:	d00c      	beq.n	8004342 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <FLASH_WaitForLastOperation+0x2e>
 800432e:	f7fe fecf 	bl	80030d0 <HAL_GetTick>
 8004332:	0002      	movs	r2, r0
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	429a      	cmp	r2, r3
 800433c:	d201      	bcs.n	8004342 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e01f      	b.n	8004382 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <FLASH_WaitForLastOperation+0x7c>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	4013      	ands	r3, r2
 800434a:	2b01      	cmp	r3, #1
 800434c:	d0e9      	beq.n	8004322 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <FLASH_WaitForLastOperation+0x7c>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	4013      	ands	r3, r2
 8004356:	2b20      	cmp	r3, #32
 8004358:	d102      	bne.n	8004360 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800435a:	4b0c      	ldr	r3, [pc, #48]	; (800438c <FLASH_WaitForLastOperation+0x7c>)
 800435c:	2220      	movs	r2, #32
 800435e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <FLASH_WaitForLastOperation+0x7c>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2210      	movs	r2, #16
 8004366:	4013      	ands	r3, r2
 8004368:	2b10      	cmp	r3, #16
 800436a:	d005      	beq.n	8004378 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <FLASH_WaitForLastOperation+0x7c>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2204      	movs	r2, #4
 8004372:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004374:	2b04      	cmp	r3, #4
 8004376:	d103      	bne.n	8004380 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004378:	f000 f80a 	bl	8004390 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b004      	add	sp, #16
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	40022000 	.word	0x40022000

08004390 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <FLASH_SetErrorCode+0x58>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2210      	movs	r2, #16
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d109      	bne.n	80043ba <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80043a6:	4b11      	ldr	r3, [pc, #68]	; (80043ec <FLASH_SetErrorCode+0x5c>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2202      	movs	r2, #2
 80043ac:	431a      	orrs	r2, r3
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <FLASH_SetErrorCode+0x5c>)
 80043b0:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2210      	movs	r2, #16
 80043b6:	4313      	orrs	r3, r2
 80043b8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <FLASH_SetErrorCode+0x58>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2204      	movs	r2, #4
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d109      	bne.n	80043da <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <FLASH_SetErrorCode+0x5c>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	2201      	movs	r2, #1
 80043cc:	431a      	orrs	r2, r3
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <FLASH_SetErrorCode+0x5c>)
 80043d0:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2204      	movs	r2, #4
 80043d6:	4313      	orrs	r3, r2
 80043d8:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80043da:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <FLASH_SetErrorCode+0x58>)
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]
}  
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b002      	add	sp, #8
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40022000 	.word	0x40022000
 80043ec:	20001978 	.word	0x20001978

080043f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fe:	e14f      	b.n	80046a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2101      	movs	r1, #1
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4091      	lsls	r1, r2
 800440a:	000a      	movs	r2, r1
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d100      	bne.n	8004418 <HAL_GPIO_Init+0x28>
 8004416:	e140      	b.n	800469a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d00b      	beq.n	8004438 <HAL_GPIO_Init+0x48>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d007      	beq.n	8004438 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800442c:	2b11      	cmp	r3, #17
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b12      	cmp	r3, #18
 8004436:	d130      	bne.n	800449a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	2203      	movs	r2, #3
 8004444:	409a      	lsls	r2, r3
 8004446:	0013      	movs	r3, r2
 8004448:	43da      	mvns	r2, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4013      	ands	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	409a      	lsls	r2, r3
 800445a:	0013      	movs	r3, r2
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800446e:	2201      	movs	r2, #1
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	409a      	lsls	r2, r3
 8004474:	0013      	movs	r3, r2
 8004476:	43da      	mvns	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4013      	ands	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	2201      	movs	r2, #1
 8004486:	401a      	ands	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	409a      	lsls	r2, r3
 800448c:	0013      	movs	r3, r2
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	2203      	movs	r2, #3
 80044a6:	409a      	lsls	r2, r3
 80044a8:	0013      	movs	r3, r2
 80044aa:	43da      	mvns	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	409a      	lsls	r2, r3
 80044bc:	0013      	movs	r3, r2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_Init+0xea>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b12      	cmp	r3, #18
 80044d8:	d123      	bne.n	8004522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	08da      	lsrs	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3208      	adds	r2, #8
 80044e2:	0092      	lsls	r2, r2, #2
 80044e4:	58d3      	ldr	r3, [r2, r3]
 80044e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2207      	movs	r2, #7
 80044ec:	4013      	ands	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	220f      	movs	r2, #15
 80044f2:	409a      	lsls	r2, r3
 80044f4:	0013      	movs	r3, r2
 80044f6:	43da      	mvns	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2107      	movs	r1, #7
 8004506:	400b      	ands	r3, r1
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	409a      	lsls	r2, r3
 800450c:	0013      	movs	r3, r2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	08da      	lsrs	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3208      	adds	r2, #8
 800451c:	0092      	lsls	r2, r2, #2
 800451e:	6939      	ldr	r1, [r7, #16]
 8004520:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	409a      	lsls	r2, r3
 8004530:	0013      	movs	r3, r2
 8004532:	43da      	mvns	r2, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4013      	ands	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2203      	movs	r2, #3
 8004540:	401a      	ands	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	409a      	lsls	r2, r3
 8004548:	0013      	movs	r3, r2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	055b      	lsls	r3, r3, #21
 800455e:	4013      	ands	r3, r2
 8004560:	d100      	bne.n	8004564 <HAL_GPIO_Init+0x174>
 8004562:	e09a      	b.n	800469a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004564:	4b54      	ldr	r3, [pc, #336]	; (80046b8 <HAL_GPIO_Init+0x2c8>)
 8004566:	699a      	ldr	r2, [r3, #24]
 8004568:	4b53      	ldr	r3, [pc, #332]	; (80046b8 <HAL_GPIO_Init+0x2c8>)
 800456a:	2101      	movs	r1, #1
 800456c:	430a      	orrs	r2, r1
 800456e:	619a      	str	r2, [r3, #24]
 8004570:	4b51      	ldr	r3, [pc, #324]	; (80046b8 <HAL_GPIO_Init+0x2c8>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2201      	movs	r2, #1
 8004576:	4013      	ands	r3, r2
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800457c:	4a4f      	ldr	r2, [pc, #316]	; (80046bc <HAL_GPIO_Init+0x2cc>)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	3302      	adds	r3, #2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	589b      	ldr	r3, [r3, r2]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2203      	movs	r2, #3
 800458e:	4013      	ands	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	220f      	movs	r2, #15
 8004594:	409a      	lsls	r2, r3
 8004596:	0013      	movs	r3, r2
 8004598:	43da      	mvns	r2, r3
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4013      	ands	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	2390      	movs	r3, #144	; 0x90
 80045a4:	05db      	lsls	r3, r3, #23
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d013      	beq.n	80045d2 <HAL_GPIO_Init+0x1e2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a44      	ldr	r2, [pc, #272]	; (80046c0 <HAL_GPIO_Init+0x2d0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00d      	beq.n	80045ce <HAL_GPIO_Init+0x1de>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a43      	ldr	r2, [pc, #268]	; (80046c4 <HAL_GPIO_Init+0x2d4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <HAL_GPIO_Init+0x1da>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a42      	ldr	r2, [pc, #264]	; (80046c8 <HAL_GPIO_Init+0x2d8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <HAL_GPIO_Init+0x1d6>
 80045c2:	2303      	movs	r3, #3
 80045c4:	e006      	b.n	80045d4 <HAL_GPIO_Init+0x1e4>
 80045c6:	2305      	movs	r3, #5
 80045c8:	e004      	b.n	80045d4 <HAL_GPIO_Init+0x1e4>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e002      	b.n	80045d4 <HAL_GPIO_Init+0x1e4>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_GPIO_Init+0x1e4>
 80045d2:	2300      	movs	r3, #0
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	2103      	movs	r1, #3
 80045d8:	400a      	ands	r2, r1
 80045da:	0092      	lsls	r2, r2, #2
 80045dc:	4093      	lsls	r3, r2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045e4:	4935      	ldr	r1, [pc, #212]	; (80046bc <HAL_GPIO_Init+0x2cc>)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	3302      	adds	r3, #2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045f2:	4b36      	ldr	r3, [pc, #216]	; (80046cc <HAL_GPIO_Init+0x2dc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	43da      	mvns	r2, r3
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	025b      	lsls	r3, r3, #9
 800460a:	4013      	ands	r3, r2
 800460c:	d003      	beq.n	8004616 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004616:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <HAL_GPIO_Init+0x2dc>)
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800461c:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <HAL_GPIO_Init+0x2dc>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	43da      	mvns	r2, r3
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4013      	ands	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	029b      	lsls	r3, r3, #10
 8004634:	4013      	ands	r3, r2
 8004636:	d003      	beq.n	8004640 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004640:	4b22      	ldr	r3, [pc, #136]	; (80046cc <HAL_GPIO_Init+0x2dc>)
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004646:	4b21      	ldr	r3, [pc, #132]	; (80046cc <HAL_GPIO_Init+0x2dc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	43da      	mvns	r2, r3
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4013      	ands	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	2380      	movs	r3, #128	; 0x80
 800465c:	035b      	lsls	r3, r3, #13
 800465e:	4013      	ands	r3, r2
 8004660:	d003      	beq.n	800466a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800466a:	4b18      	ldr	r3, [pc, #96]	; (80046cc <HAL_GPIO_Init+0x2dc>)
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004670:	4b16      	ldr	r3, [pc, #88]	; (80046cc <HAL_GPIO_Init+0x2dc>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	43da      	mvns	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	039b      	lsls	r3, r3, #14
 8004688:	4013      	ands	r3, r2
 800468a:	d003      	beq.n	8004694 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_GPIO_Init+0x2dc>)
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	3301      	adds	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	40da      	lsrs	r2, r3
 80046a8:	1e13      	subs	r3, r2, #0
 80046aa:	d000      	beq.n	80046ae <HAL_GPIO_Init+0x2be>
 80046ac:	e6a8      	b.n	8004400 <HAL_GPIO_Init+0x10>
  } 
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b006      	add	sp, #24
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40010000 	.word	0x40010000
 80046c0:	48000400 	.word	0x48000400
 80046c4:	48000800 	.word	0x48000800
 80046c8:	48000c00 	.word	0x48000c00
 80046cc:	40010400 	.word	0x40010400

080046d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80046de:	e0b1      	b.n	8004844 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80046e0:	2201      	movs	r2, #1
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	409a      	lsls	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d100      	bne.n	80046f4 <HAL_GPIO_DeInit+0x24>
 80046f2:	e0a4      	b.n	800483e <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80046f4:	4a59      	ldr	r2, [pc, #356]	; (800485c <HAL_GPIO_DeInit+0x18c>)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	3302      	adds	r3, #2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	589b      	ldr	r3, [r3, r2]
 8004700:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2203      	movs	r2, #3
 8004706:	4013      	ands	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	220f      	movs	r2, #15
 800470c:	409a      	lsls	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4013      	ands	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	2390      	movs	r3, #144	; 0x90
 8004718:	05db      	lsls	r3, r3, #23
 800471a:	429a      	cmp	r2, r3
 800471c:	d013      	beq.n	8004746 <HAL_GPIO_DeInit+0x76>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4f      	ldr	r2, [pc, #316]	; (8004860 <HAL_GPIO_DeInit+0x190>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00d      	beq.n	8004742 <HAL_GPIO_DeInit+0x72>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a4e      	ldr	r2, [pc, #312]	; (8004864 <HAL_GPIO_DeInit+0x194>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <HAL_GPIO_DeInit+0x6e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a4d      	ldr	r2, [pc, #308]	; (8004868 <HAL_GPIO_DeInit+0x198>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_GPIO_DeInit+0x6a>
 8004736:	2303      	movs	r3, #3
 8004738:	e006      	b.n	8004748 <HAL_GPIO_DeInit+0x78>
 800473a:	2305      	movs	r3, #5
 800473c:	e004      	b.n	8004748 <HAL_GPIO_DeInit+0x78>
 800473e:	2302      	movs	r3, #2
 8004740:	e002      	b.n	8004748 <HAL_GPIO_DeInit+0x78>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <HAL_GPIO_DeInit+0x78>
 8004746:	2300      	movs	r3, #0
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	2103      	movs	r1, #3
 800474c:	400a      	ands	r2, r1
 800474e:	0092      	lsls	r2, r2, #2
 8004750:	4093      	lsls	r3, r2
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	429a      	cmp	r2, r3
 8004756:	d132      	bne.n	80047be <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004758:	4b44      	ldr	r3, [pc, #272]	; (800486c <HAL_GPIO_DeInit+0x19c>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	43d9      	mvns	r1, r3
 8004760:	4b42      	ldr	r3, [pc, #264]	; (800486c <HAL_GPIO_DeInit+0x19c>)
 8004762:	400a      	ands	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004766:	4b41      	ldr	r3, [pc, #260]	; (800486c <HAL_GPIO_DeInit+0x19c>)
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	43d9      	mvns	r1, r3
 800476e:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_GPIO_DeInit+0x19c>)
 8004770:	400a      	ands	r2, r1
 8004772:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004774:	4b3d      	ldr	r3, [pc, #244]	; (800486c <HAL_GPIO_DeInit+0x19c>)
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	43d9      	mvns	r1, r3
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_GPIO_DeInit+0x19c>)
 800477e:	400a      	ands	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004782:	4b3a      	ldr	r3, [pc, #232]	; (800486c <HAL_GPIO_DeInit+0x19c>)
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43d9      	mvns	r1, r3
 800478a:	4b38      	ldr	r3, [pc, #224]	; (800486c <HAL_GPIO_DeInit+0x19c>)
 800478c:	400a      	ands	r2, r1
 800478e:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2203      	movs	r2, #3
 8004794:	4013      	ands	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	220f      	movs	r2, #15
 800479a:	409a      	lsls	r2, r3
 800479c:	0013      	movs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80047a0:	4a2e      	ldr	r2, [pc, #184]	; (800485c <HAL_GPIO_DeInit+0x18c>)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	3302      	adds	r3, #2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	589a      	ldr	r2, [r3, r2]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	43d9      	mvns	r1, r3
 80047b0:	482a      	ldr	r0, [pc, #168]	; (800485c <HAL_GPIO_DeInit+0x18c>)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	400a      	ands	r2, r1
 80047b8:	3302      	adds	r3, #2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	0052      	lsls	r2, r2, #1
 80047c6:	2103      	movs	r1, #3
 80047c8:	4091      	lsls	r1, r2
 80047ca:	000a      	movs	r2, r1
 80047cc:	43d2      	mvns	r2, r2
 80047ce:	401a      	ands	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	08da      	lsrs	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3208      	adds	r2, #8
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	58d3      	ldr	r3, [r2, r3]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	2107      	movs	r1, #7
 80047e4:	400a      	ands	r2, r1
 80047e6:	0092      	lsls	r2, r2, #2
 80047e8:	210f      	movs	r1, #15
 80047ea:	4091      	lsls	r1, r2
 80047ec:	000a      	movs	r2, r1
 80047ee:	43d1      	mvns	r1, r2
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	08d2      	lsrs	r2, r2, #3
 80047f4:	4019      	ands	r1, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3208      	adds	r2, #8
 80047fa:	0092      	lsls	r2, r2, #2
 80047fc:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	0052      	lsls	r2, r2, #1
 8004806:	2103      	movs	r1, #3
 8004808:	4091      	lsls	r1, r2
 800480a:	000a      	movs	r2, r1
 800480c:	43d2      	mvns	r2, r2
 800480e:	401a      	ands	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2101      	movs	r1, #1
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4091      	lsls	r1, r2
 800481e:	000a      	movs	r2, r1
 8004820:	43d2      	mvns	r2, r2
 8004822:	401a      	ands	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	0052      	lsls	r2, r2, #1
 8004830:	2103      	movs	r1, #3
 8004832:	4091      	lsls	r1, r2
 8004834:	000a      	movs	r2, r1
 8004836:	43d2      	mvns	r2, r2
 8004838:	401a      	ands	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]

    }

    position++;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	3301      	adds	r3, #1
 8004842:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	40da      	lsrs	r2, r3
 800484a:	1e13      	subs	r3, r2, #0
 800484c:	d000      	beq.n	8004850 <HAL_GPIO_DeInit+0x180>
 800484e:	e747      	b.n	80046e0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	b006      	add	sp, #24
 8004858:	bd80      	pop	{r7, pc}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	40010000 	.word	0x40010000
 8004860:	48000400 	.word	0x48000400
 8004864:	48000800 	.word	0x48000800
 8004868:	48000c00 	.word	0x48000c00
 800486c:	40010400 	.word	0x40010400

08004870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	000a      	movs	r2, r1
 800487a:	1cbb      	adds	r3, r7, #2
 800487c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	1cba      	adds	r2, r7, #2
 8004884:	8812      	ldrh	r2, [r2, #0]
 8004886:	4013      	ands	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800488a:	230f      	movs	r3, #15
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	2201      	movs	r2, #1
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e003      	b.n	800489c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004894:	230f      	movs	r3, #15
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800489c:	230f      	movs	r3, #15
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	781b      	ldrb	r3, [r3, #0]
  }
 80048a2:	0018      	movs	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	b004      	add	sp, #16
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	0008      	movs	r0, r1
 80048b4:	0011      	movs	r1, r2
 80048b6:	1cbb      	adds	r3, r7, #2
 80048b8:	1c02      	adds	r2, r0, #0
 80048ba:	801a      	strh	r2, [r3, #0]
 80048bc:	1c7b      	adds	r3, r7, #1
 80048be:	1c0a      	adds	r2, r1, #0
 80048c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048c2:	1c7b      	adds	r3, r7, #1
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048ca:	1cbb      	adds	r3, r7, #2
 80048cc:	881a      	ldrh	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048d2:	e003      	b.n	80048dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048d4:	1cbb      	adds	r3, r7, #2
 80048d6:	881a      	ldrh	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048dc:	46c0      	nop			; (mov r8, r8)
 80048de:	46bd      	mov	sp, r7
 80048e0:	b002      	add	sp, #8
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	0002      	movs	r2, r0
 80048ec:	1dbb      	adds	r3, r7, #6
 80048ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	1dba      	adds	r2, r7, #6
 80048f6:	8812      	ldrh	r2, [r2, #0]
 80048f8:	4013      	ands	r3, r2
 80048fa:	d008      	beq.n	800490e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80048fe:	1dba      	adds	r2, r7, #6
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004904:	1dbb      	adds	r3, r7, #6
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	0018      	movs	r0, r3
 800490a:	f00e febf 	bl	801368c <HAL_GPIO_EXTI_Callback>
  }
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b002      	add	sp, #8
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	40010400 	.word	0x40010400

0800491c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e082      	b.n	8004a34 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2241      	movs	r2, #65	; 0x41
 8004932:	5c9b      	ldrb	r3, [r3, r2]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	2100      	movs	r1, #0
 8004940:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f7fd ff67 	bl	8002818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2241      	movs	r2, #65	; 0x41
 800494e:	2124      	movs	r1, #36	; 0x24
 8004950:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	438a      	bics	r2, r1
 8004960:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4934      	ldr	r1, [pc, #208]	; (8004a3c <HAL_I2C_Init+0x120>)
 800496c:	400a      	ands	r2, r1
 800496e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4931      	ldr	r1, [pc, #196]	; (8004a40 <HAL_I2C_Init+0x124>)
 800497c:	400a      	ands	r2, r1
 800497e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d108      	bne.n	800499a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	0209      	lsls	r1, r1, #8
 8004994:	430a      	orrs	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	e007      	b.n	80049aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2184      	movs	r1, #132	; 0x84
 80049a4:	0209      	lsls	r1, r1, #8
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d104      	bne.n	80049bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2280      	movs	r2, #128	; 0x80
 80049b8:	0112      	lsls	r2, r2, #4
 80049ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	491f      	ldr	r1, [pc, #124]	; (8004a44 <HAL_I2C_Init+0x128>)
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	491a      	ldr	r1, [pc, #104]	; (8004a40 <HAL_I2C_Init+0x124>)
 80049d8:	400a      	ands	r2, r1
 80049da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	0011      	movs	r1, r2
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69d9      	ldr	r1, [r3, #28]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1a      	ldr	r2, [r3, #32]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2101      	movs	r1, #1
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2241      	movs	r2, #65	; 0x41
 8004a20:	2120      	movs	r1, #32
 8004a22:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2242      	movs	r2, #66	; 0x42
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	f0ffffff 	.word	0xf0ffffff
 8004a40:	ffff7fff 	.word	0xffff7fff
 8004a44:	02008000 	.word	0x02008000

08004a48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e022      	b.n	8004aa0 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2241      	movs	r2, #65	; 0x41
 8004a5e:	2124      	movs	r1, #36	; 0x24
 8004a60:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	438a      	bics	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7fe f85d 	bl	8002b34 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2241      	movs	r2, #65	; 0x41
 8004a84:	2100      	movs	r1, #0
 8004a86:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2242      	movs	r2, #66	; 0x42
 8004a92:	2100      	movs	r1, #0
 8004a94:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2240      	movs	r2, #64	; 0x40
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b002      	add	sp, #8
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2241      	movs	r2, #65	; 0x41
 8004ab4:	5c9b      	ldrb	r3, [r3, r2]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b28      	cmp	r3, #40	; 0x28
 8004aba:	d124      	bne.n	8004b06 <HAL_I2C_DisableListen_IT+0x5e>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2241      	movs	r2, #65	; 0x41
 8004ac0:	5c9b      	ldrb	r3, [r3, r2]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	001a      	movs	r2, r3
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2242      	movs	r2, #66	; 0x42
 8004ad0:	5c9b      	ldrb	r3, [r3, r2]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	001a      	movs	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2241      	movs	r2, #65	; 0x41
 8004ae2:	2120      	movs	r1, #32
 8004ae4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2242      	movs	r2, #66	; 0x42
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = NULL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the Address Match interrupt */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	0011      	movs	r1, r2
 8004afc:	0018      	movs	r0, r3
 8004afe:	f000 f807 	bl	8004b10 <I2C_Disable_IRQ>

    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <HAL_I2C_DisableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
  }
}
 8004b08:	0018      	movs	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b004      	add	sp, #16
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	000a      	movs	r2, r1
 8004b1a:	1cbb      	adds	r3, r7, #2
 8004b1c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b22:	1cbb      	adds	r3, r7, #2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	2201      	movs	r2, #1
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d010      	beq.n	8004b4e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2242      	movs	r2, #66	; 0x42
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2241      	movs	r2, #65	; 0x41
 8004b38:	5c9b      	ldrb	r3, [r3, r2]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	2328      	movs	r3, #40	; 0x28
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b28      	cmp	r3, #40	; 0x28
 8004b44:	d003      	beq.n	8004b4e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	22b0      	movs	r2, #176	; 0xb0
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b4e:	1cbb      	adds	r3, r7, #2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	2202      	movs	r2, #2
 8004b54:	4013      	ands	r3, r2
 8004b56:	d010      	beq.n	8004b7a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2244      	movs	r2, #68	; 0x44
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2241      	movs	r2, #65	; 0x41
 8004b64:	5c9b      	ldrb	r3, [r3, r2]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	001a      	movs	r2, r3
 8004b6a:	2328      	movs	r3, #40	; 0x28
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b28      	cmp	r3, #40	; 0x28
 8004b70:	d003      	beq.n	8004b7a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	22b0      	movs	r2, #176	; 0xb0
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b7a:	1cbb      	adds	r3, r7, #2
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	5e9b      	ldrsh	r3, [r3, r2]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	da03      	bge.n	8004b8c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	22b8      	movs	r2, #184	; 0xb8
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b8c:	1cbb      	adds	r3, r7, #2
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d103      	bne.n	8004b9c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2290      	movs	r2, #144	; 0x90
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b9c:	1cbb      	adds	r3, r7, #2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d103      	bne.n	8004bac <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004bac:	1cbb      	adds	r3, r7, #2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d103      	bne.n	8004bbc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2240      	movs	r2, #64	; 0x40
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	43d9      	mvns	r1, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	400a      	ands	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2241      	movs	r2, #65	; 0x41
 8004be6:	5c9b      	ldrb	r3, [r3, r2]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d138      	bne.n	8004c60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2240      	movs	r2, #64	; 0x40
 8004bf2:	5c9b      	ldrb	r3, [r3, r2]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e032      	b.n	8004c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2240      	movs	r2, #64	; 0x40
 8004c00:	2101      	movs	r1, #1
 8004c02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2241      	movs	r2, #65	; 0x41
 8004c08:	2124      	movs	r1, #36	; 0x24
 8004c0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2101      	movs	r1, #1
 8004c18:	438a      	bics	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4911      	ldr	r1, [pc, #68]	; (8004c6c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004c28:	400a      	ands	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2101      	movs	r1, #1
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2241      	movs	r2, #65	; 0x41
 8004c50:	2120      	movs	r1, #32
 8004c52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2240      	movs	r2, #64	; 0x40
 8004c58:	2100      	movs	r1, #0
 8004c5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	0018      	movs	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	ffffefff 	.word	0xffffefff

08004c70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2241      	movs	r2, #65	; 0x41
 8004c7e:	5c9b      	ldrb	r3, [r3, r2]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d139      	bne.n	8004cfa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	5c9b      	ldrb	r3, [r3, r2]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e033      	b.n	8004cfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	2101      	movs	r1, #1
 8004c9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2241      	movs	r2, #65	; 0x41
 8004ca0:	2124      	movs	r1, #36	; 0x24
 8004ca2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2101      	movs	r1, #1
 8004cb0:	438a      	bics	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4a11      	ldr	r2, [pc, #68]	; (8004d04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2241      	movs	r2, #65	; 0x41
 8004cea:	2120      	movs	r1, #32
 8004cec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2240      	movs	r2, #64	; 0x40
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
  }
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b004      	add	sp, #16
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	fffff0ff 	.word	0xfffff0ff

08004d08 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	0049      	lsls	r1, r1, #1
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]
}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40007000 	.word	0x40007000

08004d24 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	000a      	movs	r2, r1
 8004d2e:	1cfb      	adds	r3, r7, #3
 8004d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004d38:	2104      	movs	r1, #4
 8004d3a:	438a      	bics	r2, r1
 8004d3c:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004d3e:	1cfb      	adds	r3, r7, #3
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004d46:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004d48:	e002      	b.n	8004d50 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8004d4a:	bf40      	sev
    __WFE();
 8004d4c:	bf20      	wfe
    __WFE();
 8004d4e:	bf20      	wfe
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b002      	add	sp, #8
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	000a      	movs	r2, r1
 8004d66:	1cfb      	adds	r3, r7, #3
 8004d68:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_PWR_EnterSTOPMode+0x60>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2203      	movs	r2, #3
 8004d78:	4393      	bics	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004d84:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_PWR_EnterSTOPMode+0x60>)
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <HAL_PWR_EnterSTOPMode+0x64>)
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <HAL_PWR_EnterSTOPMode+0x64>)
 8004d90:	2104      	movs	r1, #4
 8004d92:	430a      	orrs	r2, r1
 8004d94:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004d96:	1cfb      	adds	r3, r7, #3
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004d9e:	bf30      	wfi
 8004da0:	e002      	b.n	8004da8 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004da2:	bf40      	sev
    __WFE();
 8004da4:	bf20      	wfe
    __WFE();
 8004da6:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_PWR_EnterSTOPMode+0x64>)
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <HAL_PWR_EnterSTOPMode+0x64>)
 8004dae:	2104      	movs	r1, #4
 8004db0:	438a      	bics	r2, r1
 8004db2:	611a      	str	r2, [r3, #16]
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b004      	add	sp, #16
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40007000 	.word	0x40007000
 8004dc0:	e000ed00 	.word	0xe000ed00

08004dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e305      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d100      	bne.n	8004de2 <HAL_RCC_OscConfig+0x1e>
 8004de0:	e08d      	b.n	8004efe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004de2:	4bc5      	ldr	r3, [pc, #788]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	220c      	movs	r2, #12
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d00e      	beq.n	8004e0c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dee:	4bc2      	ldr	r3, [pc, #776]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	220c      	movs	r2, #12
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d116      	bne.n	8004e28 <HAL_RCC_OscConfig+0x64>
 8004dfa:	4bbf      	ldr	r3, [pc, #764]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	025b      	lsls	r3, r3, #9
 8004e02:	401a      	ands	r2, r3
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	025b      	lsls	r3, r3, #9
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d10d      	bne.n	8004e28 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	4bba      	ldr	r3, [pc, #744]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	4013      	ands	r3, r2
 8004e16:	d100      	bne.n	8004e1a <HAL_RCC_OscConfig+0x56>
 8004e18:	e070      	b.n	8004efc <HAL_RCC_OscConfig+0x138>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d000      	beq.n	8004e24 <HAL_RCC_OscConfig+0x60>
 8004e22:	e06b      	b.n	8004efc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e2dc      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_OscConfig+0x7c>
 8004e30:	4bb1      	ldr	r3, [pc, #708]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4bb0      	ldr	r3, [pc, #704]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e36:	2180      	movs	r1, #128	; 0x80
 8004e38:	0249      	lsls	r1, r1, #9
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e02f      	b.n	8004ea0 <HAL_RCC_OscConfig+0xdc>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10c      	bne.n	8004e62 <HAL_RCC_OscConfig+0x9e>
 8004e48:	4bab      	ldr	r3, [pc, #684]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4baa      	ldr	r3, [pc, #680]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e4e:	49ab      	ldr	r1, [pc, #684]	; (80050fc <HAL_RCC_OscConfig+0x338>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	4ba8      	ldr	r3, [pc, #672]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4ba7      	ldr	r3, [pc, #668]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e5a:	49a9      	ldr	r1, [pc, #676]	; (8005100 <HAL_RCC_OscConfig+0x33c>)
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e01e      	b.n	8004ea0 <HAL_RCC_OscConfig+0xdc>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	d10e      	bne.n	8004e88 <HAL_RCC_OscConfig+0xc4>
 8004e6a:	4ba3      	ldr	r3, [pc, #652]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4ba2      	ldr	r3, [pc, #648]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	02c9      	lsls	r1, r1, #11
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	4b9f      	ldr	r3, [pc, #636]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b9e      	ldr	r3, [pc, #632]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e7e:	2180      	movs	r1, #128	; 0x80
 8004e80:	0249      	lsls	r1, r1, #9
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e00b      	b.n	8004ea0 <HAL_RCC_OscConfig+0xdc>
 8004e88:	4b9b      	ldr	r3, [pc, #620]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4b9a      	ldr	r3, [pc, #616]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e8e:	499b      	ldr	r1, [pc, #620]	; (80050fc <HAL_RCC_OscConfig+0x338>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	4b98      	ldr	r3, [pc, #608]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b97      	ldr	r3, [pc, #604]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e9a:	4999      	ldr	r1, [pc, #612]	; (8005100 <HAL_RCC_OscConfig+0x33c>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d014      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fe f912 	bl	80030d0 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb2:	f7fe f90d 	bl	80030d0 <HAL_GetTick>
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b64      	cmp	r3, #100	; 0x64
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e28e      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec4:	4b8c      	ldr	r3, [pc, #560]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	029b      	lsls	r3, r3, #10
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0xee>
 8004ed0:	e015      	b.n	8004efe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed2:	f7fe f8fd 	bl	80030d0 <HAL_GetTick>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fe f8f8 	bl	80030d0 <HAL_GetTick>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e279      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	4b82      	ldr	r3, [pc, #520]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	2380      	movs	r3, #128	; 0x80
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x118>
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d100      	bne.n	8004f0a <HAL_RCC_OscConfig+0x146>
 8004f08:	e06c      	b.n	8004fe4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f0a:	4b7b      	ldr	r3, [pc, #492]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	220c      	movs	r2, #12
 8004f10:	4013      	ands	r3, r2
 8004f12:	d00e      	beq.n	8004f32 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f14:	4b78      	ldr	r3, [pc, #480]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	220c      	movs	r2, #12
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d11f      	bne.n	8004f60 <HAL_RCC_OscConfig+0x19c>
 8004f20:	4b75      	ldr	r3, [pc, #468]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	025b      	lsls	r3, r3, #9
 8004f28:	401a      	ands	r2, r3
 8004f2a:	2380      	movs	r3, #128	; 0x80
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d116      	bne.n	8004f60 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f32:	4b71      	ldr	r3, [pc, #452]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2202      	movs	r2, #2
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_OscConfig+0x184>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e24c      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f48:	4b6b      	ldr	r3, [pc, #428]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	22f8      	movs	r2, #248	; 0xf8
 8004f4e:	4393      	bics	r3, r2
 8004f50:	0019      	movs	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	00da      	lsls	r2, r3, #3
 8004f58:	4b67      	ldr	r3, [pc, #412]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5e:	e041      	b.n	8004fe4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d024      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f68:	4b63      	ldr	r3, [pc, #396]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4b62      	ldr	r3, [pc, #392]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f6e:	2101      	movs	r1, #1
 8004f70:	430a      	orrs	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fe f8ac 	bl	80030d0 <HAL_GetTick>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f7e:	f7fe f8a7 	bl	80030d0 <HAL_GetTick>
 8004f82:	0002      	movs	r2, r0
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e228      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f90:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2202      	movs	r2, #2
 8004f96:	4013      	ands	r3, r2
 8004f98:	d0f1      	beq.n	8004f7e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	4b57      	ldr	r3, [pc, #348]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	22f8      	movs	r2, #248	; 0xf8
 8004fa0:	4393      	bics	r3, r2
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	00da      	lsls	r2, r3, #3
 8004faa:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	e018      	b.n	8004fe4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb2:	4b51      	ldr	r3, [pc, #324]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b50      	ldr	r3, [pc, #320]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004fb8:	2101      	movs	r1, #1
 8004fba:	438a      	bics	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbe:	f7fe f887 	bl	80030d0 <HAL_GetTick>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc8:	f7fe f882 	bl	80030d0 <HAL_GetTick>
 8004fcc:	0002      	movs	r2, r0
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e203      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fda:	4b47      	ldr	r3, [pc, #284]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d1f1      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	4013      	ands	r3, r2
 8004fec:	d036      	beq.n	800505c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d019      	beq.n	800502a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff6:	4b40      	ldr	r3, [pc, #256]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ffa:	4b3f      	ldr	r3, [pc, #252]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	430a      	orrs	r2, r1
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005002:	f7fe f865 	bl	80030d0 <HAL_GetTick>
 8005006:	0003      	movs	r3, r0
 8005008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800500c:	f7fe f860 	bl	80030d0 <HAL_GetTick>
 8005010:	0002      	movs	r2, r0
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e1e1      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501e:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	2202      	movs	r2, #2
 8005024:	4013      	ands	r3, r2
 8005026:	d0f1      	beq.n	800500c <HAL_RCC_OscConfig+0x248>
 8005028:	e018      	b.n	800505c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800502a:	4b33      	ldr	r3, [pc, #204]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 800502c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800502e:	4b32      	ldr	r3, [pc, #200]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8005030:	2101      	movs	r1, #1
 8005032:	438a      	bics	r2, r1
 8005034:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005036:	f7fe f84b 	bl	80030d0 <HAL_GetTick>
 800503a:	0003      	movs	r3, r0
 800503c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005040:	f7fe f846 	bl	80030d0 <HAL_GetTick>
 8005044:	0002      	movs	r2, r0
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e1c7      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005052:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2202      	movs	r2, #2
 8005058:	4013      	ands	r3, r2
 800505a:	d1f1      	bne.n	8005040 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2204      	movs	r2, #4
 8005062:	4013      	ands	r3, r2
 8005064:	d100      	bne.n	8005068 <HAL_RCC_OscConfig+0x2a4>
 8005066:	e0b5      	b.n	80051d4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005068:	201f      	movs	r0, #31
 800506a:	183b      	adds	r3, r7, r0
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005070:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	055b      	lsls	r3, r3, #21
 8005078:	4013      	ands	r3, r2
 800507a:	d110      	bne.n	800509e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	0549      	lsls	r1, r1, #21
 8005086:	430a      	orrs	r2, r1
 8005088:	61da      	str	r2, [r3, #28]
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	055b      	lsls	r3, r3, #21
 8005092:	4013      	ands	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005098:	183b      	adds	r3, r7, r0
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509e:	4b19      	ldr	r3, [pc, #100]	; (8005104 <HAL_RCC_OscConfig+0x340>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	2380      	movs	r3, #128	; 0x80
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	4013      	ands	r3, r2
 80050a8:	d11a      	bne.n	80050e0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050aa:	4b16      	ldr	r3, [pc, #88]	; (8005104 <HAL_RCC_OscConfig+0x340>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <HAL_RCC_OscConfig+0x340>)
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	0049      	lsls	r1, r1, #1
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b8:	f7fe f80a 	bl	80030d0 <HAL_GetTick>
 80050bc:	0003      	movs	r3, r0
 80050be:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c2:	f7fe f805 	bl	80030d0 <HAL_GetTick>
 80050c6:	0002      	movs	r2, r0
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b64      	cmp	r3, #100	; 0x64
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e186      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_RCC_OscConfig+0x340>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4013      	ands	r3, r2
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d10f      	bne.n	8005108 <HAL_RCC_OscConfig+0x344>
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	4b02      	ldr	r3, [pc, #8]	; (80050f8 <HAL_RCC_OscConfig+0x334>)
 80050ee:	2101      	movs	r1, #1
 80050f0:	430a      	orrs	r2, r1
 80050f2:	621a      	str	r2, [r3, #32]
 80050f4:	e036      	b.n	8005164 <HAL_RCC_OscConfig+0x3a0>
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	40021000 	.word	0x40021000
 80050fc:	fffeffff 	.word	0xfffeffff
 8005100:	fffbffff 	.word	0xfffbffff
 8005104:	40007000 	.word	0x40007000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10c      	bne.n	800512a <HAL_RCC_OscConfig+0x366>
 8005110:	4bb6      	ldr	r3, [pc, #728]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	4bb5      	ldr	r3, [pc, #724]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005116:	2101      	movs	r1, #1
 8005118:	438a      	bics	r2, r1
 800511a:	621a      	str	r2, [r3, #32]
 800511c:	4bb3      	ldr	r3, [pc, #716]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	4bb2      	ldr	r3, [pc, #712]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005122:	2104      	movs	r1, #4
 8005124:	438a      	bics	r2, r1
 8005126:	621a      	str	r2, [r3, #32]
 8005128:	e01c      	b.n	8005164 <HAL_RCC_OscConfig+0x3a0>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b05      	cmp	r3, #5
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x388>
 8005132:	4bae      	ldr	r3, [pc, #696]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005134:	6a1a      	ldr	r2, [r3, #32]
 8005136:	4bad      	ldr	r3, [pc, #692]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005138:	2104      	movs	r1, #4
 800513a:	430a      	orrs	r2, r1
 800513c:	621a      	str	r2, [r3, #32]
 800513e:	4bab      	ldr	r3, [pc, #684]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	4baa      	ldr	r3, [pc, #680]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005144:	2101      	movs	r1, #1
 8005146:	430a      	orrs	r2, r1
 8005148:	621a      	str	r2, [r3, #32]
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0x3a0>
 800514c:	4ba7      	ldr	r3, [pc, #668]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800514e:	6a1a      	ldr	r2, [r3, #32]
 8005150:	4ba6      	ldr	r3, [pc, #664]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005152:	2101      	movs	r1, #1
 8005154:	438a      	bics	r2, r1
 8005156:	621a      	str	r2, [r3, #32]
 8005158:	4ba4      	ldr	r3, [pc, #656]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800515a:	6a1a      	ldr	r2, [r3, #32]
 800515c:	4ba3      	ldr	r3, [pc, #652]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800515e:	2104      	movs	r1, #4
 8005160:	438a      	bics	r2, r1
 8005162:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d014      	beq.n	8005196 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516c:	f7fd ffb0 	bl	80030d0 <HAL_GetTick>
 8005170:	0003      	movs	r3, r0
 8005172:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	e009      	b.n	800518a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fd ffab 	bl	80030d0 <HAL_GetTick>
 800517a:	0002      	movs	r2, r0
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	4a9b      	ldr	r2, [pc, #620]	; (80053f0 <HAL_RCC_OscConfig+0x62c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e12b      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518a:	4b98      	ldr	r3, [pc, #608]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	2202      	movs	r2, #2
 8005190:	4013      	ands	r3, r2
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x3b2>
 8005194:	e013      	b.n	80051be <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005196:	f7fd ff9b 	bl	80030d0 <HAL_GetTick>
 800519a:	0003      	movs	r3, r0
 800519c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519e:	e009      	b.n	80051b4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fd ff96 	bl	80030d0 <HAL_GetTick>
 80051a4:	0002      	movs	r2, r0
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	4a91      	ldr	r2, [pc, #580]	; (80053f0 <HAL_RCC_OscConfig+0x62c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e116      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b4:	4b8d      	ldr	r3, [pc, #564]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	2202      	movs	r2, #2
 80051ba:	4013      	ands	r3, r2
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051be:	231f      	movs	r3, #31
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d105      	bne.n	80051d4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c8:	4b88      	ldr	r3, [pc, #544]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	4b87      	ldr	r3, [pc, #540]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80051ce:	4989      	ldr	r1, [pc, #548]	; (80053f4 <HAL_RCC_OscConfig+0x630>)
 80051d0:	400a      	ands	r2, r1
 80051d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2210      	movs	r2, #16
 80051da:	4013      	ands	r3, r2
 80051dc:	d063      	beq.n	80052a6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d12a      	bne.n	800523c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80051e6:	4b81      	ldr	r3, [pc, #516]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80051e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ea:	4b80      	ldr	r3, [pc, #512]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80051ec:	2104      	movs	r1, #4
 80051ee:	430a      	orrs	r2, r1
 80051f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80051f2:	4b7e      	ldr	r3, [pc, #504]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80051f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f6:	4b7d      	ldr	r3, [pc, #500]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80051f8:	2101      	movs	r1, #1
 80051fa:	430a      	orrs	r2, r1
 80051fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fe:	f7fd ff67 	bl	80030d0 <HAL_GetTick>
 8005202:	0003      	movs	r3, r0
 8005204:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005208:	f7fd ff62 	bl	80030d0 <HAL_GetTick>
 800520c:	0002      	movs	r2, r0
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e0e3      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800521a:	4b74      	ldr	r3, [pc, #464]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800521c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521e:	2202      	movs	r2, #2
 8005220:	4013      	ands	r3, r2
 8005222:	d0f1      	beq.n	8005208 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005224:	4b71      	ldr	r3, [pc, #452]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	22f8      	movs	r2, #248	; 0xf8
 800522a:	4393      	bics	r3, r2
 800522c:	0019      	movs	r1, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	00da      	lsls	r2, r3, #3
 8005234:	4b6d      	ldr	r3, [pc, #436]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005236:	430a      	orrs	r2, r1
 8005238:	635a      	str	r2, [r3, #52]	; 0x34
 800523a:	e034      	b.n	80052a6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	3305      	adds	r3, #5
 8005242:	d111      	bne.n	8005268 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005244:	4b69      	ldr	r3, [pc, #420]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005248:	4b68      	ldr	r3, [pc, #416]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800524a:	2104      	movs	r1, #4
 800524c:	438a      	bics	r2, r1
 800524e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005250:	4b66      	ldr	r3, [pc, #408]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005254:	22f8      	movs	r2, #248	; 0xf8
 8005256:	4393      	bics	r3, r2
 8005258:	0019      	movs	r1, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	00da      	lsls	r2, r3, #3
 8005260:	4b62      	ldr	r3, [pc, #392]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005262:	430a      	orrs	r2, r1
 8005264:	635a      	str	r2, [r3, #52]	; 0x34
 8005266:	e01e      	b.n	80052a6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005268:	4b60      	ldr	r3, [pc, #384]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800526a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800526c:	4b5f      	ldr	r3, [pc, #380]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800526e:	2104      	movs	r1, #4
 8005270:	430a      	orrs	r2, r1
 8005272:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005274:	4b5d      	ldr	r3, [pc, #372]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005278:	4b5c      	ldr	r3, [pc, #368]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800527a:	2101      	movs	r1, #1
 800527c:	438a      	bics	r2, r1
 800527e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005280:	f7fd ff26 	bl	80030d0 <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800528a:	f7fd ff21 	bl	80030d0 <HAL_GetTick>
 800528e:	0002      	movs	r2, r0
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e0a2      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800529c:	4b53      	ldr	r3, [pc, #332]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a0:	2202      	movs	r2, #2
 80052a2:	4013      	ands	r3, r2
 80052a4:	d1f1      	bne.n	800528a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d100      	bne.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
 80052ae:	e097      	b.n	80053e0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052b0:	4b4e      	ldr	r3, [pc, #312]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	220c      	movs	r2, #12
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d100      	bne.n	80052be <HAL_RCC_OscConfig+0x4fa>
 80052bc:	e06b      	b.n	8005396 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d14c      	bne.n	8005360 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c6:	4b49      	ldr	r3, [pc, #292]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b48      	ldr	r3, [pc, #288]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80052cc:	494a      	ldr	r1, [pc, #296]	; (80053f8 <HAL_RCC_OscConfig+0x634>)
 80052ce:	400a      	ands	r2, r1
 80052d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fd fefd 	bl	80030d0 <HAL_GetTick>
 80052d6:	0003      	movs	r3, r0
 80052d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fd fef8 	bl	80030d0 <HAL_GetTick>
 80052e0:	0002      	movs	r2, r0
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e079      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ee:	4b3f      	ldr	r3, [pc, #252]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	2380      	movs	r3, #128	; 0x80
 80052f4:	049b      	lsls	r3, r3, #18
 80052f6:	4013      	ands	r3, r2
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052fa:	4b3c      	ldr	r3, [pc, #240]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	220f      	movs	r2, #15
 8005300:	4393      	bics	r3, r2
 8005302:	0019      	movs	r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	4b38      	ldr	r3, [pc, #224]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800530a:	430a      	orrs	r2, r1
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c
 800530e:	4b37      	ldr	r3, [pc, #220]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4a3a      	ldr	r2, [pc, #232]	; (80053fc <HAL_RCC_OscConfig+0x638>)
 8005314:	4013      	ands	r3, r2
 8005316:	0019      	movs	r1, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	431a      	orrs	r2, r3
 8005322:	4b32      	ldr	r3, [pc, #200]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005328:	4b30      	ldr	r3, [pc, #192]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	4b2f      	ldr	r3, [pc, #188]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800532e:	2180      	movs	r1, #128	; 0x80
 8005330:	0449      	lsls	r1, r1, #17
 8005332:	430a      	orrs	r2, r1
 8005334:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005336:	f7fd fecb 	bl	80030d0 <HAL_GetTick>
 800533a:	0003      	movs	r3, r0
 800533c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005340:	f7fd fec6 	bl	80030d0 <HAL_GetTick>
 8005344:	0002      	movs	r2, r0
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e047      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005352:	4b26      	ldr	r3, [pc, #152]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	049b      	lsls	r3, r3, #18
 800535a:	4013      	ands	r3, r2
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x57c>
 800535e:	e03f      	b.n	80053e0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005360:	4b22      	ldr	r3, [pc, #136]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	4b21      	ldr	r3, [pc, #132]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 8005366:	4924      	ldr	r1, [pc, #144]	; (80053f8 <HAL_RCC_OscConfig+0x634>)
 8005368:	400a      	ands	r2, r1
 800536a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536c:	f7fd feb0 	bl	80030d0 <HAL_GetTick>
 8005370:	0003      	movs	r3, r0
 8005372:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005376:	f7fd feab 	bl	80030d0 <HAL_GetTick>
 800537a:	0002      	movs	r2, r0
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e02c      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005388:	4b18      	ldr	r3, [pc, #96]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	049b      	lsls	r3, r3, #18
 8005390:	4013      	ands	r3, r2
 8005392:	d1f0      	bne.n	8005376 <HAL_RCC_OscConfig+0x5b2>
 8005394:	e024      	b.n	80053e0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e01f      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80053a8:	4b10      	ldr	r3, [pc, #64]	; (80053ec <HAL_RCC_OscConfig+0x628>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	2380      	movs	r3, #128	; 0x80
 80053b2:	025b      	lsls	r3, r3, #9
 80053b4:	401a      	ands	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d10e      	bne.n	80053dc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	220f      	movs	r2, #15
 80053c2:	401a      	ands	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d107      	bne.n	80053dc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	23f0      	movs	r3, #240	; 0xf0
 80053d0:	039b      	lsls	r3, r3, #14
 80053d2:	401a      	ands	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	0018      	movs	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b008      	add	sp, #32
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	40021000 	.word	0x40021000
 80053f0:	00001388 	.word	0x00001388
 80053f4:	efffffff 	.word	0xefffffff
 80053f8:	feffffff 	.word	0xfeffffff
 80053fc:	ffc2ffff 	.word	0xffc2ffff

08005400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0b3      	b.n	800557c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005414:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <HAL_RCC_ClockConfig+0x184>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2201      	movs	r2, #1
 800541a:	4013      	ands	r3, r2
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d911      	bls.n	8005446 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b58      	ldr	r3, [pc, #352]	; (8005584 <HAL_RCC_ClockConfig+0x184>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2201      	movs	r2, #1
 8005428:	4393      	bics	r3, r2
 800542a:	0019      	movs	r1, r3
 800542c:	4b55      	ldr	r3, [pc, #340]	; (8005584 <HAL_RCC_ClockConfig+0x184>)
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005434:	4b53      	ldr	r3, [pc, #332]	; (8005584 <HAL_RCC_ClockConfig+0x184>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2201      	movs	r2, #1
 800543a:	4013      	ands	r3, r2
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d001      	beq.n	8005446 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e09a      	b.n	800557c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2202      	movs	r2, #2
 800544c:	4013      	ands	r3, r2
 800544e:	d015      	beq.n	800547c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2204      	movs	r2, #4
 8005456:	4013      	ands	r3, r2
 8005458:	d006      	beq.n	8005468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800545a:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	4b4a      	ldr	r3, [pc, #296]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 8005460:	21e0      	movs	r1, #224	; 0xe0
 8005462:	00c9      	lsls	r1, r1, #3
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005468:	4b47      	ldr	r3, [pc, #284]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	22f0      	movs	r2, #240	; 0xf0
 800546e:	4393      	bics	r3, r2
 8005470:	0019      	movs	r1, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	4b44      	ldr	r3, [pc, #272]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 8005478:	430a      	orrs	r2, r1
 800547a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2201      	movs	r2, #1
 8005482:	4013      	ands	r3, r2
 8005484:	d040      	beq.n	8005508 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d107      	bne.n	800549e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	4b3e      	ldr	r3, [pc, #248]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	029b      	lsls	r3, r3, #10
 8005496:	4013      	ands	r3, r2
 8005498:	d114      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e06e      	b.n	800557c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d107      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a6:	4b38      	ldr	r3, [pc, #224]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	049b      	lsls	r3, r3, #18
 80054ae:	4013      	ands	r3, r2
 80054b0:	d108      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e062      	b.n	800557c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b6:	4b34      	ldr	r3, [pc, #208]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2202      	movs	r2, #2
 80054bc:	4013      	ands	r3, r2
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e05b      	b.n	800557c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054c4:	4b30      	ldr	r3, [pc, #192]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2203      	movs	r2, #3
 80054ca:	4393      	bics	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054d8:	f7fd fdfa 	bl	80030d0 <HAL_GetTick>
 80054dc:	0003      	movs	r3, r0
 80054de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e0:	e009      	b.n	80054f6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e2:	f7fd fdf5 	bl	80030d0 <HAL_GetTick>
 80054e6:	0002      	movs	r2, r0
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	4a27      	ldr	r2, [pc, #156]	; (800558c <HAL_RCC_ClockConfig+0x18c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e042      	b.n	800557c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	220c      	movs	r2, #12
 80054fc:	401a      	ands	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	429a      	cmp	r2, r3
 8005506:	d1ec      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005508:	4b1e      	ldr	r3, [pc, #120]	; (8005584 <HAL_RCC_ClockConfig+0x184>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2201      	movs	r2, #1
 800550e:	4013      	ands	r3, r2
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d211      	bcs.n	800553a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005516:	4b1b      	ldr	r3, [pc, #108]	; (8005584 <HAL_RCC_ClockConfig+0x184>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2201      	movs	r2, #1
 800551c:	4393      	bics	r3, r2
 800551e:	0019      	movs	r1, r3
 8005520:	4b18      	ldr	r3, [pc, #96]	; (8005584 <HAL_RCC_ClockConfig+0x184>)
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005528:	4b16      	ldr	r3, [pc, #88]	; (8005584 <HAL_RCC_ClockConfig+0x184>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2201      	movs	r2, #1
 800552e:	4013      	ands	r3, r2
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d001      	beq.n	800553a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e020      	b.n	800557c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2204      	movs	r2, #4
 8005540:	4013      	ands	r3, r2
 8005542:	d009      	beq.n	8005558 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005544:	4b10      	ldr	r3, [pc, #64]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a11      	ldr	r2, [pc, #68]	; (8005590 <HAL_RCC_ClockConfig+0x190>)
 800554a:	4013      	ands	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005558:	f000 f820 	bl	800559c <HAL_RCC_GetSysClockFreq>
 800555c:	0001      	movs	r1, r0
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <HAL_RCC_ClockConfig+0x188>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	220f      	movs	r2, #15
 8005566:	4013      	ands	r3, r2
 8005568:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <HAL_RCC_ClockConfig+0x194>)
 800556a:	5cd3      	ldrb	r3, [r2, r3]
 800556c:	000a      	movs	r2, r1
 800556e:	40da      	lsrs	r2, r3
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <HAL_RCC_ClockConfig+0x198>)
 8005572:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005574:	2001      	movs	r0, #1
 8005576:	f7fd fd65 	bl	8003044 <HAL_InitTick>
  
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b004      	add	sp, #16
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40022000 	.word	0x40022000
 8005588:	40021000 	.word	0x40021000
 800558c:	00001388 	.word	0x00001388
 8005590:	fffff8ff 	.word	0xfffff8ff
 8005594:	080139b8 	.word	0x080139b8
 8005598:	20000000 	.word	0x20000000

0800559c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800559c:	b590      	push	{r4, r7, lr}
 800559e:	b08f      	sub	sp, #60	; 0x3c
 80055a0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80055a2:	2314      	movs	r3, #20
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <HAL_RCC_GetSysClockFreq+0xb4>)
 80055a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80055aa:	c313      	stmia	r3!, {r0, r1, r4}
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	4a28      	ldr	r2, [pc, #160]	; (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80055b6:	c313      	stmia	r3!, {r0, r1, r4}
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c0:	2300      	movs	r3, #0
 80055c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c4:	2300      	movs	r3, #0
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
 80055c8:	2300      	movs	r3, #0
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80055d0:	4b21      	ldr	r3, [pc, #132]	; (8005658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	220c      	movs	r2, #12
 80055da:	4013      	ands	r3, r2
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d002      	beq.n	80055e6 <HAL_RCC_GetSysClockFreq+0x4a>
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d003      	beq.n	80055ec <HAL_RCC_GetSysClockFreq+0x50>
 80055e4:	e02c      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0xa4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055e6:	4b1d      	ldr	r3, [pc, #116]	; (800565c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055ea:	e02c      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0xaa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	0c9b      	lsrs	r3, r3, #18
 80055f0:	220f      	movs	r2, #15
 80055f2:	4013      	ands	r3, r2
 80055f4:	2214      	movs	r2, #20
 80055f6:	18ba      	adds	r2, r7, r2
 80055f8:	5cd3      	ldrb	r3, [r2, r3]
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80055fc:	4b16      	ldr	r3, [pc, #88]	; (8005658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	220f      	movs	r2, #15
 8005602:	4013      	ands	r3, r2
 8005604:	1d3a      	adds	r2, r7, #4
 8005606:	5cd3      	ldrb	r3, [r2, r3]
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800560a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	025b      	lsls	r3, r3, #9
 8005610:	4013      	ands	r3, r2
 8005612:	d009      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005616:	4811      	ldr	r0, [pc, #68]	; (800565c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005618:	f7fa fd74 	bl	8000104 <__udivsi3>
 800561c:	0003      	movs	r3, r0
 800561e:	001a      	movs	r2, r3
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	4353      	muls	r3, r2
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
 8005626:	e008      	b.n	800563a <HAL_RCC_GetSysClockFreq+0x9e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800562a:	480c      	ldr	r0, [pc, #48]	; (800565c <HAL_RCC_GetSysClockFreq+0xc0>)
 800562c:	f7fa fd6a 	bl	8000104 <__udivsi3>
 8005630:	0003      	movs	r3, r0
 8005632:	001a      	movs	r2, r3
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	4353      	muls	r3, r2
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800563a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800563e:	e002      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0xaa>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005642:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005644:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b00f      	add	sp, #60	; 0x3c
 800564e:	bd90      	pop	{r4, r7, pc}
 8005650:	080138d8 	.word	0x080138d8
 8005654:	080138e8 	.word	0x080138e8
 8005658:	40021000 	.word	0x40021000
 800565c:	007a1200 	.word	0x007a1200

08005660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	025b      	lsls	r3, r3, #9
 8005678:	4013      	ands	r3, r2
 800567a:	d100      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800567c:	e08e      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800567e:	2017      	movs	r0, #23
 8005680:	183b      	adds	r3, r7, r0
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005686:	4b57      	ldr	r3, [pc, #348]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	055b      	lsls	r3, r3, #21
 800568e:	4013      	ands	r3, r2
 8005690:	d110      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005692:	4b54      	ldr	r3, [pc, #336]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	4b53      	ldr	r3, [pc, #332]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	0549      	lsls	r1, r1, #21
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
 80056a0:	4b50      	ldr	r3, [pc, #320]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	055b      	lsls	r3, r3, #21
 80056a8:	4013      	ands	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]
 80056ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ae:	183b      	adds	r3, r7, r0
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b4:	4b4c      	ldr	r3, [pc, #304]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	2380      	movs	r3, #128	; 0x80
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4013      	ands	r3, r2
 80056be:	d11a      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c0:	4b49      	ldr	r3, [pc, #292]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b48      	ldr	r3, [pc, #288]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056c6:	2180      	movs	r1, #128	; 0x80
 80056c8:	0049      	lsls	r1, r1, #1
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ce:	f7fd fcff 	bl	80030d0 <HAL_GetTick>
 80056d2:	0003      	movs	r3, r0
 80056d4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d6:	e008      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d8:	f7fd fcfa 	bl	80030d0 <HAL_GetTick>
 80056dc:	0002      	movs	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	; 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e077      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ea:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4013      	ands	r3, r2
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056f6:	4b3b      	ldr	r3, [pc, #236]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056f8:	6a1a      	ldr	r2, [r3, #32]
 80056fa:	23c0      	movs	r3, #192	; 0xc0
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4013      	ands	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d034      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	23c0      	movs	r3, #192	; 0xc0
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4013      	ands	r3, r2
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	429a      	cmp	r2, r3
 8005716:	d02c      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005718:	4b32      	ldr	r3, [pc, #200]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	4a33      	ldr	r2, [pc, #204]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800571e:	4013      	ands	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005722:	4b30      	ldr	r3, [pc, #192]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	4b2f      	ldr	r3, [pc, #188]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	0249      	lsls	r1, r1, #9
 800572c:	430a      	orrs	r2, r1
 800572e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005730:	4b2c      	ldr	r3, [pc, #176]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	4b2b      	ldr	r3, [pc, #172]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005736:	492e      	ldr	r1, [pc, #184]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005738:	400a      	ands	r2, r1
 800573a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800573c:	4b29      	ldr	r3, [pc, #164]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	4013      	ands	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7fd fcc1 	bl	80030d0 <HAL_GetTick>
 800574e:	0003      	movs	r3, r0
 8005750:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005752:	e009      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005754:	f7fd fcbc 	bl	80030d0 <HAL_GetTick>
 8005758:	0002      	movs	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	4a25      	ldr	r2, [pc, #148]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e038      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	4b1e      	ldr	r3, [pc, #120]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	2202      	movs	r2, #2
 800576e:	4013      	ands	r3, r2
 8005770:	d0f0      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005772:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005778:	4013      	ands	r3, r2
 800577a:	0019      	movs	r1, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005782:	430a      	orrs	r2, r1
 8005784:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005786:	2317      	movs	r3, #23
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005790:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005796:	4918      	ldr	r1, [pc, #96]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005798:	400a      	ands	r2, r1
 800579a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2201      	movs	r2, #1
 80057a2:	4013      	ands	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	2203      	movs	r2, #3
 80057ac:	4393      	bics	r3, r2
 80057ae:	0019      	movs	r1, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057b6:	430a      	orrs	r2, r1
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2220      	movs	r2, #32
 80057c0:	4013      	ands	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c4:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	2210      	movs	r2, #16
 80057ca:	4393      	bics	r3, r2
 80057cc:	0019      	movs	r1, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057d4:	430a      	orrs	r2, r1
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	0018      	movs	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	b006      	add	sp, #24
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40007000 	.word	0x40007000
 80057ec:	fffffcff 	.word	0xfffffcff
 80057f0:	fffeffff 	.word	0xfffeffff
 80057f4:	00001388 	.word	0x00001388
 80057f8:	efffffff 	.word	0xefffffff

080057fc <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e081      	b.n	8005912 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	7f5b      	ldrb	r3, [r3, #29]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	0018      	movs	r0, r3
 8005822:	f7fd f9e5 	bl	8002bf0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	22ca      	movs	r2, #202	; 0xca
 8005832:	625a      	str	r2, [r3, #36]	; 0x24
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2253      	movs	r2, #83	; 0x53
 800583a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	0018      	movs	r0, r3
 8005840:	f000 fca9 	bl	8006196 <RTC_EnterInitMode>
 8005844:	1e03      	subs	r3, r0, #0
 8005846:	d008      	beq.n	800585a <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	22ff      	movs	r2, #255	; 0xff
 800584e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2204      	movs	r2, #4
 8005854:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e05b      	b.n	8005912 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	492d      	ldr	r1, [pc, #180]	; (800591c <HAL_RTC_Init+0x120>)
 8005866:	400a      	ands	r2, r1
 8005868:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6899      	ldr	r1, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68d2      	ldr	r2, [r2, #12]
 8005890:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6919      	ldr	r1, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	041a      	lsls	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2180      	movs	r1, #128	; 0x80
 80058b2:	438a      	bics	r2, r1
 80058b4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2220      	movs	r2, #32
 80058be:	4013      	ands	r3, r2
 80058c0:	d10e      	bne.n	80058e0 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 fc3d 	bl	8006144 <HAL_RTC_WaitForSynchro>
 80058ca:	1e03      	subs	r3, r0, #0
 80058cc:	d008      	beq.n	80058e0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	22ff      	movs	r2, #255	; 0xff
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2204      	movs	r2, #4
 80058da:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e018      	b.n	8005912 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	490d      	ldr	r1, [pc, #52]	; (8005920 <HAL_RTC_Init+0x124>)
 80058ec:	400a      	ands	r2, r1
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	22ff      	movs	r2, #255	; 0xff
 8005908:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005910:	2300      	movs	r3, #0
  }
}
 8005912:	0018      	movs	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	b002      	add	sp, #8
 8005918:	bd80      	pop	{r7, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	ff8fffbf 	.word	0xff8fffbf
 8005920:	fffbffff 	.word	0xfffbffff

08005924 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005924:	b590      	push	{r4, r7, lr}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	7f1b      	ldrb	r3, [r3, #28]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_RTC_SetTime+0x1c>
 800593c:	2302      	movs	r3, #2
 800593e:	e0a5      	b.n	8005a8c <HAL_RTC_SetTime+0x168>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2202      	movs	r2, #2
 800594a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d125      	bne.n	800599e <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2240      	movs	r2, #64	; 0x40
 800595a:	4013      	ands	r3, r2
 800595c:	d102      	bne.n	8005964 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2200      	movs	r2, #0
 8005962:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	0018      	movs	r0, r3
 800596a:	f000 fc40 	bl	80061ee <RTC_ByteToBcd2>
 800596e:	0003      	movs	r3, r0
 8005970:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	0018      	movs	r0, r3
 8005978:	f000 fc39 	bl	80061ee <RTC_ByteToBcd2>
 800597c:	0003      	movs	r3, r0
 800597e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005980:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	789b      	ldrb	r3, [r3, #2]
 8005986:	0018      	movs	r0, r3
 8005988:	f000 fc31 	bl	80061ee <RTC_ByteToBcd2>
 800598c:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800598e:	0022      	movs	r2, r4
 8005990:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	78db      	ldrb	r3, [r3, #3]
 8005996:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e017      	b.n	80059ce <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2240      	movs	r2, #64	; 0x40
 80059a6:	4013      	ands	r3, r2
 80059a8:	d102      	bne.n	80059b0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80059bc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80059c2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	78db      	ldrb	r3, [r3, #3]
 80059c8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	22ca      	movs	r2, #202	; 0xca
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2253      	movs	r2, #83	; 0x53
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f000 fbd8 	bl	8006196 <RTC_EnterInitMode>
 80059e6:	1e03      	subs	r3, r0, #0
 80059e8:	d00b      	beq.n	8005a02 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	22ff      	movs	r2, #255	; 0xff
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2204      	movs	r2, #4
 80059f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e044      	b.n	8005a8c <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4922      	ldr	r1, [pc, #136]	; (8005a94 <HAL_RTC_SetTime+0x170>)
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	491f      	ldr	r1, [pc, #124]	; (8005a98 <HAL_RTC_SetTime+0x174>)
 8005a1a:	400a      	ands	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6899      	ldr	r1, [r3, #8]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2180      	movs	r1, #128	; 0x80
 8005a42:	438a      	bics	r2, r1
 8005a44:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d111      	bne.n	8005a76 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 fb75 	bl	8006144 <HAL_RTC_WaitForSynchro>
 8005a5a:	1e03      	subs	r3, r0, #0
 8005a5c:	d00b      	beq.n	8005a76 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	22ff      	movs	r2, #255	; 0xff
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2204      	movs	r2, #4
 8005a6a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e00a      	b.n	8005a8c <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	22ff      	movs	r2, #255	; 0xff
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
  }
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b007      	add	sp, #28
 8005a92:	bd90      	pop	{r4, r7, pc}
 8005a94:	007f7f7f 	.word	0x007f7f7f
 8005a98:	fffbffff 	.word	0xfffbffff

08005a9c <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	045b      	lsls	r3, r3, #17
 8005abe:	0c5a      	lsrs	r2, r3, #17
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a22      	ldr	r2, [pc, #136]	; (8005b54 <HAL_RTC_GetTime+0xb8>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	223f      	movs	r2, #63	; 0x3f
 8005ad8:	4013      	ands	r3, r2
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	227f      	movs	r2, #127	; 0x7f
 8005ae8:	4013      	ands	r3, r2
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	227f      	movs	r2, #127	; 0x7f
 8005af6:	4013      	ands	r3, r2
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	0c1b      	lsrs	r3, r3, #16
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2240      	movs	r2, #64	; 0x40
 8005b06:	4013      	ands	r3, r2
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d11a      	bne.n	8005b4a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f000 fb89 	bl	8006230 <RTC_Bcd2ToByte>
 8005b1e:	0003      	movs	r3, r0
 8005b20:	001a      	movs	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 fb80 	bl	8006230 <RTC_Bcd2ToByte>
 8005b30:	0003      	movs	r3, r0
 8005b32:	001a      	movs	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	789b      	ldrb	r3, [r3, #2]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f000 fb77 	bl	8006230 <RTC_Bcd2ToByte>
 8005b42:	0003      	movs	r3, r0
 8005b44:	001a      	movs	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b006      	add	sp, #24
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	007f7f7f 	.word	0x007f7f7f

08005b58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	7f1b      	ldrb	r3, [r3, #28]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_RTC_SetDate+0x1c>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e091      	b.n	8005c98 <HAL_RTC_SetDate+0x140>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10e      	bne.n	8005ba4 <HAL_RTC_SetDate+0x4c>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d008      	beq.n	8005ba4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	2210      	movs	r2, #16
 8005b98:	4393      	bics	r3, r2
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	330a      	adds	r3, #10
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d11c      	bne.n	8005be4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	78db      	ldrb	r3, [r3, #3]
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f000 fb1d 	bl	80061ee <RTC_ByteToBcd2>
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 fb16 	bl	80061ee <RTC_ByteToBcd2>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005bc6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	789b      	ldrb	r3, [r3, #2]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f000 fb0e 	bl	80061ee <RTC_ByteToBcd2>
 8005bd2:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005bd4:	0022      	movs	r2, r4
 8005bd6:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	e00e      	b.n	8005c02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	78db      	ldrb	r3, [r3, #3]
 8005be8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005bf0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005bf6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	22ca      	movs	r2, #202	; 0xca
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2253      	movs	r2, #83	; 0x53
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 fabe 	bl	8006196 <RTC_EnterInitMode>
 8005c1a:	1e03      	subs	r3, r0, #0
 8005c1c:	d00b      	beq.n	8005c36 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	22ff      	movs	r2, #255	; 0xff
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e030      	b.n	8005c98 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4918      	ldr	r1, [pc, #96]	; (8005ca0 <HAL_RTC_SetDate+0x148>)
 8005c3e:	400a      	ands	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2180      	movs	r1, #128	; 0x80
 8005c4e:	438a      	bics	r2, r1
 8005c50:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d111      	bne.n	8005c82 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f000 fa6f 	bl	8006144 <HAL_RTC_WaitForSynchro>
 8005c66:	1e03      	subs	r3, r0, #0
 8005c68:	d00b      	beq.n	8005c82 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	22ff      	movs	r2, #255	; 0xff
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2204      	movs	r2, #4
 8005c76:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e00a      	b.n	8005c98 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	22ff      	movs	r2, #255	; 0xff
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005c96:	2300      	movs	r3, #0
  }
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b007      	add	sp, #28
 8005c9e:	bd90      	pop	{r4, r7, pc}
 8005ca0:	00ffff3f 	.word	0x00ffff3f

08005ca4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	4a21      	ldr	r2, [pc, #132]	; (8005d40 <HAL_RTC_GetDate+0x9c>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	0c1b      	lsrs	r3, r3, #16
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	0a1b      	lsrs	r3, r3, #8
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	221f      	movs	r2, #31
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	223f      	movs	r2, #63	; 0x3f
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	0b5b      	lsrs	r3, r3, #13
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2207      	movs	r2, #7
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11a      	bne.n	8005d34 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	78db      	ldrb	r3, [r3, #3]
 8005d02:	0018      	movs	r0, r3
 8005d04:	f000 fa94 	bl	8006230 <RTC_Bcd2ToByte>
 8005d08:	0003      	movs	r3, r0
 8005d0a:	001a      	movs	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	0018      	movs	r0, r3
 8005d16:	f000 fa8b 	bl	8006230 <RTC_Bcd2ToByte>
 8005d1a:	0003      	movs	r3, r0
 8005d1c:	001a      	movs	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	789b      	ldrb	r3, [r3, #2]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 fa82 	bl	8006230 <RTC_Bcd2ToByte>
 8005d2c:	0003      	movs	r3, r0
 8005d2e:	001a      	movs	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	0018      	movs	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b006      	add	sp, #24
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	00ffff3f 	.word	0x00ffff3f

08005d44 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b089      	sub	sp, #36	; 0x24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	7f1b      	ldrb	r3, [r3, #28]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_RTC_SetAlarm_IT+0x24>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e0d5      	b.n	8005f14 <HAL_RTC_SetAlarm_IT+0x1d0>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2202      	movs	r2, #2
 8005d72:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d136      	bne.n	8005de8 <HAL_RTC_SetAlarm_IT+0xa4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2240      	movs	r2, #64	; 0x40
 8005d82:	4013      	ands	r3, r2
 8005d84:	d102      	bne.n	8005d8c <HAL_RTC_SetAlarm_IT+0x48>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 fa2c 	bl	80061ee <RTC_ByteToBcd2>
 8005d96:	0003      	movs	r3, r0
 8005d98:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f000 fa25 	bl	80061ee <RTC_ByteToBcd2>
 8005da4:	0003      	movs	r3, r0
 8005da6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005da8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	789b      	ldrb	r3, [r3, #2]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f000 fa1d 	bl	80061ee <RTC_ByteToBcd2>
 8005db4:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005db6:	0022      	movs	r2, r4
 8005db8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	78db      	ldrb	r3, [r3, #3]
 8005dbe:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	5c9b      	ldrb	r3, [r3, r2]
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f000 fa0f 	bl	80061ee <RTC_ByteToBcd2>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005dd4:	0022      	movs	r2, r4
 8005dd6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ddc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005de2:	4313      	orrs	r3, r2
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	e022      	b.n	8005e2e <HAL_RTC_SetAlarm_IT+0xea>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	4013      	ands	r3, r2
 8005df2:	d102      	bne.n	8005dfa <HAL_RTC_SetAlarm_IT+0xb6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2200      	movs	r2, #0
 8005df8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e06:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e0c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	78db      	ldrb	r3, [r3, #3]
 8005e12:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e14:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2120      	movs	r1, #32
 8005e1a:	5c5b      	ldrb	r3, [r3, r1]
 8005e1c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e24:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	22ca      	movs	r2, #202	; 0xca
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2253      	movs	r2, #83	; 0x53
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Alarm A interrupt */
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4931      	ldr	r1, [pc, #196]	; (8005f1c <HAL_RTC_SetAlarm_IT+0x1d8>)
 8005e56:	400a      	ands	r2, r1
 8005e58:	609a      	str	r2, [r3, #8]

  /* Clear flag alarm A */
  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	22ff      	movs	r2, #255	; 0xff
 8005e62:	401a      	ands	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	492d      	ldr	r1, [pc, #180]	; (8005f20 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e6e:	f7fd f92f 	bl	80030d0 <HAL_GetTick>
 8005e72:	0003      	movs	r3, r0
 8005e74:	61bb      	str	r3, [r7, #24]

  /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005e76:	e014      	b.n	8005ea2 <HAL_RTC_SetAlarm_IT+0x15e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e78:	f7fd f92a 	bl	80030d0 <HAL_GetTick>
 8005e7c:	0002      	movs	r2, r0
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	1ad2      	subs	r2, r2, r3
 8005e82:	23fa      	movs	r3, #250	; 0xfa
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d90b      	bls.n	8005ea2 <HAL_RTC_SetAlarm_IT+0x15e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	22ff      	movs	r2, #255	; 0xff
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2203      	movs	r2, #3
 8005e96:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e038      	b.n	8005f14 <HAL_RTC_SetAlarm_IT+0x1d0>
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d0e4      	beq.n	8005e78 <HAL_RTC_SetAlarm_IT+0x134>
    }
  }

  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	61da      	str	r2, [r3, #28]
  /* Configure the Alarm A Sub Second register */
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Alarm state: Enable Alarm */
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2180      	movs	r1, #128	; 0x80
 8005eca:	0049      	lsls	r1, r1, #1
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
  /* Configure the Alarm interrupt */
  __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	0149      	lsls	r1, r1, #5
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005ee2:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8005ee8:	2180      	movs	r1, #128	; 0x80
 8005eea:	0289      	lsls	r1, r1, #10
 8005eec:	430a      	orrs	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8005ef6:	2180      	movs	r1, #128	; 0x80
 8005ef8:	0289      	lsls	r1, r1, #10
 8005efa:	430a      	orrs	r2, r1
 8005efc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	0018      	movs	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b009      	add	sp, #36	; 0x24
 8005f1a:	bd90      	pop	{r4, r7, pc}
 8005f1c:	fffffeff 	.word	0xfffffeff
 8005f20:	fffffe7f 	.word	0xfffffe7f
 8005f24:	40010400 	.word	0x40010400

08005f28 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	7f1b      	ldrb	r3, [r3, #28]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_RTC_DeactivateAlarm+0x1a>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e048      	b.n	8005fd4 <HAL_RTC_DeactivateAlarm+0xac>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	22ca      	movs	r2, #202	; 0xca
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2253      	movs	r2, #83	; 0x53
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	491c      	ldr	r1, [pc, #112]	; (8005fdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005f6a:	400a      	ands	r2, r1
 8005f6c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4919      	ldr	r1, [pc, #100]	; (8005fe0 <HAL_RTC_DeactivateAlarm+0xb8>)
 8005f7a:	400a      	ands	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005f7e:	f7fd f8a7 	bl	80030d0 <HAL_GetTick>
 8005f82:	0003      	movs	r3, r0
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005f86:	e014      	b.n	8005fb2 <HAL_RTC_DeactivateAlarm+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f88:	f7fd f8a2 	bl	80030d0 <HAL_GetTick>
 8005f8c:	0002      	movs	r2, r0
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1ad2      	subs	r2, r2, r3
 8005f92:	23fa      	movs	r3, #250	; 0xfa
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d90b      	bls.n	8005fb2 <HAL_RTC_DeactivateAlarm+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	22ff      	movs	r2, #255	; 0xff
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e010      	b.n	8005fd4 <HAL_RTC_DeactivateAlarm+0xac>
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d0e4      	beq.n	8005f88 <HAL_RTC_DeactivateAlarm+0x60>
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	22ff      	movs	r2, #255	; 0xff
 8005fc4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b004      	add	sp, #16
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	fffffeff 	.word	0xfffffeff
 8005fe0:	ffffefff 	.word	0xffffefff

08005fe4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  sAlarm->Alarm = RTC_ALARM_A;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2280      	movs	r2, #128	; 0x80
 8005ffe:	0052      	lsls	r2, r2, #1
 8006000:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	617b      	str	r3, [r7, #20]
  subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006010:	045b      	lsls	r3, r3, #17
 8006012:	0c5b      	lsrs	r3, r3, #17
 8006014:	613b      	str	r3, [r7, #16]

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	b2db      	uxtb	r3, r3
 800601c:	223f      	movs	r2, #63	; 0x3f
 800601e:	4013      	ands	r3, r2
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	0a1b      	lsrs	r3, r3, #8
 800602a:	b2db      	uxtb	r3, r3
 800602c:	227f      	movs	r2, #127	; 0x7f
 800602e:	4013      	ands	r3, r2
 8006030:	b2da      	uxtb	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	227f      	movs	r2, #127	; 0x7f
 800603c:	4013      	ands	r3, r2
 800603e:	b2da      	uxtb	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	0c1b      	lsrs	r3, r3, #16
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	4013      	ands	r3, r2
 800604e:	b2da      	uxtb	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	0e1b      	lsrs	r3, r3, #24
 800605e:	b2db      	uxtb	r3, r3
 8006060:	223f      	movs	r2, #63	; 0x3f
 8006062:	4013      	ands	r3, r2
 8006064:	b2d9      	uxtb	r1, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2220      	movs	r2, #32
 800606a:	5499      	strb	r1, [r3, r2]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	05db      	lsls	r3, r3, #23
 8006072:	401a      	ands	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4a19      	ldr	r2, [pc, #100]	; (80060e0 <HAL_RTC_GetAlarm+0xfc>)
 800607c:	401a      	ands	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d125      	bne.n	80060d4 <HAL_RTC_GetAlarm+0xf0>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	0018      	movs	r0, r3
 800608e:	f000 f8cf 	bl	8006230 <RTC_Bcd2ToByte>
 8006092:	0003      	movs	r3, r0
 8006094:	001a      	movs	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	0018      	movs	r0, r3
 80060a0:	f000 f8c6 	bl	8006230 <RTC_Bcd2ToByte>
 80060a4:	0003      	movs	r3, r0
 80060a6:	001a      	movs	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	789b      	ldrb	r3, [r3, #2]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f000 f8bd 	bl	8006230 <RTC_Bcd2ToByte>
 80060b6:	0003      	movs	r3, r0
 80060b8:	001a      	movs	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2220      	movs	r2, #32
 80060c2:	5c9b      	ldrb	r3, [r3, r2]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 f8b3 	bl	8006230 <RTC_Bcd2ToByte>
 80060ca:	0003      	movs	r3, r0
 80060cc:	0019      	movs	r1, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2220      	movs	r2, #32
 80060d2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	0018      	movs	r0, r3
 80060d8:	46bd      	mov	sp, r7
 80060da:	b006      	add	sp, #24
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	80808080 	.word	0x80808080

080060e4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	2380      	movs	r3, #128	; 0x80
 80060f4:	015b      	lsls	r3, r3, #5
 80060f6:	4013      	ands	r3, r2
 80060f8:	d014      	beq.n	8006124 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	4013      	ands	r3, r2
 8006106:	d00d      	beq.n	8006124 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	0018      	movs	r0, r3
 800610c:	f00c fa40 	bl	8012590 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	22ff      	movs	r2, #255	; 0xff
 8006118:	401a      	ands	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4907      	ldr	r1, [pc, #28]	; (800613c <HAL_RTC_AlarmIRQHandler+0x58>)
 8006120:	430a      	orrs	r2, r1
 8006122:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006126:	2280      	movs	r2, #128	; 0x80
 8006128:	0292      	lsls	r2, r2, #10
 800612a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	775a      	strb	r2, [r3, #29]
}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	46bd      	mov	sp, r7
 8006136:	b002      	add	sp, #8
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	fffffe7f 	.word	0xfffffe7f
 8006140:	40010400 	.word	0x40010400

08006144 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	21a0      	movs	r1, #160	; 0xa0
 800615c:	438a      	bics	r2, r1
 800615e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006160:	f7fc ffb6 	bl	80030d0 <HAL_GetTick>
 8006164:	0003      	movs	r3, r0
 8006166:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006168:	e00a      	b.n	8006180 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800616a:	f7fc ffb1 	bl	80030d0 <HAL_GetTick>
 800616e:	0002      	movs	r2, r0
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	23fa      	movs	r3, #250	; 0xfa
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	429a      	cmp	r2, r3
 800617a:	d901      	bls.n	8006180 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e006      	b.n	800618e <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	4013      	ands	r3, r2
 800618a:	d0ee      	beq.n	800616a <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	0018      	movs	r0, r3
 8006190:	46bd      	mov	sp, r7
 8006192:	b004      	add	sp, #16
 8006194:	bd80      	pop	{r7, pc}

08006196 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2240      	movs	r2, #64	; 0x40
 80061aa:	4013      	ands	r3, r2
 80061ac:	d11a      	bne.n	80061e4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2201      	movs	r2, #1
 80061b4:	4252      	negs	r2, r2
 80061b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061b8:	f7fc ff8a 	bl	80030d0 <HAL_GetTick>
 80061bc:	0003      	movs	r3, r0
 80061be:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061c0:	e00a      	b.n	80061d8 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061c2:	f7fc ff85 	bl	80030d0 <HAL_GetTick>
 80061c6:	0002      	movs	r2, r0
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1ad2      	subs	r2, r2, r3
 80061cc:	23fa      	movs	r3, #250	; 0xfa
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d901      	bls.n	80061d8 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e006      	b.n	80061e6 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	4013      	ands	r3, r2
 80061e2:	d0ee      	beq.n	80061c2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	0018      	movs	r0, r3
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b004      	add	sp, #16
 80061ec:	bd80      	pop	{r7, pc}

080061ee <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	0002      	movs	r2, r0
 80061f6:	1dfb      	adds	r3, r7, #7
 80061f8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80061fe:	e007      	b.n	8006210 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006206:	1dfb      	adds	r3, r7, #7
 8006208:	1dfa      	adds	r2, r7, #7
 800620a:	7812      	ldrb	r2, [r2, #0]
 800620c:	3a0a      	subs	r2, #10
 800620e:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8006210:	1dfb      	adds	r3, r7, #7
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b09      	cmp	r3, #9
 8006216:	d8f3      	bhi.n	8006200 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	b2da      	uxtb	r2, r3
 8006220:	1dfb      	adds	r3, r7, #7
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	4313      	orrs	r3, r2
 8006226:	b2db      	uxtb	r3, r3
}
 8006228:	0018      	movs	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	b004      	add	sp, #16
 800622e:	bd80      	pop	{r7, pc}

08006230 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	0002      	movs	r2, r0
 8006238:	1dfb      	adds	r3, r7, #7
 800623a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8006240:	1dfb      	adds	r3, r7, #7
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	b2db      	uxtb	r3, r3
 8006248:	001a      	movs	r2, r3
 800624a:	0013      	movs	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	189b      	adds	r3, r3, r2
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8006254:	1dfb      	adds	r3, r7, #7
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	220f      	movs	r2, #15
 800625a:	4013      	ands	r3, r2
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	18d3      	adds	r3, r2, r3
 8006264:	b2db      	uxtb	r3, r3
}
 8006266:	0018      	movs	r0, r3
 8006268:	46bd      	mov	sp, r7
 800626a:	b004      	add	sp, #16
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	7f1b      	ldrb	r3, [r3, #28]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8006288:	2302      	movs	r3, #2
 800628a:	e0a5      	b.n	80063d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x168>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2202      	movs	r2, #2
 8006296:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	22ca      	movs	r2, #202	; 0xca
 800629e:	625a      	str	r2, [r3, #36]	; 0x24
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2253      	movs	r2, #83	; 0x53
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4013      	ands	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
  {
    tickstart = HAL_GetTick();
 80062b6:	f7fc ff0b 	bl	80030d0 <HAL_GetTick>
 80062ba:	0003      	movs	r3, r0
 80062bc:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80062be:	e014      	b.n	80062ea <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062c0:	f7fc ff06 	bl	80030d0 <HAL_GetTick>
 80062c4:	0002      	movs	r2, r0
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	1ad2      	subs	r2, r2, r3
 80062ca:	23fa      	movs	r3, #250	; 0xfa
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d90b      	bls.n	80062ea <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	22ff      	movs	r2, #255	; 0xff
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2203      	movs	r2, #3
 80062de:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e076      	b.n	80063d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x168>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2204      	movs	r2, #4
 80062f2:	4013      	ands	r3, r2
 80062f4:	d1e4      	bne.n	80062c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4937      	ldr	r1, [pc, #220]	; (80063e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x170>)
 8006302:	400a      	ands	r2, r1
 8006304:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	22ff      	movs	r2, #255	; 0xff
 800630e:	401a      	ands	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4933      	ldr	r1, [pc, #204]	; (80063e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006316:	430a      	orrs	r2, r1
 8006318:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800631a:	f7fc fed9 	bl	80030d0 <HAL_GetTick>
 800631e:	0003      	movs	r3, r0
 8006320:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006322:	e014      	b.n	800634e <HAL_RTCEx_SetWakeUpTimer_IT+0xde>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006324:	f7fc fed4 	bl	80030d0 <HAL_GetTick>
 8006328:	0002      	movs	r2, r0
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	1ad2      	subs	r2, r2, r3
 800632e:	23fa      	movs	r3, #250	; 0xfa
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	429a      	cmp	r2, r3
 8006334:	d90b      	bls.n	800634e <HAL_RTCEx_SetWakeUpTimer_IT+0xde>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	22ff      	movs	r2, #255	; 0xff
 800633c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2203      	movs	r2, #3
 8006342:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e044      	b.n	80063d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x168>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2204      	movs	r2, #4
 8006356:	4013      	ands	r3, r2
 8006358:	d0e4      	beq.n	8006324 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2107      	movs	r1, #7
 800636e:	438a      	bics	r2, r1
 8006370:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6899      	ldr	r1, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006382:	4b19      	ldr	r3, [pc, #100]	; (80063e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006388:	2180      	movs	r1, #128	; 0x80
 800638a:	0349      	lsls	r1, r1, #13
 800638c:	430a      	orrs	r2, r1
 800638e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006390:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	4b14      	ldr	r3, [pc, #80]	; (80063e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006396:	2180      	movs	r1, #128	; 0x80
 8006398:	0349      	lsls	r1, r1, #13
 800639a:	430a      	orrs	r2, r1
 800639c:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2180      	movs	r1, #128	; 0x80
 80063aa:	01c9      	lsls	r1, r1, #7
 80063ac:	430a      	orrs	r2, r1
 80063ae:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	00c9      	lsls	r1, r1, #3
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	22ff      	movs	r2, #255	; 0xff
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b006      	add	sp, #24
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	fffffbff 	.word	0xfffffbff
 80063e4:	fffffb7f 	.word	0xfffffb7f
 80063e8:	40010400 	.word	0x40010400

080063ec <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	7f1b      	ldrb	r3, [r3, #28]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8006400:	2302      	movs	r3, #2
 8006402:	e048      	b.n	8006496 <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	22ca      	movs	r2, #202	; 0xca
 8006416:	625a      	str	r2, [r3, #36]	; 0x24
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2253      	movs	r2, #83	; 0x53
 800641e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	491d      	ldr	r1, [pc, #116]	; (80064a0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>)
 800642c:	400a      	ands	r2, r1
 800642e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	491a      	ldr	r1, [pc, #104]	; (80064a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>)
 800643c:	400a      	ands	r2, r1
 800643e:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8006440:	f7fc fe46 	bl	80030d0 <HAL_GetTick>
 8006444:	0003      	movs	r3, r0
 8006446:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006448:	e014      	b.n	8006474 <HAL_RTCEx_DeactivateWakeUpTimer+0x88>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800644a:	f7fc fe41 	bl	80030d0 <HAL_GetTick>
 800644e:	0002      	movs	r2, r0
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1ad2      	subs	r2, r2, r3
 8006454:	23fa      	movs	r3, #250	; 0xfa
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	429a      	cmp	r2, r3
 800645a:	d90b      	bls.n	8006474 <HAL_RTCEx_DeactivateWakeUpTimer+0x88>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	22ff      	movs	r2, #255	; 0xff
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2203      	movs	r2, #3
 8006468:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e010      	b.n	8006496 <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2204      	movs	r2, #4
 800647c:	4013      	ands	r3, r2
 800647e:	d0e4      	beq.n	800644a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	22ff      	movs	r2, #255	; 0xff
 8006486:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	0018      	movs	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	b004      	add	sp, #16
 800649c:	bd80      	pop	{r7, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	fffffbff 	.word	0xfffffbff
 80064a4:	ffffbfff 	.word	0xffffbfff

080064a8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Get the WAKEUPTIMER interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	2380      	movs	r3, #128	; 0x80
 80064b8:	01db      	lsls	r3, r3, #7
 80064ba:	4013      	ands	r3, r2
 80064bc:	d014      	beq.n	80064e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x40>
  {
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	2380      	movs	r3, #128	; 0x80
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4013      	ands	r3, r2
 80064ca:	d00d      	beq.n	80064e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x40>
    {
      /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	0018      	movs	r0, r3
 80064d0:	f000 f81a 	bl	8006508 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	22ff      	movs	r2, #255	; 0xff
 80064dc:	401a      	ands	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4907      	ldr	r1, [pc, #28]	; (8006500 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80064e4:	430a      	orrs	r2, r1
 80064e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80064ea:	2280      	movs	r2, #128	; 0x80
 80064ec:	0352      	lsls	r2, r2, #13
 80064ee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	775a      	strb	r2, [r3, #29]
}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b002      	add	sp, #8
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	fffffb7f 	.word	0xfffffb7f
 8006504:	40010400 	.word	0x40010400

08006508 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006510:	46c0      	nop			; (mov r8, r8)
 8006512:	46bd      	mov	sp, r7
 8006514:	b002      	add	sp, #8
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e042      	b.n	80065b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	223d      	movs	r2, #61	; 0x3d
 800652e:	5c9b      	ldrb	r3, [r3, r2]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d107      	bne.n	8006546 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	223c      	movs	r2, #60	; 0x3c
 800653a:	2100      	movs	r1, #0
 800653c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	0018      	movs	r0, r3
 8006542:	f7fc fbc5 	bl	8002cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	223d      	movs	r2, #61	; 0x3d
 800654a:	2102      	movs	r1, #2
 800654c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3304      	adds	r3, #4
 8006556:	0019      	movs	r1, r3
 8006558:	0010      	movs	r0, r2
 800655a:	f000 fb31 	bl	8006bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2246      	movs	r2, #70	; 0x46
 8006562:	2101      	movs	r1, #1
 8006564:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	223e      	movs	r2, #62	; 0x3e
 800656a:	2101      	movs	r1, #1
 800656c:	5499      	strb	r1, [r3, r2]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	223f      	movs	r2, #63	; 0x3f
 8006572:	2101      	movs	r1, #1
 8006574:	5499      	strb	r1, [r3, r2]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2240      	movs	r2, #64	; 0x40
 800657a:	2101      	movs	r1, #1
 800657c:	5499      	strb	r1, [r3, r2]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2241      	movs	r2, #65	; 0x41
 8006582:	2101      	movs	r1, #1
 8006584:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2242      	movs	r2, #66	; 0x42
 800658a:	2101      	movs	r1, #1
 800658c:	5499      	strb	r1, [r3, r2]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2243      	movs	r2, #67	; 0x43
 8006592:	2101      	movs	r1, #1
 8006594:	5499      	strb	r1, [r3, r2]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2244      	movs	r2, #68	; 0x44
 800659a:	2101      	movs	r1, #1
 800659c:	5499      	strb	r1, [r3, r2]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2245      	movs	r2, #69	; 0x45
 80065a2:	2101      	movs	r1, #1
 80065a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	223d      	movs	r2, #61	; 0x3d
 80065aa:	2101      	movs	r1, #1
 80065ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	0018      	movs	r0, r3
 80065b2:	46bd      	mov	sp, r7
 80065b4:	b002      	add	sp, #8
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e042      	b.n	8006650 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	223d      	movs	r2, #61	; 0x3d
 80065ce:	5c9b      	ldrb	r3, [r3, r2]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d107      	bne.n	80065e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	223c      	movs	r2, #60	; 0x3c
 80065da:	2100      	movs	r1, #0
 80065dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7fc fb41 	bl	8002c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	223d      	movs	r2, #61	; 0x3d
 80065ea:	2102      	movs	r1, #2
 80065ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3304      	adds	r3, #4
 80065f6:	0019      	movs	r1, r3
 80065f8:	0010      	movs	r0, r2
 80065fa:	f000 fae1 	bl	8006bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2246      	movs	r2, #70	; 0x46
 8006602:	2101      	movs	r1, #1
 8006604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	223e      	movs	r2, #62	; 0x3e
 800660a:	2101      	movs	r1, #1
 800660c:	5499      	strb	r1, [r3, r2]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	223f      	movs	r2, #63	; 0x3f
 8006612:	2101      	movs	r1, #1
 8006614:	5499      	strb	r1, [r3, r2]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2240      	movs	r2, #64	; 0x40
 800661a:	2101      	movs	r1, #1
 800661c:	5499      	strb	r1, [r3, r2]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2241      	movs	r2, #65	; 0x41
 8006622:	2101      	movs	r1, #1
 8006624:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2242      	movs	r2, #66	; 0x42
 800662a:	2101      	movs	r1, #1
 800662c:	5499      	strb	r1, [r3, r2]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2243      	movs	r2, #67	; 0x43
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2244      	movs	r2, #68	; 0x44
 800663a:	2101      	movs	r1, #1
 800663c:	5499      	strb	r1, [r3, r2]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2245      	movs	r2, #69	; 0x45
 8006642:	2101      	movs	r1, #1
 8006644:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	223d      	movs	r2, #61	; 0x3d
 800664a:	2101      	movs	r1, #1
 800664c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	0018      	movs	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	b002      	add	sp, #8
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d108      	bne.n	800667a <HAL_TIM_PWM_Start+0x22>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	223e      	movs	r2, #62	; 0x3e
 800666c:	5c9b      	ldrb	r3, [r3, r2]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	1e5a      	subs	r2, r3, #1
 8006674:	4193      	sbcs	r3, r2
 8006676:	b2db      	uxtb	r3, r3
 8006678:	e01f      	b.n	80066ba <HAL_TIM_PWM_Start+0x62>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d108      	bne.n	8006692 <HAL_TIM_PWM_Start+0x3a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	223f      	movs	r2, #63	; 0x3f
 8006684:	5c9b      	ldrb	r3, [r3, r2]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	1e5a      	subs	r2, r3, #1
 800668c:	4193      	sbcs	r3, r2
 800668e:	b2db      	uxtb	r3, r3
 8006690:	e013      	b.n	80066ba <HAL_TIM_PWM_Start+0x62>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d108      	bne.n	80066aa <HAL_TIM_PWM_Start+0x52>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2240      	movs	r2, #64	; 0x40
 800669c:	5c9b      	ldrb	r3, [r3, r2]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	4193      	sbcs	r3, r2
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	e007      	b.n	80066ba <HAL_TIM_PWM_Start+0x62>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2241      	movs	r2, #65	; 0x41
 80066ae:	5c9b      	ldrb	r3, [r3, r2]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	1e5a      	subs	r2, r3, #1
 80066b6:	4193      	sbcs	r3, r2
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e06e      	b.n	80067a0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <HAL_TIM_PWM_Start+0x7a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	223e      	movs	r2, #62	; 0x3e
 80066cc:	2102      	movs	r1, #2
 80066ce:	5499      	strb	r1, [r3, r2]
 80066d0:	e013      	b.n	80066fa <HAL_TIM_PWM_Start+0xa2>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d104      	bne.n	80066e2 <HAL_TIM_PWM_Start+0x8a>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	223f      	movs	r2, #63	; 0x3f
 80066dc:	2102      	movs	r1, #2
 80066de:	5499      	strb	r1, [r3, r2]
 80066e0:	e00b      	b.n	80066fa <HAL_TIM_PWM_Start+0xa2>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_PWM_Start+0x9a>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2240      	movs	r2, #64	; 0x40
 80066ec:	2102      	movs	r1, #2
 80066ee:	5499      	strb	r1, [r3, r2]
 80066f0:	e003      	b.n	80066fa <HAL_TIM_PWM_Start+0xa2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2241      	movs	r2, #65	; 0x41
 80066f6:	2102      	movs	r1, #2
 80066f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	2201      	movs	r2, #1
 8006702:	0018      	movs	r0, r3
 8006704:	f000 fd68 	bl	80071d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <HAL_TIM_PWM_Start+0x150>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00e      	beq.n	8006730 <HAL_TIM_PWM_Start+0xd8>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a25      	ldr	r2, [pc, #148]	; (80067ac <HAL_TIM_PWM_Start+0x154>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_TIM_PWM_Start+0xd8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a23      	ldr	r2, [pc, #140]	; (80067b0 <HAL_TIM_PWM_Start+0x158>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <HAL_TIM_PWM_Start+0xd8>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a22      	ldr	r2, [pc, #136]	; (80067b4 <HAL_TIM_PWM_Start+0x15c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d101      	bne.n	8006734 <HAL_TIM_PWM_Start+0xdc>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <HAL_TIM_PWM_Start+0xde>
 8006734:	2300      	movs	r3, #0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2180      	movs	r1, #128	; 0x80
 8006746:	0209      	lsls	r1, r1, #8
 8006748:	430a      	orrs	r2, r1
 800674a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <HAL_TIM_PWM_Start+0x150>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_TIM_PWM_Start+0x112>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <HAL_TIM_PWM_Start+0x160>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_TIM_PWM_Start+0x112>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a11      	ldr	r2, [pc, #68]	; (80067ac <HAL_TIM_PWM_Start+0x154>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d111      	bne.n	800678e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2207      	movs	r2, #7
 8006772:	4013      	ands	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b06      	cmp	r3, #6
 800677a:	d010      	beq.n	800679e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2101      	movs	r1, #1
 8006788:	430a      	orrs	r2, r1
 800678a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678c:	e007      	b.n	800679e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2101      	movs	r1, #1
 800679a:	430a      	orrs	r2, r1
 800679c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	0018      	movs	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b004      	add	sp, #16
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40014400 	.word	0x40014400
 80067b4:	40014800 	.word	0x40014800
 80067b8:	40000400 	.word	0x40000400

080067bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	2200      	movs	r2, #0
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 fd02 	bl	80071d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a2f      	ldr	r2, [pc, #188]	; (8006898 <HAL_TIM_PWM_Stop+0xdc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00e      	beq.n	80067fc <HAL_TIM_PWM_Stop+0x40>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a2e      	ldr	r2, [pc, #184]	; (800689c <HAL_TIM_PWM_Stop+0xe0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_TIM_PWM_Stop+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a2c      	ldr	r2, [pc, #176]	; (80068a0 <HAL_TIM_PWM_Stop+0xe4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIM_PWM_Stop+0x40>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a2b      	ldr	r2, [pc, #172]	; (80068a4 <HAL_TIM_PWM_Stop+0xe8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d101      	bne.n	8006800 <HAL_TIM_PWM_Stop+0x44>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <HAL_TIM_PWM_Stop+0x46>
 8006800:	2300      	movs	r3, #0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d013      	beq.n	800682e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <HAL_TIM_PWM_Stop+0xec>)
 800680e:	4013      	ands	r3, r2
 8006810:	d10d      	bne.n	800682e <HAL_TIM_PWM_Stop+0x72>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	4a24      	ldr	r2, [pc, #144]	; (80068ac <HAL_TIM_PWM_Stop+0xf0>)
 800681a:	4013      	ands	r3, r2
 800681c:	d107      	bne.n	800682e <HAL_TIM_PWM_Stop+0x72>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4921      	ldr	r1, [pc, #132]	; (80068b0 <HAL_TIM_PWM_Stop+0xf4>)
 800682a:	400a      	ands	r2, r1
 800682c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	4a1c      	ldr	r2, [pc, #112]	; (80068a8 <HAL_TIM_PWM_Stop+0xec>)
 8006836:	4013      	ands	r3, r2
 8006838:	d10d      	bne.n	8006856 <HAL_TIM_PWM_Stop+0x9a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <HAL_TIM_PWM_Stop+0xf0>)
 8006842:	4013      	ands	r3, r2
 8006844:	d107      	bne.n	8006856 <HAL_TIM_PWM_Stop+0x9a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2101      	movs	r1, #1
 8006852:	438a      	bics	r2, r1
 8006854:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <HAL_TIM_PWM_Stop+0xaa>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	223e      	movs	r2, #62	; 0x3e
 8006860:	2101      	movs	r1, #1
 8006862:	5499      	strb	r1, [r3, r2]
 8006864:	e013      	b.n	800688e <HAL_TIM_PWM_Stop+0xd2>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b04      	cmp	r3, #4
 800686a:	d104      	bne.n	8006876 <HAL_TIM_PWM_Stop+0xba>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	223f      	movs	r2, #63	; 0x3f
 8006870:	2101      	movs	r1, #1
 8006872:	5499      	strb	r1, [r3, r2]
 8006874:	e00b      	b.n	800688e <HAL_TIM_PWM_Stop+0xd2>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b08      	cmp	r3, #8
 800687a:	d104      	bne.n	8006886 <HAL_TIM_PWM_Stop+0xca>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2240      	movs	r2, #64	; 0x40
 8006880:	2101      	movs	r1, #1
 8006882:	5499      	strb	r1, [r3, r2]
 8006884:	e003      	b.n	800688e <HAL_TIM_PWM_Stop+0xd2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2241      	movs	r2, #65	; 0x41
 800688a:	2101      	movs	r1, #1
 800688c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	0018      	movs	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	b002      	add	sp, #8
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40012c00 	.word	0x40012c00
 800689c:	40014000 	.word	0x40014000
 80068a0:	40014400 	.word	0x40014400
 80068a4:	40014800 	.word	0x40014800
 80068a8:	00001111 	.word	0x00001111
 80068ac:	00000444 	.word	0x00000444
 80068b0:	ffff7fff 	.word	0xffff7fff

080068b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	223c      	movs	r2, #60	; 0x3c
 80068c4:	5c9b      	ldrb	r3, [r3, r2]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e0a7      	b.n	8006a1e <HAL_TIM_PWM_ConfigChannel+0x16a>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	223c      	movs	r2, #60	; 0x3c
 80068d2:	2101      	movs	r1, #1
 80068d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b0c      	cmp	r3, #12
 80068da:	d100      	bne.n	80068de <HAL_TIM_PWM_ConfigChannel+0x2a>
 80068dc:	e076      	b.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x118>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b0c      	cmp	r3, #12
 80068e2:	d900      	bls.n	80068e6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80068e4:	e095      	b.n	8006a12 <HAL_TIM_PWM_ConfigChannel+0x15e>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d04e      	beq.n	800698a <HAL_TIM_PWM_ConfigChannel+0xd6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d900      	bls.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x40>
 80068f2:	e08e      	b.n	8006a12 <HAL_TIM_PWM_ConfigChannel+0x15e>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d021      	beq.n	8006944 <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8006900:	e087      	b.n	8006a12 <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	0011      	movs	r1, r2
 800690a:	0018      	movs	r0, r3
 800690c:	f000 f9ce 	bl	8006cac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2108      	movs	r1, #8
 800691c:	430a      	orrs	r2, r1
 800691e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2104      	movs	r1, #4
 800692c:	438a      	bics	r2, r1
 800692e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6999      	ldr	r1, [r3, #24]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	619a      	str	r2, [r3, #24]
      break;
 8006942:	e067      	b.n	8006a14 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	0011      	movs	r1, r2
 800694c:	0018      	movs	r0, r3
 800694e:	f000 fa35 	bl	8006dbc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	0109      	lsls	r1, r1, #4
 8006960:	430a      	orrs	r2, r1
 8006962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	492e      	ldr	r1, [pc, #184]	; (8006a28 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8006970:	400a      	ands	r2, r1
 8006972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6999      	ldr	r1, [r3, #24]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	021a      	lsls	r2, r3, #8
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	619a      	str	r2, [r3, #24]
      break;
 8006988:	e044      	b.n	8006a14 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	0011      	movs	r1, r2
 8006992:	0018      	movs	r0, r3
 8006994:	f000 fa96 	bl	8006ec4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69da      	ldr	r2, [r3, #28]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2108      	movs	r1, #8
 80069a4:	430a      	orrs	r2, r1
 80069a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69da      	ldr	r2, [r3, #28]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2104      	movs	r1, #4
 80069b4:	438a      	bics	r2, r1
 80069b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69d9      	ldr	r1, [r3, #28]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	61da      	str	r2, [r3, #28]
      break;
 80069ca:	e023      	b.n	8006a14 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	0011      	movs	r1, r2
 80069d4:	0018      	movs	r0, r3
 80069d6:	f000 fafb 	bl	8006fd0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2180      	movs	r1, #128	; 0x80
 80069e6:	0109      	lsls	r1, r1, #4
 80069e8:	430a      	orrs	r2, r1
 80069ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	69da      	ldr	r2, [r3, #28]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	490c      	ldr	r1, [pc, #48]	; (8006a28 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80069f8:	400a      	ands	r2, r1
 80069fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69d9      	ldr	r1, [r3, #28]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	021a      	lsls	r2, r3, #8
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	61da      	str	r2, [r3, #28]
      break;
 8006a10:	e000      	b.n	8006a14 <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8006a12:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	223c      	movs	r2, #60	; 0x3c
 8006a18:	2100      	movs	r1, #0
 8006a1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	0018      	movs	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b004      	add	sp, #16
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	fffffbff 	.word	0xfffffbff

08006a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	223c      	movs	r2, #60	; 0x3c
 8006a3a:	5c9b      	ldrb	r3, [r3, r2]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIM_ConfigClockSource+0x18>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e0b7      	b.n	8006bb4 <HAL_TIM_ConfigClockSource+0x188>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	223c      	movs	r2, #60	; 0x3c
 8006a48:	2101      	movs	r1, #1
 8006a4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	223d      	movs	r2, #61	; 0x3d
 8006a50:	2102      	movs	r1, #2
 8006a52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2277      	movs	r2, #119	; 0x77
 8006a60:	4393      	bics	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a55      	ldr	r2, [pc, #340]	; (8006bbc <HAL_TIM_ConfigClockSource+0x190>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2280      	movs	r2, #128	; 0x80
 8006a7a:	0192      	lsls	r2, r2, #6
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d040      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0xd6>
 8006a80:	2280      	movs	r2, #128	; 0x80
 8006a82:	0192      	lsls	r2, r2, #6
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d900      	bls.n	8006a8a <HAL_TIM_ConfigClockSource+0x5e>
 8006a88:	e088      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006a8a:	2280      	movs	r2, #128	; 0x80
 8006a8c:	0152      	lsls	r2, r2, #5
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d100      	bne.n	8006a94 <HAL_TIM_ConfigClockSource+0x68>
 8006a92:	e085      	b.n	8006ba0 <HAL_TIM_ConfigClockSource+0x174>
 8006a94:	2280      	movs	r2, #128	; 0x80
 8006a96:	0152      	lsls	r2, r2, #5
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d900      	bls.n	8006a9e <HAL_TIM_ConfigClockSource+0x72>
 8006a9c:	e07e      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006a9e:	2b70      	cmp	r3, #112	; 0x70
 8006aa0:	d018      	beq.n	8006ad4 <HAL_TIM_ConfigClockSource+0xa8>
 8006aa2:	d900      	bls.n	8006aa6 <HAL_TIM_ConfigClockSource+0x7a>
 8006aa4:	e07a      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006aa6:	2b60      	cmp	r3, #96	; 0x60
 8006aa8:	d04f      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x11e>
 8006aaa:	d900      	bls.n	8006aae <HAL_TIM_ConfigClockSource+0x82>
 8006aac:	e076      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006aae:	2b50      	cmp	r3, #80	; 0x50
 8006ab0:	d03b      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0xfe>
 8006ab2:	d900      	bls.n	8006ab6 <HAL_TIM_ConfigClockSource+0x8a>
 8006ab4:	e072      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d057      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x13e>
 8006aba:	d900      	bls.n	8006abe <HAL_TIM_ConfigClockSource+0x92>
 8006abc:	e06e      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006abe:	2b30      	cmp	r3, #48	; 0x30
 8006ac0:	d063      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15e>
 8006ac2:	d86b      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d060      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15e>
 8006ac8:	d868      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d05d      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15e>
 8006ace:	2b10      	cmp	r3, #16
 8006ad0:	d05b      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ad2:	e063      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6899      	ldr	r1, [r3, #8]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f000 fb58 	bl	8007198 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2277      	movs	r2, #119	; 0x77
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
      break;
 8006b00:	e04f      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6899      	ldr	r1, [r3, #8]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f000 fb41 	bl	8007198 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2180      	movs	r1, #128	; 0x80
 8006b22:	01c9      	lsls	r1, r1, #7
 8006b24:	430a      	orrs	r2, r1
 8006b26:	609a      	str	r2, [r3, #8]
      break;
 8006b28:	e03b      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6859      	ldr	r1, [r3, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	001a      	movs	r2, r3
 8006b38:	f000 fab4 	bl	80070a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2150      	movs	r1, #80	; 0x50
 8006b42:	0018      	movs	r0, r3
 8006b44:	f000 fb0e 	bl	8007164 <TIM_ITRx_SetConfig>
      break;
 8006b48:	e02b      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	001a      	movs	r2, r3
 8006b58:	f000 fad2 	bl	8007100 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2160      	movs	r1, #96	; 0x60
 8006b62:	0018      	movs	r0, r3
 8006b64:	f000 fafe 	bl	8007164 <TIM_ITRx_SetConfig>
      break;
 8006b68:	e01b      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6859      	ldr	r1, [r3, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	001a      	movs	r2, r3
 8006b78:	f000 fa94 	bl	80070a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2140      	movs	r1, #64	; 0x40
 8006b82:	0018      	movs	r0, r3
 8006b84:	f000 faee 	bl	8007164 <TIM_ITRx_SetConfig>
      break;
 8006b88:	e00b      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	0019      	movs	r1, r3
 8006b94:	0010      	movs	r0, r2
 8006b96:	f000 fae5 	bl	8007164 <TIM_ITRx_SetConfig>
        break;
 8006b9a:	e002      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006b9c:	46c0      	nop			; (mov r8, r8)
 8006b9e:	e000      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006ba0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	223d      	movs	r2, #61	; 0x3d
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	223c      	movs	r2, #60	; 0x3c
 8006bae:	2100      	movs	r1, #0
 8006bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b004      	add	sp, #16
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	ffff00ff 	.word	0xffff00ff

08006bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <TIM_Base_SetConfig+0xd0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d003      	beq.n	8006be0 <TIM_Base_SetConfig+0x20>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a2e      	ldr	r2, [pc, #184]	; (8006c94 <TIM_Base_SetConfig+0xd4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d108      	bne.n	8006bf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2270      	movs	r2, #112	; 0x70
 8006be4:	4393      	bics	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a26      	ldr	r2, [pc, #152]	; (8006c90 <TIM_Base_SetConfig+0xd0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <TIM_Base_SetConfig+0x62>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a25      	ldr	r2, [pc, #148]	; (8006c94 <TIM_Base_SetConfig+0xd4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00f      	beq.n	8006c22 <TIM_Base_SetConfig+0x62>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a24      	ldr	r2, [pc, #144]	; (8006c98 <TIM_Base_SetConfig+0xd8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <TIM_Base_SetConfig+0x62>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a23      	ldr	r2, [pc, #140]	; (8006c9c <TIM_Base_SetConfig+0xdc>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d007      	beq.n	8006c22 <TIM_Base_SetConfig+0x62>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a22      	ldr	r2, [pc, #136]	; (8006ca0 <TIM_Base_SetConfig+0xe0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_Base_SetConfig+0x62>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <TIM_Base_SetConfig+0xe4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d108      	bne.n	8006c34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4a20      	ldr	r2, [pc, #128]	; (8006ca8 <TIM_Base_SetConfig+0xe8>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	4393      	bics	r3, r2
 8006c3a:	001a      	movs	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a0c      	ldr	r2, [pc, #48]	; (8006c90 <TIM_Base_SetConfig+0xd0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_Base_SetConfig+0xba>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a0d      	ldr	r2, [pc, #52]	; (8006c9c <TIM_Base_SetConfig+0xdc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_Base_SetConfig+0xba>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a0c      	ldr	r2, [pc, #48]	; (8006ca0 <TIM_Base_SetConfig+0xe0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_Base_SetConfig+0xba>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a0b      	ldr	r2, [pc, #44]	; (8006ca4 <TIM_Base_SetConfig+0xe4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d103      	bne.n	8006c82 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	691a      	ldr	r2, [r3, #16]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	615a      	str	r2, [r3, #20]
}
 8006c88:	46c0      	nop			; (mov r8, r8)
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	b004      	add	sp, #16
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40012c00 	.word	0x40012c00
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40002000 	.word	0x40002000
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800
 8006ca8:	fffffcff 	.word	0xfffffcff

08006cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4393      	bics	r3, r2
 8006cbe:	001a      	movs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2270      	movs	r2, #112	; 0x70
 8006cda:	4393      	bics	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	4393      	bics	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	4393      	bics	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a27      	ldr	r2, [pc, #156]	; (8006da4 <TIM_OC1_SetConfig+0xf8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <TIM_OC1_SetConfig+0x76>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a26      	ldr	r2, [pc, #152]	; (8006da8 <TIM_OC1_SetConfig+0xfc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_OC1_SetConfig+0x76>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a25      	ldr	r2, [pc, #148]	; (8006dac <TIM_OC1_SetConfig+0x100>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_OC1_SetConfig+0x76>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a24      	ldr	r2, [pc, #144]	; (8006db0 <TIM_OC1_SetConfig+0x104>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d10c      	bne.n	8006d3c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2208      	movs	r2, #8
 8006d26:	4393      	bics	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2204      	movs	r2, #4
 8006d38:	4393      	bics	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a19      	ldr	r2, [pc, #100]	; (8006da4 <TIM_OC1_SetConfig+0xf8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00b      	beq.n	8006d5c <TIM_OC1_SetConfig+0xb0>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <TIM_OC1_SetConfig+0xfc>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d007      	beq.n	8006d5c <TIM_OC1_SetConfig+0xb0>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a17      	ldr	r2, [pc, #92]	; (8006dac <TIM_OC1_SetConfig+0x100>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d003      	beq.n	8006d5c <TIM_OC1_SetConfig+0xb0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <TIM_OC1_SetConfig+0x104>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d111      	bne.n	8006d80 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <TIM_OC1_SetConfig+0x108>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <TIM_OC1_SetConfig+0x10c>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b006      	add	sp, #24
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40014400 	.word	0x40014400
 8006db0:	40014800 	.word	0x40014800
 8006db4:	fffffeff 	.word	0xfffffeff
 8006db8:	fffffdff 	.word	0xfffffdff

08006dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	4393      	bics	r3, r2
 8006dce:	001a      	movs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4a2e      	ldr	r2, [pc, #184]	; (8006ea4 <TIM_OC2_SetConfig+0xe8>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4a2d      	ldr	r2, [pc, #180]	; (8006ea8 <TIM_OC2_SetConfig+0xec>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2220      	movs	r2, #32
 8006e06:	4393      	bics	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a24      	ldr	r2, [pc, #144]	; (8006eac <TIM_OC2_SetConfig+0xf0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d10d      	bne.n	8006e3a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2280      	movs	r2, #128	; 0x80
 8006e22:	4393      	bics	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2240      	movs	r2, #64	; 0x40
 8006e36:	4393      	bics	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1b      	ldr	r2, [pc, #108]	; (8006eac <TIM_OC2_SetConfig+0xf0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00b      	beq.n	8006e5a <TIM_OC2_SetConfig+0x9e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1a      	ldr	r2, [pc, #104]	; (8006eb0 <TIM_OC2_SetConfig+0xf4>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d007      	beq.n	8006e5a <TIM_OC2_SetConfig+0x9e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a19      	ldr	r2, [pc, #100]	; (8006eb4 <TIM_OC2_SetConfig+0xf8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d003      	beq.n	8006e5a <TIM_OC2_SetConfig+0x9e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <TIM_OC2_SetConfig+0xfc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d113      	bne.n	8006e82 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	4a17      	ldr	r2, [pc, #92]	; (8006ebc <TIM_OC2_SetConfig+0x100>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	4a16      	ldr	r2, [pc, #88]	; (8006ec0 <TIM_OC2_SetConfig+0x104>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	621a      	str	r2, [r3, #32]
}
 8006e9c:	46c0      	nop			; (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b006      	add	sp, #24
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	ffff8fff 	.word	0xffff8fff
 8006ea8:	fffffcff 	.word	0xfffffcff
 8006eac:	40012c00 	.word	0x40012c00
 8006eb0:	40014000 	.word	0x40014000
 8006eb4:	40014400 	.word	0x40014400
 8006eb8:	40014800 	.word	0x40014800
 8006ebc:	fffffbff 	.word	0xfffffbff
 8006ec0:	fffff7ff 	.word	0xfffff7ff

08006ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	4a35      	ldr	r2, [pc, #212]	; (8006fa8 <TIM_OC3_SetConfig+0xe4>)
 8006ed4:	401a      	ands	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2270      	movs	r2, #112	; 0x70
 8006ef0:	4393      	bics	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	4393      	bics	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	4a28      	ldr	r2, [pc, #160]	; (8006fac <TIM_OC3_SetConfig+0xe8>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <TIM_OC3_SetConfig+0xec>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d10d      	bne.n	8006f3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	4a23      	ldr	r2, [pc, #140]	; (8006fb4 <TIM_OC3_SetConfig+0xf0>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	4a1f      	ldr	r2, [pc, #124]	; (8006fb8 <TIM_OC3_SetConfig+0xf4>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1b      	ldr	r2, [pc, #108]	; (8006fb0 <TIM_OC3_SetConfig+0xec>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00b      	beq.n	8006f5e <TIM_OC3_SetConfig+0x9a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1c      	ldr	r2, [pc, #112]	; (8006fbc <TIM_OC3_SetConfig+0xf8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <TIM_OC3_SetConfig+0x9a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <TIM_OC3_SetConfig+0xfc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_OC3_SetConfig+0x9a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <TIM_OC3_SetConfig+0x100>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d113      	bne.n	8006f86 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	4a19      	ldr	r2, [pc, #100]	; (8006fc8 <TIM_OC3_SetConfig+0x104>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4a18      	ldr	r2, [pc, #96]	; (8006fcc <TIM_OC3_SetConfig+0x108>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	621a      	str	r2, [r3, #32]
}
 8006fa0:	46c0      	nop			; (mov r8, r8)
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b006      	add	sp, #24
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	fffffeff 	.word	0xfffffeff
 8006fac:	fffffdff 	.word	0xfffffdff
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	fffff7ff 	.word	0xfffff7ff
 8006fb8:	fffffbff 	.word	0xfffffbff
 8006fbc:	40014000 	.word	0x40014000
 8006fc0:	40014400 	.word	0x40014400
 8006fc4:	40014800 	.word	0x40014800
 8006fc8:	ffffefff 	.word	0xffffefff
 8006fcc:	ffffdfff 	.word	0xffffdfff

08006fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	4a28      	ldr	r2, [pc, #160]	; (8007080 <TIM_OC4_SetConfig+0xb0>)
 8006fe0:	401a      	ands	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4a22      	ldr	r2, [pc, #136]	; (8007084 <TIM_OC4_SetConfig+0xb4>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4a21      	ldr	r2, [pc, #132]	; (8007088 <TIM_OC4_SetConfig+0xb8>)
 8007004:	4013      	ands	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4a1d      	ldr	r2, [pc, #116]	; (800708c <TIM_OC4_SetConfig+0xbc>)
 8007018:	4013      	ands	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	031b      	lsls	r3, r3, #12
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a19      	ldr	r2, [pc, #100]	; (8007090 <TIM_OC4_SetConfig+0xc0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00b      	beq.n	8007048 <TIM_OC4_SetConfig+0x78>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a18      	ldr	r2, [pc, #96]	; (8007094 <TIM_OC4_SetConfig+0xc4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d007      	beq.n	8007048 <TIM_OC4_SetConfig+0x78>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <TIM_OC4_SetConfig+0xc8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d003      	beq.n	8007048 <TIM_OC4_SetConfig+0x78>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a16      	ldr	r2, [pc, #88]	; (800709c <TIM_OC4_SetConfig+0xcc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d109      	bne.n	800705c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4a15      	ldr	r2, [pc, #84]	; (80070a0 <TIM_OC4_SetConfig+0xd0>)
 800704c:	4013      	ands	r3, r2
 800704e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	019b      	lsls	r3, r3, #6
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	621a      	str	r2, [r3, #32]
}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	46bd      	mov	sp, r7
 800707a:	b006      	add	sp, #24
 800707c:	bd80      	pop	{r7, pc}
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	ffffefff 	.word	0xffffefff
 8007084:	ffff8fff 	.word	0xffff8fff
 8007088:	fffffcff 	.word	0xfffffcff
 800708c:	ffffdfff 	.word	0xffffdfff
 8007090:	40012c00 	.word	0x40012c00
 8007094:	40014000 	.word	0x40014000
 8007098:	40014400 	.word	0x40014400
 800709c:	40014800 	.word	0x40014800
 80070a0:	ffffbfff 	.word	0xffffbfff

080070a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	2201      	movs	r2, #1
 80070bc:	4393      	bics	r3, r2
 80070be:	001a      	movs	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	22f0      	movs	r2, #240	; 0xf0
 80070ce:	4393      	bics	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	220a      	movs	r2, #10
 80070e0:	4393      	bics	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	621a      	str	r2, [r3, #32]
}
 80070f8:	46c0      	nop			; (mov r8, r8)
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b006      	add	sp, #24
 80070fe:	bd80      	pop	{r7, pc}

08007100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	2210      	movs	r2, #16
 8007112:	4393      	bics	r3, r2
 8007114:	001a      	movs	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	4a0d      	ldr	r2, [pc, #52]	; (8007160 <TIM_TI2_ConfigInputStage+0x60>)
 800712a:	4013      	ands	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	031b      	lsls	r3, r3, #12
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	22a0      	movs	r2, #160	; 0xa0
 800713c:	4393      	bics	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	621a      	str	r2, [r3, #32]
}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	46bd      	mov	sp, r7
 800715a:	b006      	add	sp, #24
 800715c:	bd80      	pop	{r7, pc}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	ffff0fff 	.word	0xffff0fff

08007164 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2270      	movs	r2, #112	; 0x70
 8007178:	4393      	bics	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4313      	orrs	r3, r2
 8007182:	2207      	movs	r2, #7
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	609a      	str	r2, [r3, #8]
}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	46bd      	mov	sp, r7
 8007192:	b004      	add	sp, #16
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <TIM_ETR_SetConfig+0x3c>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	021a      	lsls	r2, r3, #8
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4313      	orrs	r3, r2
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	609a      	str	r2, [r3, #8]
}
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b006      	add	sp, #24
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	ffff00ff 	.word	0xffff00ff

080071d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	221f      	movs	r2, #31
 80071e8:	4013      	ands	r3, r2
 80071ea:	2201      	movs	r2, #1
 80071ec:	409a      	lsls	r2, r3
 80071ee:	0013      	movs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	43d2      	mvns	r2, r2
 80071fa:	401a      	ands	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1a      	ldr	r2, [r3, #32]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	211f      	movs	r1, #31
 8007208:	400b      	ands	r3, r1
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	4099      	lsls	r1, r3
 800720e:	000b      	movs	r3, r1
 8007210:	431a      	orrs	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	46bd      	mov	sp, r7
 800721a:	b006      	add	sp, #24
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	223c      	movs	r2, #60	; 0x3c
 800722e:	5c9b      	ldrb	r3, [r3, r2]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e041      	b.n	80072bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	223c      	movs	r2, #60	; 0x3c
 800723c:	2101      	movs	r1, #1
 800723e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	223d      	movs	r2, #61	; 0x3d
 8007244:	2102      	movs	r1, #2
 8007246:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2270      	movs	r2, #112	; 0x70
 800725c:	4393      	bics	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a13      	ldr	r2, [pc, #76]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d009      	beq.n	8007290 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a11      	ldr	r2, [pc, #68]	; (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a10      	ldr	r2, [pc, #64]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10c      	bne.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2280      	movs	r2, #128	; 0x80
 8007294:	4393      	bics	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	223d      	movs	r2, #61	; 0x3d
 80072ae:	2101      	movs	r1, #1
 80072b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	223c      	movs	r2, #60	; 0x3c
 80072b6:	2100      	movs	r1, #0
 80072b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	0018      	movs	r0, r3
 80072be:	46bd      	mov	sp, r7
 80072c0:	b004      	add	sp, #16
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	40000400 	.word	0x40000400
 80072cc:	40014000 	.word	0x40014000

080072d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	223c      	movs	r2, #60	; 0x3c
 80072e2:	5c9b      	ldrb	r3, [r3, r2]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e03e      	b.n	800736a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	223c      	movs	r2, #60	; 0x3c
 80072f0:	2101      	movs	r1, #1
 80072f2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	22ff      	movs	r2, #255	; 0xff
 80072f8:	4393      	bics	r3, r2
 80072fa:	001a      	movs	r2, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a1b      	ldr	r2, [pc, #108]	; (8007374 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007308:	401a      	ands	r2, r3
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4a18      	ldr	r2, [pc, #96]	; (8007378 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007316:	401a      	ands	r2, r3
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4a16      	ldr	r2, [pc, #88]	; (800737c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007324:	401a      	ands	r2, r3
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4a13      	ldr	r2, [pc, #76]	; (8007380 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007332:	401a      	ands	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4a11      	ldr	r2, [pc, #68]	; (8007384 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007340:	401a      	ands	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4a0e      	ldr	r2, [pc, #56]	; (8007388 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800734e:	401a      	ands	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	223c      	movs	r2, #60	; 0x3c
 8007364:	2100      	movs	r1, #0
 8007366:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	0018      	movs	r0, r3
 800736c:	46bd      	mov	sp, r7
 800736e:	b004      	add	sp, #16
 8007370:	bd80      	pop	{r7, pc}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	fffffcff 	.word	0xfffffcff
 8007378:	fffffbff 	.word	0xfffffbff
 800737c:	fffff7ff 	.word	0xfffff7ff
 8007380:	ffffefff 	.word	0xffffefff
 8007384:	ffffdfff 	.word	0xffffdfff
 8007388:	ffffbfff 	.word	0xffffbfff

0800738c <ADC_Init>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void ADC_Init(const uint32_t sysTime)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	AVE_FILTER_U16_InitPeriodic(&m_aveFilters[ANALOG_CHANNEL_CS1], sysTime, FILTER_PERIOD_MS_CS1);
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4b29      	ldr	r3, [pc, #164]	; (800743c <ADC_Init+0xb0>)
 8007398:	220a      	movs	r2, #10
 800739a:	0018      	movs	r0, r3
 800739c:	f000 fabe 	bl	800791c <AVE_FILTER_U16_InitPeriodic>
	AVE_FILTER_U16_InitPeriodic(&m_aveFilters[ANALOG_CHANNEL_CS2], sysTime, FILTER_PERIOD_MS_CS2);
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	4b27      	ldr	r3, [pc, #156]	; (8007440 <ADC_Init+0xb4>)
 80073a4:	220a      	movs	r2, #10
 80073a6:	0018      	movs	r0, r3
 80073a8:	f000 fab8 	bl	800791c <AVE_FILTER_U16_InitPeriodic>
	AVE_FILTER_U16_InitPeriodic(&m_aveFilters[ANALOG_CHANNEL_VBAT], sysTime, FILTER_PERIOD_MS_VBAT);
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4b25      	ldr	r3, [pc, #148]	; (8007444 <ADC_Init+0xb8>)
 80073b0:	220a      	movs	r2, #10
 80073b2:	0018      	movs	r0, r3
 80073b4:	f000 fab2 	bl	800791c <AVE_FILTER_U16_InitPeriodic>
	AVE_FILTER_U16_InitPeriodic(&m_aveFilters[ANALOG_CHANNEL_NTC], sysTime, FILTER_PERIOD_MS_NTC);
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	4b23      	ldr	r3, [pc, #140]	; (8007448 <ADC_Init+0xbc>)
 80073bc:	220a      	movs	r2, #10
 80073be:	0018      	movs	r0, r3
 80073c0:	f000 faac 	bl	800791c <AVE_FILTER_U16_InitPeriodic>
	AVE_FILTER_U16_InitPeriodic(&m_aveFilters[ANALOG_CHANNEL_POW_DET], sysTime, FILTER_PERIOD_MS_POW_DET);
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4b21      	ldr	r3, [pc, #132]	; (800744c <ADC_Init+0xc0>)
 80073c8:	220a      	movs	r2, #10
 80073ca:	0018      	movs	r0, r3
 80073cc:	f000 faa6 	bl	800791c <AVE_FILTER_U16_InitPeriodic>
	AVE_FILTER_U16_InitPeriodic(&m_aveFilters[ANALOG_CHANNEL_BATTYPE], sysTime, FILTER_PERIOD_MS_BATTYPE);
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <ADC_Init+0xc4>)
 80073d4:	220a      	movs	r2, #10
 80073d6:	0018      	movs	r0, r3
 80073d8:	f000 faa0 	bl	800791c <AVE_FILTER_U16_InitPeriodic>
	AVE_FILTER_U16_InitPeriodic(&m_aveFilters[ANALOG_CHANNEL_IO1], sysTime, FILTER_PERIOD_MS_IO1);
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4b1d      	ldr	r3, [pc, #116]	; (8007454 <ADC_Init+0xc8>)
 80073e0:	220a      	movs	r2, #10
 80073e2:	0018      	movs	r0, r3
 80073e4:	f000 fa9a 	bl	800791c <AVE_FILTER_U16_InitPeriodic>
	AVE_FILTER_U16_InitPeriodic(&m_aveFilters[ANALOG_CHANNEL_MPUTEMP], sysTime, FILTER_PERIOD_MS_MPUTEMP);
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <ADC_Init+0xcc>)
 80073ec:	220a      	movs	r2, #10
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 fa94 	bl	800791c <AVE_FILTER_U16_InitPeriodic>
	AVE_FILTER_U16_InitPeriodic(&m_aveFilters[ANALOG_CHANNEL_INTREF], sysTime, FILTER_PERIOD_MS_INTREF);
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4b19      	ldr	r3, [pc, #100]	; (800745c <ADC_Init+0xd0>)
 80073f8:	220a      	movs	r2, #10
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 fa8e 	bl	800791c <AVE_FILTER_U16_InitPeriodic>

	AVE_FILTER_S32_InitPeriodic(&m_currentSenseFilter, sysTime, FILTER_PERIOD_MS_ISENSE);
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4b17      	ldr	r3, [pc, #92]	; (8007460 <ADC_Init+0xd4>)
 8007404:	223e      	movs	r2, #62	; 0x3e
 8007406:	0018      	movs	r0, r3
 8007408:	f000 fb77 	bl	8007afa <AVE_FILTER_S32_InitPeriodic>

	m_aveFilterReady = false;
 800740c:	4b15      	ldr	r3, [pc, #84]	; (8007464 <ADC_Init+0xd8>)
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]

	m_adcIntRefCal = *(VREFINT_CAL_ADDR);
 8007412:	4b15      	ldr	r3, [pc, #84]	; (8007468 <ADC_Init+0xdc>)
 8007414:	881a      	ldrh	r2, [r3, #0]
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <ADC_Init+0xe0>)
 8007418:	801a      	strh	r2, [r3, #0]

	HAL_ADCEx_Calibration_Start(&hadc);
 800741a:	4b15      	ldr	r3, [pc, #84]	; (8007470 <ADC_Init+0xe4>)
 800741c:	0018      	movs	r0, r3
 800741e:	f7fc fc25 	bl	8003c6c <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&m_adcVals[0u], MAX_ANALOG_CHANNELS);
 8007422:	4914      	ldr	r1, [pc, #80]	; (8007474 <ADC_Init+0xe8>)
 8007424:	4b12      	ldr	r3, [pc, #72]	; (8007470 <ADC_Init+0xe4>)
 8007426:	2209      	movs	r2, #9
 8007428:	0018      	movs	r0, r3
 800742a:	f7fb ffdb 	bl	80033e4 <HAL_ADC_Start_DMA>

	MS_TIMEREF_INIT(m_lastAdcStartTime, sysTime);
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <ADC_Init+0xec>)
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
}
 8007434:	46c0      	nop			; (mov r8, r8)
 8007436:	46bd      	mov	sp, r7
 8007438:	b002      	add	sp, #8
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000fc8 	.word	0x20000fc8
 8007440:	20000ffc 	.word	0x20000ffc
 8007444:	20001030 	.word	0x20001030
 8007448:	20001064 	.word	0x20001064
 800744c:	20001098 	.word	0x20001098
 8007450:	200010cc 	.word	0x200010cc
 8007454:	20001100 	.word	0x20001100
 8007458:	20001134 	.word	0x20001134
 800745c:	20001168 	.word	0x20001168
 8007460:	200011a0 	.word	0x200011a0
 8007464:	20001206 	.word	0x20001206
 8007468:	1ffff7ba 	.word	0x1ffff7ba
 800746c:	20001204 	.word	0x20001204
 8007470:	20001930 	.word	0x20001930
 8007474:	20000fb4 	.word	0x20000fb4
 8007478:	20001200 	.word	0x20001200

0800747c <ADC_Shutdown>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void ADC_Shutdown(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc);
 8007480:	4b03      	ldr	r3, [pc, #12]	; (8007490 <ADC_Shutdown+0x14>)
 8007482:	0018      	movs	r0, r3
 8007484:	f7fc f830 	bl	80034e8 <HAL_ADC_Stop_DMA>
}
 8007488:	46c0      	nop			; (mov r8, r8)
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	20001930 	.word	0x20001930

08007494 <ADC_Service>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void ADC_Service(const uint32_t sysTime)
{
 8007494:	b5b0      	push	{r4, r5, r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	int16_t iVal;

	if (MS_TIMEREF_TIMEOUT(m_lastAdcStartTime, sysTime, ADC_SAMPLE_PERIOD_MS))
	{
		MS_TIMEREF_INIT(m_lastAdcStartTime, sysTime);
 800749c:	4b44      	ldr	r3, [pc, #272]	; (80075b0 <ADC_Service+0x11c>)
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]

		if ((hadc.Instance->ISR & ADC_ISR_EOS) != 0u)
 80074a2:	4b44      	ldr	r3, [pc, #272]	; (80075b4 <ADC_Service+0x120>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2208      	movs	r2, #8
 80074aa:	4013      	ands	r3, r2
 80074ac:	d100      	bne.n	80074b0 <ADC_Service+0x1c>
 80074ae:	e07b      	b.n	80075a8 <ADC_Service+0x114>
		{
			HAL_ADC_Stop_DMA(&hadc);
 80074b0:	4b40      	ldr	r3, [pc, #256]	; (80075b4 <ADC_Service+0x120>)
 80074b2:	0018      	movs	r0, r3
 80074b4:	f7fc f818 	bl	80034e8 <HAL_ADC_Stop_DMA>

			for (i = 0u; i < MAX_ANALOG_CHANNELS; i++)
 80074b8:	230f      	movs	r3, #15
 80074ba:	18fb      	adds	r3, r7, r3
 80074bc:	2200      	movs	r2, #0
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e02c      	b.n	800751c <ADC_Service+0x88>
			{
				if (false == m_aveFilterReady)
 80074c2:	4b3d      	ldr	r3, [pc, #244]	; (80075b8 <ADC_Service+0x124>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2201      	movs	r2, #1
 80074c8:	4053      	eors	r3, r2
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00f      	beq.n	80074f0 <ADC_Service+0x5c>
				{
					// Spam in values to fill the buffer
					AVE_FILTER_U16_Update(&m_aveFilters[i], m_adcVals[i]);
 80074d0:	210f      	movs	r1, #15
 80074d2:	187b      	adds	r3, r7, r1
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2234      	movs	r2, #52	; 0x34
 80074d8:	435a      	muls	r2, r3
 80074da:	4b38      	ldr	r3, [pc, #224]	; (80075bc <ADC_Service+0x128>)
 80074dc:	18d0      	adds	r0, r2, r3
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	4b37      	ldr	r3, [pc, #220]	; (80075c0 <ADC_Service+0x12c>)
 80074e4:	0052      	lsls	r2, r2, #1
 80074e6:	5ad3      	ldrh	r3, [r2, r3]
 80074e8:	0019      	movs	r1, r3
 80074ea:	f000 f9d0 	bl	800788e <AVE_FILTER_U16_Update>
 80074ee:	e00f      	b.n	8007510 <ADC_Service+0x7c>
				}
				else
				{
					AVE_FILTER_U16_UpdatePeriodic(&m_aveFilters[i], m_adcVals[i], sysTime);
 80074f0:	210f      	movs	r1, #15
 80074f2:	187b      	adds	r3, r7, r1
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2234      	movs	r2, #52	; 0x34
 80074f8:	435a      	muls	r2, r3
 80074fa:	4b30      	ldr	r3, [pc, #192]	; (80075bc <ADC_Service+0x128>)
 80074fc:	18d0      	adds	r0, r2, r3
 80074fe:	187b      	adds	r3, r7, r1
 8007500:	781a      	ldrb	r2, [r3, #0]
 8007502:	4b2f      	ldr	r3, [pc, #188]	; (80075c0 <ADC_Service+0x12c>)
 8007504:	0052      	lsls	r2, r2, #1
 8007506:	5ad3      	ldrh	r3, [r2, r3]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	0019      	movs	r1, r3
 800750c:	f000 f9a0 	bl	8007850 <AVE_FILTER_U16_UpdatePeriodic>
			for (i = 0u; i < MAX_ANALOG_CHANNELS; i++)
 8007510:	210f      	movs	r1, #15
 8007512:	187b      	adds	r3, r7, r1
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	187b      	adds	r3, r7, r1
 8007518:	3201      	adds	r2, #1
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	230f      	movs	r3, #15
 800751e:	18fb      	adds	r3, r7, r3
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b08      	cmp	r3, #8
 8007524:	d9cd      	bls.n	80074c2 <ADC_Service+0x2e>
				}
			}

			if ( (true == m_aveFilterReady) && (m_aveFilters[ANALOG_CHANNEL_INTREF].average > 0u) )
 8007526:	4b24      	ldr	r3, [pc, #144]	; (80075b8 <ADC_Service+0x124>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d013      	beq.n	8007556 <ADC_Service+0xc2>
 800752e:	4a23      	ldr	r2, [pc, #140]	; (80075bc <ADC_Service+0x128>)
 8007530:	23d1      	movs	r3, #209	; 0xd1
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	5ad3      	ldrh	r3, [r2, r3]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00d      	beq.n	8007556 <ADC_Service+0xc2>
			{
				m_adcRefScale = (0x00010000u * ((uint32_t)m_adcIntRefCal)) / (uint32_t)m_aveFilters[ANALOG_CHANNEL_INTREF].average;
 800753a:	4b22      	ldr	r3, [pc, #136]	; (80075c4 <ADC_Service+0x130>)
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	0418      	lsls	r0, r3, #16
 8007540:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <ADC_Service+0x128>)
 8007542:	23d1      	movs	r3, #209	; 0xd1
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	5ad3      	ldrh	r3, [r2, r3]
 8007548:	0019      	movs	r1, r3
 800754a:	f7f8 fddb 	bl	8000104 <__udivsi3>
 800754e:	0003      	movs	r3, r0
 8007550:	001a      	movs	r2, r3
 8007552:	4b1d      	ldr	r3, [pc, #116]	; (80075c8 <ADC_Service+0x134>)
 8007554:	601a      	str	r2, [r3, #0]
			}

			// Convert sense resistor value to mA (not calibrated!)
			iVal = UTIL_FixMul_U32_S16(ADC_RES_TO_MA_K,(int32_t)(m_aveFilters[ANALOG_CHANNEL_CS1].total - m_aveFilters[ANALOG_CHANNEL_CS2].total));
 8007556:	4b19      	ldr	r3, [pc, #100]	; (80075bc <ADC_Service+0x128>)
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	b29a      	uxth	r2, r3
 800755c:	4b17      	ldr	r3, [pc, #92]	; (80075bc <ADC_Service+0x128>)
 800755e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007560:	b29b      	uxth	r3, r3
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	b29b      	uxth	r3, r3
 8007566:	b21a      	sxth	r2, r3
 8007568:	250c      	movs	r5, #12
 800756a:	197c      	adds	r4, r7, r5
 800756c:	23a0      	movs	r3, #160	; 0xa0
 800756e:	035b      	lsls	r3, r3, #13
 8007570:	0011      	movs	r1, r2
 8007572:	0018      	movs	r0, r3
 8007574:	f00c f8f5 	bl	8013762 <UTIL_FixMul_U32_S16>
 8007578:	0003      	movs	r3, r0
 800757a:	8023      	strh	r3, [r4, #0]

			// update filter
			AVE_FILTER_S32_UpdatePeriodic(&m_currentSenseFilter, iVal, sysTime);
 800757c:	197b      	adds	r3, r7, r5
 800757e:	2100      	movs	r1, #0
 8007580:	5e59      	ldrsh	r1, [r3, r1]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4b11      	ldr	r3, [pc, #68]	; (80075cc <ADC_Service+0x138>)
 8007586:	0018      	movs	r0, r3
 8007588:	f000 fa0d 	bl	80079a6 <AVE_FILTER_S32_UpdatePeriodic>

			if (0u == m_aveFilters[0].nextValueIdx)
 800758c:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <ADC_Service+0x128>)
 800758e:	2230      	movs	r2, #48	; 0x30
 8007590:	5c9b      	ldrb	r3, [r3, r2]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d102      	bne.n	800759c <ADC_Service+0x108>
			{
				m_aveFilterReady = true;
 8007596:	4b08      	ldr	r3, [pc, #32]	; (80075b8 <ADC_Service+0x124>)
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
			}

			HAL_ADC_Start_DMA(&hadc, (uint32_t*)&m_adcVals[0u], MAX_ANALOG_CHANNELS);
 800759c:	4908      	ldr	r1, [pc, #32]	; (80075c0 <ADC_Service+0x12c>)
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <ADC_Service+0x120>)
 80075a0:	2209      	movs	r2, #9
 80075a2:	0018      	movs	r0, r3
 80075a4:	f7fb ff1e 	bl	80033e4 <HAL_ADC_Start_DMA>
		}
	}
}
 80075a8:	46c0      	nop			; (mov r8, r8)
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b004      	add	sp, #16
 80075ae:	bdb0      	pop	{r4, r5, r7, pc}
 80075b0:	20001200 	.word	0x20001200
 80075b4:	20001930 	.word	0x20001930
 80075b8:	20001206 	.word	0x20001206
 80075bc:	20000fc8 	.word	0x20000fc8
 80075c0:	20000fb4 	.word	0x20000fb4
 80075c4:	20001204 	.word	0x20001204
 80075c8:	2000000c 	.word	0x2000000c
 80075cc:	200011a0 	.word	0x200011a0

080075d0 <ADC_GetAverageValue>:
 * @param	channel		channel to be accessed
 * @retval	uint16_t	averaged value of the analog channel
 */
// ****************************************************************************
uint16_t ADC_GetAverageValue(const uint8_t channel)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	0002      	movs	r2, r0
 80075d8:	1dfb      	adds	r3, r7, #7
 80075da:	701a      	strb	r2, [r3, #0]
	uint16_t result = 0u;
 80075dc:	210e      	movs	r1, #14
 80075de:	187b      	adds	r3, r7, r1
 80075e0:	2200      	movs	r2, #0
 80075e2:	801a      	strh	r2, [r3, #0]

	if (channel < MAX_ANALOG_CHANNELS)
 80075e4:	1dfb      	adds	r3, r7, #7
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d809      	bhi.n	8007600 <ADC_GetAverageValue+0x30>
	{
		result = m_aveFilters[channel].average;
 80075ec:	1dfb      	adds	r3, r7, #7
 80075ee:	781a      	ldrb	r2, [r3, #0]
 80075f0:	187b      	adds	r3, r7, r1
 80075f2:	4907      	ldr	r1, [pc, #28]	; (8007610 <ADC_GetAverageValue+0x40>)
 80075f4:	2034      	movs	r0, #52	; 0x34
 80075f6:	4342      	muls	r2, r0
 80075f8:	188a      	adds	r2, r1, r2
 80075fa:	3202      	adds	r2, #2
 80075fc:	8812      	ldrh	r2, [r2, #0]
 80075fe:	801a      	strh	r2, [r3, #0]
	}

	return result;
 8007600:	230e      	movs	r3, #14
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	881b      	ldrh	r3, [r3, #0]
}
 8007606:	0018      	movs	r0, r3
 8007608:	46bd      	mov	sp, r7
 800760a:	b004      	add	sp, #16
 800760c:	bd80      	pop	{r7, pc}
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	20000fc8 	.word	0x20000fc8

08007614 <ADC_CalibrateValue>:
 * @param	value		ADC value
 * @retval	uint16_t	corrected value based on the intref value.
 */
// ****************************************************************************
uint16_t ADC_CalibrateValue(const uint16_t value)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	0002      	movs	r2, r0
 800761c:	1dbb      	adds	r3, r7, #6
 800761e:	801a      	strh	r2, [r3, #0]
	/* Apply fixed point multipler */
	uint32_t result = value * m_adcRefScale;
 8007620:	1dbb      	adds	r3, r7, #6
 8007622:	881a      	ldrh	r2, [r3, #0]
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <ADC_CalibrateValue+0x3c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4353      	muls	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

	// Round up if halfway there
	if (0u != (result & 0x8000u))
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	2380      	movs	r3, #128	; 0x80
 8007630:	021b      	lsls	r3, r3, #8
 8007632:	4013      	ands	r3, r2
 8007634:	d005      	beq.n	8007642 <ADC_CalibrateValue+0x2e>
	{
		result += 0x10000u;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2280      	movs	r2, #128	; 0x80
 800763a:	0252      	lsls	r2, r2, #9
 800763c:	4694      	mov	ip, r2
 800763e:	4463      	add	r3, ip
 8007640:	60fb      	str	r3, [r7, #12]
	}

	return (uint16_t)(result >> 16u);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	0c1b      	lsrs	r3, r3, #16
 8007646:	b29b      	uxth	r3, r3
}
 8007648:	0018      	movs	r0, r3
 800764a:	46bd      	mov	sp, r7
 800764c:	b004      	add	sp, #16
 800764e:	bd80      	pop	{r7, pc}
 8007650:	2000000c 	.word	0x2000000c

08007654 <ADC_GetCurrentSenseAverage>:
 * @param	none
 * @retval	int16_t		Oversampled difference between CS1 and CS2
 */
// ****************************************************************************
int16_t ADC_GetCurrentSenseAverage(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
	// TODO - Make sure this copies and not works on actual value
	int32_t result = m_currentSenseFilter.average;
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <ADC_GetCurrentSenseAverage+0x34>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	607b      	str	r3, [r7, #4]

	if (result < INT16_MIN)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a0a      	ldr	r2, [pc, #40]	; (800768c <ADC_GetCurrentSenseAverage+0x38>)
 8007664:	4293      	cmp	r3, r2
 8007666:	da01      	bge.n	800766c <ADC_GetCurrentSenseAverage+0x18>
	{
		result = INT16_MIN;
 8007668:	4b08      	ldr	r3, [pc, #32]	; (800768c <ADC_GetCurrentSenseAverage+0x38>)
 800766a:	607b      	str	r3, [r7, #4]
	}

	if (result > INT16_MAX)
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	2380      	movs	r3, #128	; 0x80
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	429a      	cmp	r2, r3
 8007674:	db01      	blt.n	800767a <ADC_GetCurrentSenseAverage+0x26>
	{
		result = INT16_MAX;
 8007676:	4b06      	ldr	r3, [pc, #24]	; (8007690 <ADC_GetCurrentSenseAverage+0x3c>)
 8007678:	607b      	str	r3, [r7, #4]
	}

	return (int16_t)result;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	b21b      	sxth	r3, r3
}
 800767e:	0018      	movs	r0, r3
 8007680:	46bd      	mov	sp, r7
 8007682:	b002      	add	sp, #8
 8007684:	bd80      	pop	{r7, pc}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	200011a0 	.word	0x200011a0
 800768c:	ffff8000 	.word	0xffff8000
 8007690:	00007fff 	.word	0x00007fff

08007694 <ADC_GetFilterReady>:
 * @param	none
 * @retval	bool		True = average filter ready, false = buffer not full
 */
// ****************************************************************************
bool ADC_GetFilterReady(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
	return m_aveFilterReady;
 8007698:	4b02      	ldr	r3, [pc, #8]	; (80076a4 <ADC_GetFilterReady+0x10>)
 800769a:	781b      	ldrb	r3, [r3, #0]
}
 800769c:	0018      	movs	r0, r3
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	20001206 	.word	0x20001206

080076a8 <ADC_SetIFilterPeriod>:
 * @param	newFilterPeriodMs	new filter update period in mS
 * @retval	none
 */
// ****************************************************************************
void ADC_SetIFilterPeriod(uint32_t newFilterPeriodMs)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
	m_currentSenseFilter.filterPeriodMs = newFilterPeriodMs;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	b299      	uxth	r1, r3
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <ADC_SetIFilterPeriod+0x1c>)
 80076b6:	2250      	movs	r2, #80	; 0x50
 80076b8:	5299      	strh	r1, [r3, r2]
}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	46bd      	mov	sp, r7
 80076be:	b002      	add	sp, #8
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	200011a0 	.word	0x200011a0

080076c8 <ANALOG_Init>:
static int16_t m_mcuTemperature = 25; // will contain the mcuTemperature in degree Celsius


// Needs to be called once ADC has filled the filter buffer
void ANALOG_Init(uint32_t sysTime)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	// Process resistorConfig
	SwitchResCongigInit(ADC_GetAverageValue(ANALOG_CHANNEL_BATTYPE));
 80076d0:	2005      	movs	r0, #5
 80076d2:	f7ff ff7d 	bl	80075d0 <ADC_GetAverageValue>
 80076d6:	0003      	movs	r3, r0
 80076d8:	0018      	movs	r0, r3
 80076da:	f004 f9f7 	bl	800bacc <SwitchResCongigInit>

	// Initialise thermister period
	MS_TIMEREF_INIT(tempCalcCounter, sysTime);
 80076de:	4b03      	ldr	r3, [pc, #12]	; (80076ec <ANALOG_Init+0x24>)
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	46c0      	nop			; (mov r8, r8)
 80076e6:	46bd      	mov	sp, r7
 80076e8:	b002      	add	sp, #8
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20001208 	.word	0x20001208

080076f0 <ANALOG_Shutdown>:


void ANALOG_Shutdown(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0

}
 80076f4:	46c0      	nop			; (mov r8, r8)
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <ANALOG_Service>:


void ANALOG_Service(const uint32_t sysTime)
{
 80076fc:	b5b0      	push	{r4, r5, r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
	const uint16_t AVDD = ANALOG_GetAVDDMv();
 8007704:	2516      	movs	r5, #22
 8007706:	197c      	adds	r4, r7, r5
 8007708:	f000 f83c 	bl	8007784 <ANALOG_GetAVDDMv>
 800770c:	0003      	movs	r3, r0
 800770e:	8023      	strh	r3, [r4, #0]

	if (MS_TIMEREF_TIMEOUT(tempCalcCounter, sysTime, 2000u))
 8007710:	4b18      	ldr	r3, [pc, #96]	; (8007774 <ANALOG_Service+0x78>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	23fa      	movs	r3, #250	; 0xfa
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	429a      	cmp	r2, r3
 800771e:	d325      	bcc.n	800776c <ANALOG_Service+0x70>
	{
		MS_TIMEREF_INIT(tempCalcCounter, sysTime);
 8007720:	4b14      	ldr	r3, [pc, #80]	; (8007774 <ANALOG_Service+0x78>)
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	601a      	str	r2, [r3, #0]

		int32_t vtemp = (((uint32_t)ADC_GetAverageValue(ANALOG_CHANNEL_MPUTEMP)) * AVDD * 10u) >> 12u;
 8007726:	2007      	movs	r0, #7
 8007728:	f7ff ff52 	bl	80075d0 <ADC_GetAverageValue>
 800772c:	0003      	movs	r3, r0
 800772e:	001a      	movs	r2, r3
 8007730:	197b      	adds	r3, r7, r5
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	435a      	muls	r2, r3
 8007736:	0013      	movs	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	189b      	adds	r3, r3, r2
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	0b1b      	lsrs	r3, r3, #12
 8007740:	613b      	str	r3, [r7, #16]

		volatile int32_t v30 = (((uint32_t)*TEMP30_CAL_ADDR ) * 33000) >> 12;
 8007742:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <ANALOG_Service+0x7c>)
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	001a      	movs	r2, r3
 8007748:	4b0c      	ldr	r3, [pc, #48]	; (800777c <ANALOG_Service+0x80>)
 800774a:	4353      	muls	r3, r2
 800774c:	0b1b      	lsrs	r3, r3, #12
 800774e:	60fb      	str	r3, [r7, #12]
		m_mcuTemperature = (v30 - vtemp) / 43 + 30; //avg_slope = 4.3
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	212b      	movs	r1, #43	; 0x2b
 8007758:	0018      	movs	r0, r3
 800775a:	f7f8 fd5d 	bl	8000218 <__divsi3>
 800775e:	0003      	movs	r3, r0
 8007760:	b29b      	uxth	r3, r3
 8007762:	331e      	adds	r3, #30
 8007764:	b29b      	uxth	r3, r3
 8007766:	b21a      	sxth	r2, r3
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <ANALOG_Service+0x84>)
 800776a:	801a      	strh	r2, [r3, #0]
		//mcuTemperature = ((((int32_t)*TEMP30_CAL_ADDR - analogIn[7]) * 767) >> 12) + 30;
	}
}
 800776c:	46c0      	nop			; (mov r8, r8)
 800776e:	46bd      	mov	sp, r7
 8007770:	b006      	add	sp, #24
 8007772:	bdb0      	pop	{r4, r5, r7, pc}
 8007774:	20001208 	.word	0x20001208
 8007778:	1ffff7b8 	.word	0x1ffff7b8
 800777c:	000080e8 	.word	0x000080e8
 8007780:	20000010 	.word	0x20000010

08007784 <ANALOG_GetAVDDMv>:


uint16_t ANALOG_GetAVDDMv(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
	return ADC_CalibrateValue(3300u);
 8007788:	4b03      	ldr	r3, [pc, #12]	; (8007798 <ANALOG_GetAVDDMv+0x14>)
 800778a:	0018      	movs	r0, r3
 800778c:	f7ff ff42 	bl	8007614 <ADC_CalibrateValue>
 8007790:	0003      	movs	r3, r0
}
 8007792:	0018      	movs	r0, r3
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	00000ce4 	.word	0x00000ce4

0800779c <ANALOG_GetBatteryMv>:
	return UTIL_FixMul_U32_U16(ADC_TO_MV_K, adcVal);
}


uint16_t ANALOG_GetBatteryMv(void)
{
 800779c:	b590      	push	{r4, r7, lr}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
	const uint16_t adcVal = ADC_CalibrateValue(ADC_GetAverageValue(ANALOG_CHANNEL_VBAT));
 80077a2:	2002      	movs	r0, #2
 80077a4:	f7ff ff14 	bl	80075d0 <ADC_GetAverageValue>
 80077a8:	0003      	movs	r3, r0
 80077aa:	1dbc      	adds	r4, r7, #6
 80077ac:	0018      	movs	r0, r3
 80077ae:	f7ff ff31 	bl	8007614 <ADC_CalibrateValue>
 80077b2:	0003      	movs	r3, r0
 80077b4:	8023      	strh	r3, [r4, #0]

	return UTIL_FixMul_U32_U16(ADC_TO_BATTMV_K, adcVal);
 80077b6:	1dbb      	adds	r3, r7, #6
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	4a05      	ldr	r2, [pc, #20]	; (80077d0 <ANALOG_GetBatteryMv+0x34>)
 80077bc:	0019      	movs	r1, r3
 80077be:	0010      	movs	r0, r2
 80077c0:	f00b ffb1 	bl	8013726 <UTIL_FixMul_U32_U16>
 80077c4:	0003      	movs	r3, r0
}
 80077c6:	0018      	movs	r0, r3
 80077c8:	46bd      	mov	sp, r7
 80077ca:	b003      	add	sp, #12
 80077cc:	bd90      	pop	{r4, r7, pc}
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	00011b63 	.word	0x00011b63

080077d4 <ANALOG_Get5VRailMv>:


// Original averaged both sides of ferrite bead
uint16_t ANALOG_Get5VRailMv(void)
{
 80077d4:	b590      	push	{r4, r7, lr}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
	const uint16_t adcVal = ADC_CalibrateValue(ADC_GetAverageValue(ANALOG_CHANNEL_CS1));
 80077da:	2000      	movs	r0, #0
 80077dc:	f7ff fef8 	bl	80075d0 <ADC_GetAverageValue>
 80077e0:	0003      	movs	r3, r0
 80077e2:	1dbc      	adds	r4, r7, #6
 80077e4:	0018      	movs	r0, r3
 80077e6:	f7ff ff15 	bl	8007614 <ADC_CalibrateValue>
 80077ea:	0003      	movs	r3, r0
 80077ec:	8023      	strh	r3, [r4, #0]

	return UTIL_FixMul_U32_U16(ADC_TO_5VRAIL_MV_K, adcVal);
 80077ee:	1dbb      	adds	r3, r7, #6
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	4a05      	ldr	r2, [pc, #20]	; (8007808 <ANALOG_Get5VRailMv+0x34>)
 80077f4:	0019      	movs	r1, r3
 80077f6:	0010      	movs	r0, r2
 80077f8:	f00b ff95 	bl	8013726 <UTIL_FixMul_U32_U16>
 80077fc:	0003      	movs	r3, r0
}
 80077fe:	0018      	movs	r0, r3
 8007800:	46bd      	mov	sp, r7
 8007802:	b003      	add	sp, #12
 8007804:	bd90      	pop	{r4, r7, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	00019c81 	.word	0x00019c81

0800780c <ANALOG_GetMCUTemp>:
	return ADC_GetFilterReady();
}


int16_t ANALOG_GetMCUTemp(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
	return m_mcuTemperature;
 8007810:	4b02      	ldr	r3, [pc, #8]	; (800781c <ANALOG_GetMCUTemp+0x10>)
 8007812:	2200      	movs	r2, #0
 8007814:	5e9b      	ldrsh	r3, [r3, r2]
}
 8007816:	0018      	movs	r0, r3
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000010 	.word	0x20000010

08007820 <AnalogAdcWDGConfig>:
void AnalogPowerIsGood(void){
	// Not worked out what this does yet!!
}

HAL_StatusTypeDef AnalogAdcWDGConfig(uint8_t channel, uint16_t voltThresh_mV)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	0002      	movs	r2, r0
 8007828:	1dfb      	adds	r3, r7, #7
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	1d3b      	adds	r3, r7, #4
 800782e:	1c0a      	adds	r2, r1, #0
 8007830:	801a      	strh	r2, [r3, #0]
		if (HAL_ADC_Start_DMA(&hadc, analogIn, ADC_BUFFER_LENGTH) != HAL_OK)
		{
			Error_Handler();
		}
	*/
	return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	0018      	movs	r0, r3
 8007836:	46bd      	mov	sp, r7
 8007838:	b002      	add	sp, #8
 800783a:	bd80      	pop	{r7, pc}

0800783c <AnalogAdcWDGEnable>:

void AnalogAdcWDGEnable(uint8_t enable)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	0002      	movs	r2, r0
 8007844:	1dfb      	adds	r3, r7, #7
 8007846:	701a      	strb	r2, [r3, #0]
		if (HAL_ADC_Start_DMA(&hadc, analogIn, ADC_BUFFER_LENGTH) != HAL_OK)
		{
			Error_Handler();
		}
	*/
}
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	46bd      	mov	sp, r7
 800784c:	b002      	add	sp, #8
 800784e:	bd80      	pop	{r7, pc}

08007850 <AVE_FILTER_U16_UpdatePeriodic>:
 */
// ****************************************************************************
void AVE_FILTER_U16_UpdatePeriodic(AVE_FILTER_U16_t * const p_filter,
									const uint16_t newValue,
									const uint32_t sysTime)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	200a      	movs	r0, #10
 800785c:	183b      	adds	r3, r7, r0
 800785e:	1c0a      	adds	r2, r1, #0
 8007860:	801a      	strh	r2, [r3, #0]
	if (MS_TIMEREF_TIMEOUT(p_filter->lastFilterUpdateTime, sysTime, p_filter->filterPeriodMs))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800786e:	4293      	cmp	r3, r2
 8007870:	d309      	bcc.n	8007886 <AVE_FILTER_U16_UpdatePeriodic+0x36>
	{
		MS_TIMEREF_INIT(p_filter->lastFilterUpdateTime, sysTime);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	62da      	str	r2, [r3, #44]	; 0x2c

		AVE_FILTER_U16_Update(p_filter, newValue);
 8007878:	183b      	adds	r3, r7, r0
 800787a:	881a      	ldrh	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0011      	movs	r1, r2
 8007880:	0018      	movs	r0, r3
 8007882:	f000 f804 	bl	800788e <AVE_FILTER_U16_Update>
	}
}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	46bd      	mov	sp, r7
 800788a:	b004      	add	sp, #16
 800788c:	bd80      	pop	{r7, pc}

0800788e <AVE_FILTER_U16_Update>:
 * @param	newValue	uint16 value to update the filter with
 * @retval	none
 */
// ****************************************************************************
void AVE_FILTER_U16_Update(AVE_FILTER_U16_t * const p_filter, const uint16_t newValue)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	000a      	movs	r2, r1
 8007898:	1cbb      	adds	r3, r7, #2
 800789a:	801a      	strh	r2, [r3, #0]
	if (NULL != p_filter)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d038      	beq.n	8007914 <AVE_FILTER_U16_Update+0x86>
	{
		/* Add in new value */
		p_filter->total -= p_filter->elements[p_filter->nextValueIdx];
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	2130      	movs	r1, #48	; 0x30
 80078aa:	5c52      	ldrb	r2, [r2, r1]
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	0052      	lsls	r2, r2, #1
 80078b0:	188a      	adds	r2, r1, r2
 80078b2:	3204      	adds	r2, #4
 80078b4:	8812      	ldrh	r2, [r2, #0]
 80078b6:	1a9a      	subs	r2, r3, r2
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	625a      	str	r2, [r3, #36]	; 0x24
		p_filter->total += newValue;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078c0:	1cbb      	adds	r3, r7, #2
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	18d2      	adds	r2, r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	625a      	str	r2, [r3, #36]	; 0x24
		p_filter->elements[p_filter->nextValueIdx] = newValue;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2230      	movs	r2, #48	; 0x30
 80078ce:	5c9b      	ldrb	r3, [r3, r2]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	18d3      	adds	r3, r2, r3
 80078d6:	3304      	adds	r3, #4
 80078d8:	1cba      	adds	r2, r7, #2
 80078da:	8812      	ldrh	r2, [r2, #0]
 80078dc:	801a      	strh	r2, [r3, #0]

		/* Calculate filter average */
		p_filter->average = p_filter->total / AVE_FILTER_ELEMENT_COUNT;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	091b      	lsrs	r3, r3, #4
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	805a      	strh	r2, [r3, #2]

		/* Update pointer to next value index */
		if (AVE_FILTER_ELEMENT_COUNT ==  ++ p_filter->nextValueIdx)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2230      	movs	r2, #48	; 0x30
 80078ee:	5c9b      	ldrb	r3, [r3, r2]
 80078f0:	3301      	adds	r3, #1
 80078f2:	b2d9      	uxtb	r1, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2230      	movs	r2, #48	; 0x30
 80078f8:	5499      	strb	r1, [r3, r2]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2230      	movs	r2, #48	; 0x30
 80078fe:	5c9b      	ldrb	r3, [r3, r2]
 8007900:	2b10      	cmp	r3, #16
 8007902:	d103      	bne.n	800790c <AVE_FILTER_U16_Update+0x7e>
		{
			p_filter->nextValueIdx = 0u;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2230      	movs	r2, #48	; 0x30
 8007908:	2100      	movs	r1, #0
 800790a:	5499      	strb	r1, [r3, r2]
		}

		p_filter->lastVal = newValue;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	1cba      	adds	r2, r7, #2
 8007910:	8812      	ldrh	r2, [r2, #0]
 8007912:	801a      	strh	r2, [r3, #0]
	}
}
 8007914:	46c0      	nop			; (mov r8, r8)
 8007916:	46bd      	mov	sp, r7
 8007918:	b002      	add	sp, #8
 800791a:	bd80      	pop	{r7, pc}

0800791c <AVE_FILTER_U16_InitPeriodic>:
 * @param	filterPeriodMs	filter update period in milliseconds
 * @retval	none
 */
// ****************************************************************************
void AVE_FILTER_U16_InitPeriodic(AVE_FILTER_U16_t * const p_filter, const uint32_t sysTime, const uint16_t filterPeriodMs)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	1dbb      	adds	r3, r7, #6
 8007928:	801a      	strh	r2, [r3, #0]
	MS_TIMEREF_INIT(p_filter->lastFilterUpdateTime, sysTime);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c
	p_filter->filterPeriodMs = filterPeriodMs;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	1dba      	adds	r2, r7, #6
 8007934:	8812      	ldrh	r2, [r2, #0]
 8007936:	851a      	strh	r2, [r3, #40]	; 0x28
	AVE_FILTER_U16_Reset(p_filter);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	0018      	movs	r0, r3
 800793c:	f000 f804 	bl	8007948 <AVE_FILTER_U16_Reset>
}
 8007940:	46c0      	nop			; (mov r8, r8)
 8007942:	46bd      	mov	sp, r7
 8007944:	b004      	add	sp, #16
 8007946:	bd80      	pop	{r7, pc}

08007948 <AVE_FILTER_U16_Reset>:
 * @param	p_filter	filter to reset
 * @retval	none
 */
// ****************************************************************************
void AVE_FILTER_U16_Reset(AVE_FILTER_U16_t * const p_filter)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	if (NULL != p_filter)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d023      	beq.n	800799e <AVE_FILTER_U16_Reset+0x56>
	{
		p_filter->total = 0u;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	625a      	str	r2, [r3, #36]	; 0x24
		p_filter->average = 0u;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	805a      	strh	r2, [r3, #2]
		p_filter->nextValueIdx = AVE_FILTER_ELEMENT_COUNT;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2230      	movs	r2, #48	; 0x30
 8007966:	2110      	movs	r1, #16
 8007968:	5499      	strb	r1, [r3, r2]
		p_filter->lastVal = 0u;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	801a      	strh	r2, [r3, #0]

		while (p_filter->nextValueIdx > 0u)
 8007970:	e010      	b.n	8007994 <AVE_FILTER_U16_Reset+0x4c>
		{
			p_filter->nextValueIdx--;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2230      	movs	r2, #48	; 0x30
 8007976:	5c9b      	ldrb	r3, [r3, r2]
 8007978:	3b01      	subs	r3, #1
 800797a:	b2d9      	uxtb	r1, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2230      	movs	r2, #48	; 0x30
 8007980:	5499      	strb	r1, [r3, r2]
			p_filter->elements[p_filter->nextValueIdx] = 0u;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2230      	movs	r2, #48	; 0x30
 8007986:	5c9b      	ldrb	r3, [r3, r2]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	18d3      	adds	r3, r2, r3
 800798e:	3304      	adds	r3, #4
 8007990:	2200      	movs	r2, #0
 8007992:	801a      	strh	r2, [r3, #0]
		while (p_filter->nextValueIdx > 0u)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2230      	movs	r2, #48	; 0x30
 8007998:	5c9b      	ldrb	r3, [r3, r2]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e9      	bne.n	8007972 <AVE_FILTER_U16_Reset+0x2a>
		}
	}
}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	46bd      	mov	sp, r7
 80079a2:	b002      	add	sp, #8
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <AVE_FILTER_S32_UpdatePeriodic>:
 */
// ****************************************************************************
void AVE_FILTER_S32_UpdatePeriodic(AVE_FILTER_S32_t * const p_filter,
									const int32_t newValue,
									const uint32_t sysTime)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
	if (MS_TIMEREF_TIMEOUT(p_filter->lastFilterUpdateTime, sysTime, p_filter->filterPeriodMs))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	2150      	movs	r1, #80	; 0x50
 80079be:	5a52      	ldrh	r2, [r2, r1]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d308      	bcc.n	80079d6 <AVE_FILTER_S32_UpdatePeriodic+0x30>
	{
		MS_TIMEREF_INIT(p_filter->lastFilterUpdateTime, sysTime);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	655a      	str	r2, [r3, #84]	; 0x54

		AVE_FILTER_S32_Update(p_filter, newValue);
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	0011      	movs	r1, r2
 80079d0:	0018      	movs	r0, r3
 80079d2:	f000 f804 	bl	80079de <AVE_FILTER_S32_Update>
	}
}
 80079d6:	46c0      	nop			; (mov r8, r8)
 80079d8:	46bd      	mov	sp, r7
 80079da:	b004      	add	sp, #16
 80079dc:	bd80      	pop	{r7, pc}

080079de <AVE_FILTER_S32_Update>:
 * @param	newValue	int32 value to update the filter with
 * @retval	none
 */
// ****************************************************************************
void AVE_FILTER_S32_Update(AVE_FILTER_S32_t * const p_filter, const int32_t newValue)
{
 80079de:	b5b0      	push	{r4, r5, r7, lr}
 80079e0:	b086      	sub	sp, #24
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6178      	str	r0, [r7, #20]
 80079e6:	6139      	str	r1, [r7, #16]
	if (NULL != p_filter)
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d050      	beq.n	8007a90 <AVE_FILTER_S32_Update+0xb2>
	{
		/* Add in new value */
		p_filter->total -= p_filter->elements[p_filter->nextValueIdx];
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f4:	6979      	ldr	r1, [r7, #20]
 80079f6:	2058      	movs	r0, #88	; 0x58
 80079f8:	5c09      	ldrb	r1, [r1, r0]
 80079fa:	0008      	movs	r0, r1
 80079fc:	6979      	ldr	r1, [r7, #20]
 80079fe:	3002      	adds	r0, #2
 8007a00:	0080      	lsls	r0, r0, #2
 8007a02:	5841      	ldr	r1, [r0, r1]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	17c9      	asrs	r1, r1, #31
 8007a08:	60f9      	str	r1, [r7, #12]
 8007a0a:	68b8      	ldr	r0, [r7, #8]
 8007a0c:	68f9      	ldr	r1, [r7, #12]
 8007a0e:	1a12      	subs	r2, r2, r0
 8007a10:	418b      	sbcs	r3, r1
 8007a12:	6979      	ldr	r1, [r7, #20]
 8007a14:	648a      	str	r2, [r1, #72]	; 0x48
 8007a16:	64cb      	str	r3, [r1, #76]	; 0x4c
		p_filter->total += newValue;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1e:	6939      	ldr	r1, [r7, #16]
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	17c9      	asrs	r1, r1, #31
 8007a24:	6079      	str	r1, [r7, #4]
 8007a26:	6838      	ldr	r0, [r7, #0]
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	1812      	adds	r2, r2, r0
 8007a2c:	414b      	adcs	r3, r1
 8007a2e:	6979      	ldr	r1, [r7, #20]
 8007a30:	648a      	str	r2, [r1, #72]	; 0x48
 8007a32:	64cb      	str	r3, [r1, #76]	; 0x4c
		p_filter->elements[p_filter->nextValueIdx] = newValue;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2258      	movs	r2, #88	; 0x58
 8007a38:	5c9b      	ldrb	r3, [r3, r2]
 8007a3a:	001a      	movs	r2, r3
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3202      	adds	r2, #2
 8007a40:	0092      	lsls	r2, r2, #2
 8007a42:	6939      	ldr	r1, [r7, #16]
 8007a44:	50d1      	str	r1, [r2, r3]

		/* Calculate filter average */
		p_filter->average = p_filter->total / AVE_FILTER_ELEMENT_COUNT;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	da03      	bge.n	8007a58 <AVE_FILTER_S32_Update+0x7a>
 8007a50:	200f      	movs	r0, #15
 8007a52:	2100      	movs	r1, #0
 8007a54:	1812      	adds	r2, r2, r0
 8007a56:	414b      	adcs	r3, r1
 8007a58:	0719      	lsls	r1, r3, #28
 8007a5a:	0914      	lsrs	r4, r2, #4
 8007a5c:	430c      	orrs	r4, r1
 8007a5e:	111d      	asrs	r5, r3, #4
 8007a60:	0022      	movs	r2, r4
 8007a62:	002b      	movs	r3, r5
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	605a      	str	r2, [r3, #4]

		/* Update pointer to next value index */
		if (AVE_FILTER_ELEMENT_COUNT ==  ++p_filter->nextValueIdx)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2258      	movs	r2, #88	; 0x58
 8007a6c:	5c9b      	ldrb	r3, [r3, r2]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	b2d9      	uxtb	r1, r3
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2258      	movs	r2, #88	; 0x58
 8007a76:	5499      	strb	r1, [r3, r2]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2258      	movs	r2, #88	; 0x58
 8007a7c:	5c9b      	ldrb	r3, [r3, r2]
 8007a7e:	2b10      	cmp	r3, #16
 8007a80:	d103      	bne.n	8007a8a <AVE_FILTER_S32_Update+0xac>
		{
			p_filter->nextValueIdx = 0u;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2258      	movs	r2, #88	; 0x58
 8007a86:	2100      	movs	r1, #0
 8007a88:	5499      	strb	r1, [r3, r2]
		}

		p_filter->lastVal = newValue;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	601a      	str	r2, [r3, #0]
	}
}
 8007a90:	46c0      	nop			; (mov r8, r8)
 8007a92:	46bd      	mov	sp, r7
 8007a94:	b006      	add	sp, #24
 8007a96:	bdb0      	pop	{r4, r5, r7, pc}

08007a98 <AVE_FILTER_S32_Reset>:
 * @param	p_filter	filter to reset
 * @retval	none
 */
// ****************************************************************************
void AVE_FILTER_S32_Reset(AVE_FILTER_S32_t * const p_filter)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
	if (NULL != p_filter)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d025      	beq.n	8007af2 <AVE_FILTER_S32_Reset+0x5a>
	{
		p_filter->total = 0u;
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2300      	movs	r3, #0
 8007aac:	648a      	str	r2, [r1, #72]	; 0x48
 8007aae:	64cb      	str	r3, [r1, #76]	; 0x4c
		p_filter->average = 0u;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	605a      	str	r2, [r3, #4]
		p_filter->nextValueIdx = AVE_FILTER_ELEMENT_COUNT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2258      	movs	r2, #88	; 0x58
 8007aba:	2110      	movs	r1, #16
 8007abc:	5499      	strb	r1, [r3, r2]
		p_filter->lastVal = 0u;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]

		while (p_filter->nextValueIdx > 0u)
 8007ac4:	e010      	b.n	8007ae8 <AVE_FILTER_S32_Reset+0x50>
		{
			p_filter->nextValueIdx--;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2258      	movs	r2, #88	; 0x58
 8007aca:	5c9b      	ldrb	r3, [r3, r2]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b2d9      	uxtb	r1, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2258      	movs	r2, #88	; 0x58
 8007ad4:	5499      	strb	r1, [r3, r2]
			p_filter->elements[p_filter->nextValueIdx] = 0u;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2258      	movs	r2, #88	; 0x58
 8007ada:	5c9b      	ldrb	r3, [r3, r2]
 8007adc:	001a      	movs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3202      	adds	r2, #2
 8007ae2:	0092      	lsls	r2, r2, #2
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	50d1      	str	r1, [r2, r3]
		while (p_filter->nextValueIdx > 0u)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2258      	movs	r2, #88	; 0x58
 8007aec:	5c9b      	ldrb	r3, [r3, r2]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e9      	bne.n	8007ac6 <AVE_FILTER_S32_Reset+0x2e>
		}
	}
}
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b002      	add	sp, #8
 8007af8:	bd80      	pop	{r7, pc}

08007afa <AVE_FILTER_S32_InitPeriodic>:
 * @param	filterPeriodMs	filter update period in milliseconds
 * @retval	none
 */
// ****************************************************************************
void AVE_FILTER_S32_InitPeriodic(AVE_FILTER_S32_t * const p_filter, const uint32_t sysTime, const uint16_t filterPeriodMs)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	1dbb      	adds	r3, r7, #6
 8007b06:	801a      	strh	r2, [r3, #0]
	MS_TIMEREF_INIT(p_filter->lastFilterUpdateTime, sysTime);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	655a      	str	r2, [r3, #84]	; 0x54
	p_filter->filterPeriodMs = filterPeriodMs;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1dba      	adds	r2, r7, #6
 8007b12:	2150      	movs	r1, #80	; 0x50
 8007b14:	8812      	ldrh	r2, [r2, #0]
 8007b16:	525a      	strh	r2, [r3, r1]
	AVE_FILTER_S32_Reset(p_filter);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f7ff ffbc 	bl	8007a98 <AVE_FILTER_S32_Reset>
}
 8007b20:	46c0      	nop			; (mov r8, r8)
 8007b22:	46bd      	mov	sp, r7
 8007b24:	b004      	add	sp, #16
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <BATTERY_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void BATTERY_Init(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
	uint8_t tempU8 = BATTERY_DEFAULT_PROFILE_ID;
 8007b2e:	1dfb      	adds	r3, r7, #7
 8007b30:	22ff      	movs	r2, #255	; 0xff
 8007b32:	701a      	strb	r2, [r3, #0]

	if (false == NV_ReadVariable_U8(BAT_PROFILE_NV_ADDR, &tempU8))
 8007b34:	1dfb      	adds	r3, r7, #7
 8007b36:	0019      	movs	r1, r3
 8007b38:	2013      	movs	r0, #19
 8007b3a:	f008 ffff 	bl	8010b3c <NV_ReadVariable_U8>
 8007b3e:	0003      	movs	r3, r0
 8007b40:	001a      	movs	r2, r3
 8007b42:	2301      	movs	r3, #1
 8007b44:	4053      	eors	r3, r2
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <BATTERY_Init+0x2c>
	{
		// Memory is blank so populate the default profile
		NV_WriteVariable_U8(BAT_PROFILE_NV_ADDR, BATTERY_DEFAULT_PROFILE_ID);
 8007b4c:	21ff      	movs	r1, #255	; 0xff
 8007b4e:	2013      	movs	r0, #19
 8007b50:	f008 ffd0 	bl	8010af4 <NV_WriteVariable_U8>
	}

	BATTERY_InitProfile(tempU8);
 8007b54:	1dfb      	adds	r3, r7, #7
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	0018      	movs	r0, r3
 8007b5a:	f000 fab3 	bl	80080c4 <BATTERY_InitProfile>
}
 8007b5e:	46c0      	nop			; (mov r8, r8)
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b002      	add	sp, #8
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <BATTERY_Task>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void BATTERY_Task(void)
{
 8007b68:	b590      	push	{r4, r7, lr}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
	const uint16_t batteryVoltageMv = FUELGAUGE_GetBatteryMv();
 8007b6e:	1dbc      	adds	r4, r7, #6
 8007b70:	f005 f836 	bl	800cbe0 <FUELGAUGE_GetBatteryMv>
 8007b74:	0003      	movs	r3, r0
 8007b76:	8023      	strh	r3, [r4, #0]
	const uint16_t batteryRsocPt1 = FUELGAUGE_GetSocPt1();
 8007b78:	1d3c      	adds	r4, r7, #4
 8007b7a:	f005 f81d 	bl	800cbb8 <FUELGAUGE_GetSocPt1>
 8007b7e:	0003      	movs	r3, r0
 8007b80:	8023      	strh	r3, [r4, #0]
	const ChargerStatus_T chargerStatus = CHARGER_GetStatus();
 8007b82:	1cfc      	adds	r4, r7, #3
 8007b84:	f001 ffea 	bl	8009b5c <CHARGER_GetStatus>
 8007b88:	0003      	movs	r3, r0
 8007b8a:	7023      	strb	r3, [r4, #0]
	const bool chargerBatteryDetected = (CHARGER_BATTERY_NOT_PRESENT != CHARGER_GetBatteryStatus());
 8007b8c:	f002 f81e 	bl	8009bcc <CHARGER_GetBatteryStatus>
 8007b90:	0003      	movs	r3, r0
 8007b92:	001a      	movs	r2, r3
 8007b94:	1cbb      	adds	r3, r7, #2
 8007b96:	3a02      	subs	r2, #2
 8007b98:	1e51      	subs	r1, r2, #1
 8007b9a:	418a      	sbcs	r2, r1
 8007b9c:	701a      	strb	r2, [r3, #0]
	const TASKMAN_RunState_t runState = TASKMAN_GetRunState();
 8007b9e:	1c7c      	adds	r4, r7, #1
 8007ba0:	f00b fc9c 	bl	80134dc <TASKMAN_GetRunState>
 8007ba4:	0003      	movs	r3, r0
 8007ba6:	7023      	strb	r3, [r4, #0]


	if ((m_setProfileRequest & BATTERY_SET_REQUEST_MSK) == BATTERY_SET_PROFILE)
 8007ba8:	4b2d      	ldr	r3, [pc, #180]	; (8007c60 <BATTERY_Task+0xf8>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	001a      	movs	r2, r3
 8007bae:	23f0      	movs	r3, #240	; 0xf0
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d10a      	bne.n	8007bcc <BATTERY_Task+0x64>
	{
		BATTERY_SetNewProfileId(m_setProfileRequest & BATTERY_REQUEST_PROFILE_MSK);
 8007bb6:	4b2a      	ldr	r3, [pc, #168]	; (8007c60 <BATTERY_Task+0xf8>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	220f      	movs	r2, #15
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f000 fed1 	bl	8008968 <BATTERY_SetNewProfileId>

		m_setProfileRequest = BATTERY_DONT_SET_PROFILE;
 8007bc6:	4b26      	ldr	r3, [pc, #152]	; (8007c60 <BATTERY_Task+0xf8>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
	}


	if (BATTERY_CUSTOM_PROFILE_WRITE_STANDARD == m_writeCustomProfileRequest)
 8007bcc:	4b25      	ldr	r3, [pc, #148]	; (8007c64 <BATTERY_Task+0xfc>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d107      	bne.n	8007be4 <BATTERY_Task+0x7c>
	{
		BATTERY_WriteCustomProfile(&m_tempBatteryProfile);
 8007bd4:	4b24      	ldr	r3, [pc, #144]	; (8007c68 <BATTERY_Task+0x100>)
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f000 ff0e 	bl	80089f8 <BATTERY_WriteCustomProfile>
		m_writeCustomProfileRequest = BATTERY_CUSTOM_PROFILE_NO_WRITE;
 8007bdc:	4b21      	ldr	r3, [pc, #132]	; (8007c64 <BATTERY_Task+0xfc>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e00a      	b.n	8007bfa <BATTERY_Task+0x92>
	}
	else if (BATTERY_CUSTOM_PROFILE_WRITE_EXTENDED == m_writeCustomProfileRequest)
 8007be4:	4b1f      	ldr	r3, [pc, #124]	; (8007c64 <BATTERY_Task+0xfc>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d106      	bne.n	8007bfa <BATTERY_Task+0x92>
	{
		BATTERY_WriteCustomProfileExtended(&m_tempBatteryProfile);
 8007bec:	4b1e      	ldr	r3, [pc, #120]	; (8007c68 <BATTERY_Task+0x100>)
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f000 ff28 	bl	8008a44 <BATTERY_WriteCustomProfileExtended>
		m_writeCustomProfileRequest = BATTERY_CUSTOM_PROFILE_NO_WRITE;
 8007bf4:	4b1b      	ldr	r3, [pc, #108]	; (8007c64 <BATTERY_Task+0xfc>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
	}


	if (MS_TIME_COUNT(m_lastBatteryUpdateTimeMs) > BATTERY_UPDATE_STATUS_PERIOD_MS)
 8007bfa:	f7fb fa69 	bl	80030d0 <HAL_GetTick>
 8007bfe:	0002      	movs	r2, r0
 8007c00:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <BATTERY_Task+0x104>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b0a      	cmp	r3, #10
 8007c08:	d90d      	bls.n	8007c26 <BATTERY_Task+0xbe>
	{
		MS_TIME_COUNTER_INIT(m_lastBatteryUpdateTimeMs);
 8007c0a:	f7fb fa61 	bl	80030d0 <HAL_GetTick>
 8007c0e:	0002      	movs	r2, r0
 8007c10:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <BATTERY_Task+0x104>)
 8007c12:	601a      	str	r2, [r3, #0]

		BATTERY_UpdateBatteryStatus(batteryVoltageMv, chargerStatus, chargerBatteryDetected);
 8007c14:	1cbb      	adds	r3, r7, #2
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	1cfb      	adds	r3, r7, #3
 8007c1a:	7819      	ldrb	r1, [r3, #0]
 8007c1c:	1dbb      	adds	r3, r7, #6
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	0018      	movs	r0, r3
 8007c22:	f000 ff25 	bl	8008a70 <BATTERY_UpdateBatteryStatus>
	}


	if (MS_TIME_COUNT(m_lastChargeLedTaskTimeMs) >= BATTERY_CHARGE_LED_UPDATE_PERIOD_MS)
 8007c26:	f7fb fa53 	bl	80030d0 <HAL_GetTick>
 8007c2a:	0002      	movs	r2, r0
 8007c2c:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <BATTERY_Task+0x108>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	1ad2      	subs	r2, r2, r3
 8007c32:	23e1      	movs	r3, #225	; 0xe1
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d30d      	bcc.n	8007c56 <BATTERY_Task+0xee>
	{
		MS_TIME_COUNTER_INIT(m_lastChargeLedTaskTimeMs);
 8007c3a:	f7fb fa49 	bl	80030d0 <HAL_GetTick>
 8007c3e:	0002      	movs	r2, r0
 8007c40:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <BATTERY_Task+0x108>)
 8007c42:	601a      	str	r2, [r3, #0]

		BATTERY_UpdateChargeLed(batteryRsocPt1, chargerStatus, runState);
 8007c44:	1c7b      	adds	r3, r7, #1
 8007c46:	781a      	ldrb	r2, [r3, #0]
 8007c48:	1cfb      	adds	r3, r7, #3
 8007c4a:	7819      	ldrb	r1, [r3, #0]
 8007c4c:	1d3b      	adds	r3, r7, #4
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	0018      	movs	r0, r3
 8007c52:	f000 ff47 	bl	8008ae4 <BATTERY_UpdateChargeLed>
	}
}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b003      	add	sp, #12
 8007c5c:	bd90      	pop	{r4, r7, pc}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	2000120c 	.word	0x2000120c
 8007c64:	2000120d 	.word	0x2000120d
 8007c68:	20001210 	.word	0x20001210
 8007c6c:	20001238 	.word	0x20001238
 8007c70:	20001234 	.word	0x20001234

08007c74 <BATTERY_SetProfileIdReq>:
 * @param	id			new battery profile id to set
 * @retval	none
 */
// ****************************************************************************
void BATTERY_SetProfileIdReq(const uint8_t id)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	0002      	movs	r2, r0
 8007c7c:	1dfb      	adds	r3, r7, #7
 8007c7e:	701a      	strb	r2, [r3, #0]
	if ((m_batteryProfileStatus != id) && (id <= 0x0Fu))
 8007c80:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <BATTERY_SetProfileIdReq+0x3c>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	1dfa      	adds	r2, r7, #7
 8007c86:	7812      	ldrb	r2, [r2, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d00d      	beq.n	8007ca8 <BATTERY_SetProfileIdReq+0x34>
 8007c8c:	1dfb      	adds	r3, r7, #7
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b0f      	cmp	r3, #15
 8007c92:	d809      	bhi.n	8007ca8 <BATTERY_SetProfileIdReq+0x34>
	{
		m_batteryProfileStatus = BATTERY_PROFILE_STATUS_WRITE_BUSY;
 8007c94:	4b06      	ldr	r3, [pc, #24]	; (8007cb0 <BATTERY_SetProfileIdReq+0x3c>)
 8007c96:	22f0      	movs	r2, #240	; 0xf0
 8007c98:	701a      	strb	r2, [r3, #0]
		m_setProfileRequest = BATTERY_SET_PROFILE | id;
 8007c9a:	1dfb      	adds	r3, r7, #7
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2210      	movs	r2, #16
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	4b03      	ldr	r3, [pc, #12]	; (8007cb4 <BATTERY_SetProfileIdReq+0x40>)
 8007ca6:	701a      	strb	r2, [r3, #0]
	}
}
 8007ca8:	46c0      	nop			; (mov r8, r8)
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b002      	add	sp, #8
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20000034 	.word	0x20000034
 8007cb4:	2000120c 	.word	0x2000120c

08007cb8 <BATTERY_WriteCustomProfileData>:
 * @param	len			length of data in the buffer
 * @retval	none
 */
// ****************************************************************************
void BATTERY_WriteCustomProfileData(const uint8_t * const p_data, const uint16_t len)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	000a      	movs	r2, r1
 8007cc2:	1cbb      	adds	r3, r7, #2
 8007cc4:	801a      	strh	r2, [r3, #0]
	m_batteryProfileStatus = BATTERY_PROFILE_STATUS_WRITE_BUSY;
 8007cc6:	4b39      	ldr	r3, [pc, #228]	; (8007dac <BATTERY_WriteCustomProfileData+0xf4>)
 8007cc8:	22f0      	movs	r2, #240	; 0xf0
 8007cca:	701a      	strb	r2, [r3, #0]

	uint16_t var = (uint16_t)p_data[0u] | (p_data[1u] << 8u);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	b21a      	sxth	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	b21a      	sxth	r2, r3
 8007ce0:	210e      	movs	r1, #14
 8007ce2:	187b      	adds	r3, r7, r1
 8007ce4:	801a      	strh	r2, [r3, #0]

	m_tempBatteryProfile.capacity = UNPACK_CAPACITY_U16(var); // correction for large capacities over 32767
 8007ce6:	187b      	adds	r3, r7, r1
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	4a31      	ldr	r2, [pc, #196]	; (8007db0 <BATTERY_WriteCustomProfileData+0xf8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00d      	beq.n	8007d0c <BATTERY_WriteCustomProfileData+0x54>
 8007cf0:	187b      	adds	r3, r7, r1
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	045b      	lsls	r3, r3, #17
 8007cf6:	0c5a      	lsrs	r2, r3, #17
 8007cf8:	187b      	adds	r3, r7, r1
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	0bdb      	lsrs	r3, r3, #15
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	0019      	movs	r1, r3
 8007d02:	000b      	movs	r3, r1
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	1a5b      	subs	r3, r3, r1
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	e001      	b.n	8007d10 <BATTERY_WriteCustomProfileData+0x58>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	425a      	negs	r2, r3
 8007d10:	4b28      	ldr	r3, [pc, #160]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d12:	605a      	str	r2, [r3, #4]
	m_tempBatteryProfile.chargeCurrent = p_data[2u];
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	789a      	ldrb	r2, [r3, #2]
 8007d18:	4b26      	ldr	r3, [pc, #152]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d1a:	721a      	strb	r2, [r3, #8]
	m_tempBatteryProfile.terminationCurr = p_data[3u];
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	78da      	ldrb	r2, [r3, #3]
 8007d20:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d22:	725a      	strb	r2, [r3, #9]
	m_tempBatteryProfile.regulationVoltage = p_data[4u];
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	791a      	ldrb	r2, [r3, #4]
 8007d28:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d2a:	729a      	strb	r2, [r3, #10]
	m_tempBatteryProfile.cutoffVoltage = p_data[5u];
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	795a      	ldrb	r2, [r3, #5]
 8007d30:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d32:	72da      	strb	r2, [r3, #11]
	m_tempBatteryProfile.tCold = p_data[6u];
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3306      	adds	r3, #6
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b25a      	sxtb	r2, r3
 8007d3c:	4b1d      	ldr	r3, [pc, #116]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d3e:	761a      	strb	r2, [r3, #24]
	m_tempBatteryProfile.tCool = p_data[7u];
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3307      	adds	r3, #7
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b25a      	sxtb	r2, r3
 8007d48:	4b1a      	ldr	r3, [pc, #104]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d4a:	765a      	strb	r2, [r3, #25]
	m_tempBatteryProfile.tWarm = p_data[8u];
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	b25a      	sxtb	r2, r3
 8007d54:	4b17      	ldr	r3, [pc, #92]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d56:	769a      	strb	r2, [r3, #26]
	m_tempBatteryProfile.tHot = p_data[9u];
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3309      	adds	r3, #9
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	b25a      	sxtb	r2, r3
 8007d60:	4b14      	ldr	r3, [pc, #80]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d62:	76da      	strb	r2, [r3, #27]
	m_tempBatteryProfile.ntcB = (uint16_t)p_data[10u] | (p_data[11u] << 8u);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	330a      	adds	r3, #10
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b21a      	sxth	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	330b      	adds	r3, #11
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	021b      	lsls	r3, r3, #8
 8007d74:	b21b      	sxth	r3, r3
 8007d76:	4313      	orrs	r3, r2
 8007d78:	b21b      	sxth	r3, r3
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	4b0d      	ldr	r3, [pc, #52]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d7e:	839a      	strh	r2, [r3, #28]
	m_tempBatteryProfile.ntcResistance = (uint16_t)p_data[12u] | (p_data[13u] << 8u);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	330c      	adds	r3, #12
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b21a      	sxth	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	330d      	adds	r3, #13
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	b21b      	sxth	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b21b      	sxth	r3, r3
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <BATTERY_WriteCustomProfileData+0xfc>)
 8007d9a:	83da      	strh	r2, [r3, #30]

	m_writeCustomProfileRequest = BATTERY_CUSTOM_PROFILE_WRITE_STANDARD;
 8007d9c:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <BATTERY_WriteCustomProfileData+0x100>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	701a      	strb	r2, [r3, #0]

	return;
 8007da2:	46c0      	nop			; (mov r8, r8)
}
 8007da4:	46bd      	mov	sp, r7
 8007da6:	b004      	add	sp, #16
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	46c0      	nop			; (mov r8, r8)
 8007dac:	20000034 	.word	0x20000034
 8007db0:	0000ffff 	.word	0x0000ffff
 8007db4:	20001210 	.word	0x20001210
 8007db8:	2000120d 	.word	0x2000120d

08007dbc <BATTERY_ReadActiveProfileData>:
 * @param	p_len	pointer to where to place the length of standard profile data
 * @retval	none
 */
// ****************************************************************************
void BATTERY_ReadActiveProfileData(uint8_t * const p_data, uint16_t * const p_len)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint16_t var;

	if (m_p_activeBatteryProfile == NULL)
 8007dc6:	4b57      	ldr	r3, [pc, #348]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d116      	bne.n	8007dfc <BATTERY_ReadActiveProfileData+0x40>
	{
		for (i = 0u; i < 14u; i++)
 8007dce:	230f      	movs	r3, #15
 8007dd0:	18fb      	adds	r3, r7, r3
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e00b      	b.n	8007df0 <BATTERY_ReadActiveProfileData+0x34>
		{
			p_data[i] = 0u;
 8007dd8:	210f      	movs	r1, #15
 8007dda:	187b      	adds	r3, r7, r1
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	18d3      	adds	r3, r2, r3
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
		for (i = 0u; i < 14u; i++)
 8007de6:	187b      	adds	r3, r7, r1
 8007de8:	781a      	ldrb	r2, [r3, #0]
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	3201      	adds	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	230f      	movs	r3, #15
 8007df2:	18fb      	adds	r3, r7, r3
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b0d      	cmp	r3, #13
 8007df8:	d9ee      	bls.n	8007dd8 <BATTERY_ReadActiveProfileData+0x1c>
 8007dfa:	e08b      	b.n	8007f14 <BATTERY_ReadActiveProfileData+0x158>
		}
	}
	else
	{
		var = PACK_CAPACITY_U16(m_p_activeBatteryProfile->capacity); // correction for large capacities over 32767
 8007dfc:	4b49      	ldr	r3, [pc, #292]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	3301      	adds	r3, #1
 8007e04:	d01d      	beq.n	8007e42 <BATTERY_ReadActiveProfileData+0x86>
 8007e06:	4b47      	ldr	r3, [pc, #284]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	4b45      	ldr	r3, [pc, #276]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	2380      	movs	r3, #128	; 0x80
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	4299      	cmp	r1, r3
 8007e18:	d301      	bcc.n	8007e1e <BATTERY_ReadActiveProfileData+0x62>
 8007e1a:	2307      	movs	r3, #7
 8007e1c:	e000      	b.n	8007e20 <BATTERY_ReadActiveProfileData+0x64>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	40da      	lsrs	r2, r3
 8007e22:	0013      	movs	r3, r2
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	4b3f      	ldr	r3, [pc, #252]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6859      	ldr	r1, [r3, #4]
 8007e2c:	2380      	movs	r3, #128	; 0x80
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	4299      	cmp	r1, r3
 8007e32:	d302      	bcc.n	8007e3a <BATTERY_ReadActiveProfileData+0x7e>
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	e000      	b.n	8007e3c <BATTERY_ReadActiveProfileData+0x80>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	e000      	b.n	8007e44 <BATTERY_ReadActiveProfileData+0x88>
 8007e42:	4a39      	ldr	r2, [pc, #228]	; (8007f28 <BATTERY_ReadActiveProfileData+0x16c>)
 8007e44:	210c      	movs	r1, #12
 8007e46:	187b      	adds	r3, r7, r1
 8007e48:	801a      	strh	r2, [r3, #0]
		p_data[0u] = var;
 8007e4a:	187b      	adds	r3, r7, r1
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	701a      	strb	r2, [r3, #0]
		p_data[1u] = (var >> 8u);
 8007e54:	187b      	adds	r3, r7, r1
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	0a1b      	lsrs	r3, r3, #8
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	701a      	strb	r2, [r3, #0]
		p_data[2u] = m_p_activeBatteryProfile->chargeCurrent;
 8007e64:	4b2f      	ldr	r3, [pc, #188]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	7a12      	ldrb	r2, [r2, #8]
 8007e6e:	701a      	strb	r2, [r3, #0]
		p_data[3u] = m_p_activeBatteryProfile->terminationCurr;
 8007e70:	4b2c      	ldr	r3, [pc, #176]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3303      	adds	r3, #3
 8007e78:	7a52      	ldrb	r2, [r2, #9]
 8007e7a:	701a      	strb	r2, [r3, #0]
		p_data[4u] = m_p_activeBatteryProfile->regulationVoltage;
 8007e7c:	4b29      	ldr	r3, [pc, #164]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3304      	adds	r3, #4
 8007e84:	7a92      	ldrb	r2, [r2, #10]
 8007e86:	701a      	strb	r2, [r3, #0]
		p_data[5u] = m_p_activeBatteryProfile->cutoffVoltage;
 8007e88:	4b26      	ldr	r3, [pc, #152]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3305      	adds	r3, #5
 8007e90:	7ad2      	ldrb	r2, [r2, #11]
 8007e92:	701a      	strb	r2, [r3, #0]
		p_data[6u] = m_p_activeBatteryProfile->tCold;
 8007e94:	4b23      	ldr	r3, [pc, #140]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2218      	movs	r2, #24
 8007e9a:	569a      	ldrsb	r2, [r3, r2]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3306      	adds	r3, #6
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	701a      	strb	r2, [r3, #0]
		p_data[7u] = m_p_activeBatteryProfile->tCool;
 8007ea4:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2219      	movs	r2, #25
 8007eaa:	569a      	ldrsb	r2, [r3, r2]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	701a      	strb	r2, [r3, #0]
		p_data[8u] = m_p_activeBatteryProfile->tWarm;
 8007eb4:	4b1b      	ldr	r3, [pc, #108]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	221a      	movs	r2, #26
 8007eba:	569a      	ldrsb	r2, [r3, r2]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	701a      	strb	r2, [r3, #0]
		p_data[9u] = m_p_activeBatteryProfile->tHot;
 8007ec4:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	221b      	movs	r2, #27
 8007eca:	569a      	ldrsb	r2, [r3, r2]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3309      	adds	r3, #9
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	701a      	strb	r2, [r3, #0]
		p_data[10u] = m_p_activeBatteryProfile->ntcB;
 8007ed4:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	8b9a      	ldrh	r2, [r3, #28]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	330a      	adds	r3, #10
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]
		p_data[11u] = (m_p_activeBatteryProfile->ntcB >> 8u);
 8007ee2:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	8b9b      	ldrh	r3, [r3, #28]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	330b      	adds	r3, #11
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]
		p_data[12u] = m_p_activeBatteryProfile->ntcResistance;
 8007ef4:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	8bda      	ldrh	r2, [r3, #30]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	330c      	adds	r3, #12
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
		p_data[13u] = (m_p_activeBatteryProfile->ntcResistance >> 8u);
 8007f02:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <BATTERY_ReadActiveProfileData+0x168>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	8bdb      	ldrh	r3, [r3, #30]
 8007f08:	0a1b      	lsrs	r3, r3, #8
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	330d      	adds	r3, #13
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]

	}

	*p_len = 14u;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	220e      	movs	r2, #14
 8007f18:	801a      	strh	r2, [r3, #0]
}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	b004      	add	sp, #16
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	46c0      	nop			; (mov r8, r8)
 8007f24:	20001230 	.word	0x20001230
 8007f28:	0000ffff 	.word	0x0000ffff

08007f2c <BATTERY_WriteCustomProfileExtendedData>:
 * @retval	none
 */
// ****************************************************************************
void BATTERY_WriteCustomProfileExtendedData(const uint8_t * const p_data,
												const uint16_t len)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	000a      	movs	r2, r1
 8007f36:	1cbb      	adds	r3, r7, #2
 8007f38:	801a      	strh	r2, [r3, #0]
	//batProfileStatus = BATTERY_PROFILE_WRITE_BUSY_STATUS;

	m_tempBatteryProfile.chemistry = (BatteryChemistry_T)p_data[0u];
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	4b1f      	ldr	r3, [pc, #124]	; (8007fbc <BATTERY_WriteCustomProfileExtendedData+0x90>)
 8007f40:	701a      	strb	r2, [r3, #0]
	m_tempBatteryProfile.ocv10 = UTIL_FromBytes_U16(&p_data[1u]);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3301      	adds	r3, #1
 8007f46:	0018      	movs	r0, r3
 8007f48:	f00b fc58 	bl	80137fc <UTIL_FromBytes_U16>
 8007f4c:	0003      	movs	r3, r0
 8007f4e:	001a      	movs	r2, r3
 8007f50:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <BATTERY_WriteCustomProfileExtendedData+0x90>)
 8007f52:	819a      	strh	r2, [r3, #12]
	m_tempBatteryProfile.ocv50 = UTIL_FromBytes_U16(&p_data[3u]);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3303      	adds	r3, #3
 8007f58:	0018      	movs	r0, r3
 8007f5a:	f00b fc4f 	bl	80137fc <UTIL_FromBytes_U16>
 8007f5e:	0003      	movs	r3, r0
 8007f60:	001a      	movs	r2, r3
 8007f62:	4b16      	ldr	r3, [pc, #88]	; (8007fbc <BATTERY_WriteCustomProfileExtendedData+0x90>)
 8007f64:	81da      	strh	r2, [r3, #14]
	m_tempBatteryProfile.ocv90 = UTIL_FromBytes_U16(&p_data[5u]);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3305      	adds	r3, #5
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f00b fc46 	bl	80137fc <UTIL_FromBytes_U16>
 8007f70:	0003      	movs	r3, r0
 8007f72:	001a      	movs	r2, r3
 8007f74:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <BATTERY_WriteCustomProfileExtendedData+0x90>)
 8007f76:	821a      	strh	r2, [r3, #16]
	m_tempBatteryProfile.r10 = UTIL_FromBytes_U16(&p_data[7u]);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3307      	adds	r3, #7
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f00b fc3d 	bl	80137fc <UTIL_FromBytes_U16>
 8007f82:	0003      	movs	r3, r0
 8007f84:	001a      	movs	r2, r3
 8007f86:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <BATTERY_WriteCustomProfileExtendedData+0x90>)
 8007f88:	825a      	strh	r2, [r3, #18]
	m_tempBatteryProfile.r50 = UTIL_FromBytes_U16(&p_data[9u]);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	3309      	adds	r3, #9
 8007f8e:	0018      	movs	r0, r3
 8007f90:	f00b fc34 	bl	80137fc <UTIL_FromBytes_U16>
 8007f94:	0003      	movs	r3, r0
 8007f96:	001a      	movs	r2, r3
 8007f98:	4b08      	ldr	r3, [pc, #32]	; (8007fbc <BATTERY_WriteCustomProfileExtendedData+0x90>)
 8007f9a:	829a      	strh	r2, [r3, #20]
	m_tempBatteryProfile.r90 = UTIL_FromBytes_U16(&p_data[11u]);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	330b      	adds	r3, #11
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f00b fc2b 	bl	80137fc <UTIL_FromBytes_U16>
 8007fa6:	0003      	movs	r3, r0
 8007fa8:	001a      	movs	r2, r3
 8007faa:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <BATTERY_WriteCustomProfileExtendedData+0x90>)
 8007fac:	82da      	strh	r2, [r3, #22]

	m_writeCustomProfileRequest = BATTERY_CUSTOM_PROFILE_WRITE_EXTENDED;
 8007fae:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <BATTERY_WriteCustomProfileExtendedData+0x94>)
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	701a      	strb	r2, [r3, #0]
}
 8007fb4:	46c0      	nop			; (mov r8, r8)
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	b002      	add	sp, #8
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20001210 	.word	0x20001210
 8007fc0:	2000120d 	.word	0x2000120d

08007fc4 <BATTERY_ReadActiveProfileExtendedData>:
 * @retval	none
 */
// ****************************************************************************
void BATTERY_ReadActiveProfileExtendedData(uint8_t * const p_data,
											uint16_t * const p_len)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
	p_data[0u] = (uint8_t)m_p_activeBatteryProfile->chemistry;
 8007fce:	4b29      	ldr	r3, [pc, #164]	; (8008074 <BATTERY_ReadActiveProfileExtendedData+0xb0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	781a      	ldrb	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	701a      	strb	r2, [r3, #0]

	UTIL_ToBytes_U16(m_p_activeBatteryProfile->ocv10, &p_data[1u]);
 8007fd8:	4b26      	ldr	r3, [pc, #152]	; (8008074 <BATTERY_ReadActiveProfileExtendedData+0xb0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	899a      	ldrh	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	0019      	movs	r1, r3
 8007fe4:	0010      	movs	r0, r2
 8007fe6:	f00b fc1c 	bl	8013822 <UTIL_ToBytes_U16>
	UTIL_ToBytes_U16(m_p_activeBatteryProfile->ocv50, &p_data[3u]);
 8007fea:	4b22      	ldr	r3, [pc, #136]	; (8008074 <BATTERY_ReadActiveProfileExtendedData+0xb0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	89da      	ldrh	r2, [r3, #14]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3303      	adds	r3, #3
 8007ff4:	0019      	movs	r1, r3
 8007ff6:	0010      	movs	r0, r2
 8007ff8:	f00b fc13 	bl	8013822 <UTIL_ToBytes_U16>
	UTIL_ToBytes_U16(m_p_activeBatteryProfile->ocv90, &p_data[5u]);
 8007ffc:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <BATTERY_ReadActiveProfileExtendedData+0xb0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	8a1a      	ldrh	r2, [r3, #16]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3305      	adds	r3, #5
 8008006:	0019      	movs	r1, r3
 8008008:	0010      	movs	r0, r2
 800800a:	f00b fc0a 	bl	8013822 <UTIL_ToBytes_U16>
	UTIL_ToBytes_U16(m_p_activeBatteryProfile->r10, &p_data[7u]);
 800800e:	4b19      	ldr	r3, [pc, #100]	; (8008074 <BATTERY_ReadActiveProfileExtendedData+0xb0>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	8a5a      	ldrh	r2, [r3, #18]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3307      	adds	r3, #7
 8008018:	0019      	movs	r1, r3
 800801a:	0010      	movs	r0, r2
 800801c:	f00b fc01 	bl	8013822 <UTIL_ToBytes_U16>
	UTIL_ToBytes_U16(m_p_activeBatteryProfile->r50, &p_data[9u]);
 8008020:	4b14      	ldr	r3, [pc, #80]	; (8008074 <BATTERY_ReadActiveProfileExtendedData+0xb0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	8a9a      	ldrh	r2, [r3, #20]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3309      	adds	r3, #9
 800802a:	0019      	movs	r1, r3
 800802c:	0010      	movs	r0, r2
 800802e:	f00b fbf8 	bl	8013822 <UTIL_ToBytes_U16>
	UTIL_ToBytes_U16(m_p_activeBatteryProfile->r90, &p_data[11u]);
 8008032:	4b10      	ldr	r3, [pc, #64]	; (8008074 <BATTERY_ReadActiveProfileExtendedData+0xb0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	8ada      	ldrh	r2, [r3, #22]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	330b      	adds	r3, #11
 800803c:	0019      	movs	r1, r3
 800803e:	0010      	movs	r0, r2
 8008040:	f00b fbef 	bl	8013822 <UTIL_ToBytes_U16>

	p_data[13u] = 0xFFu; // reserved for future use
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	330d      	adds	r3, #13
 8008048:	22ff      	movs	r2, #255	; 0xff
 800804a:	701a      	strb	r2, [r3, #0]
	p_data[14u] = 0xFFu; // reserved for future use
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	330e      	adds	r3, #14
 8008050:	22ff      	movs	r2, #255	; 0xff
 8008052:	701a      	strb	r2, [r3, #0]
	p_data[15u] = 0xFFu; // reserved for future use
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	330f      	adds	r3, #15
 8008058:	22ff      	movs	r2, #255	; 0xff
 800805a:	701a      	strb	r2, [r3, #0]
	p_data[16u] = 0xFFu; // reserved for future use
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3310      	adds	r3, #16
 8008060:	22ff      	movs	r2, #255	; 0xff
 8008062:	701a      	strb	r2, [r3, #0]

	*p_len = 17u;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2211      	movs	r2, #17
 8008068:	801a      	strh	r2, [r3, #0]
}
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	46bd      	mov	sp, r7
 800806e:	b002      	add	sp, #8
 8008070:	bd80      	pop	{r7, pc}
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	20001230 	.word	0x20001230

08008078 <BATTERY_ReadProfileStatusData>:
 * @param	p_len		length of status data
 * @retval	none
 */
// ****************************************************************************
void BATTERY_ReadProfileStatusData(uint8_t * const p_data, uint16_t * const p_len)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	p_data[0u] = m_batteryProfileStatus;
 8008082:	4b05      	ldr	r3, [pc, #20]	; (8008098 <BATTERY_ReadProfileStatusData+0x20>)
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	701a      	strb	r2, [r3, #0]
	*p_len = 1u;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2201      	movs	r2, #1
 800808e:	801a      	strh	r2, [r3, #0]
}
 8008090:	46c0      	nop			; (mov r8, r8)
 8008092:	46bd      	mov	sp, r7
 8008094:	b002      	add	sp, #8
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000034 	.word	0x20000034

0800809c <BATTERY_GetActiveProfileHandle>:
 * @param	none
 * @retval	BatteryProfile_T *		pointer to the active battery profile
 */
// ****************************************************************************
const BatteryProfile_T * BATTERY_GetActiveProfileHandle(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
	return m_p_activeBatteryProfile;
 80080a0:	4b02      	ldr	r3, [pc, #8]	; (80080ac <BATTERY_GetActiveProfileHandle+0x10>)
 80080a2:	681b      	ldr	r3, [r3, #0]
}
 80080a4:	0018      	movs	r0, r3
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	20001230 	.word	0x20001230

080080b0 <BATTERY_GetStatus>:
 * @param	none
 * @retval	BatteryStatus_T		current battery status
 */
// ****************************************************************************
BatteryStatus_T BATTERY_GetStatus(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
	return m_batteryStatus;
 80080b4:	4b02      	ldr	r3, [pc, #8]	; (80080c0 <BATTERY_GetStatus+0x10>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
}
 80080b8:	0018      	movs	r0, r3
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	20000035 	.word	0x20000035

080080c4 <BATTERY_InitProfile>:
 * @param	initProfileId		id of profile to initialise module with
 * @retval	none
 */
// ****************************************************************************
static void BATTERY_InitProfile(const uint8_t initProfileId)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	0002      	movs	r2, r0
 80080cc:	1dfb      	adds	r3, r7, #7
 80080ce:	701a      	strb	r2, [r3, #0]
	if (initProfileId == BATTERY_CUSTOM_PROFILE_ID)
 80080d0:	1dfb      	adds	r3, r7, #7
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b0f      	cmp	r3, #15
 80080d6:	d113      	bne.n	8008100 <BATTERY_InitProfile+0x3c>
	{
		if (true == BATTERY_ReadEEProfileData())
 80080d8:	f000 f92c 	bl	8008334 <BATTERY_ReadEEProfileData>
 80080dc:	1e03      	subs	r3, r0, #0
 80080de:	d008      	beq.n	80080f2 <BATTERY_InitProfile+0x2e>
		{
			BATTERY_ReadExtendedEEProfileData();
 80080e0:	f000 fa06 	bl	80084f0 <BATTERY_ReadExtendedEEProfileData>

			m_p_activeBatteryProfile = &m_customBatteryProfile;
 80080e4:	4b8a      	ldr	r3, [pc, #552]	; (8008310 <BATTERY_InitProfile+0x24c>)
 80080e6:	4a8b      	ldr	r2, [pc, #556]	; (8008314 <BATTERY_InitProfile+0x250>)
 80080e8:	601a      	str	r2, [r3, #0]
			m_batteryProfileStatus = BATTERY_CUSTOM_PROFILE_ID;
 80080ea:	4b8b      	ldr	r3, [pc, #556]	; (8008318 <BATTERY_InitProfile+0x254>)
 80080ec:	220f      	movs	r2, #15
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	e107      	b.n	8008302 <BATTERY_InitProfile+0x23e>
		}
		else
		{
			m_p_activeBatteryProfile = NULL;
 80080f2:	4b87      	ldr	r3, [pc, #540]	; (8008310 <BATTERY_InitProfile+0x24c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
			m_batteryProfileStatus = BATTERY_PROFILE_STATUS_CUSTOM_PROFILE_INVALID;
 80080f8:	4b87      	ldr	r3, [pc, #540]	; (8008318 <BATTERY_InitProfile+0x254>)
 80080fa:	224f      	movs	r2, #79	; 0x4f
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e100      	b.n	8008302 <BATTERY_InitProfile+0x23e>
		}
	}
	else if (initProfileId == BATTERY_DEFAULT_PROFILE_ID)
 8008100:	1dfb      	adds	r3, r7, #7
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2bff      	cmp	r3, #255	; 0xff
 8008106:	d000      	beq.n	800810a <BATTERY_InitProfile+0x46>
 8008108:	e0d2      	b.n	80082b0 <BATTERY_InitProfile+0x1ec>
	{
		// Make profile data based on dip switch or resistor configuration
		if (switchConfigCode >= 0)
 800810a:	4b84      	ldr	r3, [pc, #528]	; (800831c <BATTERY_InitProfile+0x258>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b25b      	sxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	da00      	bge.n	8008116 <BATTERY_InitProfile+0x52>
 8008114:	e0c5      	b.n	80082a2 <BATTERY_InitProfile+0x1de>
		{
			if ( (switchConfigCode < BATTERY_PROFILES_COUNT) &&
 8008116:	4b81      	ldr	r3, [pc, #516]	; (800831c <BATTERY_InitProfile+0x258>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	b25b      	sxtb	r3, r3
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b0b      	cmp	r3, #11
 8008120:	d81b      	bhi.n	800815a <BATTERY_InitProfile+0x96>
					(resistorConfig1Code7 == -1) &&
 8008122:	4b7f      	ldr	r3, [pc, #508]	; (8008320 <BATTERY_InitProfile+0x25c>)
 8008124:	2200      	movs	r2, #0
 8008126:	5e9b      	ldrsh	r3, [r3, r2]
			if ( (switchConfigCode < BATTERY_PROFILES_COUNT) &&
 8008128:	3301      	adds	r3, #1
 800812a:	d116      	bne.n	800815a <BATTERY_InitProfile+0x96>
					(resistorConfig2Code4 == -1)
 800812c:	4b7d      	ldr	r3, [pc, #500]	; (8008324 <BATTERY_InitProfile+0x260>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	b25b      	sxtb	r3, r3
					(resistorConfig1Code7 == -1) &&
 8008132:	3301      	adds	r3, #1
 8008134:	d111      	bne.n	800815a <BATTERY_InitProfile+0x96>
					)
			{
				// Use switch coded profile id
				m_p_activeBatteryProfile = &m_batteryProfiles[switchConfigCode];
 8008136:	4b79      	ldr	r3, [pc, #484]	; (800831c <BATTERY_InitProfile+0x258>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	b25b      	sxtb	r3, r3
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	4b7a      	ldr	r3, [pc, #488]	; (8008328 <BATTERY_InitProfile+0x264>)
 8008140:	18d2      	adds	r2, r2, r3
 8008142:	4b73      	ldr	r3, [pc, #460]	; (8008310 <BATTERY_InitProfile+0x24c>)
 8008144:	601a      	str	r2, [r3, #0]
				m_batteryProfileStatus = BATTERY_CONFIG_SW_PROFILE_ID | switchConfigCode;
 8008146:	4b75      	ldr	r3, [pc, #468]	; (800831c <BATTERY_InitProfile+0x258>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b25b      	sxtb	r3, r3
 800814c:	2210      	movs	r2, #16
 800814e:	4313      	orrs	r3, r2
 8008150:	b25b      	sxtb	r3, r3
 8008152:	b2da      	uxtb	r2, r3
 8008154:	4b70      	ldr	r3, [pc, #448]	; (8008318 <BATTERY_InitProfile+0x254>)
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	e0d3      	b.n	8008302 <BATTERY_InitProfile+0x23e>
			}
			else if ( (switchConfigCode == 1) &&
 800815a:	4b70      	ldr	r3, [pc, #448]	; (800831c <BATTERY_InitProfile+0x258>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	b25b      	sxtb	r3, r3
 8008160:	2b01      	cmp	r3, #1
 8008162:	d11c      	bne.n	800819e <BATTERY_InitProfile+0xda>
					(resistorConfig2Code4 >= 0) &&
 8008164:	4b6f      	ldr	r3, [pc, #444]	; (8008324 <BATTERY_InitProfile+0x260>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	b25b      	sxtb	r3, r3
			else if ( (switchConfigCode == 1) &&
 800816a:	2b00      	cmp	r3, #0
 800816c:	db17      	blt.n	800819e <BATTERY_InitProfile+0xda>
					(resistorConfig2Code4 < BATTERY_PROFILES_COUNT)
 800816e:	4b6d      	ldr	r3, [pc, #436]	; (8008324 <BATTERY_InitProfile+0x260>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b25b      	sxtb	r3, r3
 8008174:	b2db      	uxtb	r3, r3
					(resistorConfig2Code4 >= 0) &&
 8008176:	2b0b      	cmp	r3, #11
 8008178:	d811      	bhi.n	800819e <BATTERY_InitProfile+0xda>
					)
			{
				m_p_activeBatteryProfile = &m_batteryProfiles[resistorConfig2Code4];
 800817a:	4b6a      	ldr	r3, [pc, #424]	; (8008324 <BATTERY_InitProfile+0x260>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b25b      	sxtb	r3, r3
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	4b69      	ldr	r3, [pc, #420]	; (8008328 <BATTERY_InitProfile+0x264>)
 8008184:	18d2      	adds	r2, r2, r3
 8008186:	4b62      	ldr	r3, [pc, #392]	; (8008310 <BATTERY_InitProfile+0x24c>)
 8008188:	601a      	str	r2, [r3, #0]
				m_batteryProfileStatus = BATTERY_CONFIG_RES_PROFILE_ID | resistorConfig2Code4;
 800818a:	4b66      	ldr	r3, [pc, #408]	; (8008324 <BATTERY_InitProfile+0x260>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b25b      	sxtb	r3, r3
 8008190:	2220      	movs	r2, #32
 8008192:	4313      	orrs	r3, r2
 8008194:	b25b      	sxtb	r3, r3
 8008196:	b2da      	uxtb	r2, r3
 8008198:	4b5f      	ldr	r3, [pc, #380]	; (8008318 <BATTERY_InitProfile+0x254>)
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e0b1      	b.n	8008302 <BATTERY_InitProfile+0x23e>
			}
			else if ( (switchConfigCode) == 1 && (resistorConfig1Code7 >= 0) )
 800819e:	4b5f      	ldr	r3, [pc, #380]	; (800831c <BATTERY_InitProfile+0x258>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	b25b      	sxtb	r3, r3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d175      	bne.n	8008294 <BATTERY_InitProfile+0x1d0>
 80081a8:	4b5d      	ldr	r3, [pc, #372]	; (8008320 <BATTERY_InitProfile+0x25c>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	5e9b      	ldrsh	r3, [r3, r2]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	db70      	blt.n	8008294 <BATTERY_InitProfile+0x1d0>
			{
				m_customBatteryProfile.chargeCurrent = ((resistorConfig1Code7 & 0x07u) << 2u); // offset 550mA
 80081b2:	4b5b      	ldr	r3, [pc, #364]	; (8008320 <BATTERY_InitProfile+0x25c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	5e9b      	ldrsh	r3, [r3, r2]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	221c      	movs	r2, #28
 80081c0:	4013      	ands	r3, r2
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	4b53      	ldr	r3, [pc, #332]	; (8008314 <BATTERY_InitProfile+0x250>)
 80081c6:	721a      	strb	r2, [r3, #8]
				m_customBatteryProfile.capacity = ((int16_t)m_customBatteryProfile.chargeCurrent * 75u + 550u) * 2; // suppose charge current is 0.5 capacity
 80081c8:	4b52      	ldr	r3, [pc, #328]	; (8008314 <BATTERY_InitProfile+0x250>)
 80081ca:	7a1b      	ldrb	r3, [r3, #8]
 80081cc:	001a      	movs	r2, r3
 80081ce:	2396      	movs	r3, #150	; 0x96
 80081d0:	4353      	muls	r3, r2
 80081d2:	4a56      	ldr	r2, [pc, #344]	; (800832c <BATTERY_InitProfile+0x268>)
 80081d4:	189a      	adds	r2, r3, r2
 80081d6:	4b4f      	ldr	r3, [pc, #316]	; (8008314 <BATTERY_InitProfile+0x250>)
 80081d8:	605a      	str	r2, [r3, #4]
				m_customBatteryProfile.terminationCurr = (resistorConfig1Code7 & 0x04u) | ((resistorConfig1Code7 & 0x08u) >> 2u);
 80081da:	4b51      	ldr	r3, [pc, #324]	; (8008320 <BATTERY_InitProfile+0x25c>)
 80081dc:	2200      	movs	r2, #0
 80081de:	5e9b      	ldrsh	r3, [r3, r2]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2204      	movs	r2, #4
 80081e4:	4013      	ands	r3, r2
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	4b4d      	ldr	r3, [pc, #308]	; (8008320 <BATTERY_InitProfile+0x25c>)
 80081ea:	2100      	movs	r1, #0
 80081ec:	5e5b      	ldrsh	r3, [r3, r1]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	089b      	lsrs	r3, r3, #2
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2102      	movs	r1, #2
 80081f6:	400b      	ands	r3, r1
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	4313      	orrs	r3, r2
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	4b45      	ldr	r3, [pc, #276]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008200:	725a      	strb	r2, [r3, #9]
				m_customBatteryProfile.regulationVoltage = (resistorConfig1Code7 >> 4u) * 5u + 5u;
 8008202:	4b47      	ldr	r3, [pc, #284]	; (8008320 <BATTERY_InitProfile+0x25c>)
 8008204:	2200      	movs	r2, #0
 8008206:	5e9b      	ldrsh	r3, [r3, r2]
 8008208:	111b      	asrs	r3, r3, #4
 800820a:	b21b      	sxth	r3, r3
 800820c:	3301      	adds	r3, #1
 800820e:	b2db      	uxtb	r3, r3
 8008210:	1c1a      	adds	r2, r3, #0
 8008212:	0092      	lsls	r2, r2, #2
 8008214:	18d3      	adds	r3, r2, r3
 8008216:	b2da      	uxtb	r2, r3
 8008218:	4b3e      	ldr	r3, [pc, #248]	; (8008314 <BATTERY_InitProfile+0x250>)
 800821a:	729a      	strb	r2, [r3, #10]
				m_customBatteryProfile.capacity = 0xFFFFFFFFu; // undefined
 800821c:	4b3d      	ldr	r3, [pc, #244]	; (8008314 <BATTERY_InitProfile+0x250>)
 800821e:	2201      	movs	r2, #1
 8008220:	4252      	negs	r2, r2
 8008222:	605a      	str	r2, [r3, #4]
				m_customBatteryProfile.cutoffVoltage = 150u; // 3v
 8008224:	4b3b      	ldr	r3, [pc, #236]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008226:	2296      	movs	r2, #150	; 0x96
 8008228:	72da      	strb	r2, [r3, #11]
				m_customBatteryProfile.ntcB = 0x0D34u;
 800822a:	4b3a      	ldr	r3, [pc, #232]	; (8008314 <BATTERY_InitProfile+0x250>)
 800822c:	4a40      	ldr	r2, [pc, #256]	; (8008330 <BATTERY_InitProfile+0x26c>)
 800822e:	839a      	strh	r2, [r3, #28]
				m_customBatteryProfile.ntcResistance = 1000u;
 8008230:	4b38      	ldr	r3, [pc, #224]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008232:	22fa      	movs	r2, #250	; 0xfa
 8008234:	0092      	lsls	r2, r2, #2
 8008236:	83da      	strh	r2, [r3, #30]
				m_customBatteryProfile.tCold = 1u;
 8008238:	4b36      	ldr	r3, [pc, #216]	; (8008314 <BATTERY_InitProfile+0x250>)
 800823a:	2201      	movs	r2, #1
 800823c:	761a      	strb	r2, [r3, #24]
				m_customBatteryProfile.tCool = 10u;
 800823e:	4b35      	ldr	r3, [pc, #212]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008240:	220a      	movs	r2, #10
 8008242:	765a      	strb	r2, [r3, #25]
				m_customBatteryProfile.tWarm = 45u;
 8008244:	4b33      	ldr	r3, [pc, #204]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008246:	222d      	movs	r2, #45	; 0x2d
 8008248:	769a      	strb	r2, [r3, #26]
				m_customBatteryProfile.tHot = 60u;
 800824a:	4b32      	ldr	r3, [pc, #200]	; (8008314 <BATTERY_InitProfile+0x250>)
 800824c:	223c      	movs	r2, #60	; 0x3c
 800824e:	76da      	strb	r2, [r3, #27]

				// Extended data
				m_customBatteryProfile.chemistry=0xFFu;
 8008250:	4b30      	ldr	r3, [pc, #192]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008252:	22ff      	movs	r2, #255	; 0xff
 8008254:	701a      	strb	r2, [r3, #0]
				m_customBatteryProfile.ocv10 = 0xFFFFu;
 8008256:	4b2f      	ldr	r3, [pc, #188]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008258:	2201      	movs	r2, #1
 800825a:	4252      	negs	r2, r2
 800825c:	819a      	strh	r2, [r3, #12]
				m_customBatteryProfile.ocv50 = 0xFFFFu;
 800825e:	4b2d      	ldr	r3, [pc, #180]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008260:	2201      	movs	r2, #1
 8008262:	4252      	negs	r2, r2
 8008264:	81da      	strh	r2, [r3, #14]
				m_customBatteryProfile.ocv90 = 0xFFFFu;
 8008266:	4b2b      	ldr	r3, [pc, #172]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008268:	2201      	movs	r2, #1
 800826a:	4252      	negs	r2, r2
 800826c:	821a      	strh	r2, [r3, #16]
				m_customBatteryProfile.r10 = 0xFFFFu;
 800826e:	4b29      	ldr	r3, [pc, #164]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008270:	2201      	movs	r2, #1
 8008272:	4252      	negs	r2, r2
 8008274:	825a      	strh	r2, [r3, #18]
				m_customBatteryProfile.r50 = 0xFFFFu;
 8008276:	4b27      	ldr	r3, [pc, #156]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008278:	2201      	movs	r2, #1
 800827a:	4252      	negs	r2, r2
 800827c:	829a      	strh	r2, [r3, #20]
				m_customBatteryProfile.r90 = 0xFFFFu;
 800827e:	4b25      	ldr	r3, [pc, #148]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008280:	2201      	movs	r2, #1
 8008282:	4252      	negs	r2, r2
 8008284:	82da      	strh	r2, [r3, #22]

				m_batteryProfileStatus = BATTERY_CONFIG_PROFILE_STATUS;
 8008286:	4b24      	ldr	r3, [pc, #144]	; (8008318 <BATTERY_InitProfile+0x254>)
 8008288:	222f      	movs	r2, #47	; 0x2f
 800828a:	701a      	strb	r2, [r3, #0]
				m_p_activeBatteryProfile = &m_customBatteryProfile;
 800828c:	4b20      	ldr	r3, [pc, #128]	; (8008310 <BATTERY_InitProfile+0x24c>)
 800828e:	4a21      	ldr	r2, [pc, #132]	; (8008314 <BATTERY_InitProfile+0x250>)
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	e036      	b.n	8008302 <BATTERY_InitProfile+0x23e>
			}
			else
			{
				m_p_activeBatteryProfile = NULL;
 8008294:	4b1e      	ldr	r3, [pc, #120]	; (8008310 <BATTERY_InitProfile+0x24c>)
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
				m_batteryProfileStatus = BATTERY_CONFIG_INVALID_PROFILE_STATUS;
 800829a:	4b1f      	ldr	r3, [pc, #124]	; (8008318 <BATTERY_InitProfile+0x254>)
 800829c:	227f      	movs	r2, #127	; 0x7f
 800829e:	701a      	strb	r2, [r3, #0]
 80082a0:	e02f      	b.n	8008302 <BATTERY_InitProfile+0x23e>
			}
		}
		else
		{
			m_p_activeBatteryProfile = NULL;
 80082a2:	4b1b      	ldr	r3, [pc, #108]	; (8008310 <BATTERY_InitProfile+0x24c>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
			m_batteryProfileStatus = BATTERY_CONFIG_INVALID_PROFILE_STATUS;
 80082a8:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <BATTERY_InitProfile+0x254>)
 80082aa:	227f      	movs	r2, #127	; 0x7f
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	e028      	b.n	8008302 <BATTERY_InitProfile+0x23e>
		}
	}
	else if (initProfileId < BATTERY_PROFILES_COUNT)
 80082b0:	1dfb      	adds	r3, r7, #7
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b0b      	cmp	r3, #11
 80082b6:	d80b      	bhi.n	80082d0 <BATTERY_InitProfile+0x20c>
	{
		m_batteryProfileStatus = initProfileId;
 80082b8:	4b17      	ldr	r3, [pc, #92]	; (8008318 <BATTERY_InitProfile+0x254>)
 80082ba:	1dfa      	adds	r2, r7, #7
 80082bc:	7812      	ldrb	r2, [r2, #0]
 80082be:	701a      	strb	r2, [r3, #0]
		m_p_activeBatteryProfile = &m_batteryProfiles[initProfileId];
 80082c0:	1dfb      	adds	r3, r7, #7
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	4b18      	ldr	r3, [pc, #96]	; (8008328 <BATTERY_InitProfile+0x264>)
 80082c8:	18d2      	adds	r2, r2, r3
 80082ca:	4b11      	ldr	r3, [pc, #68]	; (8008310 <BATTERY_InitProfile+0x24c>)
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	e018      	b.n	8008302 <BATTERY_InitProfile+0x23e>
	}
	else if ( (initProfileId >= BATTERY_PROFILES_COUNT) && (initProfileId < 15u) )
 80082d0:	1dfb      	adds	r3, r7, #7
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b0b      	cmp	r3, #11
 80082d6:	d90e      	bls.n	80082f6 <BATTERY_InitProfile+0x232>
 80082d8:	1dfb      	adds	r3, r7, #7
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b0e      	cmp	r3, #14
 80082de:	d80a      	bhi.n	80082f6 <BATTERY_InitProfile+0x232>
	{
		m_p_activeBatteryProfile = NULL;
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <BATTERY_InitProfile+0x24c>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
		m_batteryProfileStatus = BATTERY_PROFILE_STATUS_STORED_PROFILE_ID_INVALID | initProfileId; // non defined  profile
 80082e6:	1dfb      	adds	r3, r7, #7
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2240      	movs	r2, #64	; 0x40
 80082ec:	4313      	orrs	r3, r2
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	4b09      	ldr	r3, [pc, #36]	; (8008318 <BATTERY_InitProfile+0x254>)
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	e005      	b.n	8008302 <BATTERY_InitProfile+0x23e>
	}
	else
	{
		m_p_activeBatteryProfile = NULL;
 80082f6:	4b06      	ldr	r3, [pc, #24]	; (8008310 <BATTERY_InitProfile+0x24c>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
		m_batteryProfileStatus = BATTERY_PROFILE_STATUS_STORED_PROFILE_ID_INVALID;
 80082fc:	4b06      	ldr	r3, [pc, #24]	; (8008318 <BATTERY_InitProfile+0x254>)
 80082fe:	2240      	movs	r2, #64	; 0x40
 8008300:	701a      	strb	r2, [r3, #0]
	}

	// Make sure the charger knows about the profile
	CHARGER_UpdateBatteryProfile();
 8008302:	f001 fc03 	bl	8009b0c <CHARGER_UpdateBatteryProfile>
}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	46bd      	mov	sp, r7
 800830a:	b002      	add	sp, #8
 800830c:	bd80      	pop	{r7, pc}
 800830e:	46c0      	nop			; (mov r8, r8)
 8008310:	20001230 	.word	0x20001230
 8008314:	20000014 	.word	0x20000014
 8008318:	20000034 	.word	0x20000034
 800831c:	200004c4 	.word	0x200004c4
 8008320:	200004c6 	.word	0x200004c6
 8008324:	200004c8 	.word	0x200004c8
 8008328:	080139c8 	.word	0x080139c8
 800832c:	0000044c 	.word	0x0000044c
 8008330:	00000d34 	.word	0x00000d34

08008334 <BATTERY_ReadEEProfileData>:
 * @retval	bool		false = profile data invalid
 * 						true = profile data valid
 */
// ****************************************************************************
static bool BATTERY_ReadEEProfileData(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
	bool dataValid = true;
 800833a:	1dfb      	adds	r3, r7, #7
 800833c:	2201      	movs	r2, #1
 800833e:	701a      	strb	r2, [r3, #0]
	uint16_t tempU16;
	uint16_t ntcCrc;

	EE_ReadVariable(BAT_CAPACITY_NV_ADDR, &tempU16);
 8008340:	1cbb      	adds	r3, r7, #2
 8008342:	0019      	movs	r1, r3
 8008344:	2014      	movs	r0, #20
 8008346:	f003 ff83 	bl	800c250 <EE_ReadVariable>
	m_customBatteryProfile.capacity = UNPACK_CAPACITY_U16(tempU16); // correction for large capacities over 32767
 800834a:	1cbb      	adds	r3, r7, #2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	4a5e      	ldr	r2, [pc, #376]	; (80084c8 <BATTERY_ReadEEProfileData+0x194>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d00d      	beq.n	8008370 <BATTERY_ReadEEProfileData+0x3c>
 8008354:	1cbb      	adds	r3, r7, #2
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	045b      	lsls	r3, r3, #17
 800835a:	0c5a      	lsrs	r2, r3, #17
 800835c:	1cbb      	adds	r3, r7, #2
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	0bdb      	lsrs	r3, r3, #15
 8008362:	b29b      	uxth	r3, r3
 8008364:	0019      	movs	r1, r3
 8008366:	000b      	movs	r3, r1
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	1a5b      	subs	r3, r3, r1
 800836c:	409a      	lsls	r2, r3
 800836e:	e001      	b.n	8008374 <BATTERY_ReadEEProfileData+0x40>
 8008370:	2301      	movs	r3, #1
 8008372:	425a      	negs	r2, r3
 8008374:	4b55      	ldr	r3, [pc, #340]	; (80084cc <BATTERY_ReadEEProfileData+0x198>)
 8008376:	605a      	str	r2, [r3, #4]

	dataValid &= NV_ReadVariable_U8(CHARGE_CURRENT_NV_ADDR, &m_customBatteryProfile.chargeCurrent);
 8008378:	4b55      	ldr	r3, [pc, #340]	; (80084d0 <BATTERY_ReadEEProfileData+0x19c>)
 800837a:	0019      	movs	r1, r3
 800837c:	2015      	movs	r0, #21
 800837e:	f008 fbdd 	bl	8010b3c <NV_ReadVariable_U8>
 8008382:	0003      	movs	r3, r0
 8008384:	001a      	movs	r2, r3
 8008386:	1dfb      	adds	r3, r7, #7
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	401a      	ands	r2, r3
 800838c:	1dfb      	adds	r3, r7, #7
 800838e:	1e51      	subs	r1, r2, #1
 8008390:	418a      	sbcs	r2, r1
 8008392:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(CHARGE_TERM_CURRENT_NV_ADDR, &m_customBatteryProfile.terminationCurr);
 8008394:	4b4f      	ldr	r3, [pc, #316]	; (80084d4 <BATTERY_ReadEEProfileData+0x1a0>)
 8008396:	0019      	movs	r1, r3
 8008398:	2016      	movs	r0, #22
 800839a:	f008 fbcf 	bl	8010b3c <NV_ReadVariable_U8>
 800839e:	0003      	movs	r3, r0
 80083a0:	001a      	movs	r2, r3
 80083a2:	1dfb      	adds	r3, r7, #7
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	401a      	ands	r2, r3
 80083a8:	1dfb      	adds	r3, r7, #7
 80083aa:	1e51      	subs	r1, r2, #1
 80083ac:	418a      	sbcs	r2, r1
 80083ae:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(BAT_REG_VOLTAGE_NV_ADDR, &m_customBatteryProfile.regulationVoltage);
 80083b0:	4b49      	ldr	r3, [pc, #292]	; (80084d8 <BATTERY_ReadEEProfileData+0x1a4>)
 80083b2:	0019      	movs	r1, r3
 80083b4:	2017      	movs	r0, #23
 80083b6:	f008 fbc1 	bl	8010b3c <NV_ReadVariable_U8>
 80083ba:	0003      	movs	r3, r0
 80083bc:	001a      	movs	r2, r3
 80083be:	1dfb      	adds	r3, r7, #7
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	401a      	ands	r2, r3
 80083c4:	1dfb      	adds	r3, r7, #7
 80083c6:	1e51      	subs	r1, r2, #1
 80083c8:	418a      	sbcs	r2, r1
 80083ca:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(BAT_CUTOFF_VOLTAGE_NV_ADDR, &m_customBatteryProfile.cutoffVoltage);
 80083cc:	4b43      	ldr	r3, [pc, #268]	; (80084dc <BATTERY_ReadEEProfileData+0x1a8>)
 80083ce:	0019      	movs	r1, r3
 80083d0:	2018      	movs	r0, #24
 80083d2:	f008 fbb3 	bl	8010b3c <NV_ReadVariable_U8>
 80083d6:	0003      	movs	r3, r0
 80083d8:	001a      	movs	r2, r3
 80083da:	1dfb      	adds	r3, r7, #7
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	401a      	ands	r2, r3
 80083e0:	1dfb      	adds	r3, r7, #7
 80083e2:	1e51      	subs	r1, r2, #1
 80083e4:	418a      	sbcs	r2, r1
 80083e6:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(BAT_TEMP_COLD_NV_ADDR, (uint8_t*)&m_customBatteryProfile.tCold);
 80083e8:	4b3d      	ldr	r3, [pc, #244]	; (80084e0 <BATTERY_ReadEEProfileData+0x1ac>)
 80083ea:	0019      	movs	r1, r3
 80083ec:	2019      	movs	r0, #25
 80083ee:	f008 fba5 	bl	8010b3c <NV_ReadVariable_U8>
 80083f2:	0003      	movs	r3, r0
 80083f4:	001a      	movs	r2, r3
 80083f6:	1dfb      	adds	r3, r7, #7
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	401a      	ands	r2, r3
 80083fc:	1dfb      	adds	r3, r7, #7
 80083fe:	1e51      	subs	r1, r2, #1
 8008400:	418a      	sbcs	r2, r1
 8008402:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(BAT_TEMP_COOL_NV_ADDR, (uint8_t*)&m_customBatteryProfile.tCool);
 8008404:	4b37      	ldr	r3, [pc, #220]	; (80084e4 <BATTERY_ReadEEProfileData+0x1b0>)
 8008406:	0019      	movs	r1, r3
 8008408:	201a      	movs	r0, #26
 800840a:	f008 fb97 	bl	8010b3c <NV_ReadVariable_U8>
 800840e:	0003      	movs	r3, r0
 8008410:	001a      	movs	r2, r3
 8008412:	1dfb      	adds	r3, r7, #7
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	401a      	ands	r2, r3
 8008418:	1dfb      	adds	r3, r7, #7
 800841a:	1e51      	subs	r1, r2, #1
 800841c:	418a      	sbcs	r2, r1
 800841e:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(BAT_TEMP_WARM_NV_ADDR, (uint8_t*)&m_customBatteryProfile.tWarm);
 8008420:	4b31      	ldr	r3, [pc, #196]	; (80084e8 <BATTERY_ReadEEProfileData+0x1b4>)
 8008422:	0019      	movs	r1, r3
 8008424:	201b      	movs	r0, #27
 8008426:	f008 fb89 	bl	8010b3c <NV_ReadVariable_U8>
 800842a:	0003      	movs	r3, r0
 800842c:	001a      	movs	r2, r3
 800842e:	1dfb      	adds	r3, r7, #7
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	401a      	ands	r2, r3
 8008434:	1dfb      	adds	r3, r7, #7
 8008436:	1e51      	subs	r1, r2, #1
 8008438:	418a      	sbcs	r2, r1
 800843a:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(BAT_TEMP_HOT_NV_ADDR, (uint8_t*)&m_customBatteryProfile.tHot);
 800843c:	4b2b      	ldr	r3, [pc, #172]	; (80084ec <BATTERY_ReadEEProfileData+0x1b8>)
 800843e:	0019      	movs	r1, r3
 8008440:	201c      	movs	r0, #28
 8008442:	f008 fb7b 	bl	8010b3c <NV_ReadVariable_U8>
 8008446:	0003      	movs	r3, r0
 8008448:	001a      	movs	r2, r3
 800844a:	1dfb      	adds	r3, r7, #7
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	401a      	ands	r2, r3
 8008450:	1dfb      	adds	r3, r7, #7
 8008452:	1e51      	subs	r1, r2, #1
 8008454:	418a      	sbcs	r2, r1
 8008456:	701a      	strb	r2, [r3, #0]

	EE_ReadVariable(BAT_NTC_B_NV_ADDR, &tempU16);
 8008458:	1cbb      	adds	r3, r7, #2
 800845a:	0019      	movs	r1, r3
 800845c:	201d      	movs	r0, #29
 800845e:	f003 fef7 	bl	800c250 <EE_ReadVariable>
	m_customBatteryProfile.ntcB = tempU16;
 8008462:	1cbb      	adds	r3, r7, #2
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	4b19      	ldr	r3, [pc, #100]	; (80084cc <BATTERY_ReadEEProfileData+0x198>)
 8008468:	839a      	strh	r2, [r3, #28]
	ntcCrc = tempU16;
 800846a:	1d3b      	adds	r3, r7, #4
 800846c:	1cba      	adds	r2, r7, #2
 800846e:	8812      	ldrh	r2, [r2, #0]
 8008470:	801a      	strh	r2, [r3, #0]

	EE_ReadVariable(BAT_NTC_RESISTANCE_NV_ADDR, &tempU16);
 8008472:	1cbb      	adds	r3, r7, #2
 8008474:	0019      	movs	r1, r3
 8008476:	201e      	movs	r0, #30
 8008478:	f003 feea 	bl	800c250 <EE_ReadVariable>
	m_customBatteryProfile.ntcResistance = tempU16;
 800847c:	1cbb      	adds	r3, r7, #2
 800847e:	881a      	ldrh	r2, [r3, #0]
 8008480:	4b12      	ldr	r3, [pc, #72]	; (80084cc <BATTERY_ReadEEProfileData+0x198>)
 8008482:	83da      	strh	r2, [r3, #30]
	ntcCrc ^= tempU16;
 8008484:	1cbb      	adds	r3, r7, #2
 8008486:	8819      	ldrh	r1, [r3, #0]
 8008488:	1d3b      	adds	r3, r7, #4
 800848a:	1d3a      	adds	r2, r7, #4
 800848c:	8812      	ldrh	r2, [r2, #0]
 800848e:	404a      	eors	r2, r1
 8008490:	801a      	strh	r2, [r3, #0]

	EE_ReadVariable(BAT_NTC_CRC_NV_ADDR, &tempU16);
 8008492:	1cbb      	adds	r3, r7, #2
 8008494:	0019      	movs	r1, r3
 8008496:	201f      	movs	r0, #31
 8008498:	f003 feda 	bl	800c250 <EE_ReadVariable>
	dataValid &= (tempU16 == ntcCrc);
 800849c:	1dfb      	adds	r3, r7, #7
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	1cba      	adds	r2, r7, #2
 80084a2:	8812      	ldrh	r2, [r2, #0]
 80084a4:	1d39      	adds	r1, r7, #4
 80084a6:	8809      	ldrh	r1, [r1, #0]
 80084a8:	1a8a      	subs	r2, r1, r2
 80084aa:	4251      	negs	r1, r2
 80084ac:	414a      	adcs	r2, r1
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	401a      	ands	r2, r3
 80084b2:	1dfb      	adds	r3, r7, #7
 80084b4:	1e51      	subs	r1, r2, #1
 80084b6:	418a      	sbcs	r2, r1
 80084b8:	701a      	strb	r2, [r3, #0]

	return dataValid;
 80084ba:	1dfb      	adds	r3, r7, #7
 80084bc:	781b      	ldrb	r3, [r3, #0]
}
 80084be:	0018      	movs	r0, r3
 80084c0:	46bd      	mov	sp, r7
 80084c2:	b002      	add	sp, #8
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	0000ffff 	.word	0x0000ffff
 80084cc:	20000014 	.word	0x20000014
 80084d0:	2000001c 	.word	0x2000001c
 80084d4:	2000001d 	.word	0x2000001d
 80084d8:	2000001e 	.word	0x2000001e
 80084dc:	2000001f 	.word	0x2000001f
 80084e0:	2000002c 	.word	0x2000002c
 80084e4:	2000002d 	.word	0x2000002d
 80084e8:	2000002e 	.word	0x2000002e
 80084ec:	2000002f 	.word	0x2000002f

080084f0 <BATTERY_ReadExtendedEEProfileData>:
 * @retval	bool		false = profile data invalid
 * 						true = profile data valid
 */
// ****************************************************************************
static bool BATTERY_ReadExtendedEEProfileData(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
	uint8_t tempU8;
	bool dataValid = true;
 80084f6:	1dfb      	adds	r3, r7, #7
 80084f8:	2201      	movs	r2, #1
 80084fa:	701a      	strb	r2, [r3, #0]

	dataValid &= NV_ReadVariable_U8(BAT_CHEMISTRY_NV_ADDR, (uint8_t*)&m_customBatteryProfile.chemistry);
 80084fc:	4ba1      	ldr	r3, [pc, #644]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 80084fe:	0019      	movs	r1, r3
 8008500:	2064      	movs	r0, #100	; 0x64
 8008502:	f008 fb1b 	bl	8010b3c <NV_ReadVariable_U8>
 8008506:	0003      	movs	r3, r0
 8008508:	001a      	movs	r2, r3
 800850a:	1dfb      	adds	r3, r7, #7
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	401a      	ands	r2, r3
 8008510:	1dfb      	adds	r3, r7, #7
 8008512:	1e51      	subs	r1, r2, #1
 8008514:	418a      	sbcs	r2, r1
 8008516:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(BAT_OCV10L_NV_ADDR, &tempU8);
 8008518:	1dbb      	adds	r3, r7, #6
 800851a:	0019      	movs	r1, r3
 800851c:	2065      	movs	r0, #101	; 0x65
 800851e:	f008 fb0d 	bl	8010b3c <NV_ReadVariable_U8>
 8008522:	0003      	movs	r3, r0
 8008524:	001a      	movs	r2, r3
 8008526:	1dfb      	adds	r3, r7, #7
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	401a      	ands	r2, r3
 800852c:	1dfb      	adds	r3, r7, #7
 800852e:	1e51      	subs	r1, r2, #1
 8008530:	418a      	sbcs	r2, r1
 8008532:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.ocv10 = tempU8;
 8008534:	1dbb      	adds	r3, r7, #6
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	b29a      	uxth	r2, r3
 800853a:	4b92      	ldr	r3, [pc, #584]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 800853c:	819a      	strh	r2, [r3, #12]

	dataValid &= NV_ReadVariable_U8(BAT_OCV10H_NV_ADDR, &tempU8);
 800853e:	1dbb      	adds	r3, r7, #6
 8008540:	0019      	movs	r1, r3
 8008542:	2066      	movs	r0, #102	; 0x66
 8008544:	f008 fafa 	bl	8010b3c <NV_ReadVariable_U8>
 8008548:	0003      	movs	r3, r0
 800854a:	001a      	movs	r2, r3
 800854c:	1dfb      	adds	r3, r7, #7
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	401a      	ands	r2, r3
 8008552:	1dfb      	adds	r3, r7, #7
 8008554:	1e51      	subs	r1, r2, #1
 8008556:	418a      	sbcs	r2, r1
 8008558:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.ocv10 |= (tempU8 << 8u);
 800855a:	4b8a      	ldr	r3, [pc, #552]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 800855c:	899b      	ldrh	r3, [r3, #12]
 800855e:	b21a      	sxth	r2, r3
 8008560:	1dbb      	adds	r3, r7, #6
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	b21b      	sxth	r3, r3
 8008568:	4313      	orrs	r3, r2
 800856a:	b21b      	sxth	r3, r3
 800856c:	b29a      	uxth	r2, r3
 800856e:	4b85      	ldr	r3, [pc, #532]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 8008570:	819a      	strh	r2, [r3, #12]


	dataValid &= NV_ReadVariable_U8(BAT_OCV50L_NV_ADDR, &tempU8);
 8008572:	1dbb      	adds	r3, r7, #6
 8008574:	0019      	movs	r1, r3
 8008576:	2067      	movs	r0, #103	; 0x67
 8008578:	f008 fae0 	bl	8010b3c <NV_ReadVariable_U8>
 800857c:	0003      	movs	r3, r0
 800857e:	001a      	movs	r2, r3
 8008580:	1dfb      	adds	r3, r7, #7
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	401a      	ands	r2, r3
 8008586:	1dfb      	adds	r3, r7, #7
 8008588:	1e51      	subs	r1, r2, #1
 800858a:	418a      	sbcs	r2, r1
 800858c:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.ocv50 = tempU8;
 800858e:	1dbb      	adds	r3, r7, #6
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	b29a      	uxth	r2, r3
 8008594:	4b7b      	ldr	r3, [pc, #492]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 8008596:	81da      	strh	r2, [r3, #14]

	dataValid &= NV_ReadVariable_U8(BAT_OCV50H_NV_ADDR, &tempU8);
 8008598:	1dbb      	adds	r3, r7, #6
 800859a:	0019      	movs	r1, r3
 800859c:	2068      	movs	r0, #104	; 0x68
 800859e:	f008 facd 	bl	8010b3c <NV_ReadVariable_U8>
 80085a2:	0003      	movs	r3, r0
 80085a4:	001a      	movs	r2, r3
 80085a6:	1dfb      	adds	r3, r7, #7
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	401a      	ands	r2, r3
 80085ac:	1dfb      	adds	r3, r7, #7
 80085ae:	1e51      	subs	r1, r2, #1
 80085b0:	418a      	sbcs	r2, r1
 80085b2:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.ocv50 |= (tempU8 << 8u);
 80085b4:	4b73      	ldr	r3, [pc, #460]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 80085b6:	89db      	ldrh	r3, [r3, #14]
 80085b8:	b21a      	sxth	r2, r3
 80085ba:	1dbb      	adds	r3, r7, #6
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	021b      	lsls	r3, r3, #8
 80085c0:	b21b      	sxth	r3, r3
 80085c2:	4313      	orrs	r3, r2
 80085c4:	b21b      	sxth	r3, r3
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	4b6e      	ldr	r3, [pc, #440]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 80085ca:	81da      	strh	r2, [r3, #14]


	dataValid &= NV_ReadVariable_U8(BAT_OCV90L_NV_ADDR, &tempU8);
 80085cc:	1dbb      	adds	r3, r7, #6
 80085ce:	0019      	movs	r1, r3
 80085d0:	2069      	movs	r0, #105	; 0x69
 80085d2:	f008 fab3 	bl	8010b3c <NV_ReadVariable_U8>
 80085d6:	0003      	movs	r3, r0
 80085d8:	001a      	movs	r2, r3
 80085da:	1dfb      	adds	r3, r7, #7
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	401a      	ands	r2, r3
 80085e0:	1dfb      	adds	r3, r7, #7
 80085e2:	1e51      	subs	r1, r2, #1
 80085e4:	418a      	sbcs	r2, r1
 80085e6:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.ocv90 = tempU8;
 80085e8:	1dbb      	adds	r3, r7, #6
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	4b65      	ldr	r3, [pc, #404]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 80085f0:	821a      	strh	r2, [r3, #16]

	dataValid &= NV_ReadVariable_U8(BAT_OCV90H_NV_ADDR, &tempU8);
 80085f2:	1dbb      	adds	r3, r7, #6
 80085f4:	0019      	movs	r1, r3
 80085f6:	206a      	movs	r0, #106	; 0x6a
 80085f8:	f008 faa0 	bl	8010b3c <NV_ReadVariable_U8>
 80085fc:	0003      	movs	r3, r0
 80085fe:	001a      	movs	r2, r3
 8008600:	1dfb      	adds	r3, r7, #7
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	401a      	ands	r2, r3
 8008606:	1dfb      	adds	r3, r7, #7
 8008608:	1e51      	subs	r1, r2, #1
 800860a:	418a      	sbcs	r2, r1
 800860c:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.ocv90 |= (tempU8 << 8u);
 800860e:	4b5d      	ldr	r3, [pc, #372]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 8008610:	8a1b      	ldrh	r3, [r3, #16]
 8008612:	b21a      	sxth	r2, r3
 8008614:	1dbb      	adds	r3, r7, #6
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	021b      	lsls	r3, r3, #8
 800861a:	b21b      	sxth	r3, r3
 800861c:	4313      	orrs	r3, r2
 800861e:	b21b      	sxth	r3, r3
 8008620:	b29a      	uxth	r2, r3
 8008622:	4b58      	ldr	r3, [pc, #352]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 8008624:	821a      	strh	r2, [r3, #16]


	dataValid &= NV_ReadVariable_U8(BAT_R10L_NV_ADDR, &tempU8);
 8008626:	1dbb      	adds	r3, r7, #6
 8008628:	0019      	movs	r1, r3
 800862a:	206b      	movs	r0, #107	; 0x6b
 800862c:	f008 fa86 	bl	8010b3c <NV_ReadVariable_U8>
 8008630:	0003      	movs	r3, r0
 8008632:	001a      	movs	r2, r3
 8008634:	1dfb      	adds	r3, r7, #7
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	401a      	ands	r2, r3
 800863a:	1dfb      	adds	r3, r7, #7
 800863c:	1e51      	subs	r1, r2, #1
 800863e:	418a      	sbcs	r2, r1
 8008640:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.r10 = tempU8;
 8008642:	1dbb      	adds	r3, r7, #6
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	b29a      	uxth	r2, r3
 8008648:	4b4e      	ldr	r3, [pc, #312]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 800864a:	825a      	strh	r2, [r3, #18]

	dataValid &= NV_ReadVariable_U8(BAT_R10H_NV_ADDR, &tempU8);
 800864c:	1dbb      	adds	r3, r7, #6
 800864e:	0019      	movs	r1, r3
 8008650:	206c      	movs	r0, #108	; 0x6c
 8008652:	f008 fa73 	bl	8010b3c <NV_ReadVariable_U8>
 8008656:	0003      	movs	r3, r0
 8008658:	001a      	movs	r2, r3
 800865a:	1dfb      	adds	r3, r7, #7
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	401a      	ands	r2, r3
 8008660:	1dfb      	adds	r3, r7, #7
 8008662:	1e51      	subs	r1, r2, #1
 8008664:	418a      	sbcs	r2, r1
 8008666:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.r10 |= (tempU8 << 8u);
 8008668:	4b46      	ldr	r3, [pc, #280]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 800866a:	8a5b      	ldrh	r3, [r3, #18]
 800866c:	b21a      	sxth	r2, r3
 800866e:	1dbb      	adds	r3, r7, #6
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	021b      	lsls	r3, r3, #8
 8008674:	b21b      	sxth	r3, r3
 8008676:	4313      	orrs	r3, r2
 8008678:	b21b      	sxth	r3, r3
 800867a:	b29a      	uxth	r2, r3
 800867c:	4b41      	ldr	r3, [pc, #260]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 800867e:	825a      	strh	r2, [r3, #18]


	dataValid &= NV_ReadVariable_U8(BAT_R50L_NV_ADDR, &tempU8);
 8008680:	1dbb      	adds	r3, r7, #6
 8008682:	0019      	movs	r1, r3
 8008684:	206d      	movs	r0, #109	; 0x6d
 8008686:	f008 fa59 	bl	8010b3c <NV_ReadVariable_U8>
 800868a:	0003      	movs	r3, r0
 800868c:	001a      	movs	r2, r3
 800868e:	1dfb      	adds	r3, r7, #7
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	401a      	ands	r2, r3
 8008694:	1dfb      	adds	r3, r7, #7
 8008696:	1e51      	subs	r1, r2, #1
 8008698:	418a      	sbcs	r2, r1
 800869a:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.r50 = tempU8;
 800869c:	1dbb      	adds	r3, r7, #6
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	4b38      	ldr	r3, [pc, #224]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 80086a4:	829a      	strh	r2, [r3, #20]

	dataValid &= NV_ReadVariable_U8(BAT_R50H_NV_ADDR, &tempU8);
 80086a6:	1dbb      	adds	r3, r7, #6
 80086a8:	0019      	movs	r1, r3
 80086aa:	206e      	movs	r0, #110	; 0x6e
 80086ac:	f008 fa46 	bl	8010b3c <NV_ReadVariable_U8>
 80086b0:	0003      	movs	r3, r0
 80086b2:	001a      	movs	r2, r3
 80086b4:	1dfb      	adds	r3, r7, #7
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	401a      	ands	r2, r3
 80086ba:	1dfb      	adds	r3, r7, #7
 80086bc:	1e51      	subs	r1, r2, #1
 80086be:	418a      	sbcs	r2, r1
 80086c0:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.r50 |= (tempU8 << 8u);
 80086c2:	4b30      	ldr	r3, [pc, #192]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 80086c4:	8a9b      	ldrh	r3, [r3, #20]
 80086c6:	b21a      	sxth	r2, r3
 80086c8:	1dbb      	adds	r3, r7, #6
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	b21b      	sxth	r3, r3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	b21b      	sxth	r3, r3
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	4b2b      	ldr	r3, [pc, #172]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 80086d8:	829a      	strh	r2, [r3, #20]


	dataValid &= NV_ReadVariable_U8(BAT_R90L_NV_ADDR, &tempU8);
 80086da:	1dbb      	adds	r3, r7, #6
 80086dc:	0019      	movs	r1, r3
 80086de:	206f      	movs	r0, #111	; 0x6f
 80086e0:	f008 fa2c 	bl	8010b3c <NV_ReadVariable_U8>
 80086e4:	0003      	movs	r3, r0
 80086e6:	001a      	movs	r2, r3
 80086e8:	1dfb      	adds	r3, r7, #7
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	401a      	ands	r2, r3
 80086ee:	1dfb      	adds	r3, r7, #7
 80086f0:	1e51      	subs	r1, r2, #1
 80086f2:	418a      	sbcs	r2, r1
 80086f4:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.r90 = tempU8;
 80086f6:	1dbb      	adds	r3, r7, #6
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	4b21      	ldr	r3, [pc, #132]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 80086fe:	82da      	strh	r2, [r3, #22]

	dataValid &= NV_ReadVariable_U8(BAT_R90H_NV_ADDR, &tempU8);
 8008700:	1dbb      	adds	r3, r7, #6
 8008702:	0019      	movs	r1, r3
 8008704:	2070      	movs	r0, #112	; 0x70
 8008706:	f008 fa19 	bl	8010b3c <NV_ReadVariable_U8>
 800870a:	0003      	movs	r3, r0
 800870c:	001a      	movs	r2, r3
 800870e:	1dfb      	adds	r3, r7, #7
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	401a      	ands	r2, r3
 8008714:	1dfb      	adds	r3, r7, #7
 8008716:	1e51      	subs	r1, r2, #1
 8008718:	418a      	sbcs	r2, r1
 800871a:	701a      	strb	r2, [r3, #0]
	m_customBatteryProfile.r90 |= (tempU8 << 8u);
 800871c:	4b19      	ldr	r3, [pc, #100]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 800871e:	8adb      	ldrh	r3, [r3, #22]
 8008720:	b21a      	sxth	r2, r3
 8008722:	1dbb      	adds	r3, r7, #6
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	b21b      	sxth	r3, r3
 800872a:	4313      	orrs	r3, r2
 800872c:	b21b      	sxth	r3, r3
 800872e:	b29a      	uxth	r2, r3
 8008730:	4b14      	ldr	r3, [pc, #80]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 8008732:	82da      	strh	r2, [r3, #22]


	if (false == dataValid)
 8008734:	1dfb      	adds	r3, r7, #7
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2201      	movs	r2, #1
 800873a:	4053      	eors	r3, r2
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d01a      	beq.n	8008778 <BATTERY_ReadExtendedEEProfileData+0x288>
	{
		m_customBatteryProfile.chemistry = BATTERY_CHEMISTRY_NOT_SET;
 8008742:	4b10      	ldr	r3, [pc, #64]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 8008744:	22ff      	movs	r2, #255	; 0xff
 8008746:	701a      	strb	r2, [r3, #0]
		m_customBatteryProfile.ocv10 = 0xFFFFu;
 8008748:	4b0e      	ldr	r3, [pc, #56]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 800874a:	2201      	movs	r2, #1
 800874c:	4252      	negs	r2, r2
 800874e:	819a      	strh	r2, [r3, #12]
		m_customBatteryProfile.ocv50 = 0xFFFFu;
 8008750:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 8008752:	2201      	movs	r2, #1
 8008754:	4252      	negs	r2, r2
 8008756:	81da      	strh	r2, [r3, #14]
		m_customBatteryProfile.ocv90 = 0xFFFFu;
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 800875a:	2201      	movs	r2, #1
 800875c:	4252      	negs	r2, r2
 800875e:	821a      	strh	r2, [r3, #16]
		m_customBatteryProfile.r10 = 0xFFFFu;
 8008760:	4b08      	ldr	r3, [pc, #32]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 8008762:	2201      	movs	r2, #1
 8008764:	4252      	negs	r2, r2
 8008766:	825a      	strh	r2, [r3, #18]
		m_customBatteryProfile.r50 = 0xFFFFu;
 8008768:	4b06      	ldr	r3, [pc, #24]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 800876a:	2201      	movs	r2, #1
 800876c:	4252      	negs	r2, r2
 800876e:	829a      	strh	r2, [r3, #20]
		m_customBatteryProfile.r90 = 0xFFFFu;
 8008770:	4b04      	ldr	r3, [pc, #16]	; (8008784 <BATTERY_ReadExtendedEEProfileData+0x294>)
 8008772:	2201      	movs	r2, #1
 8008774:	4252      	negs	r2, r2
 8008776:	82da      	strh	r2, [r3, #22]
	}


	return dataValid;
 8008778:	1dfb      	adds	r3, r7, #7
 800877a:	781b      	ldrb	r3, [r3, #0]
}
 800877c:	0018      	movs	r0, r3
 800877e:	46bd      	mov	sp, r7
 8008780:	b002      	add	sp, #8
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000014 	.word	0x20000014

08008788 <BATTERY_WriteEEProfileData>:
 * @retval	none
 *
 */
// ****************************************************************************
static void BATTERY_WriteEEProfileData(const BatteryProfile_T * const p_batProfile)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
	uint16_t var = PACK_CAPACITY_U16(p_batProfile->capacity); // correction for large capacities over 32767
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	3301      	adds	r3, #1
 8008796:	d01a      	beq.n	80087ce <BATTERY_WriteEEProfileData+0x46>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6859      	ldr	r1, [r3, #4]
 80087a0:	2380      	movs	r3, #128	; 0x80
 80087a2:	021b      	lsls	r3, r3, #8
 80087a4:	4299      	cmp	r1, r3
 80087a6:	d301      	bcc.n	80087ac <BATTERY_WriteEEProfileData+0x24>
 80087a8:	2307      	movs	r3, #7
 80087aa:	e000      	b.n	80087ae <BATTERY_WriteEEProfileData+0x26>
 80087ac:	2300      	movs	r3, #0
 80087ae:	40da      	lsrs	r2, r3
 80087b0:	0013      	movs	r3, r2
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6859      	ldr	r1, [r3, #4]
 80087b8:	2380      	movs	r3, #128	; 0x80
 80087ba:	021b      	lsls	r3, r3, #8
 80087bc:	4299      	cmp	r1, r3
 80087be:	d302      	bcc.n	80087c6 <BATTERY_WriteEEProfileData+0x3e>
 80087c0:	2380      	movs	r3, #128	; 0x80
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	e000      	b.n	80087c8 <BATTERY_WriteEEProfileData+0x40>
 80087c6:	2300      	movs	r3, #0
 80087c8:	4313      	orrs	r3, r2
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	e000      	b.n	80087d0 <BATTERY_WriteEEProfileData+0x48>
 80087ce:	4a2e      	ldr	r2, [pc, #184]	; (8008888 <BATTERY_WriteEEProfileData+0x100>)
 80087d0:	210e      	movs	r1, #14
 80087d2:	187b      	adds	r3, r7, r1
 80087d4:	801a      	strh	r2, [r3, #0]

	EE_WriteVariable(BAT_CAPACITY_NV_ADDR, var);
 80087d6:	187b      	adds	r3, r7, r1
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	0019      	movs	r1, r3
 80087dc:	2014      	movs	r0, #20
 80087de:	f003 fd99 	bl	800c314 <EE_WriteVariable>

	NV_WriteVariable_U8(CHARGE_CURRENT_NV_ADDR, p_batProfile->chargeCurrent);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	7a1b      	ldrb	r3, [r3, #8]
 80087e6:	0019      	movs	r1, r3
 80087e8:	2015      	movs	r0, #21
 80087ea:	f008 f983 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(CHARGE_TERM_CURRENT_NV_ADDR, p_batProfile->terminationCurr);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	7a5b      	ldrb	r3, [r3, #9]
 80087f2:	0019      	movs	r1, r3
 80087f4:	2016      	movs	r0, #22
 80087f6:	f008 f97d 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_REG_VOLTAGE_NV_ADDR, p_batProfile->regulationVoltage);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7a9b      	ldrb	r3, [r3, #10]
 80087fe:	0019      	movs	r1, r3
 8008800:	2017      	movs	r0, #23
 8008802:	f008 f977 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_CUTOFF_VOLTAGE_NV_ADDR, p_batProfile->cutoffVoltage);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	7adb      	ldrb	r3, [r3, #11]
 800880a:	0019      	movs	r1, r3
 800880c:	2018      	movs	r0, #24
 800880e:	f008 f971 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_TEMP_COLD_NV_ADDR, p_batProfile->tCold);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	7e1b      	ldrb	r3, [r3, #24]
 8008816:	b25b      	sxtb	r3, r3
 8008818:	b2db      	uxtb	r3, r3
 800881a:	0019      	movs	r1, r3
 800881c:	2019      	movs	r0, #25
 800881e:	f008 f969 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_TEMP_COOL_NV_ADDR, p_batProfile->tCool);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	7e5b      	ldrb	r3, [r3, #25]
 8008826:	b25b      	sxtb	r3, r3
 8008828:	b2db      	uxtb	r3, r3
 800882a:	0019      	movs	r1, r3
 800882c:	201a      	movs	r0, #26
 800882e:	f008 f961 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_TEMP_WARM_NV_ADDR, p_batProfile->tWarm);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7e9b      	ldrb	r3, [r3, #26]
 8008836:	b25b      	sxtb	r3, r3
 8008838:	b2db      	uxtb	r3, r3
 800883a:	0019      	movs	r1, r3
 800883c:	201b      	movs	r0, #27
 800883e:	f008 f959 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_TEMP_HOT_NV_ADDR, p_batProfile->tHot);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	7edb      	ldrb	r3, [r3, #27]
 8008846:	b25b      	sxtb	r3, r3
 8008848:	b2db      	uxtb	r3, r3
 800884a:	0019      	movs	r1, r3
 800884c:	201c      	movs	r0, #28
 800884e:	f008 f951 	bl	8010af4 <NV_WriteVariable_U8>
	EE_WriteVariable(BAT_NTC_B_NV_ADDR, p_batProfile->ntcB);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	8b9b      	ldrh	r3, [r3, #28]
 8008856:	0019      	movs	r1, r3
 8008858:	201d      	movs	r0, #29
 800885a:	f003 fd5b 	bl	800c314 <EE_WriteVariable>
	EE_WriteVariable(BAT_NTC_RESISTANCE_NV_ADDR, p_batProfile->ntcResistance);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8bdb      	ldrh	r3, [r3, #30]
 8008862:	0019      	movs	r1, r3
 8008864:	201e      	movs	r0, #30
 8008866:	f003 fd55 	bl	800c314 <EE_WriteVariable>
	EE_WriteVariable(BAT_NTC_CRC_NV_ADDR, p_batProfile->ntcB ^ p_batProfile->ntcResistance);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	8b9a      	ldrh	r2, [r3, #28]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	8bdb      	ldrh	r3, [r3, #30]
 8008872:	4053      	eors	r3, r2
 8008874:	b29b      	uxth	r3, r3
 8008876:	0019      	movs	r1, r3
 8008878:	201f      	movs	r0, #31
 800887a:	f003 fd4b 	bl	800c314 <EE_WriteVariable>
}
 800887e:	46c0      	nop			; (mov r8, r8)
 8008880:	46bd      	mov	sp, r7
 8008882:	b004      	add	sp, #16
 8008884:	bd80      	pop	{r7, pc}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	0000ffff 	.word	0x0000ffff

0800888c <BATTERY_WriteExtendedEEProfileData>:
 * @retval	none
 *
 */
// ****************************************************************************
static void BATTERY_WriteExtendedEEProfileData(const BatteryProfile_T * const p_batProfile)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	NV_WriteVariable_U8(BAT_CHEMISTRY_NV_ADDR, (uint8_t)(p_batProfile->chemistry));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	0019      	movs	r1, r3
 800889a:	2064      	movs	r0, #100	; 0x64
 800889c:	f008 f92a 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_OCV10L_NV_ADDR, (uint8_t)(p_batProfile->ocv10 & 0xFFu));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	899b      	ldrh	r3, [r3, #12]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	0019      	movs	r1, r3
 80088a8:	2065      	movs	r0, #101	; 0x65
 80088aa:	f008 f923 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_OCV10H_NV_ADDR, (uint8_t)((p_batProfile->ocv10) >> 8u) & 0xFFu);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	899b      	ldrh	r3, [r3, #12]
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	0019      	movs	r1, r3
 80088ba:	2066      	movs	r0, #102	; 0x66
 80088bc:	f008 f91a 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_OCV50L_NV_ADDR, (uint8_t)(p_batProfile->ocv50) & 0xFFu);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	89db      	ldrh	r3, [r3, #14]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	0019      	movs	r1, r3
 80088c8:	2067      	movs	r0, #103	; 0x67
 80088ca:	f008 f913 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_OCV50H_NV_ADDR, (uint8_t)((p_batProfile->ocv50) >> 8u) & 0xFFu);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	89db      	ldrh	r3, [r3, #14]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	0019      	movs	r1, r3
 80088da:	2068      	movs	r0, #104	; 0x68
 80088dc:	f008 f90a 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_OCV90L_NV_ADDR, (uint8_t)(p_batProfile->ocv90) & 0xFFu);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	8a1b      	ldrh	r3, [r3, #16]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	0019      	movs	r1, r3
 80088e8:	2069      	movs	r0, #105	; 0x69
 80088ea:	f008 f903 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_OCV90H_NV_ADDR, (uint8_t)((p_batProfile->ocv90) >> 8u) & 0xFFu);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	8a1b      	ldrh	r3, [r3, #16]
 80088f2:	0a1b      	lsrs	r3, r3, #8
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	0019      	movs	r1, r3
 80088fa:	206a      	movs	r0, #106	; 0x6a
 80088fc:	f008 f8fa 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_R10L_NV_ADDR, (uint8_t)(p_batProfile->r10) & 0xFFu);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	8a5b      	ldrh	r3, [r3, #18]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	0019      	movs	r1, r3
 8008908:	206b      	movs	r0, #107	; 0x6b
 800890a:	f008 f8f3 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_R10H_NV_ADDR, (uint8_t)((p_batProfile->r10) >> 8u) & 0xFFu);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	8a5b      	ldrh	r3, [r3, #18]
 8008912:	0a1b      	lsrs	r3, r3, #8
 8008914:	b29b      	uxth	r3, r3
 8008916:	b2db      	uxtb	r3, r3
 8008918:	0019      	movs	r1, r3
 800891a:	206c      	movs	r0, #108	; 0x6c
 800891c:	f008 f8ea 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_R50L_NV_ADDR, (uint8_t)(p_batProfile->r50) & 0xFFu);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8a9b      	ldrh	r3, [r3, #20]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	0019      	movs	r1, r3
 8008928:	206d      	movs	r0, #109	; 0x6d
 800892a:	f008 f8e3 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_R50H_NV_ADDR, (uint8_t)((p_batProfile->r50) >> 8u) & 0xFFu);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	8a9b      	ldrh	r3, [r3, #20]
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	b29b      	uxth	r3, r3
 8008936:	b2db      	uxtb	r3, r3
 8008938:	0019      	movs	r1, r3
 800893a:	206e      	movs	r0, #110	; 0x6e
 800893c:	f008 f8da 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_R90L_NV_ADDR, (uint8_t)(p_batProfile->r90) & 0xFFu);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	8adb      	ldrh	r3, [r3, #22]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	0019      	movs	r1, r3
 8008948:	206f      	movs	r0, #111	; 0x6f
 800894a:	f008 f8d3 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(BAT_R90H_NV_ADDR, (uint8_t)((p_batProfile->r90) >> 8u) & 0xFFu);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	8adb      	ldrh	r3, [r3, #22]
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	b29b      	uxth	r3, r3
 8008956:	b2db      	uxtb	r3, r3
 8008958:	0019      	movs	r1, r3
 800895a:	2070      	movs	r0, #112	; 0x70
 800895c:	f008 f8ca 	bl	8010af4 <NV_WriteVariable_U8>
}
 8008960:	46c0      	nop			; (mov r8, r8)
 8008962:	46bd      	mov	sp, r7
 8008964:	b002      	add	sp, #8
 8008966:	bd80      	pop	{r7, pc}

08008968 <BATTERY_SetNewProfileId>:
 * @retval	none
 *
 */
// ****************************************************************************
static void BATTERY_SetNewProfileId(const uint8_t newProfileId)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	0002      	movs	r2, r0
 8008970:	1dfb      	adds	r3, r7, #7
 8008972:	701a      	strb	r2, [r3, #0]
	uint8_t tempU8;

	// Check to see if new profile is preset and isn't already active
	if ( (newProfileId < BATTERY_CUSTOM_PROFILE_ID) &&
 8008974:	1dfb      	adds	r3, r7, #7
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b0e      	cmp	r3, #14
 800897a:	d808      	bhi.n	800898e <BATTERY_SetNewProfileId+0x26>
			(m_p_activeBatteryProfile == &m_batteryProfiles[newProfileId])
 800897c:	1dfb      	adds	r3, r7, #7
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	4b1a      	ldr	r3, [pc, #104]	; (80089ec <BATTERY_SetNewProfileId+0x84>)
 8008984:	18d2      	adds	r2, r2, r3
 8008986:	4b1a      	ldr	r3, [pc, #104]	; (80089f0 <BATTERY_SetNewProfileId+0x88>)
 8008988:	681b      	ldr	r3, [r3, #0]
	if ( (newProfileId < BATTERY_CUSTOM_PROFILE_ID) &&
 800898a:	429a      	cmp	r2, r3
 800898c:	d029      	beq.n	80089e2 <BATTERY_SetNewProfileId+0x7a>
	{
		return;
	}

	// Commit new profile id to NV
	NV_WriteVariable_U8(BAT_PROFILE_NV_ADDR, newProfileId);
 800898e:	1dfb      	adds	r3, r7, #7
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	0019      	movs	r1, r3
 8008994:	2013      	movs	r0, #19
 8008996:	f008 f8ad 	bl	8010af4 <NV_WriteVariable_U8>

	if (false == NV_ReadVariable_U8(BAT_PROFILE_NV_ADDR, &tempU8))
 800899a:	230f      	movs	r3, #15
 800899c:	18fb      	adds	r3, r7, r3
 800899e:	0019      	movs	r1, r3
 80089a0:	2013      	movs	r0, #19
 80089a2:	f008 f8cb 	bl	8010b3c <NV_ReadVariable_U8>
 80089a6:	0003      	movs	r3, r0
 80089a8:	001a      	movs	r2, r3
 80089aa:	2301      	movs	r3, #1
 80089ac:	4053      	eors	r3, r2
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d006      	beq.n	80089c2 <BATTERY_SetNewProfileId+0x5a>
	{
		// Something went wrong with the write
		m_p_activeBatteryProfile = NULL;
 80089b4:	4b0e      	ldr	r3, [pc, #56]	; (80089f0 <BATTERY_SetNewProfileId+0x88>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
		m_batteryProfileStatus = BATTERY_PROFILE_STATUS_STORED_PROFILE_ID_INVALID;
 80089ba:	4b0e      	ldr	r3, [pc, #56]	; (80089f4 <BATTERY_SetNewProfileId+0x8c>)
 80089bc:	2240      	movs	r2, #64	; 0x40
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	e005      	b.n	80089ce <BATTERY_SetNewProfileId+0x66>
	}
	else
	{
		// Initialise new profile
		BATTERY_InitProfile(tempU8);
 80089c2:	230f      	movs	r3, #15
 80089c4:	18fb      	adds	r3, r7, r3
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	0018      	movs	r0, r3
 80089ca:	f7ff fb7b 	bl	80080c4 <BATTERY_InitProfile>
	}

	// Notify dependent modules
	POWERSOURCE_UpdateBatteryProfile(m_p_activeBatteryProfile);
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <BATTERY_SetNewProfileId+0x88>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	0018      	movs	r0, r3
 80089d4:	f009 f8da 	bl	8011b8c <POWERSOURCE_UpdateBatteryProfile>
	FUELGAUGE_UpdateBatteryProfile();
 80089d8:	f004 f854 	bl	800ca84 <FUELGAUGE_UpdateBatteryProfile>
	CHARGER_UpdateBatteryProfile();
 80089dc:	f001 f896 	bl	8009b0c <CHARGER_UpdateBatteryProfile>
 80089e0:	e000      	b.n	80089e4 <BATTERY_SetNewProfileId+0x7c>
		return;
 80089e2:	46c0      	nop			; (mov r8, r8)
}
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b004      	add	sp, #16
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	080139c8 	.word	0x080139c8
 80089f0:	20001230 	.word	0x20001230
 80089f4:	20000034 	.word	0x20000034

080089f8 <BATTERY_WriteCustomProfile>:
 * @retval	none
 *
 */
// ****************************************************************************
static void BATTERY_WriteCustomProfile(const BatteryProfile_T * p_newProfile)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	BATTERY_WriteEEProfileData(p_newProfile);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	0018      	movs	r0, r3
 8008a04:	f7ff fec0 	bl	8008788 <BATTERY_WriteEEProfileData>

	if (true == BATTERY_ReadEEProfileData())
 8008a08:	f7ff fc94 	bl	8008334 <BATTERY_ReadEEProfileData>
 8008a0c:	1e03      	subs	r3, r0, #0
 8008a0e:	d006      	beq.n	8008a1e <BATTERY_WriteCustomProfile+0x26>
	{
		m_batteryProfileStatus = BATTERY_CUSTOM_PROFILE_ID;
 8008a10:	4b09      	ldr	r3, [pc, #36]	; (8008a38 <BATTERY_WriteCustomProfile+0x40>)
 8008a12:	220f      	movs	r2, #15
 8008a14:	701a      	strb	r2, [r3, #0]
		m_p_activeBatteryProfile = &m_customBatteryProfile;
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <BATTERY_WriteCustomProfile+0x44>)
 8008a18:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <BATTERY_WriteCustomProfile+0x48>)
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	e005      	b.n	8008a2a <BATTERY_WriteCustomProfile+0x32>
	}
	else
	{
		m_batteryProfileStatus = BATTERY_PROFILE_STATUS_CUSTOM_PROFILE_INVALID;
 8008a1e:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <BATTERY_WriteCustomProfile+0x40>)
 8008a20:	224f      	movs	r2, #79	; 0x4f
 8008a22:	701a      	strb	r2, [r3, #0]
		m_p_activeBatteryProfile = NULL;
 8008a24:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <BATTERY_WriteCustomProfile+0x44>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	601a      	str	r2, [r3, #0]
	}

	// Set profile ID to custom battery and initialise battery data
	BATTERY_SetNewProfileId(BATTERY_CUSTOM_PROFILE_ID);
 8008a2a:	200f      	movs	r0, #15
 8008a2c:	f7ff ff9c 	bl	8008968 <BATTERY_SetNewProfileId>
}
 8008a30:	46c0      	nop			; (mov r8, r8)
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b002      	add	sp, #8
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	20000034 	.word	0x20000034
 8008a3c:	20001230 	.word	0x20001230
 8008a40:	20000014 	.word	0x20000014

08008a44 <BATTERY_WriteCustomProfileExtended>:
 * @retval	none
 *
 */
// ****************************************************************************
static void BATTERY_WriteCustomProfileExtended(const BatteryProfile_T * p_newProfile)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	BATTERY_WriteExtendedEEProfileData(p_newProfile);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	0018      	movs	r0, r3
 8008a50:	f7ff ff1c 	bl	800888c <BATTERY_WriteExtendedEEProfileData>

	BATTERY_ReadExtendedEEProfileData();
 8008a54:	f7ff fd4c 	bl	80084f0 <BATTERY_ReadExtendedEEProfileData>

	if (m_batteryProfileStatus == BATTERY_CUSTOM_PROFILE_ID)
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <BATTERY_WriteCustomProfileExtended+0x28>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b0f      	cmp	r3, #15
 8008a5e:	d101      	bne.n	8008a64 <BATTERY_WriteCustomProfileExtended+0x20>
	{
		// Fuel guage is the only module that uses the extended data in the profile
		FUELGAUGE_UpdateBatteryProfile();
 8008a60:	f004 f810 	bl	800ca84 <FUELGAUGE_UpdateBatteryProfile>
	}
}
 8008a64:	46c0      	nop			; (mov r8, r8)
 8008a66:	46bd      	mov	sp, r7
 8008a68:	b002      	add	sp, #8
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20000034 	.word	0x20000034

08008a70 <BATTERY_UpdateBatteryStatus>:
 *
 */
// ****************************************************************************
static void BATTERY_UpdateBatteryStatus(const uint16_t battMv,
									const ChargerStatus_T chargerStatus, const bool batteryPresent)
{
 8008a70:	b590      	push	{r4, r7, lr}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	0004      	movs	r4, r0
 8008a78:	0008      	movs	r0, r1
 8008a7a:	0011      	movs	r1, r2
 8008a7c:	1dbb      	adds	r3, r7, #6
 8008a7e:	1c22      	adds	r2, r4, #0
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	1d7b      	adds	r3, r7, #5
 8008a84:	1c02      	adds	r2, r0, #0
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	1d3b      	adds	r3, r7, #4
 8008a8a:	1c0a      	adds	r2, r1, #0
 8008a8c:	701a      	strb	r2, [r3, #0]
	if ( (false == batteryPresent) || (battMv < 2500u) )
 8008a8e:	1d3b      	adds	r3, r7, #4
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2201      	movs	r2, #1
 8008a94:	4053      	eors	r3, r2
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d104      	bne.n	8008aa6 <BATTERY_UpdateBatteryStatus+0x36>
 8008a9c:	1dbb      	adds	r3, r7, #6
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	4a0e      	ldr	r2, [pc, #56]	; (8008adc <BATTERY_UpdateBatteryStatus+0x6c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d803      	bhi.n	8008aae <BATTERY_UpdateBatteryStatus+0x3e>
	{
		m_batteryStatus = BAT_STATUS_NOT_PRESENT;
 8008aa6:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <BATTERY_UpdateBatteryStatus+0x70>)
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		m_batteryStatus = BAT_STATUS_NORMAL;
	}
}
 8008aac:	e012      	b.n	8008ad4 <BATTERY_UpdateBatteryStatus+0x64>
	else if (chargerStatus == CHG_CHARGING_FROM_IN)
 8008aae:	1d7b      	adds	r3, r7, #5
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d103      	bne.n	8008abe <BATTERY_UpdateBatteryStatus+0x4e>
		m_batteryStatus = BAT_STATUS_CHARGING_FROM_IN;
 8008ab6:	4b0a      	ldr	r3, [pc, #40]	; (8008ae0 <BATTERY_UpdateBatteryStatus+0x70>)
 8008ab8:	2201      	movs	r2, #1
 8008aba:	701a      	strb	r2, [r3, #0]
}
 8008abc:	e00a      	b.n	8008ad4 <BATTERY_UpdateBatteryStatus+0x64>
	else if (chargerStatus == CHG_CHARGING_FROM_USB)
 8008abe:	1d7b      	adds	r3, r7, #5
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d103      	bne.n	8008ace <BATTERY_UpdateBatteryStatus+0x5e>
		m_batteryStatus = BAT_STATUS_CHARGING_FROM_5V_IO;
 8008ac6:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <BATTERY_UpdateBatteryStatus+0x70>)
 8008ac8:	2202      	movs	r2, #2
 8008aca:	701a      	strb	r2, [r3, #0]
}
 8008acc:	e002      	b.n	8008ad4 <BATTERY_UpdateBatteryStatus+0x64>
		m_batteryStatus = BAT_STATUS_NORMAL;
 8008ace:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <BATTERY_UpdateBatteryStatus+0x70>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	701a      	strb	r2, [r3, #0]
}
 8008ad4:	46c0      	nop			; (mov r8, r8)
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	b003      	add	sp, #12
 8008ada:	bd90      	pop	{r4, r7, pc}
 8008adc:	000009c3 	.word	0x000009c3
 8008ae0:	20000035 	.word	0x20000035

08008ae4 <BATTERY_UpdateChargeLed>:
 *
 */
// ****************************************************************************
static void BATTERY_UpdateChargeLed(const uint16_t batteryRsocPt1,
						const ChargerStatus_T chargerStatus, const TASKMAN_RunState_t runState)
{
 8008ae4:	b590      	push	{r4, r7, lr}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	0004      	movs	r4, r0
 8008aec:	0008      	movs	r0, r1
 8008aee:	0011      	movs	r1, r2
 8008af0:	1dbb      	adds	r3, r7, #6
 8008af2:	1c22      	adds	r2, r4, #0
 8008af4:	801a      	strh	r2, [r3, #0]
 8008af6:	1d7b      	adds	r3, r7, #5
 8008af8:	1c02      	adds	r2, r0, #0
 8008afa:	701a      	strb	r2, [r3, #0]
 8008afc:	1d3b      	adds	r3, r7, #4
 8008afe:	1c0a      	adds	r2, r1, #0
 8008b00:	701a      	strb	r2, [r3, #0]
	const Led_T * p_chargeLed = LED_FindHandleByFunction(LED_CHARGE_STATUS);
 8008b02:	2001      	movs	r0, #1
 8008b04:	f006 feae 	bl	800f864 <LED_FindHandleByFunction>
 8008b08:	0003      	movs	r3, r0
 8008b0a:	613b      	str	r3, [r7, #16]
	uint8_t r, g, b, paramB;

	if (batteryRsocPt1 > 500u)
 8008b0c:	1dbb      	adds	r3, r7, #6
 8008b0e:	881a      	ldrh	r2, [r3, #0]
 8008b10:	23fa      	movs	r3, #250	; 0xfa
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d909      	bls.n	8008b2c <BATTERY_UpdateChargeLed+0x48>
	{
		r = 0u;
 8008b18:	2317      	movs	r3, #23
 8008b1a:	18fb      	adds	r3, r7, r3
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	701a      	strb	r2, [r3, #0]
		g = p_chargeLed->paramG;
 8008b20:	2316      	movs	r3, #22
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	7892      	ldrb	r2, [r2, #2]
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	e017      	b.n	8008b5c <BATTERY_UpdateChargeLed+0x78>
	}
	else if (batteryRsocPt1 > 150u)
 8008b2c:	1dbb      	adds	r3, r7, #6
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	2b96      	cmp	r3, #150	; 0x96
 8008b32:	d90a      	bls.n	8008b4a <BATTERY_UpdateChargeLed+0x66>
	{
		r = p_chargeLed->paramR;
 8008b34:	2317      	movs	r3, #23
 8008b36:	18fb      	adds	r3, r7, r3
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	7852      	ldrb	r2, [r2, #1]
 8008b3c:	701a      	strb	r2, [r3, #0]
		g = p_chargeLed->paramG;
 8008b3e:	2316      	movs	r3, #22
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	7892      	ldrb	r2, [r2, #2]
 8008b46:	701a      	strb	r2, [r3, #0]
 8008b48:	e008      	b.n	8008b5c <BATTERY_UpdateChargeLed+0x78>
	}
	else
	{
		r = p_chargeLed->paramR;
 8008b4a:	2317      	movs	r3, #23
 8008b4c:	18fb      	adds	r3, r7, r3
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	7852      	ldrb	r2, [r2, #1]
 8008b52:	701a      	strb	r2, [r3, #0]
		g = 0u;
 8008b54:	2316      	movs	r3, #22
 8008b56:	18fb      	adds	r3, r7, r3
 8008b58:	2200      	movs	r2, #0
 8008b5a:	701a      	strb	r2, [r3, #0]
	}

	paramB = p_chargeLed->paramB;
 8008b5c:	230f      	movs	r3, #15
 8008b5e:	18fb      	adds	r3, r7, r3
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	78d2      	ldrb	r2, [r2, #3]
 8008b64:	701a      	strb	r2, [r3, #0]

	if ( (m_batteryStatus == BAT_STATUS_CHARGING_FROM_IN) || (m_batteryStatus == BAT_STATUS_CHARGING_FROM_5V_IO) )
 8008b66:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <BATTERY_UpdateChargeLed+0x118>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d003      	beq.n	8008b76 <BATTERY_UpdateChargeLed+0x92>
 8008b6e:	4b23      	ldr	r3, [pc, #140]	; (8008bfc <BATTERY_UpdateChargeLed+0x118>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d10c      	bne.n	8008b90 <BATTERY_UpdateChargeLed+0xac>
	{
		// Alternate flash blue to show charging
		b = p_chargeLed->b == 0 ? paramB : 0u;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	799b      	ldrb	r3, [r3, #6]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d103      	bne.n	8008b86 <BATTERY_UpdateChargeLed+0xa2>
 8008b7e:	230f      	movs	r3, #15
 8008b80:	18fb      	adds	r3, r7, r3
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	e000      	b.n	8008b88 <BATTERY_UpdateChargeLed+0xa4>
 8008b86:	2200      	movs	r2, #0
 8008b88:	2315      	movs	r3, #21
 8008b8a:	18fb      	adds	r3, r7, r3
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	e00e      	b.n	8008bae <BATTERY_UpdateChargeLed+0xca>
	}
	else if (chargerStatus == CHG_CHARGE_DONE)
 8008b90:	1d7b      	adds	r3, r7, #5
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	2b05      	cmp	r3, #5
 8008b96:	d106      	bne.n	8008ba6 <BATTERY_UpdateChargeLed+0xc2>
	{
		// Constant blue to show charge done
		b = paramB;
 8008b98:	2315      	movs	r3, #21
 8008b9a:	18fb      	adds	r3, r7, r3
 8008b9c:	220f      	movs	r2, #15
 8008b9e:	18ba      	adds	r2, r7, r2
 8008ba0:	7812      	ldrb	r2, [r2, #0]
 8008ba2:	701a      	strb	r2, [r3, #0]
 8008ba4:	e003      	b.n	8008bae <BATTERY_UpdateChargeLed+0xca>
	}
	else
	{
		b = 0u;
 8008ba6:	2315      	movs	r3, #21
 8008ba8:	18fb      	adds	r3, r7, r3
 8008baa:	2200      	movs	r2, #0
 8008bac:	701a      	strb	r2, [r3, #0]
	}

	if (TASKMAN_RUNSTATE_LOW_POWER == runState)
 8008bae:	1d3b      	adds	r3, r7, #4
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d110      	bne.n	8008bd8 <BATTERY_UpdateChargeLed+0xf4>
	{
		LED_FunctionSetRGB(LED_CHARGE_STATUS, r / 4u, g / 4u, b);
 8008bb6:	2317      	movs	r3, #23
 8008bb8:	18fb      	adds	r3, r7, r3
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	089b      	lsrs	r3, r3, #2
 8008bbe:	b2d9      	uxtb	r1, r3
 8008bc0:	2316      	movs	r3, #22
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	089b      	lsrs	r3, r3, #2
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	2315      	movs	r3, #21
 8008bcc:	18fb      	adds	r3, r7, r3
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f006 fde7 	bl	800f7a4 <LED_FunctionSetRGB>
	}
	else
	{
		LED_FunctionSetRGB(LED_CHARGE_STATUS, r, g, b);
	}
}
 8008bd6:	e00c      	b.n	8008bf2 <BATTERY_UpdateChargeLed+0x10e>
		LED_FunctionSetRGB(LED_CHARGE_STATUS, r, g, b);
 8008bd8:	2315      	movs	r3, #21
 8008bda:	18fb      	adds	r3, r7, r3
 8008bdc:	7818      	ldrb	r0, [r3, #0]
 8008bde:	2316      	movs	r3, #22
 8008be0:	18fb      	adds	r3, r7, r3
 8008be2:	781a      	ldrb	r2, [r3, #0]
 8008be4:	2317      	movs	r3, #23
 8008be6:	18fb      	adds	r3, r7, r3
 8008be8:	7819      	ldrb	r1, [r3, #0]
 8008bea:	0003      	movs	r3, r0
 8008bec:	2001      	movs	r0, #1
 8008bee:	f006 fdd9 	bl	800f7a4 <LED_FunctionSetRGB>
}
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	b007      	add	sp, #28
 8008bf8:	bd90      	pop	{r4, r7, pc}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	20000035 	.word	0x20000035

08008c00 <BUTTON_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void BUTTON_Init(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
	if (true == BUTTON_ReadConfigFromNv(0u))
 8008c04:	2000      	movs	r0, #0
 8008c06:	f000 facb 	bl	80091a0 <BUTTON_ReadConfigFromNv>
 8008c0a:	1e03      	subs	r3, r0, #0
 8008c0c:	d004      	beq.n	8008c18 <BUTTON_Init+0x18>
	{
		BUTTON_SetConfigData(&m_buttons[0u], IODRV_PIN_SW1);
 8008c0e:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <BUTTON_Init+0x48>)
 8008c10:	2102      	movs	r1, #2
 8008c12:	0018      	movs	r0, r3
 8008c14:	f000 fbb0 	bl	8009378 <BUTTON_SetConfigData>
	}

	if (true == BUTTON_ReadConfigFromNv(1u))
 8008c18:	2001      	movs	r0, #1
 8008c1a:	f000 fac1 	bl	80091a0 <BUTTON_ReadConfigFromNv>
 8008c1e:	1e03      	subs	r3, r0, #0
 8008c20:	d004      	beq.n	8008c2c <BUTTON_Init+0x2c>
	{
		BUTTON_SetConfigData(&m_buttons[1u], IODRV_PIN_SW2);
 8008c22:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <BUTTON_Init+0x4c>)
 8008c24:	2103      	movs	r1, #3
 8008c26:	0018      	movs	r0, r3
 8008c28:	f000 fba6 	bl	8009378 <BUTTON_SetConfigData>
	}

	if (true == BUTTON_ReadConfigFromNv(2u))
 8008c2c:	2002      	movs	r0, #2
 8008c2e:	f000 fab7 	bl	80091a0 <BUTTON_ReadConfigFromNv>
 8008c32:	1e03      	subs	r3, r0, #0
 8008c34:	d004      	beq.n	8008c40 <BUTTON_Init+0x40>
	{
		BUTTON_SetConfigData(&m_buttons[2u], IODRV_PIN_SW3);
 8008c36:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <BUTTON_Init+0x50>)
 8008c38:	2104      	movs	r1, #4
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f000 fb9c 	bl	8009378 <BUTTON_SetConfigData>
	}
}
 8008c40:	46c0      	nop			; (mov r8, r8)
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	20000038 	.word	0x20000038
 8008c4c:	2000005c 	.word	0x2000005c
 8008c50:	20000080 	.word	0x20000080

08008c54 <BUTTON_Task>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void BUTTON_Task(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 8008c5a:	f7fa fa39 	bl	80030d0 <HAL_GetTick>
 8008c5e:	0003      	movs	r3, r0
 8008c60:	607b      	str	r3, [r7, #4]
	const uint8_t oldDualLongPressStatus = m_buttons[0u].staticLongPressEvent && m_buttons[1u].staticLongPressEvent;
 8008c62:	4b32      	ldr	r3, [pc, #200]	; (8008d2c <BUTTON_Task+0xd8>)
 8008c64:	7e9b      	ldrb	r3, [r3, #26]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <BUTTON_Task+0x24>
 8008c6a:	4b30      	ldr	r3, [pc, #192]	; (8008d2c <BUTTON_Task+0xd8>)
 8008c6c:	223e      	movs	r2, #62	; 0x3e
 8008c6e:	5c9b      	ldrb	r3, [r3, r2]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <BUTTON_Task+0x24>
 8008c74:	2201      	movs	r2, #1
 8008c76:	e000      	b.n	8008c7a <BUTTON_Task+0x26>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	1cfb      	adds	r3, r7, #3
 8008c7c:	701a      	strb	r2, [r3, #0]

	BUTTON_ProcessButton(&m_buttons[0u], sysTime); // sw1
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4b2a      	ldr	r3, [pc, #168]	; (8008d2c <BUTTON_Task+0xd8>)
 8008c82:	0011      	movs	r1, r2
 8008c84:	0018      	movs	r0, r3
 8008c86:	f000 f85b 	bl	8008d40 <BUTTON_ProcessButton>
	BUTTON_ProcessButton(&m_buttons[1u], sysTime); // sw2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	4b28      	ldr	r3, [pc, #160]	; (8008d30 <BUTTON_Task+0xdc>)
 8008c8e:	0011      	movs	r1, r2
 8008c90:	0018      	movs	r0, r3
 8008c92:	f000 f855 	bl	8008d40 <BUTTON_ProcessButton>
	BUTTON_ProcessButton(&m_buttons[2u], sysTime); // sw3
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	4b26      	ldr	r3, [pc, #152]	; (8008d34 <BUTTON_Task+0xe0>)
 8008c9a:	0011      	movs	r1, r2
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f000 f84f 	bl	8008d40 <BUTTON_ProcessButton>

	// Check to see if both buttons SW1 and SW2 have been held down at the same time
	if ((m_buttons[0u].staticLongPressEvent && m_buttons[1u].staticLongPressEvent) > oldDualLongPressStatus)
 8008ca2:	4b22      	ldr	r3, [pc, #136]	; (8008d2c <BUTTON_Task+0xd8>)
 8008ca4:	7e9b      	ldrb	r3, [r3, #26]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d006      	beq.n	8008cb8 <BUTTON_Task+0x64>
 8008caa:	4b20      	ldr	r3, [pc, #128]	; (8008d2c <BUTTON_Task+0xd8>)
 8008cac:	223e      	movs	r2, #62	; 0x3e
 8008cae:	5c9b      	ldrb	r3, [r3, r2]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <BUTTON_Task+0x64>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e000      	b.n	8008cba <BUTTON_Task+0x66>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	1cfa      	adds	r2, r7, #3
 8008cbc:	7812      	ldrb	r2, [r2, #0]
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	dd01      	ble.n	8008cc6 <BUTTON_Task+0x72>
	{
		BUTTON_DualLongPressEventCb();
 8008cc2:	f000 fc65 	bl	8009590 <BUTTON_DualLongPressEventCb>
	}

	if (m_writebuttonConfigData >= 0)
 8008cc6:	4b1c      	ldr	r3, [pc, #112]	; (8008d38 <BUTTON_Task+0xe4>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	db29      	blt.n	8008d24 <BUTTON_Task+0xd0>
	{
		if (m_writebuttonConfigData < BUTTON_MAX_BUTTONS)
 8008cd0:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <BUTTON_Task+0xe4>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d820      	bhi.n	8008d1e <BUTTON_Task+0xca>
		{
			BUTTON_WriteConfigToNv(&m_buttonConfigData, (uint8_t)m_writebuttonConfigData);
 8008cdc:	4b16      	ldr	r3, [pc, #88]	; (8008d38 <BUTTON_Task+0xe4>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	b25b      	sxtb	r3, r3
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	4b15      	ldr	r3, [pc, #84]	; (8008d3c <BUTTON_Task+0xe8>)
 8008ce6:	0011      	movs	r1, r2
 8008ce8:	0018      	movs	r0, r3
 8008cea:	f000 fbc5 	bl	8009478 <BUTTON_WriteConfigToNv>

			if (true == BUTTON_ReadConfigFromNv((uint8_t)m_writebuttonConfigData))
 8008cee:	4b12      	ldr	r3, [pc, #72]	; (8008d38 <BUTTON_Task+0xe4>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	b25b      	sxtb	r3, r3
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f000 fa52 	bl	80091a0 <BUTTON_ReadConfigFromNv>
 8008cfc:	1e03      	subs	r3, r0, #0
 8008cfe:	d00e      	beq.n	8008d1e <BUTTON_Task+0xca>
			{
				BUTTON_UpdateConfigData(&m_buttons[m_writebuttonConfigData], &m_buttonConfigData);
 8008d00:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <BUTTON_Task+0xe4>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	b25b      	sxtb	r3, r3
 8008d06:	001a      	movs	r2, r3
 8008d08:	0013      	movs	r3, r2
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	189b      	adds	r3, r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4a06      	ldr	r2, [pc, #24]	; (8008d2c <BUTTON_Task+0xd8>)
 8008d12:	189b      	adds	r3, r3, r2
 8008d14:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <BUTTON_Task+0xe8>)
 8008d16:	0011      	movs	r1, r2
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f000 fb49 	bl	80093b0 <BUTTON_UpdateConfigData>
			}
		}

		m_writebuttonConfigData = -1;
 8008d1e:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <BUTTON_Task+0xe4>)
 8008d20:	22ff      	movs	r2, #255	; 0xff
 8008d22:	701a      	strb	r2, [r3, #0]
	}
}
 8008d24:	46c0      	nop			; (mov r8, r8)
 8008d26:	46bd      	mov	sp, r7
 8008d28:	b002      	add	sp, #8
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20000038 	.word	0x20000038
 8008d30:	2000005c 	.word	0x2000005c
 8008d34:	20000080 	.word	0x20000080
 8008d38:	200000b4 	.word	0x200000b4
 8008d3c:	2000123c 	.word	0x2000123c

08008d40 <BUTTON_ProcessButton>:
 * @param	sysTick			current value of the system tick timer
 * @retval	none
 */
// ****************************************************************************
void BUTTON_ProcessButton(Button_T * const p_button, const uint32_t sysTick)
{
 8008d40:	b5b0      	push	{r4, r5, r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	if ( (NULL == p_button) || (NULL == p_button->p_pinInfo) )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d100      	bne.n	8008d52 <BUTTON_ProcessButton+0x12>
 8008d50:	e0bf      	b.n	8008ed2 <BUTTON_ProcessButton+0x192>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d100      	bne.n	8008d5c <BUTTON_ProcessButton+0x1c>
 8008d5a:	e0ba      	b.n	8008ed2 <BUTTON_ProcessButton+0x192>
	{
		return;
	}

	const uint32_t previousButtonCycleTimeMs = p_button->p_pinInfo->lastPosPulseWidthTimeMs
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	689a      	ldr	r2, [r3, #8]
										+ p_button->p_pinInfo->lastNegPulseWidthTimeMs;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	68db      	ldr	r3, [r3, #12]
	const uint32_t previousButtonCycleTimeMs = p_button->p_pinInfo->lastPosPulseWidthTimeMs
 8008d68:	18d3      	adds	r3, r2, r3
 8008d6a:	613b      	str	r3, [r7, #16]

	const uint32_t lastEdgeMs = MS_TIMEREF_DIFF(p_button->p_pinInfo->lastDigitalChangeTime, sysTick);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	60fb      	str	r3, [r7, #12]

	ButtonEvent_T oldEv = p_button->event;
 8008d78:	2117      	movs	r1, #23
 8008d7a:	187b      	adds	r3, r7, r1
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7e52      	ldrb	r2, [r2, #25]
 8008d80:	701a      	strb	r2, [r3, #0]
	ButtonFunction_T func;

	// Copy value to ensure compatibility
	p_button->state = p_button->p_pinInfo->value;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	761a      	strb	r2, [r3, #24]

	if ( (GPIO_PIN_RESET == p_button->p_pinInfo->value) )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d139      	bne.n	8008e0c <BUTTON_ProcessButton+0xcc>
	{
		if (lastEdgeMs > BUTTON_EVENT_EXPIRE_PERIOD_MS)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a50      	ldr	r2, [pc, #320]	; (8008edc <BUTTON_ProcessButton+0x19c>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d906      	bls.n	8008dae <BUTTON_ProcessButton+0x6e>
		{
			// Event timeout, remove it
			p_button->event = BUTTON_EVENT_NONE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	765a      	strb	r2, [r3, #25]
			oldEv = BUTTON_EVENT_NONE;
 8008da6:	187b      	adds	r3, r7, r1
 8008da8:	2200      	movs	r2, #0
 8008daa:	701a      	strb	r2, [r3, #0]
 8008dac:	e02a      	b.n	8008e04 <BUTTON_ProcessButton+0xc4>

		// The pulse is cleared after one day in the IODRV module
		// This check ensures that the 47 day roll over does not cause a phantom
		// button press as the button will have appeared to have been pressed
		// recently when it hasn't!
		else if (p_button->p_pinInfo->lastPosPulseWidthTimeMs > 0u)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d025      	beq.n	8008e04 <BUTTON_ProcessButton+0xc4>

			// Check 	- single press time has not been exceeded for last press cycle
			//			- double press time has been exceeded
			//			- single press function has been allocated
			//			- single press function has not already been executed
			if ( (p_button->p_pinInfo->lastPosPulseWidthTimeMs < p_button->singlePressTime)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	8952      	ldrh	r2, [r2, #10]
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d213      	bcs.n	8008dee <BUTTON_ProcessButton+0xae>
					&& ((lastEdgeMs + p_button->p_pinInfo->lastPosPulseWidthTimeMs) > p_button->doublePressTime)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	18d3      	adds	r3, r2, r3
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	89d2      	ldrh	r2, [r2, #14]
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d90a      	bls.n	8008dee <BUTTON_ProcessButton+0xae>
					&& (BUTTON_EVENT_NO_FUNC != p_button->singlePressFunc)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7a1b      	ldrb	r3, [r3, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d006      	beq.n	8008dee <BUTTON_ProcessButton+0xae>
					&& (p_button->event < BUTTON_EVENT_SINGLE_PRESS))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	7e5b      	ldrb	r3, [r3, #25]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d802      	bhi.n	8008dee <BUTTON_ProcessButton+0xae>
			{
				// Raise single press event
				p_button->event = BUTTON_EVENT_SINGLE_PRESS;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2203      	movs	r2, #3
 8008dec:	765a      	strb	r2, [r3, #25]
			}


			if ( (p_button->event < BUTTON_EVENT_RELEASE) && (BUTTON_EVENT_NO_FUNC != p_button->releaseFunc) )
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7e5b      	ldrb	r3, [r3, #25]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d806      	bhi.n	8008e04 <BUTTON_ProcessButton+0xc4>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	791b      	ldrb	r3, [r3, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <BUTTON_ProcessButton+0xc4>
			{
				// Raise release event
				p_button->event = BUTTON_EVENT_RELEASE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	765a      	strb	r2, [r3, #25]
			}
		}

		p_button->staticLongPressEvent = 0u;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	769a      	strb	r2, [r3, #26]
 8008e0a:	e03e      	b.n	8008e8a <BUTTON_ProcessButton+0x14a>
	}
	else
	{
		/* Button is pressed and held */

		if ( (lastEdgeMs > p_button->longPressTime2) && (BUTTON_EVENT_NO_FUNC != p_button->longPressFunc2) )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8adb      	ldrh	r3, [r3, #22]
 8008e10:	001a      	movs	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d907      	bls.n	8008e28 <BUTTON_ProcessButton+0xe8>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7d1b      	ldrb	r3, [r3, #20]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <BUTTON_ProcessButton+0xe8>
		{
			// Raise long press 2
			p_button->event = BUTTON_EVENT_LONG_PRESS2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2206      	movs	r2, #6
 8008e24:	765a      	strb	r2, [r3, #25]
 8008e26:	e01e      	b.n	8008e66 <BUTTON_ProcessButton+0x126>
		}
		else if ( (lastEdgeMs > p_button->longPressTime1) && (BUTTON_EVENT_NO_FUNC != p_button->longPressFunc1) )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	8a5b      	ldrh	r3, [r3, #18]
 8008e2c:	001a      	movs	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d907      	bls.n	8008e44 <BUTTON_ProcessButton+0x104>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	7c1b      	ldrb	r3, [r3, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <BUTTON_ProcessButton+0x104>
		{
			// Raise long press 1
			p_button->event = BUTTON_EVENT_LONG_PRESS1;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2205      	movs	r2, #5
 8008e40:	765a      	strb	r2, [r3, #25]
 8008e42:	e010      	b.n	8008e66 <BUTTON_ProcessButton+0x126>
		}
		else if ( ((lastEdgeMs + previousButtonCycleTimeMs) < p_button->doublePressTime)
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	18d3      	adds	r3, r2, r3
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	89d2      	ldrh	r2, [r2, #14]
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d209      	bcs.n	8008e66 <BUTTON_ProcessButton+0x126>
				&& (previousButtonCycleTimeMs > 0u)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <BUTTON_ProcessButton+0x126>
				&& (BUTTON_EVENT_NO_FUNC != p_button->doublePressFunc))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7b1b      	ldrb	r3, [r3, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <BUTTON_ProcessButton+0x126>
		{
			// Raise double press event
			p_button->event = BUTTON_EVENT_DOUBLE_PRESS;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2204      	movs	r2, #4
 8008e64:	765a      	strb	r2, [r3, #25]
		}

		if ( lastEdgeMs > BUTTON_STATIC_LONG_PRESS_TIME)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4a1d      	ldr	r2, [pc, #116]	; (8008ee0 <BUTTON_ProcessButton+0x1a0>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d902      	bls.n	8008e74 <BUTTON_ProcessButton+0x134>
		{
			p_button->staticLongPressEvent = 1u;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	769a      	strb	r2, [r3, #26]
		}

		if ( (p_button->event < BUTTON_EVENT_PRESS) && (BUTTON_EVENT_NO_FUNC != p_button->pressFunc) )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7e5b      	ldrb	r3, [r3, #25]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d106      	bne.n	8008e8a <BUTTON_ProcessButton+0x14a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <BUTTON_ProcessButton+0x14a>
		{
			// Raise button press event
			p_button->event = BUTTON_EVENT_PRESS;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	765a      	strb	r2, [r3, #25]
		}
	}

	// Check if event has already been processed
	if ( p_button->event > oldEv )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7e5b      	ldrb	r3, [r3, #25]
 8008e8e:	2217      	movs	r2, #23
 8008e90:	18ba      	adds	r2, r7, r2
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d21d      	bcs.n	8008ed4 <BUTTON_ProcessButton+0x194>
	{
	    func = BUTTON_GetEventFunc(p_button);
 8008e98:	250b      	movs	r5, #11
 8008e9a:	197c      	adds	r4, r7, r5
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f000 fac4 	bl	800942c <BUTTON_GetEventFunc>
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	7023      	strb	r3, [r4, #0]

		if ( (func < BUTTON_EVENT_FUNC_COUNT) && (m_buttonEventCallbacks[func] != NULL) )
 8008ea8:	0029      	movs	r1, r5
 8008eaa:	187b      	adds	r3, r7, r1
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d810      	bhi.n	8008ed4 <BUTTON_ProcessButton+0x194>
 8008eb2:	187b      	adds	r3, r7, r1
 8008eb4:	781a      	ldrb	r2, [r3, #0]
 8008eb6:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <BUTTON_ProcessButton+0x1a4>)
 8008eb8:	0092      	lsls	r2, r2, #2
 8008eba:	58d3      	ldr	r3, [r2, r3]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d009      	beq.n	8008ed4 <BUTTON_ProcessButton+0x194>
		{
			m_buttonEventCallbacks[func](p_button);
 8008ec0:	187b      	adds	r3, r7, r1
 8008ec2:	781a      	ldrb	r2, [r3, #0]
 8008ec4:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <BUTTON_ProcessButton+0x1a4>)
 8008ec6:	0092      	lsls	r2, r2, #2
 8008ec8:	58d3      	ldr	r3, [r2, r3]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	0010      	movs	r0, r2
 8008ece:	4798      	blx	r3
 8008ed0:	e000      	b.n	8008ed4 <BUTTON_ProcessButton+0x194>
		return;
 8008ed2:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	b006      	add	sp, #24
 8008ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	00007530 	.word	0x00007530
 8008ee0:	00004c90 	.word	0x00004c90
 8008ee4:	200000a4 	.word	0x200000a4

08008ee8 <BUTTON_GetButtonEvent>:
 * @param	buttonIndex			index of addressed button
 * @retval	ButtonEvent_T		event id assigned to the current event.
 */
// ****************************************************************************
ButtonEvent_T BUTTON_GetButtonEvent(const uint8_t buttonIndex)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	0002      	movs	r2, r0
 8008ef0:	1dfb      	adds	r3, r7, #7
 8008ef2:	701a      	strb	r2, [r3, #0]
	return (buttonIndex < BUTTON_MAX_BUTTONS) ? m_buttons[buttonIndex].event : BUTTON_EVENT_NONE;
 8008ef4:	1dfb      	adds	r3, r7, #7
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d80a      	bhi.n	8008f12 <BUTTON_GetButtonEvent+0x2a>
 8008efc:	1dfb      	adds	r3, r7, #7
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	4906      	ldr	r1, [pc, #24]	; (8008f1c <BUTTON_GetButtonEvent+0x34>)
 8008f02:	0013      	movs	r3, r2
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	189b      	adds	r3, r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	18cb      	adds	r3, r1, r3
 8008f0c:	3319      	adds	r3, #25
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	e000      	b.n	8008f14 <BUTTON_GetButtonEvent+0x2c>
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	0018      	movs	r0, r3
 8008f16:	46bd      	mov	sp, r7
 8008f18:	b002      	add	sp, #8
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000038 	.word	0x20000038

08008f20 <BUTTON_ClearEvent>:
 * @param	buttonIndex			index of addressed button
 * @retval	none
 */
// ****************************************************************************
void BUTTON_ClearEvent(const uint8_t buttonIndex)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	0002      	movs	r2, r0
 8008f28:	1dfb      	adds	r3, r7, #7
 8008f2a:	701a      	strb	r2, [r3, #0]
	if (buttonIndex < BUTTON_MAX_BUTTONS)
 8008f2c:	1dfb      	adds	r3, r7, #7
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d819      	bhi.n	8008f68 <BUTTON_ClearEvent+0x48>
	{
		m_buttons[buttonIndex].event = BUTTON_EVENT_NONE;
 8008f34:	1dfb      	adds	r3, r7, #7
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	490d      	ldr	r1, [pc, #52]	; (8008f70 <BUTTON_ClearEvent+0x50>)
 8008f3a:	0013      	movs	r3, r2
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	189b      	adds	r3, r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	18cb      	adds	r3, r1, r3
 8008f44:	3319      	adds	r3, #25
 8008f46:	2200      	movs	r2, #0
 8008f48:	701a      	strb	r2, [r3, #0]

		// Ensure the event doesn't get re-triggered
		IORDV_ClearPinEdges(m_buttons[buttonIndex].p_pinInfo->index);
 8008f4a:	1dfb      	adds	r3, r7, #7
 8008f4c:	781a      	ldrb	r2, [r3, #0]
 8008f4e:	4908      	ldr	r1, [pc, #32]	; (8008f70 <BUTTON_ClearEvent+0x50>)
 8008f50:	0013      	movs	r3, r2
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	189b      	adds	r3, r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	18cb      	adds	r3, r1, r3
 8008f5a:	331c      	adds	r3, #28
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2227      	movs	r2, #39	; 0x27
 8008f60:	5c9b      	ldrb	r3, [r3, r2]
 8008f62:	0018      	movs	r0, r3
 8008f64:	f006 f990 	bl	800f288 <IORDV_ClearPinEdges>
	}
}
 8008f68:	46c0      	nop			; (mov r8, r8)
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b002      	add	sp, #8
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20000038 	.word	0x20000038

08008f74 <BUTTON_IsEventActive>:
 * @param	none
 * @retval	bool
 */
// ****************************************************************************
bool BUTTON_IsEventActive(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
	return (BUTTON_EVENT_NONE != m_buttons[0u].event) ||
 8008f78:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <BUTTON_IsEventActive+0x34>)
 8008f7a:	7e5b      	ldrb	r3, [r3, #25]
			(BUTTON_EVENT_NONE != m_buttons[1u].event) ||
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <BUTTON_IsEventActive+0x20>
 8008f80:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <BUTTON_IsEventActive+0x34>)
 8008f82:	223d      	movs	r2, #61	; 0x3d
 8008f84:	5c9b      	ldrb	r3, [r3, r2]
	return (BUTTON_EVENT_NONE != m_buttons[0u].event) ||
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d104      	bne.n	8008f94 <BUTTON_IsEventActive+0x20>
			(BUTTON_EVENT_NONE != m_buttons[2u].event);
 8008f8a:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <BUTTON_IsEventActive+0x34>)
 8008f8c:	2261      	movs	r2, #97	; 0x61
 8008f8e:	5c9b      	ldrb	r3, [r3, r2]
			(BUTTON_EVENT_NONE != m_buttons[1u].event) ||
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <BUTTON_IsEventActive+0x24>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e000      	b.n	8008f9a <BUTTON_IsEventActive+0x26>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	1c1a      	adds	r2, r3, #0
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	b2db      	uxtb	r3, r3
}
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20000038 	.word	0x20000038

08008fac <BUTTON_IsButtonActive>:
 * @retval	bool		false = button not held
 * 						true = button is being held
 */
// ****************************************************************************
bool BUTTON_IsButtonActive(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
	return (GPIO_PIN_SET == m_buttons[0u].state) || (GPIO_PIN_SET ==  m_buttons[1].state) || (GPIO_PIN_SET == m_buttons[2].state);
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <BUTTON_IsButtonActive+0x34>)
 8008fb2:	7e1b      	ldrb	r3, [r3, #24]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d009      	beq.n	8008fcc <BUTTON_IsButtonActive+0x20>
 8008fb8:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <BUTTON_IsButtonActive+0x34>)
 8008fba:	223c      	movs	r2, #60	; 0x3c
 8008fbc:	5c9b      	ldrb	r3, [r3, r2]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d004      	beq.n	8008fcc <BUTTON_IsButtonActive+0x20>
 8008fc2:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <BUTTON_IsButtonActive+0x34>)
 8008fc4:	2260      	movs	r2, #96	; 0x60
 8008fc6:	5c9b      	ldrb	r3, [r3, r2]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d101      	bne.n	8008fd0 <BUTTON_IsButtonActive+0x24>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <BUTTON_IsButtonActive+0x26>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	1c1a      	adds	r2, r3, #0
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	b2db      	uxtb	r3, r3
}
 8008fda:	0018      	movs	r0, r3
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	20000038 	.word	0x20000038

08008fe4 <BUTTON_SetConfigurationData>:
 * @retval	none
 */
// ****************************************************************************
void BUTTON_SetConfigurationData(const uint8_t buttonIndex, const uint8_t * const p_data,
									const uint8_t len)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6039      	str	r1, [r7, #0]
 8008fec:	0011      	movs	r1, r2
 8008fee:	1dfb      	adds	r3, r7, #7
 8008ff0:	1c02      	adds	r2, r0, #0
 8008ff2:	701a      	strb	r2, [r3, #0]
 8008ff4:	1dbb      	adds	r3, r7, #6
 8008ff6:	1c0a      	adds	r2, r1, #0
 8008ff8:	701a      	strb	r2, [r3, #0]
	if (buttonIndex > BUTTON_LAST_BUTTON_IDX)
 8008ffa:	1dfb      	adds	r3, r7, #7
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d846      	bhi.n	8009090 <BUTTON_SetConfigurationData+0xac>
	{
		return;
	}

	m_buttonConfigData.pressFunc = (ButtonFunction_T)p_data[0u];
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	781a      	ldrb	r2, [r3, #0]
 8009006:	4b24      	ldr	r3, [pc, #144]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 8009008:	701a      	strb	r2, [r3, #0]
	m_buttonConfigData.pressConfig = p_data[1u];
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	3301      	adds	r3, #1
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	b29a      	uxth	r2, r3
 8009012:	4b21      	ldr	r3, [pc, #132]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 8009014:	805a      	strh	r2, [r3, #2]
	m_buttonConfigData.releaseFunc = (ButtonFunction_T)p_data[2u];
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	3302      	adds	r3, #2
 800901a:	781a      	ldrb	r2, [r3, #0]
 800901c:	4b1e      	ldr	r3, [pc, #120]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 800901e:	711a      	strb	r2, [r3, #4]
	m_buttonConfigData.releaseConfig = p_data[3u];
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	3303      	adds	r3, #3
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	b29a      	uxth	r2, r3
 8009028:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 800902a:	80da      	strh	r2, [r3, #6]
	m_buttonConfigData.singlePressFunc = (ButtonFunction_T)p_data[4u];
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	3304      	adds	r3, #4
 8009030:	781a      	ldrb	r2, [r3, #0]
 8009032:	4b19      	ldr	r3, [pc, #100]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 8009034:	721a      	strb	r2, [r3, #8]
	m_buttonConfigData.singlePressTime = p_data[5u];
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	3305      	adds	r3, #5
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	b29a      	uxth	r2, r3
 800903e:	4b16      	ldr	r3, [pc, #88]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 8009040:	815a      	strh	r2, [r3, #10]
	m_buttonConfigData.doublePressFunc = (ButtonFunction_T)p_data[6u];
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	3306      	adds	r3, #6
 8009046:	781a      	ldrb	r2, [r3, #0]
 8009048:	4b13      	ldr	r3, [pc, #76]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 800904a:	731a      	strb	r2, [r3, #12]
	m_buttonConfigData.doublePressTime = p_data[7u];
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	3307      	adds	r3, #7
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	b29a      	uxth	r2, r3
 8009054:	4b10      	ldr	r3, [pc, #64]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 8009056:	81da      	strh	r2, [r3, #14]
	m_buttonConfigData.longPressFunc1 = (ButtonFunction_T)p_data[8u];
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	3308      	adds	r3, #8
 800905c:	781a      	ldrb	r2, [r3, #0]
 800905e:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 8009060:	741a      	strb	r2, [r3, #16]
	m_buttonConfigData.longPressTime1 = p_data[9u];
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	3309      	adds	r3, #9
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	b29a      	uxth	r2, r3
 800906a:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 800906c:	825a      	strh	r2, [r3, #18]
	m_buttonConfigData.longPressFunc2 = (ButtonFunction_T)p_data[10u];
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	330a      	adds	r3, #10
 8009072:	781a      	ldrb	r2, [r3, #0]
 8009074:	4b08      	ldr	r3, [pc, #32]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 8009076:	751a      	strb	r2, [r3, #20]
	m_buttonConfigData.longPressTime2 = p_data[11u];
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	330b      	adds	r3, #11
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	b29a      	uxth	r2, r3
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <BUTTON_SetConfigurationData+0xb4>)
 8009082:	82da      	strh	r2, [r3, #22]

	m_writebuttonConfigData = buttonIndex;
 8009084:	1dfb      	adds	r3, r7, #7
 8009086:	2200      	movs	r2, #0
 8009088:	569a      	ldrsb	r2, [r3, r2]
 800908a:	4b04      	ldr	r3, [pc, #16]	; (800909c <BUTTON_SetConfigurationData+0xb8>)
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e000      	b.n	8009092 <BUTTON_SetConfigurationData+0xae>
		return;
 8009090:	46c0      	nop			; (mov r8, r8)
}
 8009092:	46bd      	mov	sp, r7
 8009094:	b002      	add	sp, #8
 8009096:	bd80      	pop	{r7, pc}
 8009098:	2000123c 	.word	0x2000123c
 800909c:	200000b4 	.word	0x200000b4

080090a0 <BUTTON_GetConfigurationData>:
 * 								true = configuration data valid
 */
// ****************************************************************************
bool BUTTON_GetConfigurationData(const uint8_t buttonIndex, uint8_t * const p_data,
									uint16_t * const p_len)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
 80090aa:	210f      	movs	r1, #15
 80090ac:	187b      	adds	r3, r7, r1
 80090ae:	1c02      	adds	r2, r0, #0
 80090b0:	701a      	strb	r2, [r3, #0]
	if (buttonIndex > BUTTON_LAST_BUTTON_IDX)
 80090b2:	187b      	adds	r3, r7, r1
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d904      	bls.n	80090c4 <BUTTON_GetConfigurationData+0x24>
	{
		*p_len = 0u;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	801a      	strh	r2, [r3, #0]
		return false;
 80090c0:	2300      	movs	r3, #0
 80090c2:	e066      	b.n	8009192 <BUTTON_GetConfigurationData+0xf2>
	}

	const Button_T* p_button = &m_buttons[buttonIndex];
 80090c4:	230f      	movs	r3, #15
 80090c6:	18fb      	adds	r3, r7, r3
 80090c8:	781a      	ldrb	r2, [r3, #0]
 80090ca:	0013      	movs	r3, r2
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	189b      	adds	r3, r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4a32      	ldr	r2, [pc, #200]	; (800919c <BUTTON_GetConfigurationData+0xfc>)
 80090d4:	189b      	adds	r3, r3, r2
 80090d6:	617b      	str	r3, [r7, #20]

	p_data[0u] = (uint8_t)p_button->pressFunc;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	701a      	strb	r2, [r3, #0]
	p_data[1u] = (uint8_t)p_button->pressConfig;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	885a      	ldrh	r2, [r3, #2]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	3301      	adds	r3, #1
 80090e8:	b2d2      	uxtb	r2, r2
 80090ea:	701a      	strb	r2, [r3, #0]
	p_data[2u] = (uint8_t)p_button->releaseFunc;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	3302      	adds	r3, #2
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	7912      	ldrb	r2, [r2, #4]
 80090f4:	701a      	strb	r2, [r3, #0]
	p_data[3u] = (uint8_t)p_button->releaseConfig;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	88da      	ldrh	r2, [r3, #6]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	3303      	adds	r3, #3
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	701a      	strb	r2, [r3, #0]
	p_data[4u] = (uint8_t)p_button->singlePressFunc;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	3304      	adds	r3, #4
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	7a12      	ldrb	r2, [r2, #8]
 800910a:	701a      	strb	r2, [r3, #0]
	p_data[5u] = (uint8_t)(p_button->singlePressTime / 100u);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	895b      	ldrh	r3, [r3, #10]
 8009110:	2164      	movs	r1, #100	; 0x64
 8009112:	0018      	movs	r0, r3
 8009114:	f7f6 fff6 	bl	8000104 <__udivsi3>
 8009118:	0003      	movs	r3, r0
 800911a:	b29a      	uxth	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	3305      	adds	r3, #5
 8009120:	b2d2      	uxtb	r2, r2
 8009122:	701a      	strb	r2, [r3, #0]
	p_data[6u] = (uint8_t)p_button->doublePressFunc;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	3306      	adds	r3, #6
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	7b12      	ldrb	r2, [r2, #12]
 800912c:	701a      	strb	r2, [r3, #0]
	p_data[7u] = (uint8_t)(p_button->doublePressTime / 100u);
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	89db      	ldrh	r3, [r3, #14]
 8009132:	2164      	movs	r1, #100	; 0x64
 8009134:	0018      	movs	r0, r3
 8009136:	f7f6 ffe5 	bl	8000104 <__udivsi3>
 800913a:	0003      	movs	r3, r0
 800913c:	b29a      	uxth	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	3307      	adds	r3, #7
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	701a      	strb	r2, [r3, #0]
	p_data[8u] = (uint8_t)p_button->longPressFunc1;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	3308      	adds	r3, #8
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	7c12      	ldrb	r2, [r2, #16]
 800914e:	701a      	strb	r2, [r3, #0]
	p_data[9u] = (uint8_t)(p_button->longPressTime1 / 100u);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	8a5b      	ldrh	r3, [r3, #18]
 8009154:	2164      	movs	r1, #100	; 0x64
 8009156:	0018      	movs	r0, r3
 8009158:	f7f6 ffd4 	bl	8000104 <__udivsi3>
 800915c:	0003      	movs	r3, r0
 800915e:	b29a      	uxth	r2, r3
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	3309      	adds	r3, #9
 8009164:	b2d2      	uxtb	r2, r2
 8009166:	701a      	strb	r2, [r3, #0]
	p_data[10u] = (uint8_t)p_button->longPressFunc2;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	330a      	adds	r3, #10
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	7d12      	ldrb	r2, [r2, #20]
 8009170:	701a      	strb	r2, [r3, #0]
	p_data[11u] = (uint8_t)(p_button->longPressTime2 / 100u);
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	8adb      	ldrh	r3, [r3, #22]
 8009176:	2164      	movs	r1, #100	; 0x64
 8009178:	0018      	movs	r0, r3
 800917a:	f7f6 ffc3 	bl	8000104 <__udivsi3>
 800917e:	0003      	movs	r3, r0
 8009180:	b29a      	uxth	r2, r3
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	330b      	adds	r3, #11
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	701a      	strb	r2, [r3, #0]

	*p_len = 12u;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	220c      	movs	r2, #12
 800918e:	801a      	strh	r2, [r3, #0]

	return true;
 8009190:	2301      	movs	r3, #1
}
 8009192:	0018      	movs	r0, r3
 8009194:	46bd      	mov	sp, r7
 8009196:	b006      	add	sp, #24
 8009198:	bd80      	pop	{r7, pc}
 800919a:	46c0      	nop			; (mov r8, r8)
 800919c:	20000038 	.word	0x20000038

080091a0 <BUTTON_ReadConfigFromNv>:
 * @retval	bool				false = configuration data invalid
 * 								true = configuration data appears valid
 */
// ****************************************************************************
static bool BUTTON_ReadConfigFromNv(const uint8_t buttonIndex)
{
 80091a0:	b5b0      	push	{r4, r5, r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	0002      	movs	r2, r0
 80091a8:	1dfb      	adds	r3, r7, #7
 80091aa:	701a      	strb	r2, [r3, #0]
	const uint8_t nvOffset = BUTTON_PRESS_FUNC_SW1 +
 80091ac:	1dfb      	adds	r3, r7, #7
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	1c1a      	adds	r2, r3, #0
 80091b2:	1892      	adds	r2, r2, r2
 80091b4:	18d2      	adds	r2, r2, r3
 80091b6:	0092      	lsls	r2, r2, #2
 80091b8:	18d3      	adds	r3, r2, r3
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	250f      	movs	r5, #15
 80091be:	197b      	adds	r3, r7, r5
 80091c0:	3225      	adds	r2, #37	; 0x25
 80091c2:	701a      	strb	r2, [r3, #0]
								(buttonIndex * (BUTTON_PRESS_FUNC_SW2 - BUTTON_PRESS_FUNC_SW1));
	bool dataValid = true;
 80091c4:	240e      	movs	r4, #14
 80091c6:	193b      	adds	r3, r7, r4
 80091c8:	2201      	movs	r2, #1
 80091ca:	701a      	strb	r2, [r3, #0]

	dataValid &= NV_ReadVariable_U8(nvOffset, (uint8_t*)&m_buttonConfigData.pressFunc);
 80091cc:	197b      	adds	r3, r7, r5
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	4a5f      	ldr	r2, [pc, #380]	; (8009350 <BUTTON_ReadConfigFromNv+0x1b0>)
 80091d4:	0011      	movs	r1, r2
 80091d6:	0018      	movs	r0, r3
 80091d8:	f007 fcb0 	bl	8010b3c <NV_ReadVariable_U8>
 80091dc:	0003      	movs	r3, r0
 80091de:	001a      	movs	r2, r3
 80091e0:	193b      	adds	r3, r7, r4
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	401a      	ands	r2, r3
 80091e6:	193b      	adds	r3, r7, r4
 80091e8:	1e51      	subs	r1, r2, #1
 80091ea:	418a      	sbcs	r2, r1
 80091ec:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(nvOffset + 2u, (uint8_t*)&m_buttonConfigData.releaseFunc);
 80091ee:	197b      	adds	r3, r7, r5
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	3302      	adds	r3, #2
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4a56      	ldr	r2, [pc, #344]	; (8009354 <BUTTON_ReadConfigFromNv+0x1b4>)
 80091fa:	0011      	movs	r1, r2
 80091fc:	0018      	movs	r0, r3
 80091fe:	f007 fc9d 	bl	8010b3c <NV_ReadVariable_U8>
 8009202:	0003      	movs	r3, r0
 8009204:	001a      	movs	r2, r3
 8009206:	193b      	adds	r3, r7, r4
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	401a      	ands	r2, r3
 800920c:	193b      	adds	r3, r7, r4
 800920e:	1e51      	subs	r1, r2, #1
 8009210:	418a      	sbcs	r2, r1
 8009212:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(nvOffset + 4u, (uint8_t*)&m_buttonConfigData.singlePressFunc);
 8009214:	197b      	adds	r3, r7, r5
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	b29b      	uxth	r3, r3
 800921a:	3304      	adds	r3, #4
 800921c:	b29b      	uxth	r3, r3
 800921e:	4a4e      	ldr	r2, [pc, #312]	; (8009358 <BUTTON_ReadConfigFromNv+0x1b8>)
 8009220:	0011      	movs	r1, r2
 8009222:	0018      	movs	r0, r3
 8009224:	f007 fc8a 	bl	8010b3c <NV_ReadVariable_U8>
 8009228:	0003      	movs	r3, r0
 800922a:	001a      	movs	r2, r3
 800922c:	193b      	adds	r3, r7, r4
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	401a      	ands	r2, r3
 8009232:	193b      	adds	r3, r7, r4
 8009234:	1e51      	subs	r1, r2, #1
 8009236:	418a      	sbcs	r2, r1
 8009238:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(nvOffset + 5u, (uint8_t*)&m_buttonConfigData.singlePressTime);
 800923a:	197b      	adds	r3, r7, r5
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b29b      	uxth	r3, r3
 8009240:	3305      	adds	r3, #5
 8009242:	b29b      	uxth	r3, r3
 8009244:	4a45      	ldr	r2, [pc, #276]	; (800935c <BUTTON_ReadConfigFromNv+0x1bc>)
 8009246:	0011      	movs	r1, r2
 8009248:	0018      	movs	r0, r3
 800924a:	f007 fc77 	bl	8010b3c <NV_ReadVariable_U8>
 800924e:	0003      	movs	r3, r0
 8009250:	001a      	movs	r2, r3
 8009252:	193b      	adds	r3, r7, r4
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	401a      	ands	r2, r3
 8009258:	193b      	adds	r3, r7, r4
 800925a:	1e51      	subs	r1, r2, #1
 800925c:	418a      	sbcs	r2, r1
 800925e:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(nvOffset + 6u, (uint8_t*)&m_buttonConfigData.doublePressFunc);
 8009260:	197b      	adds	r3, r7, r5
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	3306      	adds	r3, #6
 8009268:	b29b      	uxth	r3, r3
 800926a:	4a3d      	ldr	r2, [pc, #244]	; (8009360 <BUTTON_ReadConfigFromNv+0x1c0>)
 800926c:	0011      	movs	r1, r2
 800926e:	0018      	movs	r0, r3
 8009270:	f007 fc64 	bl	8010b3c <NV_ReadVariable_U8>
 8009274:	0003      	movs	r3, r0
 8009276:	001a      	movs	r2, r3
 8009278:	193b      	adds	r3, r7, r4
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	401a      	ands	r2, r3
 800927e:	193b      	adds	r3, r7, r4
 8009280:	1e51      	subs	r1, r2, #1
 8009282:	418a      	sbcs	r2, r1
 8009284:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(nvOffset + 7u, (uint8_t*)&m_buttonConfigData.doublePressTime);
 8009286:	197b      	adds	r3, r7, r5
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	3307      	adds	r3, #7
 800928e:	b29b      	uxth	r3, r3
 8009290:	4a34      	ldr	r2, [pc, #208]	; (8009364 <BUTTON_ReadConfigFromNv+0x1c4>)
 8009292:	0011      	movs	r1, r2
 8009294:	0018      	movs	r0, r3
 8009296:	f007 fc51 	bl	8010b3c <NV_ReadVariable_U8>
 800929a:	0003      	movs	r3, r0
 800929c:	001a      	movs	r2, r3
 800929e:	193b      	adds	r3, r7, r4
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	401a      	ands	r2, r3
 80092a4:	193b      	adds	r3, r7, r4
 80092a6:	1e51      	subs	r1, r2, #1
 80092a8:	418a      	sbcs	r2, r1
 80092aa:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(nvOffset + 8u, (uint8_t*)&m_buttonConfigData.longPressFunc1);
 80092ac:	197b      	adds	r3, r7, r5
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3308      	adds	r3, #8
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	4a2c      	ldr	r2, [pc, #176]	; (8009368 <BUTTON_ReadConfigFromNv+0x1c8>)
 80092b8:	0011      	movs	r1, r2
 80092ba:	0018      	movs	r0, r3
 80092bc:	f007 fc3e 	bl	8010b3c <NV_ReadVariable_U8>
 80092c0:	0003      	movs	r3, r0
 80092c2:	001a      	movs	r2, r3
 80092c4:	193b      	adds	r3, r7, r4
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	401a      	ands	r2, r3
 80092ca:	193b      	adds	r3, r7, r4
 80092cc:	1e51      	subs	r1, r2, #1
 80092ce:	418a      	sbcs	r2, r1
 80092d0:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(nvOffset + 9u, (uint8_t*)&m_buttonConfigData.longPressTime1);
 80092d2:	197b      	adds	r3, r7, r5
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	3309      	adds	r3, #9
 80092da:	b29b      	uxth	r3, r3
 80092dc:	4a23      	ldr	r2, [pc, #140]	; (800936c <BUTTON_ReadConfigFromNv+0x1cc>)
 80092de:	0011      	movs	r1, r2
 80092e0:	0018      	movs	r0, r3
 80092e2:	f007 fc2b 	bl	8010b3c <NV_ReadVariable_U8>
 80092e6:	0003      	movs	r3, r0
 80092e8:	001a      	movs	r2, r3
 80092ea:	193b      	adds	r3, r7, r4
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	401a      	ands	r2, r3
 80092f0:	193b      	adds	r3, r7, r4
 80092f2:	1e51      	subs	r1, r2, #1
 80092f4:	418a      	sbcs	r2, r1
 80092f6:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(nvOffset + 10u, (uint8_t*)&m_buttonConfigData.longPressFunc2);
 80092f8:	197b      	adds	r3, r7, r5
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	330a      	adds	r3, #10
 8009300:	b29b      	uxth	r3, r3
 8009302:	4a1b      	ldr	r2, [pc, #108]	; (8009370 <BUTTON_ReadConfigFromNv+0x1d0>)
 8009304:	0011      	movs	r1, r2
 8009306:	0018      	movs	r0, r3
 8009308:	f007 fc18 	bl	8010b3c <NV_ReadVariable_U8>
 800930c:	0003      	movs	r3, r0
 800930e:	001a      	movs	r2, r3
 8009310:	193b      	adds	r3, r7, r4
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	401a      	ands	r2, r3
 8009316:	193b      	adds	r3, r7, r4
 8009318:	1e51      	subs	r1, r2, #1
 800931a:	418a      	sbcs	r2, r1
 800931c:	701a      	strb	r2, [r3, #0]
	dataValid &= NV_ReadVariable_U8(nvOffset + 11u, (uint8_t*)&m_buttonConfigData.longPressTime2);
 800931e:	197b      	adds	r3, r7, r5
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b29b      	uxth	r3, r3
 8009324:	330b      	adds	r3, #11
 8009326:	b29b      	uxth	r3, r3
 8009328:	4a12      	ldr	r2, [pc, #72]	; (8009374 <BUTTON_ReadConfigFromNv+0x1d4>)
 800932a:	0011      	movs	r1, r2
 800932c:	0018      	movs	r0, r3
 800932e:	f007 fc05 	bl	8010b3c <NV_ReadVariable_U8>
 8009332:	0003      	movs	r3, r0
 8009334:	001a      	movs	r2, r3
 8009336:	193b      	adds	r3, r7, r4
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	401a      	ands	r2, r3
 800933c:	193b      	adds	r3, r7, r4
 800933e:	1e51      	subs	r1, r2, #1
 8009340:	418a      	sbcs	r2, r1
 8009342:	701a      	strb	r2, [r3, #0]

	return dataValid;
 8009344:	193b      	adds	r3, r7, r4
 8009346:	781b      	ldrb	r3, [r3, #0]
}
 8009348:	0018      	movs	r0, r3
 800934a:	46bd      	mov	sp, r7
 800934c:	b004      	add	sp, #16
 800934e:	bdb0      	pop	{r4, r5, r7, pc}
 8009350:	2000123c 	.word	0x2000123c
 8009354:	20001240 	.word	0x20001240
 8009358:	20001244 	.word	0x20001244
 800935c:	20001246 	.word	0x20001246
 8009360:	20001248 	.word	0x20001248
 8009364:	2000124a 	.word	0x2000124a
 8009368:	2000124c 	.word	0x2000124c
 800936c:	2000124e 	.word	0x2000124e
 8009370:	20001250 	.word	0x20001250
 8009374:	20001252 	.word	0x20001252

08009378 <BUTTON_SetConfigData>:
 * @param	pinref			pointer to the iodrv pin handle
 * @retval	none
 */
// ****************************************************************************
static void BUTTON_SetConfigData(Button_T * const p_button, const uint8_t pinref)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	000a      	movs	r2, r1
 8009382:	1cfb      	adds	r3, r7, #3
 8009384:	701a      	strb	r2, [r3, #0]
	p_button->p_pinInfo = IODRV_GetPinInfo(pinref);
 8009386:	1cfb      	adds	r3, r7, #3
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	0018      	movs	r0, r3
 800938c:	f005 ff62 	bl	800f254 <IODRV_GetPinInfo>
 8009390:	0002      	movs	r2, r0
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	61da      	str	r2, [r3, #28]

	BUTTON_UpdateConfigData(p_button, &m_buttonConfigData);
 8009396:	4a05      	ldr	r2, [pc, #20]	; (80093ac <BUTTON_SetConfigData+0x34>)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	0011      	movs	r1, r2
 800939c:	0018      	movs	r0, r3
 800939e:	f000 f807 	bl	80093b0 <BUTTON_UpdateConfigData>
}
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	46bd      	mov	sp, r7
 80093a6:	b002      	add	sp, #8
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	46c0      	nop			; (mov r8, r8)
 80093ac:	2000123c 	.word	0x2000123c

080093b0 <BUTTON_UpdateConfigData>:
 * @retval	none
 */
// ****************************************************************************
static void BUTTON_UpdateConfigData(Button_T * const p_button,
										const Button_T * const p_configData)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
	p_button->pressFunc = p_configData->pressFunc;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	701a      	strb	r2, [r3, #0]
	p_button->releaseFunc = p_configData->releaseFunc;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	791a      	ldrb	r2, [r3, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	711a      	strb	r2, [r3, #4]
	p_button->singlePressFunc = p_configData->singlePressFunc;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	7a1a      	ldrb	r2, [r3, #8]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	721a      	strb	r2, [r3, #8]
	p_button->singlePressTime = p_configData->singlePressTime * 100u;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	895b      	ldrh	r3, [r3, #10]
 80093d6:	2264      	movs	r2, #100	; 0x64
 80093d8:	4353      	muls	r3, r2
 80093da:	b29a      	uxth	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	815a      	strh	r2, [r3, #10]
	p_button->doublePressFunc = p_configData->doublePressFunc;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	7b1a      	ldrb	r2, [r3, #12]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	731a      	strb	r2, [r3, #12]
	p_button->doublePressTime = p_configData->doublePressTime * 100u;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	89db      	ldrh	r3, [r3, #14]
 80093ec:	2264      	movs	r2, #100	; 0x64
 80093ee:	4353      	muls	r3, r2
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	81da      	strh	r2, [r3, #14]
	p_button->longPressFunc1 = p_configData->longPressFunc1;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	7c1a      	ldrb	r2, [r3, #16]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	741a      	strb	r2, [r3, #16]
	p_button->longPressTime1 = p_configData->longPressTime1 * 100u;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	8a5b      	ldrh	r3, [r3, #18]
 8009402:	2264      	movs	r2, #100	; 0x64
 8009404:	4353      	muls	r3, r2
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	825a      	strh	r2, [r3, #18]
	p_button->longPressFunc2 = p_configData->longPressFunc2;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	7d1a      	ldrb	r2, [r3, #20]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	751a      	strb	r2, [r3, #20]
	p_button->longPressTime2 = p_configData->longPressTime2 * 100u;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	8adb      	ldrh	r3, [r3, #22]
 8009418:	2264      	movs	r2, #100	; 0x64
 800941a:	4353      	muls	r3, r2
 800941c:	b29a      	uxth	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	82da      	strh	r2, [r3, #22]
}
 8009422:	46c0      	nop			; (mov r8, r8)
 8009424:	46bd      	mov	sp, r7
 8009426:	b002      	add	sp, #8
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <BUTTON_GetEventFunc>:
 * @retval	ButtonFunction_T	function to perform directly or number to be passed
 * 								to pijuice service routine.
 */
// ****************************************************************************
static ButtonFunction_T BUTTON_GetEventFunc(Button_T * const p_button)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
	switch (p_button->event)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	7e5b      	ldrb	r3, [r3, #25]
 8009438:	2b06      	cmp	r3, #6
 800943a:	d816      	bhi.n	800946a <BUTTON_GetEventFunc+0x3e>
 800943c:	009a      	lsls	r2, r3, #2
 800943e:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <BUTTON_GetEventFunc+0x48>)
 8009440:	18d3      	adds	r3, r2, r3
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	469f      	mov	pc, r3
	{
	case BUTTON_EVENT_PRESS:
		return p_button->pressFunc;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	e00f      	b.n	800946c <BUTTON_GetEventFunc+0x40>

	case BUTTON_EVENT_RELEASE:
		return p_button->releaseFunc;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	791b      	ldrb	r3, [r3, #4]
 8009450:	e00c      	b.n	800946c <BUTTON_GetEventFunc+0x40>

	case BUTTON_EVENT_SINGLE_PRESS:
		return p_button->singlePressFunc;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	7a1b      	ldrb	r3, [r3, #8]
 8009456:	e009      	b.n	800946c <BUTTON_GetEventFunc+0x40>

	case BUTTON_EVENT_DOUBLE_PRESS:
		return p_button->doublePressFunc;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7b1b      	ldrb	r3, [r3, #12]
 800945c:	e006      	b.n	800946c <BUTTON_GetEventFunc+0x40>

	case BUTTON_EVENT_LONG_PRESS1:
		return p_button->longPressFunc1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	7c1b      	ldrb	r3, [r3, #16]
 8009462:	e003      	b.n	800946c <BUTTON_GetEventFunc+0x40>

	case BUTTON_EVENT_LONG_PRESS2:
		return p_button->longPressFunc2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	7d1b      	ldrb	r3, [r3, #20]
 8009468:	e000      	b.n	800946c <BUTTON_GetEventFunc+0x40>

	default:
		return BUTTON_EVENT_NO_FUNC;
 800946a:	2300      	movs	r3, #0
	}
}
 800946c:	0018      	movs	r0, r3
 800946e:	46bd      	mov	sp, r7
 8009470:	b002      	add	sp, #8
 8009472:	bd80      	pop	{r7, pc}
 8009474:	08013b48 	.word	0x08013b48

08009478 <BUTTON_WriteConfigToNv>:
 * @retval	none
 */
// ****************************************************************************
static void BUTTON_WriteConfigToNv(const Button_T * const p_configData,
									const uint8_t buttonIdx)
{
 8009478:	b590      	push	{r4, r7, lr}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	000a      	movs	r2, r1
 8009482:	1cfb      	adds	r3, r7, #3
 8009484:	701a      	strb	r2, [r3, #0]
	const uint8_t nvOffset = BUTTON_PRESS_FUNC_SW1 +
								(m_writebuttonConfigData * (BUTTON_PRESS_FUNC_SW2 - BUTTON_PRESS_FUNC_SW1));
 8009486:	4b41      	ldr	r3, [pc, #260]	; (800958c <BUTTON_WriteConfigToNv+0x114>)
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	b25b      	sxtb	r3, r3
 800948c:	b2db      	uxtb	r3, r3
 800948e:	1c1a      	adds	r2, r3, #0
 8009490:	1892      	adds	r2, r2, r2
 8009492:	18d2      	adds	r2, r2, r3
 8009494:	0092      	lsls	r2, r2, #2
 8009496:	18d3      	adds	r3, r2, r3
 8009498:	b2da      	uxtb	r2, r3
	const uint8_t nvOffset = BUTTON_PRESS_FUNC_SW1 +
 800949a:	240f      	movs	r4, #15
 800949c:	193b      	adds	r3, r7, r4
 800949e:	3225      	adds	r2, #37	; 0x25
 80094a0:	701a      	strb	r2, [r3, #0]

	NV_WriteVariable_U8(nvOffset, p_configData->pressFunc);
 80094a2:	193b      	adds	r3, r7, r4
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	0019      	movs	r1, r3
 80094ae:	0010      	movs	r0, r2
 80094b0:	f007 fb20 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(nvOffset + 2u, p_configData->releaseFunc);
 80094b4:	193b      	adds	r3, r7, r4
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	3302      	adds	r3, #2
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	791b      	ldrb	r3, [r3, #4]
 80094c2:	0019      	movs	r1, r3
 80094c4:	0010      	movs	r0, r2
 80094c6:	f007 fb15 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(nvOffset + 4u, p_configData->singlePressFunc);
 80094ca:	193b      	adds	r3, r7, r4
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	3304      	adds	r3, #4
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7a1b      	ldrb	r3, [r3, #8]
 80094d8:	0019      	movs	r1, r3
 80094da:	0010      	movs	r0, r2
 80094dc:	f007 fb0a 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(nvOffset + 5u, p_configData->singlePressTime);
 80094e0:	193b      	adds	r3, r7, r4
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3305      	adds	r3, #5
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	895b      	ldrh	r3, [r3, #10]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	0019      	movs	r1, r3
 80094f2:	0010      	movs	r0, r2
 80094f4:	f007 fafe 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(nvOffset + 6u, p_configData->doublePressFunc);
 80094f8:	193b      	adds	r3, r7, r4
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	3306      	adds	r3, #6
 8009500:	b29a      	uxth	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7b1b      	ldrb	r3, [r3, #12]
 8009506:	0019      	movs	r1, r3
 8009508:	0010      	movs	r0, r2
 800950a:	f007 faf3 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(nvOffset + 7u, p_configData->doublePressTime);
 800950e:	193b      	adds	r3, r7, r4
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	b29b      	uxth	r3, r3
 8009514:	3307      	adds	r3, #7
 8009516:	b29a      	uxth	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	89db      	ldrh	r3, [r3, #14]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	0019      	movs	r1, r3
 8009520:	0010      	movs	r0, r2
 8009522:	f007 fae7 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(nvOffset + 8u, p_configData->longPressFunc1);
 8009526:	193b      	adds	r3, r7, r4
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	3308      	adds	r3, #8
 800952e:	b29a      	uxth	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7c1b      	ldrb	r3, [r3, #16]
 8009534:	0019      	movs	r1, r3
 8009536:	0010      	movs	r0, r2
 8009538:	f007 fadc 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(nvOffset + 9u, p_configData->longPressTime1);
 800953c:	193b      	adds	r3, r7, r4
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	b29b      	uxth	r3, r3
 8009542:	3309      	adds	r3, #9
 8009544:	b29a      	uxth	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	8a5b      	ldrh	r3, [r3, #18]
 800954a:	b2db      	uxtb	r3, r3
 800954c:	0019      	movs	r1, r3
 800954e:	0010      	movs	r0, r2
 8009550:	f007 fad0 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(nvOffset + 10u, p_configData->longPressFunc2);
 8009554:	193b      	adds	r3, r7, r4
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	330a      	adds	r3, #10
 800955c:	b29a      	uxth	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	7d1b      	ldrb	r3, [r3, #20]
 8009562:	0019      	movs	r1, r3
 8009564:	0010      	movs	r0, r2
 8009566:	f007 fac5 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(nvOffset + 11u, p_configData->longPressTime2);
 800956a:	193b      	adds	r3, r7, r4
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	b29b      	uxth	r3, r3
 8009570:	330b      	adds	r3, #11
 8009572:	b29a      	uxth	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8adb      	ldrh	r3, [r3, #22]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	0019      	movs	r1, r3
 800957c:	0010      	movs	r0, r2
 800957e:	f007 fab9 	bl	8010af4 <NV_WriteVariable_U8>
}
 8009582:	46c0      	nop			; (mov r8, r8)
 8009584:	46bd      	mov	sp, r7
 8009586:	b005      	add	sp, #20
 8009588:	bd90      	pop	{r4, r7, pc}
 800958a:	46c0      	nop			; (mov r8, r8)
 800958c:	200000b4 	.word	0x200000b4

08009590 <BUTTON_DualLongPressEventCb>:
{
	UNUSED(p_button);
}

__weak void BUTTON_DualLongPressEventCb(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0

}
 8009594:	46c0      	nop			; (mov r8, r8)
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <DelayUs>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void DelayUs(__IO uint32_t micros) {
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
#else
	/* Go to clock cycles */
	micros *= (SystemCoreClock * 16 / 1000000) / 6;
 80095a4:	4b0d      	ldr	r3, [pc, #52]	; (80095dc <DelayUs+0x40>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	011b      	lsls	r3, r3, #4
 80095aa:	490d      	ldr	r1, [pc, #52]	; (80095e0 <DelayUs+0x44>)
 80095ac:	0018      	movs	r0, r3
 80095ae:	f7f6 fda9 	bl	8000104 <__udivsi3>
 80095b2:	0003      	movs	r3, r0
 80095b4:	001a      	movs	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4353      	muls	r3, r2
 80095ba:	607b      	str	r3, [r7, #4]
	micros >>= 4;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	091b      	lsrs	r3, r3, #4
 80095c0:	607b      	str	r3, [r7, #4]

	// Wait till done
	volatile uint32_t dcnt = micros;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	60fb      	str	r3, [r7, #12]
	while (dcnt--);
 80095c6:	46c0      	nop			; (mov r8, r8)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	1e5a      	subs	r2, r3, #1
 80095cc:	60fa      	str	r2, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1fa      	bne.n	80095c8 <DelayUs+0x2c>
#endif

}
 80095d2:	46c0      	nop			; (mov r8, r8)
 80095d4:	46c0      	nop			; (mov r8, r8)
 80095d6:	46bd      	mov	sp, r7
 80095d8:	b004      	add	sp, #16
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20000000 	.word	0x20000000
 80095e0:	005b8d80 	.word	0x005b8d80

080095e4 <CHARGER_I2C_Callback>:
 * @retval	none
 *
 */
// ****************************************************************************
void CHARGER_I2C_Callback(const I2CDRV_Device_t * const p_i2cdrvDevice)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
	if (p_i2cdrvDevice->event == I2CDRV_EVENT_RX_COMPLETE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	7d9b      	ldrb	r3, [r3, #22]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d107      	bne.n	8009604 <CHARGER_I2C_Callback+0x20>
	{
		m_i2cReadRegResult = p_i2cdrvDevice->data[2u];
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	7e5a      	ldrb	r2, [r3, #25]
 80095f8:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <CHARGER_I2C_Callback+0x40>)
 80095fa:	701a      	strb	r2, [r3, #0]
		m_i2cSuccess = true;
 80095fc:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <CHARGER_I2C_Callback+0x44>)
 80095fe:	2201      	movs	r2, #1
 8009600:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		m_i2cSuccess = false;
	}
}
 8009602:	e00a      	b.n	800961a <CHARGER_I2C_Callback+0x36>
	else if (p_i2cdrvDevice->event == I2CDRV_EVENT_TX_COMPLETE)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7d9b      	ldrb	r3, [r3, #22]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d103      	bne.n	8009614 <CHARGER_I2C_Callback+0x30>
		m_i2cSuccess = true;
 800960c:	4b06      	ldr	r3, [pc, #24]	; (8009628 <CHARGER_I2C_Callback+0x44>)
 800960e:	2201      	movs	r2, #1
 8009610:	701a      	strb	r2, [r3, #0]
}
 8009612:	e002      	b.n	800961a <CHARGER_I2C_Callback+0x36>
		m_i2cSuccess = false;
 8009614:	4b04      	ldr	r3, [pc, #16]	; (8009628 <CHARGER_I2C_Callback+0x44>)
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
}
 800961a:	46c0      	nop			; (mov r8, r8)
 800961c:	46bd      	mov	sp, r7
 800961e:	b002      	add	sp, #8
 8009620:	bd80      	pop	{r7, pc}
 8009622:	46c0      	nop			; (mov r8, r8)
 8009624:	20001272 	.word	0x20001272
 8009628:	20001271 	.word	0x20001271

0800962c <CHARGER_ReadAll_I2C_Callback>:
 * @retval	none
 *
 */
// ****************************************************************************
void CHARGER_ReadAll_I2C_Callback(const I2CDRV_Device_t * const p_i2cdrvDevice)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	if (p_i2cdrvDevice->event == I2CDRV_EVENT_RX_COMPLETE)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7d9b      	ldrb	r3, [r3, #22]
 8009638:	2b02      	cmp	r3, #2
 800963a:	d10c      	bne.n	8009656 <CHARGER_ReadAll_I2C_Callback+0x2a>
	{
		memcpy(m_registersIn, &p_i2cdrvDevice->data[2u], CHARGER_REGISTER_COUNT);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3319      	adds	r3, #25
 8009640:	4a08      	ldr	r2, [pc, #32]	; (8009664 <CHARGER_ReadAll_I2C_Callback+0x38>)
 8009642:	0010      	movs	r0, r2
 8009644:	0019      	movs	r1, r3
 8009646:	2308      	movs	r3, #8
 8009648:	001a      	movs	r2, r3
 800964a:	f00a f927 	bl	801389c <memcpy>
		m_i2cSuccess = true;
 800964e:	4b06      	ldr	r3, [pc, #24]	; (8009668 <CHARGER_ReadAll_I2C_Callback+0x3c>)
 8009650:	2201      	movs	r2, #1
 8009652:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		m_i2cSuccess = false;
	}
}
 8009654:	e002      	b.n	800965c <CHARGER_ReadAll_I2C_Callback+0x30>
		m_i2cSuccess = false;
 8009656:	4b04      	ldr	r3, [pc, #16]	; (8009668 <CHARGER_ReadAll_I2C_Callback+0x3c>)
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]
}
 800965c:	46c0      	nop			; (mov r8, r8)
 800965e:	46bd      	mov	sp, r7
 8009660:	b002      	add	sp, #8
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20001260 	.word	0x20001260
 8009668:	20001271 	.word	0x20001271

0800966c <CHARGER_WDT_I2C_Callback>:
 * @retval	none
 *
 */
// ****************************************************************************
void CHARGER_WDT_I2C_Callback(const I2CDRV_Device_t * const p_i2cdrvDevice)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
	if (p_i2cdrvDevice->event == I2CDRV_EVENT_TX_COMPLETE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	7d9b      	ldrb	r3, [r3, #22]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d103      	bne.n	8009684 <CHARGER_WDT_I2C_Callback+0x18>
	{
		// Transact time is close enough.
		m_lastWDTResetTimeMs = p_i2cdrvDevice->transactTime;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009680:	4b02      	ldr	r3, [pc, #8]	; (800968c <CHARGER_WDT_I2C_Callback+0x20>)
 8009682:	601a      	str	r2, [r3, #0]
	}
}
 8009684:	46c0      	nop			; (mov r8, r8)
 8009686:	46bd      	mov	sp, r7
 8009688:	b002      	add	sp, #8
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20001278 	.word	0x20001278

08009690 <CHARGER_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void CHARGER_Init(void)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 8009696:	f7f9 fd1b 	bl	80030d0 <HAL_GetTick>
 800969a:	0003      	movs	r3, r0
 800969c:	603b      	str	r3, [r7, #0]
	uint8_t i;

	// If not just powered on...
	if (EXECUTION_STATE_NORMAL != executionState)
 800969e:	4b4b      	ldr	r3, [pc, #300]	; (80097cc <CHARGER_Init+0x13c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a4b      	ldr	r2, [pc, #300]	; (80097d0 <CHARGER_Init+0x140>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d038      	beq.n	800971a <CHARGER_Init+0x8a>
	{
		if (NV_ReadVariable_U8(CHARGER_INPUTS_CONFIG_NV_ADDR, &m_chargerInputsConfig))
 80096a8:	4b4a      	ldr	r3, [pc, #296]	; (80097d4 <CHARGER_Init+0x144>)
 80096aa:	0019      	movs	r1, r3
 80096ac:	2022      	movs	r0, #34	; 0x22
 80096ae:	f007 fa45 	bl	8010b3c <NV_ReadVariable_U8>
 80096b2:	1e03      	subs	r3, r0, #0
 80096b4:	d005      	beq.n	80096c2 <CHARGER_Init+0x32>
		{
			CHARGER_SetInputsConfig(m_chargerInputsConfig);
 80096b6:	4b47      	ldr	r3, [pc, #284]	; (80097d4 <CHARGER_Init+0x144>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	0018      	movs	r0, r3
 80096bc:	f000 f986 	bl	80099cc <CHARGER_SetInputsConfig>
 80096c0:	e01c      	b.n	80096fc <CHARGER_Init+0x6c>
		}
		else
		{
			m_chargerInputsConfig |= CHGR_INPUTS_CONFIG_INPUT_PREFERENCE_bm;	/* Prefer RPi */
 80096c2:	4b44      	ldr	r3, [pc, #272]	; (80097d4 <CHARGER_Init+0x144>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2201      	movs	r2, #1
 80096c8:	4313      	orrs	r3, r2
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	4b41      	ldr	r3, [pc, #260]	; (80097d4 <CHARGER_Init+0x144>)
 80096ce:	701a      	strb	r2, [r3, #0]
			m_chargerInputsConfig |= CHGR_INPUTS_CONFIG_ENABLE_RPI5V_IN_bm;	/* Enable RPi 5V in */
 80096d0:	4b40      	ldr	r3, [pc, #256]	; (80097d4 <CHARGER_Init+0x144>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2202      	movs	r2, #2
 80096d6:	4313      	orrs	r3, r2
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	4b3e      	ldr	r3, [pc, #248]	; (80097d4 <CHARGER_Init+0x144>)
 80096dc:	701a      	strb	r2, [r3, #0]
			m_chargerInputsConfig |= 0u;
 80096de:	4b3d      	ldr	r3, [pc, #244]	; (80097d4 <CHARGER_Init+0x144>)
 80096e0:	781a      	ldrb	r2, [r3, #0]
 80096e2:	4b3c      	ldr	r3, [pc, #240]	; (80097d4 <CHARGER_Init+0x144>)
 80096e4:	701a      	strb	r2, [r3, #0]
			m_chargerInputsConfig |= CHGR_INPUTS_CONFIG_LIMIT_IN_2pt5A_bm;	/* 2.5A Vin limit */
 80096e6:	4b3b      	ldr	r3, [pc, #236]	; (80097d4 <CHARGER_Init+0x144>)
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	2208      	movs	r2, #8
 80096ec:	4313      	orrs	r3, r2
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	4b38      	ldr	r3, [pc, #224]	; (80097d4 <CHARGER_Init+0x144>)
 80096f2:	701a      	strb	r2, [r3, #0]
			m_chargerInputsConfig |= 0u;
 80096f4:	4b37      	ldr	r3, [pc, #220]	; (80097d4 <CHARGER_Init+0x144>)
 80096f6:	781a      	ldrb	r2, [r3, #0]
 80096f8:	4b36      	ldr	r3, [pc, #216]	; (80097d4 <CHARGER_Init+0x144>)
 80096fa:	701a      	strb	r2, [r3, #0]
		}

		if (false == NV_ReadVariable_U8(CHARGING_CONFIG_NV_ADDR, &m_chargingConfig))
 80096fc:	4b36      	ldr	r3, [pc, #216]	; (80097d8 <CHARGER_Init+0x148>)
 80096fe:	0019      	movs	r1, r3
 8009700:	2021      	movs	r0, #33	; 0x21
 8009702:	f007 fa1b 	bl	8010b3c <NV_ReadVariable_U8>
 8009706:	0003      	movs	r3, r0
 8009708:	001a      	movs	r2, r3
 800970a:	2301      	movs	r3, #1
 800970c:	4053      	eors	r3, r2
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <CHARGER_Init+0x8a>
		{
			// Set enable charge if unprogrammed
			CHARGER_SetChargeEnableConfig(0x80 | CHARGING_CONFIG_CHARGE_EN_bm);
 8009714:	2081      	movs	r0, #129	; 0x81
 8009716:	f000 f9a1 	bl	8009a5c <CHARGER_SetChargeEnableConfig>
		}
	}


	MS_TIMEREF_INIT(m_lastRegReadTimeMs, sysTime);
 800971a:	4b30      	ldr	r3, [pc, #192]	; (80097dc <CHARGER_Init+0x14c>)
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	601a      	str	r2, [r3, #0]
	MS_TIMEREF_INIT(m_lastWDTResetTimeMs, sysTime);
 8009720:	4b2f      	ldr	r3, [pc, #188]	; (80097e0 <CHARGER_Init+0x150>)
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	601a      	str	r2, [r3, #0]


	// Initialise all values from the device, most likely going to be default and a watchdog timeout
	CHARGER_UpdateAllLocalRegisters();
 8009726:	f000 fb43 	bl	8009db0 <CHARGER_UpdateAllLocalRegisters>


	// Initialise all write values
	for (i = 0; i < CHARGER_REGISTER_COUNT; i++)
 800972a:	1dfb      	adds	r3, r7, #7
 800972c:	2200      	movs	r2, #0
 800972e:	701a      	strb	r2, [r3, #0]
 8009730:	e012      	b.n	8009758 <CHARGER_Init+0xc8>
	{
		m_registersOut[i] = (m_registersIn[i] & m_registersWriteMask[i]);
 8009732:	1dfb      	adds	r3, r7, #7
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	4a2b      	ldr	r2, [pc, #172]	; (80097e4 <CHARGER_Init+0x154>)
 8009738:	5cd2      	ldrb	r2, [r2, r3]
 800973a:	1dfb      	adds	r3, r7, #7
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	492a      	ldr	r1, [pc, #168]	; (80097e8 <CHARGER_Init+0x158>)
 8009740:	5cc9      	ldrb	r1, [r1, r3]
 8009742:	1dfb      	adds	r3, r7, #7
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	400a      	ands	r2, r1
 8009748:	b2d1      	uxtb	r1, r2
 800974a:	4a28      	ldr	r2, [pc, #160]	; (80097ec <CHARGER_Init+0x15c>)
 800974c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < CHARGER_REGISTER_COUNT; i++)
 800974e:	1dfb      	adds	r3, r7, #7
 8009750:	781a      	ldrb	r2, [r3, #0]
 8009752:	1dfb      	adds	r3, r7, #7
 8009754:	3201      	adds	r2, #1
 8009756:	701a      	strb	r2, [r3, #0]
 8009758:	1dfb      	adds	r3, r7, #7
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b07      	cmp	r3, #7
 800975e:	d9e8      	bls.n	8009732 <CHARGER_Init+0xa2>
	}

	// Don't allow charging from RPi 5V
	m_registersOut[CHG_REG_BATTERY_STATUS] |= CHGR_BS_OTG_LOCK_bm;
 8009760:	4b22      	ldr	r3, [pc, #136]	; (80097ec <CHARGER_Init+0x15c>)
 8009762:	785b      	ldrb	r3, [r3, #1]
 8009764:	2208      	movs	r2, #8
 8009766:	4313      	orrs	r3, r2
 8009768:	b2da      	uxtb	r2, r3
 800976a:	4b20      	ldr	r3, [pc, #128]	; (80097ec <CHARGER_Init+0x15c>)
 800976c:	705a      	strb	r2, [r3, #1]
	CHARGER_UpdateDeviceRegister(CHG_REG_BATTERY_STATUS, m_registersOut[CHG_REG_BATTERY_STATUS], CHGR_REGISTER_ALLBITS);
 800976e:	4b1f      	ldr	r3, [pc, #124]	; (80097ec <CHARGER_Init+0x15c>)
 8009770:	785b      	ldrb	r3, [r3, #1]
 8009772:	22ff      	movs	r2, #255	; 0xff
 8009774:	0019      	movs	r1, r3
 8009776:	2001      	movs	r0, #1
 8009778:	f000 fb58 	bl	8009e2c <CHARGER_UpdateDeviceRegister>


	// Disable charging and set current limit from RPi to 500mA
	// High impedance mode is not enabled or we might not get any power!
	m_registersOut[CHG_REG_CONTROL] = (CHGR_CTRL_CHG_DISABLE_bm | CHGR_CTRL_IUSB_LIMIT_500MA);
 800977c:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <CHARGER_Init+0x15c>)
 800977e:	2222      	movs	r2, #34	; 0x22
 8009780:	709a      	strb	r2, [r3, #2]
	CHARGER_UpdateDeviceRegister(CHG_REG_CONTROL, m_registersOut[CHG_REG_CONTROL], m_registersWriteMask[CHG_REG_CONTROL]);
 8009782:	4b1a      	ldr	r3, [pc, #104]	; (80097ec <CHARGER_Init+0x15c>)
 8009784:	7899      	ldrb	r1, [r3, #2]
 8009786:	4b18      	ldr	r3, [pc, #96]	; (80097e8 <CHARGER_Init+0x158>)
 8009788:	789b      	ldrb	r3, [r3, #2]
 800978a:	001a      	movs	r2, r3
 800978c:	2002      	movs	r0, #2
 800978e:	f000 fb4d 	bl	8009e2c <CHARGER_UpdateDeviceRegister>


	DelayUs(500);
 8009792:	23fa      	movs	r3, #250	; 0xfa
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	0018      	movs	r0, r3
 8009798:	f7ff ff00 	bl	800959c <DelayUs>


	CHARGER_UpdateRPi5VInLockout();
 800979c:	f000 fc08 	bl	8009fb0 <CHARGER_UpdateRPi5VInLockout>
	CHARGER_UpdateTempRegulationControlStatus();
 80097a0:	f000 fdd8 	bl	800a354 <CHARGER_UpdateTempRegulationControlStatus>

	CHARGER_UpdateLocalRegister(CHG_REG_SUPPLY_STATUS);
 80097a4:	2000      	movs	r0, #0
 80097a6:	f000 fa7f 	bl	8009ca8 <CHARGER_UpdateLocalRegister>
	CHARGER_UpdateLocalRegister(CHG_REG_BATTERY_STATUS);
 80097aa:	2001      	movs	r0, #1
 80097ac:	f000 fa7c 	bl	8009ca8 <CHARGER_UpdateLocalRegister>


	m_chargerStatus = (m_registersIn[CHG_REG_SUPPLY_STATUS] >> CHGR_SC_STAT_Pos) & 0x07u;
 80097b0:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <CHARGER_Init+0x154>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	091b      	lsrs	r3, r3, #4
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2207      	movs	r2, #7
 80097ba:	4013      	ands	r3, r2
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <CHARGER_Init+0x160>)
 80097c0:	701a      	strb	r2, [r3, #0]

}
 80097c2:	46c0      	nop			; (mov r8, r8)
 80097c4:	46bd      	mov	sp, r7
 80097c6:	b002      	add	sp, #8
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	2000185c 	.word	0x2000185c
 80097d0:	aaaaaaaa 	.word	0xaaaaaaaa
 80097d4:	20001274 	.word	0x20001274
 80097d8:	20001273 	.word	0x20001273
 80097dc:	2000127c 	.word	0x2000127c
 80097e0:	20001278 	.word	0x20001278
 80097e4:	20001260 	.word	0x20001260
 80097e8:	200000b8 	.word	0x200000b8
 80097ec:	20001268 	.word	0x20001268
 80097f0:	200000c0 	.word	0x200000c0

080097f4 <CHARGER_Task>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void CHARGER_Task(void)
{
 80097f4:	b590      	push	{r4, r7, lr}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
	const BatteryStatus_T batteryStatus = BATTERY_GetStatus();
 80097fa:	230f      	movs	r3, #15
 80097fc:	18fc      	adds	r4, r7, r3
 80097fe:	f7fe fc57 	bl	80080b0 <BATTERY_GetStatus>
 8009802:	0003      	movs	r3, r0
 8009804:	7023      	strb	r3, [r4, #0]
	const uint32_t sysTime = HAL_GetTick();
 8009806:	f7f9 fc63 	bl	80030d0 <HAL_GetTick>
 800980a:	0003      	movs	r3, r0
 800980c:	60bb      	str	r3, [r7, #8]
	const IODRV_Pin_t * p_pin = IODRV_GetPinInfo(2u);
 800980e:	2002      	movs	r0, #2
 8009810:	f005 fd20 	bl	800f254 <IODRV_GetPinInfo>
 8009814:	0003      	movs	r3, r0
 8009816:	607b      	str	r3, [r7, #4]
	const ChargerStatus_T lastChargerStatus = m_chargerStatus;
 8009818:	1cfb      	adds	r3, r7, #3
 800981a:	4a49      	ldr	r2, [pc, #292]	; (8009940 <CHARGER_Task+0x14c>)
 800981c:	7812      	ldrb	r2, [r2, #0]
 800981e:	701a      	strb	r2, [r3, #0]

	uint8_t tempReg;


	if (p_pin->lastPosPulseWidthTimeMs > 200u)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	2bc8      	cmp	r3, #200	; 0xc8
 8009826:	d90c      	bls.n	8009842 <CHARGER_Task+0x4e>
	{
		IORDV_ClearPinEdges(2u);
 8009828:	2002      	movs	r0, #2
 800982a:	f005 fd2d 	bl	800f288 <IORDV_ClearPinEdges>

		//m_chargingConfig ^= CHARGING_CONFIG_CHARGE_EN_bm;
		m_chargerInputsConfig ^= CHGR_INPUTS_CONFIG_ENABLE_NOBATT_bm;
 800982e:	4b45      	ldr	r3, [pc, #276]	; (8009944 <CHARGER_Task+0x150>)
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2204      	movs	r2, #4
 8009834:	4053      	eors	r3, r2
 8009836:	b2da      	uxtb	r2, r3
 8009838:	4b42      	ldr	r3, [pc, #264]	; (8009944 <CHARGER_Task+0x150>)
 800983a:	701a      	strb	r2, [r3, #0]

		m_chargerNeedPoll = true;
 800983c:	4b42      	ldr	r3, [pc, #264]	; (8009948 <CHARGER_Task+0x154>)
 800983e:	2201      	movs	r2, #1
 8009840:	701a      	strb	r2, [r3, #0]
	}


	if (MS_TIMEREF_TIMEOUT(m_lastWDTResetTimeMs, sysTime, CHARGER_WDT_RESET_PERIOD_MS))
 8009842:	4b42      	ldr	r3, [pc, #264]	; (800994c <CHARGER_Task+0x158>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	1ad2      	subs	r2, r2, r3
 800984a:	23fa      	movs	r3, #250	; 0xfa
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	429a      	cmp	r2, r3
 8009850:	d303      	bcc.n	800985a <CHARGER_Task+0x66>
	{
		// Time to give the dog a poke?
		CHARGER_KickDeviceWatchdog(sysTime);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	0018      	movs	r0, r3
 8009856:	f000 fb49 	bl	8009eec <CHARGER_KickDeviceWatchdog>

	// If there's an over voltage detection on the battery manual says to toggle HiZ bit.
	// This could occur because of battery insertion or power source insertion
	// Also check that the battery info hasn't been updated
	// Also make sure there is a battery connected!
	if ( (batteryStatus != BAT_STATUS_NOT_PRESENT) &&
 800985a:	230f      	movs	r3, #15
 800985c:	18fb      	adds	r3, r7, r3
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	2b03      	cmp	r3, #3
 8009862:	d02a      	beq.n	80098ba <CHARGER_Task+0xc6>
			( (CHGR_BS_BATSTAT_OVP == (m_registersIn[CHG_REG_BATTERY_STATUS] & CHGR_BS_BATSTAT_Msk)) ||
 8009864:	4b3a      	ldr	r3, [pc, #232]	; (8009950 <CHARGER_Task+0x15c>)
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	001a      	movs	r2, r3
 800986a:	2306      	movs	r3, #6
 800986c:	4013      	ands	r3, r2
	if ( (batteryStatus != BAT_STATUS_NOT_PRESENT) &&
 800986e:	2b02      	cmp	r3, #2
 8009870:	d003      	beq.n	800987a <CHARGER_Task+0x86>
			( (CHGR_BS_BATSTAT_OVP == (m_registersIn[CHG_REG_BATTERY_STATUS] & CHGR_BS_BATSTAT_Msk)) ||
 8009872:	4b38      	ldr	r3, [pc, #224]	; (8009954 <CHARGER_Task+0x160>)
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01f      	beq.n	80098ba <CHARGER_Task+0xc6>
					m_updateBatteryProfile ) )
	{
		// Clear the battery update flag
		m_updateBatteryProfile = false;
 800987a:	4b36      	ldr	r3, [pc, #216]	; (8009954 <CHARGER_Task+0x160>)
 800987c:	2200      	movs	r2, #0
 800987e:	701a      	strb	r2, [r3, #0]

		// Get previously written setting (ignore anything new for now)
		tempReg = (m_registersIn[CHG_REG_CONTROL] & m_registersWriteMask[CHG_REG_CONTROL]);
 8009880:	4b33      	ldr	r3, [pc, #204]	; (8009950 <CHARGER_Task+0x15c>)
 8009882:	789a      	ldrb	r2, [r3, #2]
 8009884:	4b34      	ldr	r3, [pc, #208]	; (8009958 <CHARGER_Task+0x164>)
 8009886:	7899      	ldrb	r1, [r3, #2]
 8009888:	1cbb      	adds	r3, r7, #2
 800988a:	400a      	ands	r2, r1
 800988c:	701a      	strb	r2, [r3, #0]

		// Set high-z mode to ensure safe setting of battery regulation voltage
		tempReg |= CHGR_CTRL_HZ_MODE_bm;
 800988e:	1cbb      	adds	r3, r7, #2
 8009890:	1cba      	adds	r2, r7, #2
 8009892:	7812      	ldrb	r2, [r2, #0]
 8009894:	2101      	movs	r1, #1
 8009896:	430a      	orrs	r2, r1
 8009898:	701a      	strb	r2, [r3, #0]
		CHARGER_UpdateDeviceRegister(CHG_REG_CONTROL, tempReg, m_registersWriteMask[CHG_REG_CONTROL]);
 800989a:	4b2f      	ldr	r3, [pc, #188]	; (8009958 <CHARGER_Task+0x164>)
 800989c:	789a      	ldrb	r2, [r3, #2]
 800989e:	1cbb      	adds	r3, r7, #2
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	0019      	movs	r1, r3
 80098a4:	2002      	movs	r0, #2
 80098a6:	f000 fac1 	bl	8009e2c <CHARGER_UpdateDeviceRegister>

		// Read the value back or updating regulation voltage won't know it's in high-z mode
		CHARGER_UpdateLocalRegister(CHG_REG_CONTROL);
 80098aa:	2002      	movs	r0, #2
 80098ac:	f000 f9fc 	bl	8009ca8 <CHARGER_UpdateLocalRegister>

		// Set the batvreg value
		CHARGER_UpdateRegulationVoltage();
 80098b0:	f000 fc5e 	bl	800a170 <CHARGER_UpdateRegulationVoltage>

		// High z will be changed back when the registers are updated
		m_chargerNeedPoll = true;
 80098b4:	4b24      	ldr	r3, [pc, #144]	; (8009948 <CHARGER_Task+0x154>)
 80098b6:	2201      	movs	r2, #1
 80098b8:	701a      	strb	r2, [r3, #0]
	}


	if (true == m_chargerNeedPoll)
 80098ba:	4b23      	ldr	r3, [pc, #140]	; (8009948 <CHARGER_Task+0x154>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d006      	beq.n	80098d0 <CHARGER_Task+0xdc>
	{
		CHARGER_UpdateSettings();
 80098c2:	f000 fd89 	bl	800a3d8 <CHARGER_UpdateSettings>

		// Ensure the registers get updated
		MS_TIMEREF_INIT(m_lastRegReadTimeMs, sysTime - CHG_READ_PERIOD_MS);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	3b5a      	subs	r3, #90	; 0x5a
 80098ca:	001a      	movs	r2, r3
 80098cc:	4b23      	ldr	r3, [pc, #140]	; (800995c <CHARGER_Task+0x168>)
 80098ce:	601a      	str	r2, [r3, #0]
	}


	// Periodically read register states from charger
	if (MS_TIME_COUNT(m_lastRegReadTimeMs) >= CHG_READ_PERIOD_MS || true == m_interrupt)
 80098d0:	f7f9 fbfe 	bl	80030d0 <HAL_GetTick>
 80098d4:	0002      	movs	r2, r0
 80098d6:	4b21      	ldr	r3, [pc, #132]	; (800995c <CHARGER_Task+0x168>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	2b59      	cmp	r3, #89	; 0x59
 80098de:	d803      	bhi.n	80098e8 <CHARGER_Task+0xf4>
 80098e0:	4b1f      	ldr	r3, [pc, #124]	; (8009960 <CHARGER_Task+0x16c>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d027      	beq.n	8009938 <CHARGER_Task+0x144>
	{
		m_interrupt = false;
 80098e8:	4b1d      	ldr	r3, [pc, #116]	; (8009960 <CHARGER_Task+0x16c>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]

		if (CHARGER_UpdateAllLocalRegisters())
 80098ee:	f000 fa5f 	bl	8009db0 <CHARGER_UpdateAllLocalRegisters>
 80098f2:	1e03      	subs	r3, r0, #0
 80098f4:	d00d      	beq.n	8009912 <CHARGER_Task+0x11e>
		{
			m_chargerStatus = (m_registersIn[CHG_REG_SUPPLY_STATUS] >> CHGR_SC_STAT_Pos) & 0x07u;
 80098f6:	4b16      	ldr	r3, [pc, #88]	; (8009950 <CHARGER_Task+0x15c>)
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	091b      	lsrs	r3, r3, #4
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2207      	movs	r2, #7
 8009900:	4013      	ands	r3, r2
 8009902:	b2da      	uxtb	r2, r3
 8009904:	4b0e      	ldr	r3, [pc, #56]	; (8009940 <CHARGER_Task+0x14c>)
 8009906:	701a      	strb	r2, [r3, #0]

			MS_TIME_COUNTER_INIT(m_lastRegReadTimeMs);
 8009908:	f7f9 fbe2 	bl	80030d0 <HAL_GetTick>
 800990c:	0002      	movs	r2, r0
 800990e:	4b13      	ldr	r3, [pc, #76]	; (800995c <CHARGER_Task+0x168>)
 8009910:	601a      	str	r2, [r3, #0]
		}

		m_chargerNeedPoll = CHARGER_CheckForPoll() || (lastChargerStatus != m_chargerStatus);
 8009912:	f000 fd79 	bl	800a408 <CHARGER_CheckForPoll>
 8009916:	1e03      	subs	r3, r0, #0
 8009918:	d105      	bne.n	8009926 <CHARGER_Task+0x132>
 800991a:	4b09      	ldr	r3, [pc, #36]	; (8009940 <CHARGER_Task+0x14c>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	1cfa      	adds	r2, r7, #3
 8009920:	7812      	ldrb	r2, [r2, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d001      	beq.n	800992a <CHARGER_Task+0x136>
 8009926:	2301      	movs	r3, #1
 8009928:	e000      	b.n	800992c <CHARGER_Task+0x138>
 800992a:	2300      	movs	r3, #0
 800992c:	1c1a      	adds	r2, r3, #0
 800992e:	2301      	movs	r3, #1
 8009930:	4013      	ands	r3, r2
 8009932:	b2da      	uxtb	r2, r3
 8009934:	4b04      	ldr	r3, [pc, #16]	; (8009948 <CHARGER_Task+0x154>)
 8009936:	701a      	strb	r2, [r3, #0]
	}
}
 8009938:	46c0      	nop			; (mov r8, r8)
 800993a:	46bd      	mov	sp, r7
 800993c:	b005      	add	sp, #20
 800993e:	bd90      	pop	{r4, r7, pc}
 8009940:	200000c0 	.word	0x200000c0
 8009944:	20001274 	.word	0x20001274
 8009948:	20001281 	.word	0x20001281
 800994c:	20001278 	.word	0x20001278
 8009950:	20001260 	.word	0x20001260
 8009954:	20001282 	.word	0x20001282
 8009958:	200000b8 	.word	0x200000b8
 800995c:	2000127c 	.word	0x2000127c
 8009960:	20001280 	.word	0x20001280

08009964 <CHARGER_GetRPi5vInputEnable>:
 * @retval	bool		false = RPi GPIO 5V not allowed as charge source
 * 						true = RPi GPIO 5V allowed as charge source
 */
// ****************************************************************************
bool CHARGER_GetRPi5vInputEnable()
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
	return (CHGR_BS_USBIN_ENABLED == (m_registersIn[CHG_REG_BATTERY_STATUS] & CHGR_BS_OTG_LOCK_bm));
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <CHARGER_GetRPi5vInputEnable+0x1c>)
 800996a:	785b      	ldrb	r3, [r3, #1]
 800996c:	001a      	movs	r2, r3
 800996e:	2308      	movs	r3, #8
 8009970:	4013      	ands	r3, r2
 8009972:	425a      	negs	r2, r3
 8009974:	4153      	adcs	r3, r2
 8009976:	b2db      	uxtb	r3, r3
}
 8009978:	0018      	movs	r0, r3
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	46c0      	nop			; (mov r8, r8)
 8009980:	20001260 	.word	0x20001260

08009984 <CHARGER_RPi5vInCurrentLimitStepUp>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void CHARGER_RPi5vInCurrentLimitStepUp(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
	if (m_rpi5VCurrentLimit < CHG_IUSB_LIMIT_1500MA)
 8009988:	4b06      	ldr	r3, [pc, #24]	; (80099a4 <CHARGER_RPi5vInCurrentLimitStepUp+0x20>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b04      	cmp	r3, #4
 800998e:	d805      	bhi.n	800999c <CHARGER_RPi5vInCurrentLimitStepUp+0x18>
	{
		m_rpi5VCurrentLimit++;
 8009990:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <CHARGER_RPi5vInCurrentLimitStepUp+0x20>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	3301      	adds	r3, #1
 8009996:	b2da      	uxtb	r2, r3
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <CHARGER_RPi5vInCurrentLimitStepUp+0x20>)
 800999a:	701a      	strb	r2, [r3, #0]
	}
}
 800999c:	46c0      	nop			; (mov r8, r8)
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	46c0      	nop			; (mov r8, r8)
 80099a4:	20001270 	.word	0x20001270

080099a8 <CHARGER_RPi5vInCurrentLimitStepDown>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void CHARGER_RPi5vInCurrentLimitStepDown(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
	if (m_rpi5VCurrentLimit > CHG_IUSB_LIMIT_100MA)
 80099ac:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <CHARGER_RPi5vInCurrentLimitStepDown+0x20>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <CHARGER_RPi5vInCurrentLimitStepDown+0x18>
	{
		m_rpi5VCurrentLimit --;
 80099b4:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <CHARGER_RPi5vInCurrentLimitStepDown+0x20>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	4b02      	ldr	r3, [pc, #8]	; (80099c8 <CHARGER_RPi5vInCurrentLimitStepDown+0x20>)
 80099be:	701a      	strb	r2, [r3, #0]
	}
}
 80099c0:	46c0      	nop			; (mov r8, r8)
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	46c0      	nop			; (mov r8, r8)
 80099c8:	20001270 	.word	0x20001270

080099cc <CHARGER_SetInputsConfig>:
 * @param	config		new input source configuration
 * @retval	none
 */
// ****************************************************************************
void CHARGER_SetInputsConfig(const uint8_t config)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	0002      	movs	r2, r0
 80099d4:	1dfb      	adds	r3, r7, #7
 80099d6:	701a      	strb	r2, [r3, #0]
	m_chargerInputsConfig = (config & ~(CHRG_CONFIG_INPUTS_WRITE_NV_bm));
 80099d8:	1dfb      	adds	r3, r7, #7
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	227f      	movs	r2, #127	; 0x7f
 80099de:	4013      	ands	r3, r2
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <CHARGER_SetInputsConfig+0x40>)
 80099e4:	701a      	strb	r2, [r3, #0]

	if (0u != (config & CHRG_CONFIG_INPUTS_WRITE_NV_bm))
 80099e6:	1dfb      	adds	r3, r7, #7
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	b25b      	sxtb	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	da05      	bge.n	80099fc <CHARGER_SetInputsConfig+0x30>
	{
		NV_WriteVariable_U8(CHARGER_INPUTS_CONFIG_NV_ADDR, config);
 80099f0:	1dfb      	adds	r3, r7, #7
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	0019      	movs	r1, r3
 80099f6:	2022      	movs	r0, #34	; 0x22
 80099f8:	f007 f87c 	bl	8010af4 <NV_WriteVariable_U8>
	}

	m_chargerNeedPoll = true;
 80099fc:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <CHARGER_SetInputsConfig+0x44>)
 80099fe:	2201      	movs	r2, #1
 8009a00:	701a      	strb	r2, [r3, #0]
}
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	46bd      	mov	sp, r7
 8009a06:	b002      	add	sp, #8
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	46c0      	nop			; (mov r8, r8)
 8009a0c:	20001274 	.word	0x20001274
 8009a10:	20001281 	.word	0x20001281

08009a14 <CHARGER_GetInputsConfig>:
 * @param	none
 * @retval	uint8_t		input source configuration either current or stored
 */
// ****************************************************************************
uint8_t CHARGER_GetInputsConfig(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
	uint8_t tempU8 = m_chargerInputsConfig;
 8009a1a:	4b0f      	ldr	r3, [pc, #60]	; (8009a58 <CHARGER_GetInputsConfig+0x44>)
 8009a1c:	781a      	ldrb	r2, [r3, #0]
 8009a1e:	1dfb      	adds	r3, r7, #7
 8009a20:	701a      	strb	r2, [r3, #0]

	if (NV_ReadVariable_U8(CHARGER_INPUTS_CONFIG_NV_ADDR, &tempU8))
 8009a22:	1dfb      	adds	r3, r7, #7
 8009a24:	0019      	movs	r1, r3
 8009a26:	2022      	movs	r0, #34	; 0x22
 8009a28:	f007 f888 	bl	8010b3c <NV_ReadVariable_U8>
 8009a2c:	1e03      	subs	r3, r0, #0
 8009a2e:	d00d      	beq.n	8009a4c <CHARGER_GetInputsConfig+0x38>
	{
		if ((m_chargerInputsConfig & 0x7Fu) != (tempU8 & 0x7Fu))
 8009a30:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <CHARGER_GetInputsConfig+0x44>)
 8009a32:	781a      	ldrb	r2, [r3, #0]
 8009a34:	1dfb      	adds	r3, r7, #7
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	4053      	eors	r3, r2
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	001a      	movs	r2, r3
 8009a3e:	237f      	movs	r3, #127	; 0x7f
 8009a40:	4013      	ands	r3, r2
 8009a42:	d003      	beq.n	8009a4c <CHARGER_GetInputsConfig+0x38>
		{
			tempU8 = m_chargerInputsConfig;
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <CHARGER_GetInputsConfig+0x44>)
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	1dfb      	adds	r3, r7, #7
 8009a4a:	701a      	strb	r2, [r3, #0]
		}
	}

	return tempU8;
 8009a4c:	1dfb      	adds	r3, r7, #7
 8009a4e:	781b      	ldrb	r3, [r3, #0]
}
 8009a50:	0018      	movs	r0, r3
 8009a52:	46bd      	mov	sp, r7
 8009a54:	b002      	add	sp, #8
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20001274 	.word	0x20001274

08009a5c <CHARGER_SetChargeEnableConfig>:
 * @param	config		new charge configuration
 * @retval	none
 */
// ****************************************************************************
void CHARGER_SetChargeEnableConfig(const uint8_t config)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	0002      	movs	r2, r0
 8009a64:	1dfb      	adds	r3, r7, #7
 8009a66:	701a      	strb	r2, [r3, #0]
	m_chargingConfig = config;
 8009a68:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <CHARGER_SetChargeEnableConfig+0x38>)
 8009a6a:	1dfa      	adds	r2, r7, #7
 8009a6c:	7812      	ldrb	r2, [r2, #0]
 8009a6e:	701a      	strb	r2, [r3, #0]

	// See if caller wants to make this permanent
	if (0u != (config & 0x80u))
 8009a70:	1dfb      	adds	r3, r7, #7
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	b25b      	sxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	da05      	bge.n	8009a86 <CHARGER_SetChargeEnableConfig+0x2a>
	{
		NV_WriteVariable_U8(CHARGING_CONFIG_NV_ADDR, config);
 8009a7a:	1dfb      	adds	r3, r7, #7
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	0019      	movs	r1, r3
 8009a80:	2021      	movs	r0, #33	; 0x21
 8009a82:	f007 f837 	bl	8010af4 <NV_WriteVariable_U8>
	}

	m_chargerNeedPoll = true;
 8009a86:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <CHARGER_SetChargeEnableConfig+0x3c>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	701a      	strb	r2, [r3, #0]
}
 8009a8c:	46c0      	nop			; (mov r8, r8)
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	b002      	add	sp, #8
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	20001273 	.word	0x20001273
 8009a98:	20001281 	.word	0x20001281

08009a9c <CHARGER_GetChargeEnableConfig>:
 * @param	none
 * @retval	uint8_t		charge configuration either current or stored
 */
// ****************************************************************************
uint8_t CHARGER_GetChargeEnableConfig(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
	uint8_t tempU8 = m_chargingConfig;
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <CHARGER_GetChargeEnableConfig+0x44>)
 8009aa4:	781a      	ldrb	r2, [r3, #0]
 8009aa6:	1dfb      	adds	r3, r7, #7
 8009aa8:	701a      	strb	r2, [r3, #0]

	if (NV_ReadVariable_U8(CHARGING_CONFIG_NV_ADDR, &tempU8))
 8009aaa:	1dfb      	adds	r3, r7, #7
 8009aac:	0019      	movs	r1, r3
 8009aae:	2021      	movs	r0, #33	; 0x21
 8009ab0:	f007 f844 	bl	8010b3c <NV_ReadVariable_U8>
 8009ab4:	1e03      	subs	r3, r0, #0
 8009ab6:	d00d      	beq.n	8009ad4 <CHARGER_GetChargeEnableConfig+0x38>
	{
		if ( (tempU8 & 0x7Fu) != (m_chargingConfig & 0x7Fu) )
 8009ab8:	1dfb      	adds	r3, r7, #7
 8009aba:	781a      	ldrb	r2, [r3, #0]
 8009abc:	4b08      	ldr	r3, [pc, #32]	; (8009ae0 <CHARGER_GetChargeEnableConfig+0x44>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	4053      	eors	r3, r2
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	001a      	movs	r2, r3
 8009ac6:	237f      	movs	r3, #127	; 0x7f
 8009ac8:	4013      	ands	r3, r2
 8009aca:	d003      	beq.n	8009ad4 <CHARGER_GetChargeEnableConfig+0x38>
		{
			tempU8 = m_chargingConfig;
 8009acc:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <CHARGER_GetChargeEnableConfig+0x44>)
 8009ace:	781a      	ldrb	r2, [r3, #0]
 8009ad0:	1dfb      	adds	r3, r7, #7
 8009ad2:	701a      	strb	r2, [r3, #0]
		}
	}

	return tempU8;
 8009ad4:	1dfb      	adds	r3, r7, #7
 8009ad6:	781b      	ldrb	r3, [r3, #0]
}
 8009ad8:	0018      	movs	r0, r3
 8009ada:	46bd      	mov	sp, r7
 8009adc:	b002      	add	sp, #8
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20001273 	.word	0x20001273

08009ae4 <CHARGER_SetInterrupt>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void CHARGER_SetInterrupt(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
	// Flag went up
	m_interrupt = true;
 8009ae8:	4b02      	ldr	r3, [pc, #8]	; (8009af4 <CHARGER_SetInterrupt+0x10>)
 8009aea:	2201      	movs	r2, #1
 8009aec:	701a      	strb	r2, [r3, #0]
}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20001280 	.word	0x20001280

08009af8 <CHARGER_RefreshSettings>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void CHARGER_RefreshSettings(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
	m_chargerNeedPoll = true;
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <CHARGER_RefreshSettings+0x10>)
 8009afe:	2201      	movs	r2, #1
 8009b00:	701a      	strb	r2, [r3, #0]
}
 8009b02:	46c0      	nop			; (mov r8, r8)
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20001281 	.word	0x20001281

08009b0c <CHARGER_UpdateBatteryProfile>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void CHARGER_UpdateBatteryProfile(void)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	af00      	add	r7, sp, #0
	m_updateBatteryProfile = true;
 8009b10:	4b04      	ldr	r3, [pc, #16]	; (8009b24 <CHARGER_UpdateBatteryProfile+0x18>)
 8009b12:	2201      	movs	r2, #1
 8009b14:	701a      	strb	r2, [r3, #0]
	m_chargerNeedPoll = true;
 8009b16:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <CHARGER_UpdateBatteryProfile+0x1c>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	701a      	strb	r2, [r3, #0]
}
 8009b1c:	46c0      	nop			; (mov r8, r8)
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	46c0      	nop			; (mov r8, r8)
 8009b24:	20001282 	.word	0x20001282
 8009b28:	20001281 	.word	0x20001281

08009b2c <CHARGER_RequirePoll>:
 * @retval	bool		false = charging ic task does not need to run
 * 						true = charging ic task needs to run
 */
// ****************************************************************************
bool CHARGER_RequirePoll(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
	return true == m_chargerNeedPoll || true == m_interrupt;
 8009b30:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <CHARGER_RequirePoll+0x28>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d103      	bne.n	8009b40 <CHARGER_RequirePoll+0x14>
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <CHARGER_RequirePoll+0x2c>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <CHARGER_RequirePoll+0x18>
 8009b40:	2301      	movs	r3, #1
 8009b42:	e000      	b.n	8009b46 <CHARGER_RequirePoll+0x1a>
 8009b44:	2300      	movs	r3, #0
 8009b46:	1c1a      	adds	r2, r3, #0
 8009b48:	2301      	movs	r3, #1
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	b2db      	uxtb	r3, r3
}
 8009b4e:	0018      	movs	r0, r3
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20001281 	.word	0x20001281
 8009b58:	20001280 	.word	0x20001280

08009b5c <CHARGER_GetStatus>:
 * @param	none
 * @retval	ChargerStatus_T		status of charging IC
 */
// ****************************************************************************
ChargerStatus_T CHARGER_GetStatus(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
	return m_chargerStatus;
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <CHARGER_GetStatus+0x10>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
}
 8009b64:	0018      	movs	r0, r3
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	46c0      	nop			; (mov r8, r8)
 8009b6c:	200000c0 	.word	0x200000c0

08009b70 <CHARGER_GetNoBatteryTurnOnEnable>:
 * @retval	bool	false = no battery turn on disabled in configuration
 * 					true = no battery turn on enabled in configuration
 */
// ****************************************************************************
bool CHARGER_GetNoBatteryTurnOnEnable(void)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
	return CHRG_CONFIG_INPUTS_NOBATT_ENABLED;
 8009b74:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <CHARGER_GetNoBatteryTurnOnEnable+0x1c>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	001a      	movs	r2, r3
 8009b7a:	2304      	movs	r3, #4
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	1e5a      	subs	r2, r3, #1
 8009b80:	4193      	sbcs	r3, r2
 8009b82:	b2db      	uxtb	r3, r3
}
 8009b84:	0018      	movs	r0, r3
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	46c0      	nop			; (mov r8, r8)
 8009b8c:	20001274 	.word	0x20001274

08009b90 <CHARGER_IsChargeSourceAvailable>:
 * @retval	bool	false = charging source not present
 * 					true = charging source present
 */
// ****************************************************************************
bool CHARGER_IsChargeSourceAvailable(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
	const uint8_t instat = (m_registersIn[CHG_REG_SUPPLY_STATUS] & CHGR_SC_STAT_Msk);
 8009b96:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <CHARGER_IsChargeSourceAvailable+0x38>)
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	1dfb      	adds	r3, r7, #7
 8009b9c:	2170      	movs	r1, #112	; 0x70
 8009b9e:	400a      	ands	r2, r1
 8009ba0:	701a      	strb	r2, [r3, #0]

	return (instat > CHGR_SC_STAT_NO_SOURCE) && (instat <= CHGR_SC_STAT_CHARGE_DONE);
 8009ba2:	1dfb      	adds	r3, r7, #7
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d005      	beq.n	8009bb6 <CHARGER_IsChargeSourceAvailable+0x26>
 8009baa:	1dfb      	adds	r3, r7, #7
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b50      	cmp	r3, #80	; 0x50
 8009bb0:	d801      	bhi.n	8009bb6 <CHARGER_IsChargeSourceAvailable+0x26>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <CHARGER_IsChargeSourceAvailable+0x28>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	1c1a      	adds	r2, r3, #0
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	b2db      	uxtb	r3, r3
}
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	b002      	add	sp, #8
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20001260 	.word	0x20001260

08009bcc <CHARGER_GetBatteryStatus>:
 * @param	none
 * @retval	CHARGER_BatteryStatus_t		battery status detected by the charging IC
 */
// ****************************************************************************
CHARGER_BatteryStatus_t CHARGER_GetBatteryStatus(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
	return ((m_registersIn[CHG_REG_BATTERY_STATUS] >> CHGR_BS_BATSTAT_Pos) & 0x3u);
 8009bd0:	4b04      	ldr	r3, [pc, #16]	; (8009be4 <CHARGER_GetBatteryStatus+0x18>)
 8009bd2:	785b      	ldrb	r3, [r3, #1]
 8009bd4:	085b      	lsrs	r3, r3, #1
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2203      	movs	r2, #3
 8009bda:	4013      	ands	r3, r2
 8009bdc:	b2db      	uxtb	r3, r3
}
 8009bde:	0018      	movs	r0, r3
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20001260 	.word	0x20001260

08009be8 <CHARGER_HasTempSensorFault>:
 * @retval	bool		false = no temperature related fault present
 * 						true = temperature related fault present
 */
// ****************************************************************************
bool CHARGER_HasTempSensorFault(void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
	return (m_registersIn[CHG_REG_SAFETY_NTC] & CHGR_ST_NTC_FAULT_Msk) != CHGR_ST_NTC_TS_FAULT_NONE;
 8009bec:	4b05      	ldr	r3, [pc, #20]	; (8009c04 <CHARGER_HasTempSensorFault+0x1c>)
 8009bee:	79db      	ldrb	r3, [r3, #7]
 8009bf0:	001a      	movs	r2, r3
 8009bf2:	2306      	movs	r3, #6
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	1e5a      	subs	r2, r3, #1
 8009bf8:	4193      	sbcs	r3, r2
 8009bfa:	b2db      	uxtb	r3, r3
}
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	20001260 	.word	0x20001260

08009c08 <CHARGER_GetTempFault>:
 * @param	none
 * @retval	uint8_t		fault status code of temperature fault
 */
// ****************************************************************************
uint8_t CHARGER_GetTempFault(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
	return (m_registersIn[CHG_REG_SAFETY_NTC] >> CHGR_ST_NTC_FAULT_Pos);
 8009c0c:	4b03      	ldr	r3, [pc, #12]	; (8009c1c <CHARGER_GetTempFault+0x14>)
 8009c0e:	79db      	ldrb	r3, [r3, #7]
 8009c10:	085b      	lsrs	r3, r3, #1
 8009c12:	b2db      	uxtb	r3, r3
}
 8009c14:	0018      	movs	r0, r3
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	46c0      	nop			; (mov r8, r8)
 8009c1c:	20001260 	.word	0x20001260

08009c20 <CHARGER_GetInputStatus>:
 * @param	inputChannel			index of the input channel 0 = VIn, 1 = USB
 * @retval	CHARGER_InputStatus_t	status of indexed input channel
 */
// ****************************************************************************
CHARGER_InputStatus_t CHARGER_GetInputStatus(uint8_t inputChannel)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	0002      	movs	r2, r0
 8009c28:	1dfb      	adds	r3, r7, #7
 8009c2a:	701a      	strb	r2, [r3, #0]
	uint8_t channelPos;

	if (inputChannel < CHARGER_INPUT_CHANNELS)
 8009c2c:	1dfb      	adds	r3, r7, #7
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d815      	bhi.n	8009c60 <CHARGER_GetInputStatus+0x40>
	{
		channelPos = (CHARGER_INPUT_RPI == inputChannel) ? CHGR_BS_USBSTAT_Pos : CHGR_BS_INSTAT_Pos;
 8009c34:	1dfb      	adds	r3, r7, #7
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d101      	bne.n	8009c40 <CHARGER_GetInputStatus+0x20>
 8009c3c:	2204      	movs	r2, #4
 8009c3e:	e000      	b.n	8009c42 <CHARGER_GetInputStatus+0x22>
 8009c40:	2206      	movs	r2, #6
 8009c42:	210f      	movs	r1, #15
 8009c44:	187b      	adds	r3, r7, r1
 8009c46:	701a      	strb	r2, [r3, #0]

		return (m_registersIn[CHG_REG_BATTERY_STATUS] >> channelPos) & 0x03u;
 8009c48:	4b08      	ldr	r3, [pc, #32]	; (8009c6c <CHARGER_GetInputStatus+0x4c>)
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	001a      	movs	r2, r3
 8009c4e:	187b      	adds	r3, r7, r1
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	411a      	asrs	r2, r3
 8009c54:	0013      	movs	r3, r2
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2203      	movs	r2, #3
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	e000      	b.n	8009c62 <CHARGER_GetInputStatus+0x42>
	}

	return CHARGER_INPUT_UVP;
 8009c60:	2303      	movs	r3, #3
}
 8009c62:	0018      	movs	r0, r3
 8009c64:	46bd      	mov	sp, r7
 8009c66:	b004      	add	sp, #16
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	20001260 	.word	0x20001260

08009c70 <CHARGER_IsDPMActive>:
 * @retval	bool			true = DPM active
 * 							false = DPM not active
 */
// ****************************************************************************
bool CHARGER_IsDPMActive(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
	return (0u != (m_registersIn[CHG_REG_DPPM_STATUS] & CHGR_VDPPM_DPM_ACTIVE));
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <CHARGER_IsDPMActive+0x1c>)
 8009c76:	799b      	ldrb	r3, [r3, #6]
 8009c78:	001a      	movs	r2, r3
 8009c7a:	2340      	movs	r3, #64	; 0x40
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	1e5a      	subs	r2, r3, #1
 8009c80:	4193      	sbcs	r3, r2
 8009c82:	b2db      	uxtb	r3, r3
}
 8009c84:	0018      	movs	r0, r3
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	46c0      	nop			; (mov r8, r8)
 8009c8c:	20001260 	.word	0x20001260

08009c90 <CHARGER_GetFaultStatus>:
 * @param	none
 * @retval	uint8_t			fault status of charging IC
 */
// ****************************************************************************
uint8_t CHARGER_GetFaultStatus(void)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	af00      	add	r7, sp, #0
	return (m_registersIn[CHG_REG_SUPPLY_STATUS] >> CHGR_SC_FLT_Pos) & 0x7u;
 8009c94:	4b03      	ldr	r3, [pc, #12]	; (8009ca4 <CHARGER_GetFaultStatus+0x14>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	2207      	movs	r2, #7
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	b2db      	uxtb	r3, r3
}
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20001260 	.word	0x20001260

08009ca8 <CHARGER_UpdateLocalRegister>:
 * @retval	bool			false = read transaction failed
 * 							true = read transaction succeeded
 */
// ****************************************************************************
static bool CHARGER_UpdateLocalRegister(const uint8_t regAddress)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	0002      	movs	r2, r0
 8009cb0:	1dfb      	adds	r3, r7, #7
 8009cb2:	701a      	strb	r2, [r3, #0]
	uint8_t tempReg;

	if (regAddress > CHARGER_LAST_REGISTER)
 8009cb4:	1dfb      	adds	r3, r7, #7
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b07      	cmp	r3, #7
 8009cba:	d901      	bls.n	8009cc0 <CHARGER_UpdateLocalRegister+0x18>
	{
		return false;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e031      	b.n	8009d24 <CHARGER_UpdateLocalRegister+0x7c>
	}

	if (false == CHARGER_ReadDeviceRegister(regAddress))
 8009cc0:	1dfb      	adds	r3, r7, #7
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	f000 f835 	bl	8009d34 <CHARGER_ReadDeviceRegister>
 8009cca:	0003      	movs	r3, r0
 8009ccc:	001a      	movs	r2, r3
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4053      	eors	r3, r2
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <CHARGER_UpdateLocalRegister+0x34>
	{
		return false;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e023      	b.n	8009d24 <CHARGER_UpdateLocalRegister+0x7c>
	}

	tempReg = m_i2cReadRegResult;
 8009cdc:	230f      	movs	r3, #15
 8009cde:	18fb      	adds	r3, r7, r3
 8009ce0:	4a12      	ldr	r2, [pc, #72]	; (8009d2c <CHARGER_UpdateLocalRegister+0x84>)
 8009ce2:	7812      	ldrb	r2, [r2, #0]
 8009ce4:	701a      	strb	r2, [r3, #0]

	if (false == CHARGER_ReadDeviceRegister(regAddress))
 8009ce6:	1dfb      	adds	r3, r7, #7
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	0018      	movs	r0, r3
 8009cec:	f000 f822 	bl	8009d34 <CHARGER_ReadDeviceRegister>
 8009cf0:	0003      	movs	r3, r0
 8009cf2:	001a      	movs	r2, r3
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	4053      	eors	r3, r2
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <CHARGER_UpdateLocalRegister+0x5a>
	{
		return false;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e010      	b.n	8009d24 <CHARGER_UpdateLocalRegister+0x7c>
	}

	if (m_i2cReadRegResult != tempReg)
 8009d02:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <CHARGER_UpdateLocalRegister+0x84>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	220f      	movs	r2, #15
 8009d08:	18ba      	adds	r2, r7, r2
 8009d0a:	7812      	ldrb	r2, [r2, #0]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d001      	beq.n	8009d14 <CHARGER_UpdateLocalRegister+0x6c>
	{
		return false;
 8009d10:	2300      	movs	r3, #0
 8009d12:	e007      	b.n	8009d24 <CHARGER_UpdateLocalRegister+0x7c>
	}

	m_registersIn[regAddress] = tempReg;
 8009d14:	1dfb      	adds	r3, r7, #7
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	4a05      	ldr	r2, [pc, #20]	; (8009d30 <CHARGER_UpdateLocalRegister+0x88>)
 8009d1a:	210f      	movs	r1, #15
 8009d1c:	1879      	adds	r1, r7, r1
 8009d1e:	7809      	ldrb	r1, [r1, #0]
 8009d20:	54d1      	strb	r1, [r2, r3]

	return true;
 8009d22:	2301      	movs	r3, #1
}
 8009d24:	0018      	movs	r0, r3
 8009d26:	46bd      	mov	sp, r7
 8009d28:	b004      	add	sp, #16
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20001272 	.word	0x20001272
 8009d30:	20001260 	.word	0x20001260

08009d34 <CHARGER_ReadDeviceRegister>:
 * @retval	bool			false = read transaction failed
 * 							true = read transaction succeeded
 */
// ****************************************************************************
static bool CHARGER_ReadDeviceRegister(const uint8_t regAddress)
{
 8009d34:	b5b0      	push	{r4, r5, r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af04      	add	r7, sp, #16
 8009d3a:	0002      	movs	r2, r0
 8009d3c:	1dfb      	adds	r3, r7, #7
 8009d3e:	701a      	strb	r2, [r3, #0]
	const uint32_t sysTime = HAL_GetTick();
 8009d40:	f7f9 f9c6 	bl	80030d0 <HAL_GetTick>
 8009d44:	0003      	movs	r3, r0
 8009d46:	60fb      	str	r3, [r7, #12]
	bool transactGood;

	m_i2cSuccess = false;
 8009d48:	4b17      	ldr	r3, [pc, #92]	; (8009da8 <CHARGER_ReadDeviceRegister+0x74>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	701a      	strb	r2, [r3, #0]

	transactGood = I2CDRV_Transact(CHARGER_I2C_PORTNO, CHARGER_I2C_ADDR, &regAddress, 1u,
 8009d4e:	250b      	movs	r5, #11
 8009d50:	197c      	adds	r4, r7, r5
 8009d52:	1dfa      	adds	r2, r7, #7
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	9303      	str	r3, [sp, #12]
 8009d58:	23fa      	movs	r3, #250	; 0xfa
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	9302      	str	r3, [sp, #8]
 8009d5e:	4b13      	ldr	r3, [pc, #76]	; (8009dac <CHARGER_ReadDeviceRegister+0x78>)
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	2301      	movs	r3, #1
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	2301      	movs	r3, #1
 8009d68:	21d6      	movs	r1, #214	; 0xd6
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	f004 f9fa 	bl	800e164 <I2CDRV_Transact>
 8009d70:	0003      	movs	r3, r0
 8009d72:	7023      	strb	r3, [r4, #0]
						I2CDRV_TRANSACTION_RX, CHARGER_I2C_Callback,
						1000u, sysTime
						);

	if (false == transactGood)
 8009d74:	197b      	adds	r3, r7, r5
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	4053      	eors	r3, r2
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <CHARGER_ReadDeviceRegister+0x52>
	{
		return false;
 8009d82:	2300      	movs	r3, #0
 8009d84:	e00c      	b.n	8009da0 <CHARGER_ReadDeviceRegister+0x6c>
	}

	while(false == I2CDRV_IsReady(FUELGAUGE_I2C_PORTNO))
 8009d86:	46c0      	nop			; (mov r8, r8)
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f004 f9cb 	bl	800e124 <I2CDRV_IsReady>
 8009d8e:	0003      	movs	r3, r0
 8009d90:	001a      	movs	r2, r3
 8009d92:	2301      	movs	r3, #1
 8009d94:	4053      	eors	r3, r2
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1f5      	bne.n	8009d88 <CHARGER_ReadDeviceRegister+0x54>
	{
		// Wait for transfer
	}

	// m_i2cReadRegResult has the data!
	return m_i2cSuccess;
 8009d9c:	4b02      	ldr	r3, [pc, #8]	; (8009da8 <CHARGER_ReadDeviceRegister+0x74>)
 8009d9e:	781b      	ldrb	r3, [r3, #0]
}
 8009da0:	0018      	movs	r0, r3
 8009da2:	46bd      	mov	sp, r7
 8009da4:	b004      	add	sp, #16
 8009da6:	bdb0      	pop	{r4, r5, r7, pc}
 8009da8:	20001271 	.word	0x20001271
 8009dac:	080095e5 	.word	0x080095e5

08009db0 <CHARGER_UpdateAllLocalRegisters>:
 * @retval	bool		false = read transaction failed
 * 						true = read transaction succeeded
 */
// ****************************************************************************
static bool CHARGER_UpdateAllLocalRegisters(void)
{
 8009db0:	b590      	push	{r4, r7, lr}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af04      	add	r7, sp, #16
	const uint32_t sysTime = HAL_GetTick();
 8009db6:	f7f9 f98b 	bl	80030d0 <HAL_GetTick>
 8009dba:	0003      	movs	r3, r0
 8009dbc:	607b      	str	r3, [r7, #4]
	bool transactGood;
	uint8_t regAddress = 0u;
 8009dbe:	1cbb      	adds	r3, r7, #2
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	701a      	strb	r2, [r3, #0]

	m_i2cSuccess = false;
 8009dc4:	4b17      	ldr	r3, [pc, #92]	; (8009e24 <CHARGER_UpdateAllLocalRegisters+0x74>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]

	transactGood = I2CDRV_Transact(CHARGER_I2C_PORTNO, CHARGER_I2C_ADDR, &regAddress, CHARGER_REGISTER_COUNT,
 8009dca:	1cfc      	adds	r4, r7, #3
 8009dcc:	1cba      	adds	r2, r7, #2
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	23fa      	movs	r3, #250	; 0xfa
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	9302      	str	r3, [sp, #8]
 8009dd8:	4b13      	ldr	r3, [pc, #76]	; (8009e28 <CHARGER_UpdateAllLocalRegisters+0x78>)
 8009dda:	9301      	str	r3, [sp, #4]
 8009ddc:	2301      	movs	r3, #1
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2308      	movs	r3, #8
 8009de2:	21d6      	movs	r1, #214	; 0xd6
 8009de4:	2001      	movs	r0, #1
 8009de6:	f004 f9bd 	bl	800e164 <I2CDRV_Transact>
 8009dea:	0003      	movs	r3, r0
 8009dec:	7023      	strb	r3, [r4, #0]
						I2CDRV_TRANSACTION_RX, CHARGER_ReadAll_I2C_Callback,
						1000u, sysTime
						);

	if (false == transactGood)
 8009dee:	1cfb      	adds	r3, r7, #3
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	2201      	movs	r2, #1
 8009df4:	4053      	eors	r3, r2
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <CHARGER_UpdateAllLocalRegisters+0x50>
	{
		return false;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	e00c      	b.n	8009e1a <CHARGER_UpdateAllLocalRegisters+0x6a>
	}

	while(false == I2CDRV_IsReady(FUELGAUGE_I2C_PORTNO))
 8009e00:	46c0      	nop			; (mov r8, r8)
 8009e02:	2001      	movs	r0, #1
 8009e04:	f004 f98e 	bl	800e124 <I2CDRV_IsReady>
 8009e08:	0003      	movs	r3, r0
 8009e0a:	001a      	movs	r2, r3
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	4053      	eors	r3, r2
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1f5      	bne.n	8009e02 <CHARGER_UpdateAllLocalRegisters+0x52>
	{
		// Wait for transfer
	}

	// m_i2cReadRegResult has the data!
	return m_i2cSuccess;
 8009e16:	4b03      	ldr	r3, [pc, #12]	; (8009e24 <CHARGER_UpdateAllLocalRegisters+0x74>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
}
 8009e1a:	0018      	movs	r0, r3
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	b003      	add	sp, #12
 8009e20:	bd90      	pop	{r4, r7, pc}
 8009e22:	46c0      	nop			; (mov r8, r8)
 8009e24:	20001271 	.word	0x20001271
 8009e28:	0800962d 	.word	0x0800962d

08009e2c <CHARGER_UpdateDeviceRegister>:
 * @param	writeMask		mask for bits of interest (1 = compare)
 * @retval	none
 */
// ****************************************************************************
static bool CHARGER_UpdateDeviceRegister(const uint8_t regAddress, const uint8_t value, const uint8_t writeMask)
{
 8009e2c:	b5b0      	push	{r4, r5, r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af04      	add	r7, sp, #16
 8009e32:	0004      	movs	r4, r0
 8009e34:	0008      	movs	r0, r1
 8009e36:	0011      	movs	r1, r2
 8009e38:	1dfb      	adds	r3, r7, #7
 8009e3a:	1c22      	adds	r2, r4, #0
 8009e3c:	701a      	strb	r2, [r3, #0]
 8009e3e:	1dbb      	adds	r3, r7, #6
 8009e40:	1c02      	adds	r2, r0, #0
 8009e42:	701a      	strb	r2, [r3, #0]
 8009e44:	1d7b      	adds	r3, r7, #5
 8009e46:	1c0a      	adds	r2, r1, #0
 8009e48:	701a      	strb	r2, [r3, #0]
	const uint32_t sysTime = HAL_GetTick();
 8009e4a:	f7f9 f941 	bl	80030d0 <HAL_GetTick>
 8009e4e:	0003      	movs	r3, r0
 8009e50:	60fb      	str	r3, [r7, #12]
	uint8_t writeData[2u] = {regAddress, value};
 8009e52:	2108      	movs	r1, #8
 8009e54:	187b      	adds	r3, r7, r1
 8009e56:	1dfa      	adds	r2, r7, #7
 8009e58:	7812      	ldrb	r2, [r2, #0]
 8009e5a:	701a      	strb	r2, [r3, #0]
 8009e5c:	187b      	adds	r3, r7, r1
 8009e5e:	1dba      	adds	r2, r7, #6
 8009e60:	7812      	ldrb	r2, [r2, #0]
 8009e62:	705a      	strb	r2, [r3, #1]
	bool transactGood;

	// Check if the register actually needs an update
	if (value == (m_registersIn[regAddress] & writeMask))
 8009e64:	1dfb      	adds	r3, r7, #7
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	4a1d      	ldr	r2, [pc, #116]	; (8009ee0 <CHARGER_UpdateDeviceRegister+0xb4>)
 8009e6a:	5cd3      	ldrb	r3, [r2, r3]
 8009e6c:	1d7a      	adds	r2, r7, #5
 8009e6e:	7812      	ldrb	r2, [r2, #0]
 8009e70:	4013      	ands	r3, r2
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	1dba      	adds	r2, r7, #6
 8009e76:	7812      	ldrb	r2, [r2, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d101      	bne.n	8009e80 <CHARGER_UpdateDeviceRegister+0x54>
	{
		return true;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e02b      	b.n	8009ed8 <CHARGER_UpdateDeviceRegister+0xac>
	}

	m_i2cSuccess = false;
 8009e80:	4b18      	ldr	r3, [pc, #96]	; (8009ee4 <CHARGER_UpdateDeviceRegister+0xb8>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]

	transactGood = I2CDRV_Transact(CHARGER_I2C_PORTNO, CHARGER_I2C_ADDR, writeData, 2u,
 8009e86:	250b      	movs	r5, #11
 8009e88:	197c      	adds	r4, r7, r5
 8009e8a:	2308      	movs	r3, #8
 8009e8c:	18fa      	adds	r2, r7, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	9303      	str	r3, [sp, #12]
 8009e92:	23fa      	movs	r3, #250	; 0xfa
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	9302      	str	r3, [sp, #8]
 8009e98:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <CHARGER_UpdateDeviceRegister+0xbc>)
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	21d6      	movs	r1, #214	; 0xd6
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	f004 f95d 	bl	800e164 <I2CDRV_Transact>
 8009eaa:	0003      	movs	r3, r0
 8009eac:	7023      	strb	r3, [r4, #0]
						I2CDRV_TRANSACTION_TX, CHARGER_I2C_Callback,
						1000u, sysTime
						);

	if (false == transactGood)
 8009eae:	197b      	adds	r3, r7, r5
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	4053      	eors	r3, r2
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <CHARGER_UpdateDeviceRegister+0x94>
	{
		return false;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	e00b      	b.n	8009ed8 <CHARGER_UpdateDeviceRegister+0xac>
	}

	while(false == I2CDRV_IsReady(CHARGER_I2C_PORTNO))
 8009ec0:	46c0      	nop			; (mov r8, r8)
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	f004 f92e 	bl	800e124 <I2CDRV_IsReady>
 8009ec8:	0003      	movs	r3, r0
 8009eca:	001a      	movs	r2, r3
 8009ecc:	2301      	movs	r3, #1
 8009ece:	4053      	eors	r3, r2
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1f5      	bne.n	8009ec2 <CHARGER_UpdateDeviceRegister+0x96>
	{
		// Wait for transfer
	}

	return true;
 8009ed6:	2301      	movs	r3, #1
}
 8009ed8:	0018      	movs	r0, r3
 8009eda:	46bd      	mov	sp, r7
 8009edc:	b004      	add	sp, #16
 8009ede:	bdb0      	pop	{r4, r5, r7, pc}
 8009ee0:	20001260 	.word	0x20001260
 8009ee4:	20001271 	.word	0x20001271
 8009ee8:	080095e5 	.word	0x080095e5

08009eec <CHARGER_KickDeviceWatchdog>:
 * @param	sysTime		current value of the system tick timer
 * @retval	none
 */
// ****************************************************************************
static void CHARGER_KickDeviceWatchdog(const uint32_t sysTime)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af04      	add	r7, sp, #16
 8009ef2:	6078      	str	r0, [r7, #4]
	uint8_t writeData[2u] = {CHG_REG_SUPPLY_STATUS, m_registersOut[CHG_REG_SUPPLY_STATUS]};
 8009ef4:	210c      	movs	r1, #12
 8009ef6:	187b      	adds	r3, r7, r1
 8009ef8:	2200      	movs	r2, #0
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	4b15      	ldr	r3, [pc, #84]	; (8009f54 <CHARGER_KickDeviceWatchdog+0x68>)
 8009efe:	781a      	ldrb	r2, [r3, #0]
 8009f00:	187b      	adds	r3, r7, r1
 8009f02:	705a      	strb	r2, [r3, #1]
	// Reset charger watchdog timer, the timeout is reset in the callback
	writeData[1u] |= CHGR_SC_TMR_RST_bm;
 8009f04:	187b      	adds	r3, r7, r1
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	2280      	movs	r2, #128	; 0x80
 8009f0a:	4252      	negs	r2, r2
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	187b      	adds	r3, r7, r1
 8009f12:	705a      	strb	r2, [r3, #1]

	I2CDRV_Transact(CHARGER_I2C_PORTNO, CHARGER_I2C_ADDR, writeData, 2u,
 8009f14:	187a      	adds	r2, r7, r1
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	9303      	str	r3, [sp, #12]
 8009f1a:	23fa      	movs	r3, #250	; 0xfa
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	9302      	str	r3, [sp, #8]
 8009f20:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <CHARGER_KickDeviceWatchdog+0x6c>)
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	2300      	movs	r3, #0
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	2302      	movs	r3, #2
 8009f2a:	21d6      	movs	r1, #214	; 0xd6
 8009f2c:	2001      	movs	r0, #1
 8009f2e:	f004 f919 	bl	800e164 <I2CDRV_Transact>
							I2CDRV_TRANSACTION_TX, CHARGER_WDT_I2C_Callback,
							1000u, sysTime
							);

	while(false == I2CDRV_IsReady(CHARGER_I2C_PORTNO))
 8009f32:	46c0      	nop			; (mov r8, r8)
 8009f34:	2001      	movs	r0, #1
 8009f36:	f004 f8f5 	bl	800e124 <I2CDRV_IsReady>
 8009f3a:	0003      	movs	r3, r0
 8009f3c:	001a      	movs	r2, r3
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4053      	eors	r3, r2
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1f5      	bne.n	8009f34 <CHARGER_KickDeviceWatchdog+0x48>
	{
		// Wait for transfer
	}
}
 8009f48:	46c0      	nop			; (mov r8, r8)
 8009f4a:	46c0      	nop			; (mov r8, r8)
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	b004      	add	sp, #16
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	20001268 	.word	0x20001268
 8009f58:	0800966d 	.word	0x0800966d

08009f5c <CHARGER_UpdateSupplyPreference>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void CHARGER_UpdateSupplyPreference(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	af00      	add	r7, sp, #0

	if (true == CHGR_CONFIG_INPUTS_RPI5V_PREFERRED)
 8009f60:	4b10      	ldr	r3, [pc, #64]	; (8009fa4 <CHARGER_UpdateSupplyPreference+0x48>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	1c1a      	adds	r2, r3, #0
 8009f66:	2301      	movs	r3, #1
 8009f68:	4013      	ands	r3, r2
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d007      	beq.n	8009f80 <CHARGER_UpdateSupplyPreference+0x24>
	{
		m_registersOut[CHG_REG_SUPPLY_STATUS] |= CHGR_SC_FLT_SUPPLY_PREF_USB;
 8009f70:	4b0d      	ldr	r3, [pc, #52]	; (8009fa8 <CHARGER_UpdateSupplyPreference+0x4c>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	2208      	movs	r2, #8
 8009f76:	4313      	orrs	r3, r2
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	4b0b      	ldr	r3, [pc, #44]	; (8009fa8 <CHARGER_UpdateSupplyPreference+0x4c>)
 8009f7c:	701a      	strb	r2, [r3, #0]
 8009f7e:	e006      	b.n	8009f8e <CHARGER_UpdateSupplyPreference+0x32>
	}
	else
	{
		m_registersOut[CHG_REG_SUPPLY_STATUS] &= ~(CHGR_SUPPLY_SEL_bm);
 8009f80:	4b09      	ldr	r3, [pc, #36]	; (8009fa8 <CHARGER_UpdateSupplyPreference+0x4c>)
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2208      	movs	r2, #8
 8009f86:	4393      	bics	r3, r2
 8009f88:	b2da      	uxtb	r2, r3
 8009f8a:	4b07      	ldr	r3, [pc, #28]	; (8009fa8 <CHARGER_UpdateSupplyPreference+0x4c>)
 8009f8c:	701a      	strb	r2, [r3, #0]
	}

	CHARGER_UpdateDeviceRegister(CHG_REG_SUPPLY_STATUS, m_registersOut[CHG_REG_SUPPLY_STATUS],
 8009f8e:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <CHARGER_UpdateSupplyPreference+0x4c>)
 8009f90:	7819      	ldrb	r1, [r3, #0]
 8009f92:	4b06      	ldr	r3, [pc, #24]	; (8009fac <CHARGER_UpdateSupplyPreference+0x50>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	001a      	movs	r2, r3
 8009f98:	2000      	movs	r0, #0
 8009f9a:	f7ff ff47 	bl	8009e2c <CHARGER_UpdateDeviceRegister>
									m_registersWriteMask[CHG_REG_SUPPLY_STATUS]);
}
 8009f9e:	46c0      	nop			; (mov r8, r8)
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20001274 	.word	0x20001274
 8009fa8:	20001268 	.word	0x20001268
 8009fac:	200000b8 	.word	0x200000b8

08009fb0 <CHARGER_UpdateRPi5VInLockout>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void CHARGER_UpdateRPi5VInLockout(void)
{
 8009fb0:	b590      	push	{r4, r7, lr}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
	const POWERSOURCE_RPi5VStatus_t pow5vInDetStatus = POWERSOURCE_GetRPi5VPowerStatus();
 8009fb6:	1dfc      	adds	r4, r7, #7
 8009fb8:	f008 f800 	bl	8011fbc <POWERSOURCE_GetRPi5VPowerStatus>
 8009fbc:	0003      	movs	r3, r0
 8009fbe:	7023      	strb	r3, [r4, #0]

	m_registersOut[CHG_REG_BATTERY_STATUS] = (true == CHRG_CONFIG_INPUTS_NOBATT_ENABLED) ?
 8009fc0:	4b1d      	ldr	r3, [pc, #116]	; (800a038 <CHARGER_UpdateRPi5VInLockout+0x88>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	089b      	lsrs	r3, r3, #2
 8009fc6:	1c1a      	adds	r2, r3, #0
 8009fc8:	2301      	movs	r3, #1
 8009fca:	4013      	ands	r3, r2
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <CHARGER_UpdateRPi5VInLockout+0x26>
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	e000      	b.n	8009fd8 <CHARGER_UpdateRPi5VInLockout+0x28>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	4b18      	ldr	r3, [pc, #96]	; (800a03c <CHARGER_UpdateRPi5VInLockout+0x8c>)
 8009fda:	705a      	strb	r2, [r3, #1]
												CHGR_BS_EN_NOBAT_OP :
												0u;

	// If RPi is powered by itself and host allows charging from RPi 5v and the battery checks out ok...
	if ( (true == CHGR_CONFIG_INPUTS_RPI5V_ENABLED)
 8009fdc:	4b16      	ldr	r3, [pc, #88]	; (800a038 <CHARGER_UpdateRPi5VInLockout+0x88>)
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	085b      	lsrs	r3, r3, #1
 8009fe2:	1c1a      	adds	r2, r3, #0
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d011      	beq.n	800a012 <CHARGER_UpdateRPi5VInLockout+0x62>
			&& (pow5vInDetStatus == RPI5V_DETECTION_STATUS_POWERED)
 8009fee:	1dfb      	adds	r3, r7, #7
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d10d      	bne.n	800a012 <CHARGER_UpdateRPi5VInLockout+0x62>
			&& ((m_registersIn[CHG_REG_BATTERY_STATUS] & CHGR_BS_BATSTAT_Msk) == CHGR_BS_BATSTAT_NORMAL)
 8009ff6:	4b12      	ldr	r3, [pc, #72]	; (800a040 <CHARGER_UpdateRPi5VInLockout+0x90>)
 8009ff8:	785b      	ldrb	r3, [r3, #1]
 8009ffa:	001a      	movs	r2, r3
 8009ffc:	2306      	movs	r3, #6
 8009ffe:	4013      	ands	r3, r2
 800a000:	d107      	bne.n	800a012 <CHARGER_UpdateRPi5VInLockout+0x62>
			)
	{
		// Allow RPi 5v to charge battery
		m_registersOut[CHG_REG_BATTERY_STATUS] &= ~(CHGR_BS_OTG_LOCK_bm);
 800a002:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <CHARGER_UpdateRPi5VInLockout+0x8c>)
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	2208      	movs	r2, #8
 800a008:	4393      	bics	r3, r2
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <CHARGER_UpdateRPi5VInLockout+0x8c>)
 800a00e:	705a      	strb	r2, [r3, #1]
 800a010:	e006      	b.n	800a020 <CHARGER_UpdateRPi5VInLockout+0x70>
	}
	else
	{
		// Don't allow RPi 5v to charge battery
		m_registersOut[CHG_REG_BATTERY_STATUS] |= CHGR_BS_OTG_LOCK_bm;
 800a012:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <CHARGER_UpdateRPi5VInLockout+0x8c>)
 800a014:	785b      	ldrb	r3, [r3, #1]
 800a016:	2208      	movs	r2, #8
 800a018:	4313      	orrs	r3, r2
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	4b07      	ldr	r3, [pc, #28]	; (800a03c <CHARGER_UpdateRPi5VInLockout+0x8c>)
 800a01e:	705a      	strb	r2, [r3, #1]
	}

	CHARGER_UpdateDeviceRegister(CHG_REG_BATTERY_STATUS, m_registersOut[CHG_REG_BATTERY_STATUS],
 800a020:	4b06      	ldr	r3, [pc, #24]	; (800a03c <CHARGER_UpdateRPi5VInLockout+0x8c>)
 800a022:	7859      	ldrb	r1, [r3, #1]
 800a024:	4b07      	ldr	r3, [pc, #28]	; (800a044 <CHARGER_UpdateRPi5VInLockout+0x94>)
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	001a      	movs	r2, r3
 800a02a:	2001      	movs	r0, #1
 800a02c:	f7ff fefe 	bl	8009e2c <CHARGER_UpdateDeviceRegister>
									m_registersWriteMask[CHG_REG_BATTERY_STATUS]);
}
 800a030:	46c0      	nop			; (mov r8, r8)
 800a032:	46bd      	mov	sp, r7
 800a034:	b003      	add	sp, #12
 800a036:	bd90      	pop	{r4, r7, pc}
 800a038:	20001274 	.word	0x20001274
 800a03c:	20001268 	.word	0x20001268
 800a040:	20001260 	.word	0x20001260
 800a044:	200000b8 	.word	0x200000b8

0800a048 <CHARGER_UpdateControlStatus>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void CHARGER_UpdateControlStatus(void)
{
 800a048:	b590      	push	{r4, r7, lr}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
	const BatteryProfile_T * currentBatProfile = BATTERY_GetActiveProfileHandle();
 800a04e:	f7fe f825 	bl	800809c <BATTERY_GetActiveProfileHandle>
 800a052:	0003      	movs	r3, r0
 800a054:	607b      	str	r3, [r7, #4]
	const uint8_t batteryTemp = FUELGAUGE_GetBatteryTemperature();
 800a056:	f002 fd9d 	bl	800cb94 <FUELGAUGE_GetBatteryTemperature>
 800a05a:	0003      	movs	r3, r0
 800a05c:	001a      	movs	r2, r3
 800a05e:	1cfb      	adds	r3, r7, #3
 800a060:	701a      	strb	r2, [r3, #0]
	const BatteryTempSenseConfig_T tempSensorConfig = FUELGAUGE_GetBatteryTempSensorCfg();
 800a062:	1cbc      	adds	r4, r7, #2
 800a064:	f002 fdc6 	bl	800cbf4 <FUELGAUGE_GetBatteryTempSensorCfg>
 800a068:	0003      	movs	r3, r0
 800a06a:	7023      	strb	r3, [r4, #0]
	const bool inputSourcePresent =
			((CHGR_BS_USBSTAT_UVP | CHGR_BS_INSTAT_UVP) !=
					(m_registersIn[CHG_REG_BATTERY_STATUS] & (CHGR_BS_INSTAT_Msk | CHGR_BS_USBSTAT_Msk)));
 800a06c:	4b3b      	ldr	r3, [pc, #236]	; (800a15c <CHARGER_UpdateControlStatus+0x114>)
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	001a      	movs	r2, r3
 800a072:	23f0      	movs	r3, #240	; 0xf0
 800a074:	401a      	ands	r2, r3
	const bool inputSourcePresent =
 800a076:	1c7b      	adds	r3, r7, #1
 800a078:	3af0      	subs	r2, #240	; 0xf0
 800a07a:	1e51      	subs	r1, r2, #1
 800a07c:	418a      	sbcs	r2, r1
 800a07e:	701a      	strb	r2, [r3, #0]

	const BatteryStatus_T batteryStatus = BATTERY_GetStatus();
 800a080:	003c      	movs	r4, r7
 800a082:	f7fe f815 	bl	80080b0 <BATTERY_GetStatus>
 800a086:	0003      	movs	r3, r0
 800a088:	7023      	strb	r3, [r4, #0]

	if ((m_registersIn[CHG_REG_BATTERY_STATUS] & CHGR_BS_INSTAT_Msk) > CHGR_BS_INSTAT_OVP)
 800a08a:	4b34      	ldr	r3, [pc, #208]	; (800a15c <CHARGER_UpdateControlStatus+0x114>)
 800a08c:	785b      	ldrb	r3, [r3, #1]
 800a08e:	001a      	movs	r2, r3
 800a090:	23c0      	movs	r3, #192	; 0xc0
 800a092:	4013      	ands	r3, r2
 800a094:	2b40      	cmp	r3, #64	; 0x40
 800a096:	d903      	bls.n	800a0a0 <CHARGER_UpdateControlStatus+0x58>
	{
		m_registersOut[CHG_REG_CONTROL] = 0u;
 800a098:	4b31      	ldr	r3, [pc, #196]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	709a      	strb	r2, [r3, #2]
 800a09e:	e008      	b.n	800a0b2 <CHARGER_UpdateControlStatus+0x6a>
	}
	else
	{
		m_registersOut[CHG_REG_CONTROL] = (m_rpi5VCurrentLimit << CHGR_CTRL_IUSB_LIMIT_Pos) & CHGR_CTRL_IUSB_LIMIT_Msk;
 800a0a0:	4b30      	ldr	r3, [pc, #192]	; (800a164 <CHARGER_UpdateControlStatus+0x11c>)
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	011b      	lsls	r3, r3, #4
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2270      	movs	r2, #112	; 0x70
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	4b2c      	ldr	r3, [pc, #176]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a0b0:	709a      	strb	r2, [r3, #2]
	}


	// Enable STAT output.
	m_registersOut[CHG_REG_CONTROL] |= (CHGR_CTRL_EN_STAT_bm);// | CHGR_CTRL_TE);
 800a0b2:	4b2b      	ldr	r3, [pc, #172]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a0b4:	789b      	ldrb	r3, [r3, #2]
 800a0b6:	2208      	movs	r2, #8
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	4b28      	ldr	r3, [pc, #160]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a0be:	709a      	strb	r2, [r3, #2]

	if ( (BAT_STATUS_NOT_PRESENT != batteryStatus) )
 800a0c0:	003b      	movs	r3, r7
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d006      	beq.n	800a0d6 <CHARGER_UpdateControlStatus+0x8e>
	{
		m_registersOut[CHG_REG_CONTROL] |= CHGR_CTRL_TE_bm;
 800a0c8:	4b25      	ldr	r3, [pc, #148]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a0ca:	789b      	ldrb	r3, [r3, #2]
 800a0cc:	2204      	movs	r2, #4
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	4b23      	ldr	r3, [pc, #140]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a0d4:	709a      	strb	r2, [r3, #2]
	}


	// Disable charging if configured not, battery profile is not set or temperature is out of working range
	if ( CHARGE_DISABLED || (currentBatProfile == NULL) || (false == inputSourcePresent) ||
 800a0d6:	4b24      	ldr	r3, [pc, #144]	; (800a168 <CHARGER_UpdateControlStatus+0x120>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	001a      	movs	r2, r3
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4013      	ands	r3, r2
 800a0e0:	d01b      	beq.n	800a11a <CHARGER_UpdateControlStatus+0xd2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d018      	beq.n	800a11a <CHARGER_UpdateControlStatus+0xd2>
 800a0e8:	1c7b      	adds	r3, r7, #1
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	4053      	eors	r3, r2
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d111      	bne.n	800a11a <CHARGER_UpdateControlStatus+0xd2>
 800a0f6:	1cbb      	adds	r3, r7, #2
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d014      	beq.n	800a128 <CHARGER_UpdateControlStatus+0xe0>
			( (tempSensorConfig != BAT_TEMP_SENSE_CONFIG_NOT_USED)
					&& ((batteryTemp >= currentBatProfile->tHot) || (batteryTemp <= currentBatProfile->tCold))
 800a0fe:	1cfb      	adds	r3, r7, #3
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	7ed2      	ldrb	r2, [r2, #27]
 800a106:	b252      	sxtb	r2, r2
 800a108:	4293      	cmp	r3, r2
 800a10a:	da06      	bge.n	800a11a <CHARGER_UpdateControlStatus+0xd2>
 800a10c:	1cfb      	adds	r3, r7, #3
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	7e12      	ldrb	r2, [r2, #24]
 800a114:	b252      	sxtb	r2, r2
 800a116:	4293      	cmp	r3, r2
 800a118:	dc06      	bgt.n	800a128 <CHARGER_UpdateControlStatus+0xe0>
				)
		)
	{
		// disable charging
		m_registersOut[CHG_REG_CONTROL] |= CHGR_CTRL_CHG_DISABLE_bm;
 800a11a:	4b11      	ldr	r3, [pc, #68]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a11c:	789b      	ldrb	r3, [r3, #2]
 800a11e:	2202      	movs	r2, #2
 800a120:	4313      	orrs	r3, r2
 800a122:	b2da      	uxtb	r2, r3
 800a124:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a126:	709a      	strb	r2, [r3, #2]
	}


	// Enable high-z mode if no input source is present
	if (false == inputSourcePresent)
 800a128:	1c7b      	adds	r3, r7, #1
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2201      	movs	r2, #1
 800a12e:	4053      	eors	r3, r2
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d006      	beq.n	800a144 <CHARGER_UpdateControlStatus+0xfc>
	{
		m_registersOut[CHG_REG_CONTROL] |= CHGR_CTRL_HZ_MODE_bm;
 800a136:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a138:	789b      	ldrb	r3, [r3, #2]
 800a13a:	2201      	movs	r2, #1
 800a13c:	4313      	orrs	r3, r2
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	4b07      	ldr	r3, [pc, #28]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a142:	709a      	strb	r2, [r3, #2]
	}


	CHARGER_UpdateDeviceRegister(CHG_REG_CONTROL, m_registersOut[CHG_REG_CONTROL],
 800a144:	4b06      	ldr	r3, [pc, #24]	; (800a160 <CHARGER_UpdateControlStatus+0x118>)
 800a146:	7899      	ldrb	r1, [r3, #2]
 800a148:	4b08      	ldr	r3, [pc, #32]	; (800a16c <CHARGER_UpdateControlStatus+0x124>)
 800a14a:	789b      	ldrb	r3, [r3, #2]
 800a14c:	001a      	movs	r2, r3
 800a14e:	2002      	movs	r0, #2
 800a150:	f7ff fe6c 	bl	8009e2c <CHARGER_UpdateDeviceRegister>
									m_registersWriteMask[CHG_REG_CONTROL]);
}
 800a154:	46c0      	nop			; (mov r8, r8)
 800a156:	46bd      	mov	sp, r7
 800a158:	b003      	add	sp, #12
 800a15a:	bd90      	pop	{r4, r7, pc}
 800a15c:	20001260 	.word	0x20001260
 800a160:	20001268 	.word	0x20001268
 800a164:	20001270 	.word	0x20001270
 800a168:	20001273 	.word	0x20001273
 800a16c:	200000b8 	.word	0x200000b8

0800a170 <CHARGER_UpdateRegulationVoltage>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void CHARGER_UpdateRegulationVoltage(void)
{
 800a170:	b590      	push	{r4, r7, lr}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
	const BatteryProfile_T * currentBatProfile = BATTERY_GetActiveProfileHandle();
 800a176:	f7fd ff91 	bl	800809c <BATTERY_GetActiveProfileHandle>
 800a17a:	0003      	movs	r3, r0
 800a17c:	60bb      	str	r3, [r7, #8]
	const int8_t batteryTemperature = FUELGAUGE_GetBatteryTemperature();
 800a17e:	1dfc      	adds	r4, r7, #7
 800a180:	f002 fd08 	bl	800cb94 <FUELGAUGE_GetBatteryTemperature>
 800a184:	0003      	movs	r3, r0
 800a186:	7023      	strb	r3, [r4, #0]
	const BatteryTempSenseConfig_T tempSensorConfig = FUELGAUGE_GetBatteryTempSensorCfg();
 800a188:	1dbc      	adds	r4, r7, #6
 800a18a:	f002 fd33 	bl	800cbf4 <FUELGAUGE_GetBatteryTempSensorCfg>
 800a18e:	0003      	movs	r3, r0
 800a190:	7023      	strb	r3, [r4, #0]
	const BatteryStatus_T batteryStatus = BATTERY_GetStatus();
 800a192:	1d7c      	adds	r4, r7, #5
 800a194:	f7fd ff8c 	bl	80080b0 <BATTERY_GetStatus>
 800a198:	0003      	movs	r3, r0
 800a19a:	7023      	strb	r3, [r4, #0]
	const uint8_t minRegVol = ((FUELGAUGE_GetBatteryMv() - CHGR_CB_BATT_REGV_BASE_MV) / CHGR_CB_BATT_REGV_RESOLUTION) + 1u;
 800a19c:	f002 fd20 	bl	800cbe0 <FUELGAUGE_GetBatteryMv>
 800a1a0:	0003      	movs	r3, r0
 800a1a2:	4a3e      	ldr	r2, [pc, #248]	; (800a29c <CHARGER_UpdateRegulationVoltage+0x12c>)
 800a1a4:	4694      	mov	ip, r2
 800a1a6:	4463      	add	r3, ip
 800a1a8:	2114      	movs	r1, #20
 800a1aa:	0018      	movs	r0, r3
 800a1ac:	f7f5 ffaa 	bl	8000104 <__udivsi3>
 800a1b0:	0003      	movs	r3, r0
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	1d3b      	adds	r3, r7, #4
 800a1b6:	3201      	adds	r2, #1
 800a1b8:	701a      	strb	r2, [r3, #0]

	int8_t newRegVol;

	m_registersOut[CHG_REG_CONTROL_BATTERY] = 0u;
 800a1ba:	4b39      	ldr	r3, [pc, #228]	; (800a2a0 <CHARGER_UpdateRegulationVoltage+0x130>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	70da      	strb	r2, [r3, #3]

	// Set input current limit
	m_registersOut[CHG_REG_CONTROL_BATTERY] |= (false == CHRG_CONFIG_INPUTS_IN_LIMITED_1pt5A) ?
 800a1c0:	4b37      	ldr	r3, [pc, #220]	; (800a2a0 <CHARGER_UpdateRegulationVoltage+0x130>)
 800a1c2:	78da      	ldrb	r2, [r3, #3]
										CHGR_CB_IN_LIMIT_2pt5A :
 800a1c4:	4b37      	ldr	r3, [pc, #220]	; (800a2a4 <CHARGER_UpdateRegulationVoltage+0x134>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	089b      	lsrs	r3, r3, #2
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2102      	movs	r1, #2
 800a1ce:	400b      	ands	r3, r1
 800a1d0:	b2db      	uxtb	r3, r3
	m_registersOut[CHG_REG_CONTROL_BATTERY] |= (false == CHRG_CONFIG_INPUTS_IN_LIMITED_1pt5A) ?
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	4b32      	ldr	r3, [pc, #200]	; (800a2a0 <CHARGER_UpdateRegulationVoltage+0x130>)
 800a1d8:	70da      	strb	r2, [r3, #3]
										CHGR_CB_IN_LIMIT_1pt5A;


	// Check for valid battery profile, a battery present and the device set to high-z mode
	if ( (currentBatProfile != NULL) &&
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d045      	beq.n	800a26c <CHARGER_UpdateRegulationVoltage+0xfc>
 800a1e0:	1d7b      	adds	r3, r7, #5
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d041      	beq.n	800a26c <CHARGER_UpdateRegulationVoltage+0xfc>
			(BAT_STATUS_NOT_PRESENT != batteryStatus) &&
			(CHGR_CTRL_HZ_MODE_bm == (m_registersIn[CHG_REG_CONTROL] & CHGR_CTRL_HZ_MODE_bm))
 800a1e8:	4b2f      	ldr	r3, [pc, #188]	; (800a2a8 <CHARGER_UpdateRegulationVoltage+0x138>)
 800a1ea:	789b      	ldrb	r3, [r3, #2]
 800a1ec:	001a      	movs	r2, r3
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4013      	ands	r3, r2
			(BAT_STATUS_NOT_PRESENT != batteryStatus) &&
 800a1f2:	d03b      	beq.n	800a26c <CHARGER_UpdateRegulationVoltage+0xfc>
			)
	{
		if ( (batteryTemperature > currentBatProfile->tWarm) && (BAT_TEMP_SENSE_CONFIG_NOT_USED != tempSensorConfig) )
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	7e9b      	ldrb	r3, [r3, #26]
 800a1f8:	b25b      	sxtb	r3, r3
 800a1fa:	1dfa      	adds	r2, r7, #7
 800a1fc:	7812      	ldrb	r2, [r2, #0]
 800a1fe:	b252      	sxtb	r2, r2
 800a200:	429a      	cmp	r2, r3
 800a202:	dd0b      	ble.n	800a21c <CHARGER_UpdateRegulationVoltage+0xac>
 800a204:	1dbb      	adds	r3, r7, #6
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d007      	beq.n	800a21c <CHARGER_UpdateRegulationVoltage+0xac>
		{
			newRegVol = ((int8_t)currentBatProfile->regulationVoltage) - (140/20);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	7a9b      	ldrb	r3, [r3, #10]
 800a210:	3b07      	subs	r3, #7
 800a212:	b2da      	uxtb	r2, r3
 800a214:	230f      	movs	r3, #15
 800a216:	18fb      	adds	r3, r7, r3
 800a218:	701a      	strb	r2, [r3, #0]
 800a21a:	e004      	b.n	800a226 <CHARGER_UpdateRegulationVoltage+0xb6>
		}
		else
		{
			newRegVol = currentBatProfile->regulationVoltage;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	7a9a      	ldrb	r2, [r3, #10]
 800a220:	230f      	movs	r3, #15
 800a222:	18fb      	adds	r3, r7, r3
 800a224:	701a      	strb	r2, [r3, #0]
		}

		// Check to make sure its at least the current battery voltage or bad stuff happens
		if (newRegVol < (int8_t)minRegVol)
 800a226:	1d3b      	adds	r3, r7, #4
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	b25b      	sxtb	r3, r3
 800a22c:	210f      	movs	r1, #15
 800a22e:	187a      	adds	r2, r7, r1
 800a230:	7812      	ldrb	r2, [r2, #0]
 800a232:	b252      	sxtb	r2, r2
 800a234:	429a      	cmp	r2, r3
 800a236:	da03      	bge.n	800a240 <CHARGER_UpdateRegulationVoltage+0xd0>
		{
			newRegVol = (int8_t)minRegVol;
 800a238:	187b      	adds	r3, r7, r1
 800a23a:	1d3a      	adds	r2, r7, #4
 800a23c:	7812      	ldrb	r2, [r2, #0]
 800a23e:	701a      	strb	r2, [r3, #0]
		}

		// Check to make sure the value doesn't exceed the maximum allowed set
		if (newRegVol > CHGR_CB_BATT_REGV_MAX_SET)
 800a240:	220f      	movs	r2, #15
 800a242:	18bb      	adds	r3, r7, r2
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	2b2f      	cmp	r3, #47	; 0x2f
 800a248:	d902      	bls.n	800a250 <CHARGER_UpdateRegulationVoltage+0xe0>
		{
			newRegVol = CHGR_CB_BATT_REGV_MAX_SET;
 800a24a:	18bb      	adds	r3, r7, r2
 800a24c:	222f      	movs	r2, #47	; 0x2f
 800a24e:	701a      	strb	r2, [r3, #0]
		}

		m_registersOut[CHG_REG_CONTROL_BATTERY] |= ((uint8_t)newRegVol << CHGR_CB_BATT_REGV_Pos);
 800a250:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <CHARGER_UpdateRegulationVoltage+0x130>)
 800a252:	78db      	ldrb	r3, [r3, #3]
 800a254:	b25a      	sxtb	r2, r3
 800a256:	230f      	movs	r3, #15
 800a258:	18fb      	adds	r3, r7, r3
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	b25b      	sxtb	r3, r3
 800a260:	4313      	orrs	r3, r2
 800a262:	b25b      	sxtb	r3, r3
 800a264:	b2da      	uxtb	r2, r3
 800a266:	4b0e      	ldr	r3, [pc, #56]	; (800a2a0 <CHARGER_UpdateRegulationVoltage+0x130>)
 800a268:	70da      	strb	r2, [r3, #3]
 800a26a:	e00a      	b.n	800a282 <CHARGER_UpdateRegulationVoltage+0x112>
	}
	else
	{
		// Keep to whatever the charging IC has overriden the value to
		m_registersOut[CHG_REG_CONTROL_BATTERY] |= (m_registersIn[CHG_REG_CONTROL_BATTERY] & CHGR_CB_BATT_REGV_Msk);
 800a26c:	4b0c      	ldr	r3, [pc, #48]	; (800a2a0 <CHARGER_UpdateRegulationVoltage+0x130>)
 800a26e:	78da      	ldrb	r2, [r3, #3]
 800a270:	4b0d      	ldr	r3, [pc, #52]	; (800a2a8 <CHARGER_UpdateRegulationVoltage+0x138>)
 800a272:	78db      	ldrb	r3, [r3, #3]
 800a274:	2103      	movs	r1, #3
 800a276:	438b      	bics	r3, r1
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	4313      	orrs	r3, r2
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	4b08      	ldr	r3, [pc, #32]	; (800a2a0 <CHARGER_UpdateRegulationVoltage+0x130>)
 800a280:	70da      	strb	r2, [r3, #3]
	}


	CHARGER_UpdateDeviceRegister(CHG_REG_CONTROL_BATTERY, m_registersOut[CHG_REG_CONTROL_BATTERY],
 800a282:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <CHARGER_UpdateRegulationVoltage+0x130>)
 800a284:	78d9      	ldrb	r1, [r3, #3]
 800a286:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <CHARGER_UpdateRegulationVoltage+0x13c>)
 800a288:	78db      	ldrb	r3, [r3, #3]
 800a28a:	001a      	movs	r2, r3
 800a28c:	2003      	movs	r0, #3
 800a28e:	f7ff fdcd 	bl	8009e2c <CHARGER_UpdateDeviceRegister>
									m_registersWriteMask[CHG_REG_CONTROL_BATTERY]);
}
 800a292:	46c0      	nop			; (mov r8, r8)
 800a294:	46bd      	mov	sp, r7
 800a296:	b005      	add	sp, #20
 800a298:	bd90      	pop	{r4, r7, pc}
 800a29a:	46c0      	nop			; (mov r8, r8)
 800a29c:	fffff254 	.word	0xfffff254
 800a2a0:	20001268 	.word	0x20001268
 800a2a4:	20001274 	.word	0x20001274
 800a2a8:	20001260 	.word	0x20001260
 800a2ac:	200000b8 	.word	0x200000b8

0800a2b0 <CHARGER_UpdateChgCurrentAndTermCurrent>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void CHARGER_UpdateChgCurrentAndTermCurrent(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
	const BatteryProfile_T * currentBatProfile = BATTERY_GetActiveProfileHandle();
 800a2b6:	f7fd fef1 	bl	800809c <BATTERY_GetActiveProfileHandle>
 800a2ba:	0003      	movs	r3, r0
 800a2bc:	607b      	str	r3, [r7, #4]

	if (currentBatProfile != NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d013      	beq.n	800a2ec <CHARGER_UpdateChgCurrentAndTermCurrent+0x3c>
	{
		m_registersOut[CHG_REG_TERMI_FASTCHARGEI] =
				(((currentBatProfile->chargeCurrent > 26u) ? 26u : currentBatProfile->chargeCurrent & 0x1F) << 3u)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	7a1b      	ldrb	r3, [r3, #8]
				| (currentBatProfile->terminationCurr & 0x07u);
 800a2c8:	2b1a      	cmp	r3, #26
 800a2ca:	d804      	bhi.n	800a2d6 <CHARGER_UpdateChgCurrentAndTermCurrent+0x26>
				(((currentBatProfile->chargeCurrent > 26u) ? 26u : currentBatProfile->chargeCurrent & 0x1F) << 3u)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7a1b      	ldrb	r3, [r3, #8]
				| (currentBatProfile->terminationCurr & 0x07u);
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	e000      	b.n	800a2d8 <CHARGER_UpdateChgCurrentAndTermCurrent+0x28>
 800a2d6:	23d0      	movs	r3, #208	; 0xd0
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	7a52      	ldrb	r2, [r2, #9]
 800a2dc:	2107      	movs	r1, #7
 800a2de:	400a      	ands	r2, r1
 800a2e0:	b2d2      	uxtb	r2, r2
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	b2da      	uxtb	r2, r3
		m_registersOut[CHG_REG_TERMI_FASTCHARGEI] =
 800a2e6:	4b09      	ldr	r3, [pc, #36]	; (800a30c <CHARGER_UpdateChgCurrentAndTermCurrent+0x5c>)
 800a2e8:	715a      	strb	r2, [r3, #5]
 800a2ea:	e002      	b.n	800a2f2 <CHARGER_UpdateChgCurrentAndTermCurrent+0x42>
	}
	else
	{
		m_registersOut[CHG_REG_TERMI_FASTCHARGEI] = 0u;
 800a2ec:	4b07      	ldr	r3, [pc, #28]	; (800a30c <CHARGER_UpdateChgCurrentAndTermCurrent+0x5c>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	715a      	strb	r2, [r3, #5]
	}

	CHARGER_UpdateDeviceRegister(CHG_REG_TERMI_FASTCHARGEI, m_registersOut[CHG_REG_TERMI_FASTCHARGEI],
 800a2f2:	4b06      	ldr	r3, [pc, #24]	; (800a30c <CHARGER_UpdateChgCurrentAndTermCurrent+0x5c>)
 800a2f4:	7959      	ldrb	r1, [r3, #5]
 800a2f6:	4b06      	ldr	r3, [pc, #24]	; (800a310 <CHARGER_UpdateChgCurrentAndTermCurrent+0x60>)
 800a2f8:	795b      	ldrb	r3, [r3, #5]
 800a2fa:	001a      	movs	r2, r3
 800a2fc:	2005      	movs	r0, #5
 800a2fe:	f7ff fd95 	bl	8009e2c <CHARGER_UpdateDeviceRegister>
									m_registersWriteMask[CHG_REG_TERMI_FASTCHARGEI]);
}
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	46bd      	mov	sp, r7
 800a306:	b002      	add	sp, #8
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	46c0      	nop			; (mov r8, r8)
 800a30c:	20001268 	.word	0x20001268
 800a310:	200000b8 	.word	0x200000b8

0800a314 <CHARGER_UpdateVinDPM>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void CHARGER_UpdateVinDPM(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
	// Take value for Vin as set by the inputs config, RPi 5V set to 480mV
	m_registersOut[CHG_REG_DPPM_STATUS] = CHRG_CONFIG_INPUTS_DPM | (CHARGER_VIN_DPM_USB << 3u);
 800a318:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <CHARGER_UpdateVinDPM+0x34>)
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	091b      	lsrs	r3, r3, #4
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2207      	movs	r2, #7
 800a322:	4013      	ands	r3, r2
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2230      	movs	r2, #48	; 0x30
 800a328:	4313      	orrs	r3, r2
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	4b07      	ldr	r3, [pc, #28]	; (800a34c <CHARGER_UpdateVinDPM+0x38>)
 800a32e:	719a      	strb	r2, [r3, #6]

	CHARGER_UpdateDeviceRegister(CHG_REG_DPPM_STATUS, m_registersOut[CHG_REG_DPPM_STATUS],
 800a330:	4b06      	ldr	r3, [pc, #24]	; (800a34c <CHARGER_UpdateVinDPM+0x38>)
 800a332:	7999      	ldrb	r1, [r3, #6]
 800a334:	4b06      	ldr	r3, [pc, #24]	; (800a350 <CHARGER_UpdateVinDPM+0x3c>)
 800a336:	799b      	ldrb	r3, [r3, #6]
 800a338:	001a      	movs	r2, r3
 800a33a:	2006      	movs	r0, #6
 800a33c:	f7ff fd76 	bl	8009e2c <CHARGER_UpdateDeviceRegister>
									m_registersWriteMask[CHG_REG_DPPM_STATUS]);
}
 800a340:	46c0      	nop			; (mov r8, r8)
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	46c0      	nop			; (mov r8, r8)
 800a348:	20001274 	.word	0x20001274
 800a34c:	20001268 	.word	0x20001268
 800a350:	200000b8 	.word	0x200000b8

0800a354 <CHARGER_UpdateTempRegulationControlStatus>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void CHARGER_UpdateTempRegulationControlStatus(void)
{
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
	const BatteryProfile_T * currentBatProfile = BATTERY_GetActiveProfileHandle();
 800a35a:	f7fd fe9f 	bl	800809c <BATTERY_GetActiveProfileHandle>
 800a35e:	0003      	movs	r3, r0
 800a360:	607b      	str	r3, [r7, #4]
	const uint8_t batteryTemp = FUELGAUGE_GetBatteryTemperature();
 800a362:	f002 fc17 	bl	800cb94 <FUELGAUGE_GetBatteryTemperature>
 800a366:	0003      	movs	r3, r0
 800a368:	001a      	movs	r2, r3
 800a36a:	1cfb      	adds	r3, r7, #3
 800a36c:	701a      	strb	r2, [r3, #0]
	const BatteryTempSenseConfig_T tempSensorConfig = FUELGAUGE_GetBatteryTempSensorCfg();
 800a36e:	1cbc      	adds	r4, r7, #2
 800a370:	f002 fc40 	bl	800cbf4 <FUELGAUGE_GetBatteryTempSensorCfg>
 800a374:	0003      	movs	r3, r0
 800a376:	7023      	strb	r3, [r4, #0]

	//Timer slowed by 2x when in thermal regulation, 10 � 9 hour fast charge, TS function disabled
	m_registersOut[CHG_REG_SAFETY_NTC] = CHGR_ST_NTC_2XTMR_EN_bm | CHGR_ST_NTC_SFTMR_9HOUR;
 800a378:	4b15      	ldr	r3, [pc, #84]	; (800a3d0 <CHARGER_UpdateTempRegulationControlStatus+0x7c>)
 800a37a:	22c0      	movs	r2, #192	; 0xc0
 800a37c:	71da      	strb	r2, [r3, #7]

	// Allow full set charge current
	m_registersOut[CHG_REG_SAFETY_NTC] &= ~(CHGR_ST_NTC_LOW_CHARGE_bm);
 800a37e:	4b14      	ldr	r3, [pc, #80]	; (800a3d0 <CHARGER_UpdateTempRegulationControlStatus+0x7c>)
 800a380:	79db      	ldrb	r3, [r3, #7]
 800a382:	2201      	movs	r2, #1
 800a384:	4393      	bics	r3, r2
 800a386:	b2da      	uxtb	r2, r3
 800a388:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <CHARGER_UpdateTempRegulationControlStatus+0x7c>)
 800a38a:	71da      	strb	r2, [r3, #7]

	// If Battery has a profile set and the temperature sensor is used and the battery is cold
	if ( (currentBatProfile != NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d011      	beq.n	800a3b6 <CHARGER_UpdateTempRegulationControlStatus+0x62>
			&& (batteryTemp < currentBatProfile->tCool) && (tempSensorConfig != BAT_TEMP_SENSE_CONFIG_NOT_USED)
 800a392:	1cfb      	adds	r3, r7, #3
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	7e52      	ldrb	r2, [r2, #25]
 800a39a:	b252      	sxtb	r2, r2
 800a39c:	4293      	cmp	r3, r2
 800a39e:	da0a      	bge.n	800a3b6 <CHARGER_UpdateTempRegulationControlStatus+0x62>
 800a3a0:	1cbb      	adds	r3, r7, #2
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d006      	beq.n	800a3b6 <CHARGER_UpdateTempRegulationControlStatus+0x62>
			)
	{
		// Limit the charge current until its warmed up a bit
		m_registersOut[CHG_REG_SAFETY_NTC] |= CHGR_ST_NTC_LOW_CHARGE_bm;
 800a3a8:	4b09      	ldr	r3, [pc, #36]	; (800a3d0 <CHARGER_UpdateTempRegulationControlStatus+0x7c>)
 800a3aa:	79db      	ldrb	r3, [r3, #7]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	4b07      	ldr	r3, [pc, #28]	; (800a3d0 <CHARGER_UpdateTempRegulationControlStatus+0x7c>)
 800a3b4:	71da      	strb	r2, [r3, #7]
	}

	CHARGER_UpdateDeviceRegister(CHG_REG_SAFETY_NTC, m_registersOut[CHG_REG_SAFETY_NTC],
 800a3b6:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <CHARGER_UpdateTempRegulationControlStatus+0x7c>)
 800a3b8:	79d9      	ldrb	r1, [r3, #7]
 800a3ba:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <CHARGER_UpdateTempRegulationControlStatus+0x80>)
 800a3bc:	79db      	ldrb	r3, [r3, #7]
 800a3be:	001a      	movs	r2, r3
 800a3c0:	2007      	movs	r0, #7
 800a3c2:	f7ff fd33 	bl	8009e2c <CHARGER_UpdateDeviceRegister>
									m_registersWriteMask[CHG_REG_SAFETY_NTC]);
}
 800a3c6:	46c0      	nop			; (mov r8, r8)
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	b003      	add	sp, #12
 800a3cc:	bd90      	pop	{r4, r7, pc}
 800a3ce:	46c0      	nop			; (mov r8, r8)
 800a3d0:	20001268 	.word	0x20001268
 800a3d4:	200000b8 	.word	0x200000b8

0800a3d8 <CHARGER_UpdateSettings>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void CHARGER_UpdateSettings(void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	af00      	add	r7, sp, #0
	// Setting was changed, process the lot!
	CHARGER_UpdateSupplyPreference();
 800a3dc:	f7ff fdbe 	bl	8009f5c <CHARGER_UpdateSupplyPreference>
	CHARGER_UpdateRPi5VInLockout();
 800a3e0:	f7ff fde6 	bl	8009fb0 <CHARGER_UpdateRPi5VInLockout>
	CHARGER_UpdateControlStatus();
 800a3e4:	f7ff fe30 	bl	800a048 <CHARGER_UpdateControlStatus>
	CHARGER_UpdateRegulationVoltage();
 800a3e8:	f7ff fec2 	bl	800a170 <CHARGER_UpdateRegulationVoltage>

	CHARGER_UpdateTempRegulationControlStatus();
 800a3ec:	f7ff ffb2 	bl	800a354 <CHARGER_UpdateTempRegulationControlStatus>
	CHARGER_UpdateChgCurrentAndTermCurrent();
 800a3f0:	f7ff ff5e 	bl	800a2b0 <CHARGER_UpdateChgCurrentAndTermCurrent>
	CHARGER_UpdateVinDPM();
 800a3f4:	f7ff ff8e 	bl	800a314 <CHARGER_UpdateVinDPM>

	m_chargerNeedPoll = false;
 800a3f8:	4b02      	ldr	r3, [pc, #8]	; (800a404 <CHARGER_UpdateSettings+0x2c>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	701a      	strb	r2, [r3, #0]
}
 800a3fe:	46c0      	nop			; (mov r8, r8)
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20001281 	.word	0x20001281

0800a408 <CHARGER_CheckForPoll>:
 * @retval	bool		false = all device registers match current configuration
 * 						true = one or more registers require configuration
 */
// ****************************************************************************
static bool CHARGER_CheckForPoll(void)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
	uint8_t i = CHARGER_REGISTER_COUNT;
 800a40e:	1dfb      	adds	r3, r7, #7
 800a410:	2208      	movs	r2, #8
 800a412:	701a      	strb	r2, [r3, #0]

	while (i-- > 0u)
 800a414:	e011      	b.n	800a43a <CHARGER_CheckForPoll+0x32>
	{
		if ((m_registersIn[i] & m_registersWriteMask[i]) != m_registersOut[i])
 800a416:	1dfb      	adds	r3, r7, #7
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	4a0e      	ldr	r2, [pc, #56]	; (800a454 <CHARGER_CheckForPoll+0x4c>)
 800a41c:	5cd3      	ldrb	r3, [r2, r3]
 800a41e:	1dfa      	adds	r2, r7, #7
 800a420:	7812      	ldrb	r2, [r2, #0]
 800a422:	490d      	ldr	r1, [pc, #52]	; (800a458 <CHARGER_CheckForPoll+0x50>)
 800a424:	5c8a      	ldrb	r2, [r1, r2]
 800a426:	4013      	ands	r3, r2
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	1dfb      	adds	r3, r7, #7
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	490b      	ldr	r1, [pc, #44]	; (800a45c <CHARGER_CheckForPoll+0x54>)
 800a430:	5ccb      	ldrb	r3, [r1, r3]
 800a432:	429a      	cmp	r2, r3
 800a434:	d001      	beq.n	800a43a <CHARGER_CheckForPoll+0x32>
		{
			return true;
 800a436:	2301      	movs	r3, #1
 800a438:	e007      	b.n	800a44a <CHARGER_CheckForPoll+0x42>
	while (i-- > 0u)
 800a43a:	1dfb      	adds	r3, r7, #7
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	1dfa      	adds	r2, r7, #7
 800a440:	1e59      	subs	r1, r3, #1
 800a442:	7011      	strb	r1, [r2, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1e6      	bne.n	800a416 <CHARGER_CheckForPoll+0xe>
		}
	}

	return false;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	0018      	movs	r0, r3
 800a44c:	46bd      	mov	sp, r7
 800a44e:	b002      	add	sp, #8
 800a450:	bd80      	pop	{r7, pc}
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	20001260 	.word	0x20001260
 800a458:	200000b8 	.word	0x200000b8
 800a45c:	20001268 	.word	0x20001268

0800a460 <CalcFcs>:
};

#define REGISTER_MAX		(sizeof(masterCommands) / sizeof (MasterCommand_T))

uint8_t CalcFcs(uint8_t *msg, int size)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
	uint8_t result = 0xFF;
 800a46a:	230f      	movs	r3, #15
 800a46c:	18fb      	adds	r3, r7, r3
 800a46e:	22ff      	movs	r2, #255	; 0xff
 800a470:	701a      	strb	r2, [r3, #0]

	while (size) result ^= msg[--size];
 800a472:	e00c      	b.n	800a48e <CalcFcs+0x2e>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	3b01      	subs	r3, #1
 800a478:	603b      	str	r3, [r7, #0]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	18d3      	adds	r3, r2, r3
 800a480:	7819      	ldrb	r1, [r3, #0]
 800a482:	220f      	movs	r2, #15
 800a484:	18bb      	adds	r3, r7, r2
 800a486:	18ba      	adds	r2, r7, r2
 800a488:	7812      	ldrb	r2, [r2, #0]
 800a48a:	404a      	eors	r2, r1
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1ef      	bne.n	800a474 <CalcFcs+0x14>

	return result;
 800a494:	230f      	movs	r3, #15
 800a496:	18fb      	adds	r3, r7, r3
 800a498:	781b      	ldrb	r3, [r3, #0]
}
 800a49a:	0018      	movs	r0, r3
 800a49c:	46bd      	mov	sp, r7
 800a49e:	b004      	add	sp, #16
 800a4a0:	bd80      	pop	{r7, pc}
	...

0800a4a4 <CmdServerProcessRequest>:
	}
}


int8_t CmdServerProcessRequest(uint8_t dir, uint8_t pData[], uint16_t *dataLen)
{
 800a4a4:	b5b0      	push	{r4, r5, r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
 800a4ae:	250f      	movs	r5, #15
 800a4b0:	197b      	adds	r3, r7, r5
 800a4b2:	1c02      	adds	r2, r0, #0
 800a4b4:	701a      	strb	r2, [r3, #0]
	if (pData[0] <= REGISTER_MAX )
	{
		if (masterCommands[pData[0]] != NULL)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	001a      	movs	r2, r3
 800a4bc:	4b2c      	ldr	r3, [pc, #176]	; (800a570 <CmdServerProcessRequest+0xcc>)
 800a4be:	0092      	lsls	r2, r2, #2
 800a4c0:	58d3      	ldr	r3, [r2, r3]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d047      	beq.n	800a556 <CmdServerProcessRequest+0xb2>
		{
			if (dir == MASTER_CMD_DIR_WRITE)
 800a4c6:	197b      	adds	r3, r7, r5
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d121      	bne.n	800a512 <CmdServerProcessRequest+0x6e>
			{
				if (CalcFcs(pData+1, *dataLen-2) == pData[*dataLen-1])
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	1c5a      	adds	r2, r3, #1
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	3b02      	subs	r3, #2
 800a4d8:	0019      	movs	r1, r3
 800a4da:	0010      	movs	r0, r2
 800a4dc:	f7ff ffc0 	bl	800a460 <CalcFcs>
 800a4e0:	0003      	movs	r3, r0
 800a4e2:	0019      	movs	r1, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	18d3      	adds	r3, r2, r3
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	4299      	cmp	r1, r3
 800a4f2:	d10c      	bne.n	800a50e <CmdServerProcessRequest+0x6a>
				{
					(masterCommands[pData[0]])(dir, pData, dataLen);
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	001a      	movs	r2, r3
 800a4fa:	4b1d      	ldr	r3, [pc, #116]	; (800a570 <CmdServerProcessRequest+0xcc>)
 800a4fc:	0092      	lsls	r2, r2, #2
 800a4fe:	58d3      	ldr	r3, [r2, r3]
 800a500:	687c      	ldr	r4, [r7, #4]
 800a502:	68b9      	ldr	r1, [r7, #8]
 800a504:	197a      	adds	r2, r7, r5
 800a506:	7810      	ldrb	r0, [r2, #0]
 800a508:	0022      	movs	r2, r4
 800a50a:	4798      	blx	r3
 800a50c:	e02b      	b.n	800a566 <CmdServerProcessRequest+0xc2>
				}
				else
				{
					return 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	e02a      	b.n	800a568 <CmdServerProcessRequest+0xc4>
				}
			}
			else
			{
				(masterCommands[pData[0]])(dir, pData, dataLen);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	001a      	movs	r2, r3
 800a518:	4b15      	ldr	r3, [pc, #84]	; (800a570 <CmdServerProcessRequest+0xcc>)
 800a51a:	0092      	lsls	r2, r2, #2
 800a51c:	58d3      	ldr	r3, [r2, r3]
 800a51e:	687c      	ldr	r4, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	220f      	movs	r2, #15
 800a524:	18ba      	adds	r2, r7, r2
 800a526:	7810      	ldrb	r0, [r2, #0]
 800a528:	0022      	movs	r2, r4
 800a52a:	4798      	blx	r3
				pData[*dataLen] = CalcFcs(pData, *dataLen);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	0019      	movs	r1, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	001a      	movs	r2, r3
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	189c      	adds	r4, r3, r2
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	0018      	movs	r0, r3
 800a540:	f7ff ff8e 	bl	800a460 <CalcFcs>
 800a544:	0003      	movs	r3, r0
 800a546:	7023      	strb	r3, [r4, #0]
				(*dataLen) ++;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	3301      	adds	r3, #1
 800a54e:	b29a      	uxth	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	801a      	strh	r2, [r3, #0]
 800a554:	e007      	b.n	800a566 <CmdServerProcessRequest+0xc2>
			}
		}
		else
		{
			CmdServerDefaultReadWrite(dir, pData, dataLen);
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	68b9      	ldr	r1, [r7, #8]
 800a55a:	230f      	movs	r3, #15
 800a55c:	18fb      	adds	r3, r7, r3
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	0018      	movs	r0, r3
 800a562:	f000 f807 	bl	800a574 <CmdServerDefaultReadWrite>
		}
	}
	return 0;
 800a566:	2300      	movs	r3, #0
}
 800a568:	0018      	movs	r0, r3
 800a56a:	46bd      	mov	sp, r7
 800a56c:	b004      	add	sp, #16
 800a56e:	bdb0      	pop	{r4, r5, r7, pc}
 800a570:	200000c4 	.word	0x200000c4

0800a574 <CmdServerDefaultReadWrite>:

void CmdServerDefaultReadWrite(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	210f      	movs	r1, #15
 800a580:	187b      	adds	r3, r7, r1
 800a582:	1c02      	adds	r2, r0, #0
 800a584:	701a      	strb	r2, [r3, #0]

	if (dir == MASTER_CMD_DIR_WRITE) {
 800a586:	187b      	adds	r3, r7, r1
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <CmdServerDefaultReadWrite+0x30>
			//int16_t size = *dataLen-2;
			//while((--size) >= 0) reg[size+pData[0]] = pData[size+1];
		}
	} else {
		//if (pData[0] < 186) {
			pData[0] = reg[pData[0]];
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	001a      	movs	r2, r3
 800a594:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <CmdServerDefaultReadWrite+0x38>)
 800a596:	569b      	ldrsb	r3, [r3, r2]
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	701a      	strb	r2, [r3, #0]
			*dataLen = 1;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	801a      	strh	r2, [r3, #0]
			int16_t i = pData[0];
			for(i=pData[0]; i < REGISTER_MAX; i++) pData[i-pData[0]] = reg[i];
			*dataLen = REGISTER_MAX - pData[0];
		}*/
	}
}
 800a5a4:	46c0      	nop			; (mov r8, r8)
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	b004      	add	sp, #16
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	20001284 	.word	0x20001284

0800a5b0 <IsEventFault>:


static uint8_t IsEventFault(void)
{
 800a5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
	const BatteryProfile_T * currentBatProfile = BATTERY_GetActiveProfileHandle();
 800a5b6:	f7fd fd71 	bl	800809c <BATTERY_GetActiveProfileHandle>
 800a5ba:	0003      	movs	r3, r0
 800a5bc:	60fb      	str	r3, [r7, #12]
	const bool chargerTempSensorFault = CHARGER_HasTempSensorFault();
 800a5be:	230b      	movs	r3, #11
 800a5c0:	18fc      	adds	r4, r7, r3
 800a5c2:	f7ff fb11 	bl	8009be8 <CHARGER_HasTempSensorFault>
 800a5c6:	0003      	movs	r3, r0
 800a5c8:	7023      	strb	r3, [r4, #0]
	const bool watchdogExpired = POWERMAN_GetWatchdogExpired();
 800a5ca:	250a      	movs	r5, #10
 800a5cc:	197c      	adds	r4, r7, r5
 800a5ce:	f006 ff4f 	bl	8011470 <POWERMAN_GetWatchdogExpired>
 800a5d2:	0003      	movs	r3, r0
 800a5d4:	7023      	strb	r3, [r4, #0]
	const bool powerButtonEvent = POWERMAN_GetPowerButtonPressedStatus();
 800a5d6:	2609      	movs	r6, #9
 800a5d8:	19bc      	adds	r4, r7, r6
 800a5da:	f006 ff3f 	bl	801145c <POWERMAN_GetPowerButtonPressedStatus>
 800a5de:	0003      	movs	r3, r0
 800a5e0:	7023      	strb	r3, [r4, #0]
	const bool forcedPowerOffEvent = POWERSOURCE_GetForcedPowerOffStatus();
 800a5e2:	2308      	movs	r3, #8
 800a5e4:	18fc      	adds	r4, r7, r3
 800a5e6:	f007 fd0f 	bl	8012008 <POWERSOURCE_GetForcedPowerOffStatus>
 800a5ea:	0003      	movs	r3, r0
 800a5ec:	7023      	strb	r3, [r4, #0]
	const bool forcedVSysOutputOffEvent = POWERSOURCE_GetForcedVSysOutputOffStatus();
 800a5ee:	1dfc      	adds	r4, r7, #7
 800a5f0:	f007 fd14 	bl	801201c <POWERSOURCE_GetForcedVSysOutputOffStatus>
 800a5f4:	0003      	movs	r3, r0
 800a5f6:	7023      	strb	r3, [r4, #0]

	uint8_t ev = 0;
 800a5f8:	1dbb      	adds	r3, r7, #6
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	701a      	strb	r2, [r3, #0]

	ev |= (true == powerButtonEvent);
 800a5fe:	19bb      	adds	r3, r7, r6
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	b25a      	sxtb	r2, r3
 800a604:	1dbb      	adds	r3, r7, #6
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	b25b      	sxtb	r3, r3
 800a60a:	4313      	orrs	r3, r2
 800a60c:	b25a      	sxtb	r2, r3
 800a60e:	1dbb      	adds	r3, r7, #6
 800a610:	701a      	strb	r2, [r3, #0]
	ev |= (true == forcedPowerOffEvent);
 800a612:	2308      	movs	r3, #8
 800a614:	18fb      	adds	r3, r7, r3
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	b25a      	sxtb	r2, r3
 800a61a:	1dbb      	adds	r3, r7, #6
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	b25b      	sxtb	r3, r3
 800a620:	4313      	orrs	r3, r2
 800a622:	b25a      	sxtb	r2, r3
 800a624:	1dbb      	adds	r3, r7, #6
 800a626:	701a      	strb	r2, [r3, #0]
	ev |= (true == forcedVSysOutputOffEvent);
 800a628:	1dfb      	adds	r3, r7, #7
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	b25a      	sxtb	r2, r3
 800a62e:	1dbb      	adds	r3, r7, #6
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	b25b      	sxtb	r3, r3
 800a634:	4313      	orrs	r3, r2
 800a636:	b25a      	sxtb	r2, r3
 800a638:	1dbb      	adds	r3, r7, #6
 800a63a:	701a      	strb	r2, [r3, #0]
	ev |= (true == watchdogExpired);
 800a63c:	197b      	adds	r3, r7, r5
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	b25a      	sxtb	r2, r3
 800a642:	1dbb      	adds	r3, r7, #6
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	b25b      	sxtb	r3, r3
 800a648:	4313      	orrs	r3, r2
 800a64a:	b25a      	sxtb	r2, r3
 800a64c:	1dbb      	adds	r3, r7, #6
 800a64e:	701a      	strb	r2, [r3, #0]
	/* Not sure of intention of this one, 0x20 slots into read status so will leave it. */
	ev |= (currentBatProfile == NULL) ? (1<<5u) : 0u;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <IsEventFault+0xaa>
 800a656:	2320      	movs	r3, #32
 800a658:	e000      	b.n	800a65c <IsEventFault+0xac>
 800a65a:	2300      	movs	r3, #0
 800a65c:	1dba      	adds	r2, r7, #6
 800a65e:	1db9      	adds	r1, r7, #6
 800a660:	7809      	ldrb	r1, [r1, #0]
 800a662:	430b      	orrs	r3, r1
 800a664:	7013      	strb	r3, [r2, #0]
	ev |= chargerTempSensorFault;
 800a666:	230b      	movs	r3, #11
 800a668:	18fb      	adds	r3, r7, r3
 800a66a:	7819      	ldrb	r1, [r3, #0]
 800a66c:	1dbb      	adds	r3, r7, #6
 800a66e:	1dba      	adds	r2, r7, #6
 800a670:	7812      	ldrb	r2, [r2, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	701a      	strb	r2, [r3, #0]

	return ev;
 800a676:	1dbb      	adds	r3, r7, #6
 800a678:	781b      	ldrb	r3, [r3, #0]
}
 800a67a:	0018      	movs	r0, r3
 800a67c:	46bd      	mov	sp, r7
 800a67e:	b005      	add	sp, #20
 800a680:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a682 <CmdServerReadStatus>:


void CmdServerReadStatus(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800a682:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a684:	b087      	sub	sp, #28
 800a686:	af00      	add	r7, sp, #0
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
 800a68c:	240f      	movs	r4, #15
 800a68e:	193b      	adds	r3, r7, r4
 800a690:	1c02      	adds	r2, r0, #0
 800a692:	701a      	strb	r2, [r3, #0]
	const uint8_t vinStatus = (uint8_t)(POWERSOURCE_GetVInStatus() & 0x03u);
 800a694:	f007 fc7e 	bl	8011f94 <POWERSOURCE_GetVInStatus>
 800a698:	0003      	movs	r3, r0
 800a69a:	0019      	movs	r1, r3
 800a69c:	2517      	movs	r5, #23
 800a69e:	197b      	adds	r3, r7, r5
 800a6a0:	2203      	movs	r2, #3
 800a6a2:	400a      	ands	r2, r1
 800a6a4:	701a      	strb	r2, [r3, #0]
	const uint8_t v5VRailStatus = (uint8_t)(POWERSOURCE_Get5VRailStatus() & 0x03u);
 800a6a6:	f007 fc7f 	bl	8011fa8 <POWERSOURCE_Get5VRailStatus>
 800a6aa:	0003      	movs	r3, r0
 800a6ac:	0019      	movs	r1, r3
 800a6ae:	2616      	movs	r6, #22
 800a6b0:	19bb      	adds	r3, r7, r6
 800a6b2:	2203      	movs	r2, #3
 800a6b4:	400a      	ands	r2, r1
 800a6b6:	701a      	strb	r2, [r3, #0]
	const uint8_t batteryStatus = (uint8_t)(BATTERY_GetStatus() & 0x03u);
 800a6b8:	f7fd fcfa 	bl	80080b0 <BATTERY_GetStatus>
 800a6bc:	0003      	movs	r3, r0
 800a6be:	0019      	movs	r1, r3
 800a6c0:	2315      	movs	r3, #21
 800a6c2:	18fb      	adds	r3, r7, r3
 800a6c4:	2203      	movs	r2, #3
 800a6c6:	400a      	ands	r2, r1
 800a6c8:	701a      	strb	r2, [r3, #0]

	if (dir == MASTER_CMD_DIR_READ)
 800a6ca:	193b      	adds	r3, r7, r4
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d13a      	bne.n	800a748 <CmdServerReadStatus+0xc6>
	{
		pData[0] = IsEventFault();
 800a6d2:	f7ff ff6d 	bl	800a5b0 <IsEventFault>
 800a6d6:	0003      	movs	r3, r0
 800a6d8:	001a      	movs	r2, r3
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	701a      	strb	r2, [r3, #0]
		pData[0] |= (BUTTON_IsEventActive() << 1u);
 800a6de:	f7fe fc49 	bl	8008f74 <BUTTON_IsEventActive>
 800a6e2:	0003      	movs	r3, r0
 800a6e4:	0059      	lsls	r1, r3, #1
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	b25a      	sxtb	r2, r3
 800a6ec:	b24b      	sxtb	r3, r1
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	b25b      	sxtb	r3, r3
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	701a      	strb	r2, [r3, #0]
		pData[0] |= (batteryStatus << 2u);
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	b25a      	sxtb	r2, r3
 800a6fe:	2315      	movs	r3, #21
 800a700:	18fb      	adds	r3, r7, r3
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	b25b      	sxtb	r3, r3
 800a708:	4313      	orrs	r3, r2
 800a70a:	b25b      	sxtb	r3, r3
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	701a      	strb	r2, [r3, #0]
		pData[0] |= (vinStatus << 4u);
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	b25a      	sxtb	r2, r3
 800a718:	197b      	adds	r3, r7, r5
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	011b      	lsls	r3, r3, #4
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	4313      	orrs	r3, r2
 800a722:	b25b      	sxtb	r3, r3
 800a724:	b2da      	uxtb	r2, r3
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	701a      	strb	r2, [r3, #0]
		pData[0] |= (v5VRailStatus << 6u);
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	b25a      	sxtb	r2, r3
 800a730:	19bb      	adds	r3, r7, r6
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	019b      	lsls	r3, r3, #6
 800a736:	b25b      	sxtb	r3, r3
 800a738:	4313      	orrs	r3, r2
 800a73a:	b25b      	sxtb	r3, r3
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	701a      	strb	r2, [r3, #0]

		*dataLen = 1u;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	801a      	strh	r2, [r3, #0]
	}
}
 800a748:	46c0      	nop			; (mov r8, r8)
 800a74a:	46bd      	mov	sp, r7
 800a74c:	b007      	add	sp, #28
 800a74e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a750 <CmdServerReadWriteEventFaultStatus>:


void CmdServerReadWriteEventFaultStatus(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800a750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a752:	b089      	sub	sp, #36	; 0x24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	250f      	movs	r5, #15
 800a75c:	197b      	adds	r3, r7, r5
 800a75e:	1c02      	adds	r2, r0, #0
 800a760:	701a      	strb	r2, [r3, #0]
	const BatteryProfile_T * currentBatProfile = BATTERY_GetActiveProfileHandle();
 800a762:	f7fd fc9b 	bl	800809c <BATTERY_GetActiveProfileHandle>
 800a766:	0003      	movs	r3, r0
 800a768:	61fb      	str	r3, [r7, #28]
	const uint8_t chargerTempFault = CHARGER_GetTempFault();
 800a76a:	231b      	movs	r3, #27
 800a76c:	18fc      	adds	r4, r7, r3
 800a76e:	f7ff fa4b 	bl	8009c08 <CHARGER_GetTempFault>
 800a772:	0003      	movs	r3, r0
 800a774:	7023      	strb	r3, [r4, #0]
	const bool watchdogExpired = POWERMAN_GetWatchdogExpired();
 800a776:	261a      	movs	r6, #26
 800a778:	19bc      	adds	r4, r7, r6
 800a77a:	f006 fe79 	bl	8011470 <POWERMAN_GetWatchdogExpired>
 800a77e:	0003      	movs	r3, r0
 800a780:	7023      	strb	r3, [r4, #0]
	const bool powerButtonEvent = POWERMAN_GetPowerButtonPressedStatus();
 800a782:	2319      	movs	r3, #25
 800a784:	18fc      	adds	r4, r7, r3
 800a786:	f006 fe69 	bl	801145c <POWERMAN_GetPowerButtonPressedStatus>
 800a78a:	0003      	movs	r3, r0
 800a78c:	7023      	strb	r3, [r4, #0]
	const bool forcedPowerOffEvent = POWERSOURCE_GetForcedPowerOffStatus();
 800a78e:	2218      	movs	r2, #24
 800a790:	18bc      	adds	r4, r7, r2
 800a792:	f007 fc39 	bl	8012008 <POWERSOURCE_GetForcedPowerOffStatus>
 800a796:	0003      	movs	r3, r0
 800a798:	7023      	strb	r3, [r4, #0]
	const bool forcedVSysOutputOffEvent = POWERSOURCE_GetForcedVSysOutputOffStatus();
 800a79a:	2117      	movs	r1, #23
 800a79c:	187c      	adds	r4, r7, r1
 800a79e:	f007 fc3d 	bl	801201c <POWERSOURCE_GetForcedVSysOutputOffStatus>
 800a7a2:	0003      	movs	r3, r0
 800a7a4:	7023      	strb	r3, [r4, #0]

	uint8_t ev = 0u;
 800a7a6:	2016      	movs	r0, #22
 800a7a8:	183b      	adds	r3, r7, r0
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	701a      	strb	r2, [r3, #0]


	if (dir == MASTER_CMD_DIR_READ)
 800a7ae:	197b      	adds	r3, r7, r5
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d14d      	bne.n	800a852 <CmdServerReadWriteEventFaultStatus+0x102>
	{
		ev |= (powerButtonEvent);
 800a7b6:	2319      	movs	r3, #25
 800a7b8:	18fb      	adds	r3, r7, r3
 800a7ba:	7819      	ldrb	r1, [r3, #0]
 800a7bc:	183b      	adds	r3, r7, r0
 800a7be:	183a      	adds	r2, r7, r0
 800a7c0:	7812      	ldrb	r2, [r2, #0]
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	701a      	strb	r2, [r3, #0]
		ev |= (forcedPowerOffEvent << 1u);
 800a7c6:	2218      	movs	r2, #24
 800a7c8:	18bb      	adds	r3, r7, r2
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	b25a      	sxtb	r2, r3
 800a7d0:	0001      	movs	r1, r0
 800a7d2:	187b      	adds	r3, r7, r1
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	b25b      	sxtb	r3, r3
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	b25a      	sxtb	r2, r3
 800a7dc:	187b      	adds	r3, r7, r1
 800a7de:	701a      	strb	r2, [r3, #0]
		ev |= (forcedVSysOutputOffEvent << 2u);
 800a7e0:	2317      	movs	r3, #23
 800a7e2:	18fb      	adds	r3, r7, r3
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	b25a      	sxtb	r2, r3
 800a7ea:	187b      	adds	r3, r7, r1
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	b25b      	sxtb	r3, r3
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	b25a      	sxtb	r2, r3
 800a7f4:	187b      	adds	r3, r7, r1
 800a7f6:	701a      	strb	r2, [r3, #0]
		ev |= (watchdogExpired << 3u);
 800a7f8:	19bb      	adds	r3, r7, r6
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	b25a      	sxtb	r2, r3
 800a800:	187b      	adds	r3, r7, r1
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	b25b      	sxtb	r3, r3
 800a806:	4313      	orrs	r3, r2
 800a808:	b25a      	sxtb	r2, r3
 800a80a:	187b      	adds	r3, r7, r1
 800a80c:	701a      	strb	r2, [r3, #0]
		ev |= (currentBatProfile == NULL) ? 0x20 : 0;
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <CmdServerReadWriteEventFaultStatus+0xc8>
 800a814:	2320      	movs	r3, #32
 800a816:	e000      	b.n	800a81a <CmdServerReadWriteEventFaultStatus+0xca>
 800a818:	2300      	movs	r3, #0
 800a81a:	2116      	movs	r1, #22
 800a81c:	187a      	adds	r2, r7, r1
 800a81e:	7812      	ldrb	r2, [r2, #0]
 800a820:	b252      	sxtb	r2, r2
 800a822:	4313      	orrs	r3, r2
 800a824:	b25a      	sxtb	r2, r3
 800a826:	187b      	adds	r3, r7, r1
 800a828:	701a      	strb	r2, [r3, #0]
		ev |= (chargerTempFault << 6u);
 800a82a:	231b      	movs	r3, #27
 800a82c:	18fb      	adds	r3, r7, r3
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	019b      	lsls	r3, r3, #6
 800a832:	b25a      	sxtb	r2, r3
 800a834:	187b      	adds	r3, r7, r1
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	b25b      	sxtb	r3, r3
 800a83a:	4313      	orrs	r3, r2
 800a83c:	b25a      	sxtb	r2, r3
 800a83e:	187b      	adds	r3, r7, r1
 800a840:	701a      	strb	r2, [r3, #0]

		pData[0u] = ev;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	187a      	adds	r2, r7, r1
 800a846:	7812      	ldrb	r2, [r2, #0]
 800a848:	701a      	strb	r2, [r3, #0]
		*dataLen = 1u;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	801a      	strh	r2, [r3, #0]
		if (0u == (pData[1u] & 0x08u))
		{
			POWERMAN_ClearWatchdog();
		}
	}
}
 800a850:	e023      	b.n	800a89a <CmdServerReadWriteEventFaultStatus+0x14a>
		if (0u == (pData[1u] & 0x01u))
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	3301      	adds	r3, #1
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	001a      	movs	r2, r3
 800a85a:	2301      	movs	r3, #1
 800a85c:	4013      	ands	r3, r2
 800a85e:	d101      	bne.n	800a864 <CmdServerReadWriteEventFaultStatus+0x114>
			POWERMAN_ClearPowerButtonPressed();
 800a860:	f006 ffe2 	bl	8011828 <POWERMAN_ClearPowerButtonPressed>
		if (0u == (pData[1u] & 0x02u))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	3301      	adds	r3, #1
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	001a      	movs	r2, r3
 800a86c:	2302      	movs	r3, #2
 800a86e:	4013      	ands	r3, r2
 800a870:	d101      	bne.n	800a876 <CmdServerReadWriteEventFaultStatus+0x126>
			POWERSOURCE_ClearForcedPowerOff();
 800a872:	f007 fbdd 	bl	8012030 <POWERSOURCE_ClearForcedPowerOff>
		if (0u == (pData[1u] & 0x04u))
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	3301      	adds	r3, #1
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	001a      	movs	r2, r3
 800a87e:	2304      	movs	r3, #4
 800a880:	4013      	ands	r3, r2
 800a882:	d101      	bne.n	800a888 <CmdServerReadWriteEventFaultStatus+0x138>
			POWERSOURCE_ClearForcedVSysOutputOff();
 800a884:	f007 fbde 	bl	8012044 <POWERSOURCE_ClearForcedVSysOutputOff>
		if (0u == (pData[1u] & 0x08u))
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	3301      	adds	r3, #1
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	001a      	movs	r2, r3
 800a890:	2308      	movs	r3, #8
 800a892:	4013      	ands	r3, r2
 800a894:	d101      	bne.n	800a89a <CmdServerReadWriteEventFaultStatus+0x14a>
			POWERMAN_ClearWatchdog();
 800a896:	f006 fdf5 	bl	8011484 <POWERMAN_ClearWatchdog>
}
 800a89a:	46c0      	nop			; (mov r8, r8)
 800a89c:	46bd      	mov	sp, r7
 800a89e:	b009      	add	sp, #36	; 0x24
 800a8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a8a4 <CmdServerReadRsoc>:


void CmdServerReadRsoc(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	260f      	movs	r6, #15
 800a8b0:	19bb      	adds	r3, r7, r6
 800a8b2:	1c02      	adds	r2, r0, #0
 800a8b4:	701a      	strb	r2, [r3, #0]
	const uint16_t batteryRsocPt1 = FUELGAUGE_GetSocPt1();
 800a8b6:	2516      	movs	r5, #22
 800a8b8:	197c      	adds	r4, r7, r5
 800a8ba:	f002 f97d 	bl	800cbb8 <FUELGAUGE_GetSocPt1>
 800a8be:	0003      	movs	r3, r0
 800a8c0:	8023      	strh	r3, [r4, #0]

	if (dir == MASTER_CMD_DIR_READ)
 800a8c2:	19bb      	adds	r3, r7, r6
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d115      	bne.n	800a8f6 <CmdServerReadRsoc+0x52>
	{
		// TODO - Check, original might have divided by 20!
		pData[0] = (batteryRsocPt1 < 1000u) ? UTIL_FixMul_U32_U16(6553u, batteryRsocPt1) : 100u;
 800a8ca:	197b      	adds	r3, r7, r5
 800a8cc:	881a      	ldrh	r2, [r3, #0]
 800a8ce:	23fa      	movs	r3, #250	; 0xfa
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d209      	bcs.n	800a8ea <CmdServerReadRsoc+0x46>
 800a8d6:	197b      	adds	r3, r7, r5
 800a8d8:	881b      	ldrh	r3, [r3, #0]
 800a8da:	4a09      	ldr	r2, [pc, #36]	; (800a900 <CmdServerReadRsoc+0x5c>)
 800a8dc:	0019      	movs	r1, r3
 800a8de:	0010      	movs	r0, r2
 800a8e0:	f008 ff21 	bl	8013726 <UTIL_FixMul_U32_U16>
 800a8e4:	0003      	movs	r3, r0
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	e000      	b.n	800a8ec <CmdServerReadRsoc+0x48>
 800a8ea:	2264      	movs	r2, #100	; 0x64
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	701a      	strb	r2, [r3, #0]
		*dataLen = 1u;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	801a      	strh	r2, [r3, #0]
	}
}
 800a8f6:	46c0      	nop			; (mov r8, r8)
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	b007      	add	sp, #28
 800a8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8fe:	46c0      	nop			; (mov r8, r8)
 800a900:	00001999 	.word	0x00001999

0800a904 <CmdServerReadRsocHigherResolution>:


void CmdServerReadRsocHigherResolution(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800a904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	607a      	str	r2, [r7, #4]
 800a90e:	260f      	movs	r6, #15
 800a910:	19bb      	adds	r3, r7, r6
 800a912:	1c02      	adds	r2, r0, #0
 800a914:	701a      	strb	r2, [r3, #0]
	const uint16_t batteryRsocPt1 = FUELGAUGE_GetSocPt1();
 800a916:	2516      	movs	r5, #22
 800a918:	197c      	adds	r4, r7, r5
 800a91a:	f002 f94d 	bl	800cbb8 <FUELGAUGE_GetSocPt1>
 800a91e:	0003      	movs	r3, r0
 800a920:	8023      	strh	r3, [r4, #0]

	if (dir == MASTER_CMD_DIR_READ)
 800a922:	19bb      	adds	r3, r7, r6
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d111      	bne.n	800a94e <CmdServerReadRsocHigherResolution+0x4a>
	{
		pData[0] = (uint8_t)(batteryRsocPt1 & 0xFFu);
 800a92a:	197b      	adds	r3, r7, r5
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	701a      	strb	r2, [r3, #0]
		pData[1] = (uint8_t)((batteryRsocPt1 >> 8u) * 0xFFu);
 800a934:	197b      	adds	r3, r7, r5
 800a936:	881b      	ldrh	r3, [r3, #0]
 800a938:	0a1b      	lsrs	r3, r3, #8
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	3301      	adds	r3, #1
 800a942:	4252      	negs	r2, r2
 800a944:	b2d2      	uxtb	r2, r2
 800a946:	701a      	strb	r2, [r3, #0]
		*dataLen = 2u;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2202      	movs	r2, #2
 800a94c:	801a      	strh	r2, [r3, #0]
	}
}
 800a94e:	46c0      	nop			; (mov r8, r8)
 800a950:	46bd      	mov	sp, r7
 800a952:	b007      	add	sp, #28
 800a954:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a956 <CmdServerReadButtonStatus>:


void CmdServerReadButtonStatus(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
 800a960:	210f      	movs	r1, #15
 800a962:	187b      	adds	r3, r7, r1
 800a964:	1c02      	adds	r2, r0, #0
 800a966:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_READ)
 800a968:	187b      	adds	r3, r7, r1
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d126      	bne.n	800a9be <CmdServerReadButtonStatus+0x68>
	{
		pData[0u] = ((uint8_t)BUTTON_GetButtonEvent(0u) & 0xFu);
 800a970:	2000      	movs	r0, #0
 800a972:	f7fe fab9 	bl	8008ee8 <BUTTON_GetButtonEvent>
 800a976:	0003      	movs	r3, r0
 800a978:	001a      	movs	r2, r3
 800a97a:	230f      	movs	r3, #15
 800a97c:	4013      	ands	r3, r2
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	701a      	strb	r2, [r3, #0]
		pData[0u] |= ((uint8_t)BUTTON_GetButtonEvent(1u) << 4u);
 800a984:	2001      	movs	r0, #1
 800a986:	f7fe faaf 	bl	8008ee8 <BUTTON_GetButtonEvent>
 800a98a:	0003      	movs	r3, r0
 800a98c:	0119      	lsls	r1, r3, #4
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	b25a      	sxtb	r2, r3
 800a994:	b24b      	sxtb	r3, r1
 800a996:	4313      	orrs	r3, r2
 800a998:	b25b      	sxtb	r3, r3
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	701a      	strb	r2, [r3, #0]
		pData[1u] = ((uint8_t)BUTTON_GetButtonEvent(2u) & 0xFu);
 800a9a0:	2002      	movs	r0, #2
 800a9a2:	f7fe faa1 	bl	8008ee8 <BUTTON_GetButtonEvent>
 800a9a6:	0003      	movs	r3, r0
 800a9a8:	0019      	movs	r1, r3
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	220f      	movs	r2, #15
 800a9b0:	400a      	ands	r2, r1
 800a9b2:	b2d2      	uxtb	r2, r2
 800a9b4:	701a      	strb	r2, [r3, #0]

		*dataLen = 2u;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	801a      	strh	r2, [r3, #0]
		if (0u == (pData[2u] & 0x0Fu))
		{
			BUTTON_ClearEvent(2u);
		}
	}
}
 800a9bc:	e01d      	b.n	800a9fa <CmdServerReadButtonStatus+0xa4>
		if (0u == (pData[1u] & 0x0Fu))
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	001a      	movs	r2, r3
 800a9c6:	230f      	movs	r3, #15
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	d102      	bne.n	800a9d2 <CmdServerReadButtonStatus+0x7c>
			BUTTON_ClearEvent(0u);
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	f7fe faa7 	bl	8008f20 <BUTTON_ClearEvent>
		if (0u == (pData[1u] & 0xF0u))
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	001a      	movs	r2, r3
 800a9da:	23f0      	movs	r3, #240	; 0xf0
 800a9dc:	4013      	ands	r3, r2
 800a9de:	d102      	bne.n	800a9e6 <CmdServerReadButtonStatus+0x90>
			BUTTON_ClearEvent(1u);
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	f7fe fa9d 	bl	8008f20 <BUTTON_ClearEvent>
		if (0u == (pData[2u] & 0x0Fu))
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	3302      	adds	r3, #2
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	001a      	movs	r2, r3
 800a9ee:	230f      	movs	r3, #15
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	d102      	bne.n	800a9fa <CmdServerReadButtonStatus+0xa4>
			BUTTON_ClearEvent(2u);
 800a9f4:	2002      	movs	r0, #2
 800a9f6:	f7fe fa93 	bl	8008f20 <BUTTON_ClearEvent>
}
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	b004      	add	sp, #16
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <CmdServerReadBatTemp>:

void CmdServerReadBatTemp(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800aa04:	b590      	push	{r4, r7, lr}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60b9      	str	r1, [r7, #8]
 800aa0c:	607a      	str	r2, [r7, #4]
 800aa0e:	240f      	movs	r4, #15
 800aa10:	193b      	adds	r3, r7, r4
 800aa12:	1c02      	adds	r2, r0, #0
 800aa14:	701a      	strb	r2, [r3, #0]
	const uint8_t batteryTemp = FUELGAUGE_GetBatteryTemperature();
 800aa16:	f002 f8bd 	bl	800cb94 <FUELGAUGE_GetBatteryTemperature>
 800aa1a:	0003      	movs	r3, r0
 800aa1c:	001a      	movs	r2, r3
 800aa1e:	2117      	movs	r1, #23
 800aa20:	187b      	adds	r3, r7, r1
 800aa22:	701a      	strb	r2, [r3, #0]

	if (dir == MASTER_CMD_DIR_READ)
 800aa24:	193b      	adds	r3, r7, r4
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d119      	bne.n	800aa60 <CmdServerReadBatTemp+0x5c>
	{
		uint8_t adr = pData[0];
 800aa2c:	2016      	movs	r0, #22
 800aa2e:	183b      	adds	r3, r7, r0
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	7812      	ldrb	r2, [r2, #0]
 800aa34:	701a      	strb	r2, [r3, #0]
		reg[adr] = batteryTemp;
 800aa36:	183b      	adds	r3, r7, r0
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	187a      	adds	r2, r7, r1
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	5651      	ldrsb	r1, [r2, r1]
 800aa40:	4a09      	ldr	r2, [pc, #36]	; (800aa68 <CmdServerReadBatTemp+0x64>)
 800aa42:	54d1      	strb	r1, [r2, r3]
		//reg[adr+1] = batteryTemp >> 8;
		pData[0] = reg[adr];
 800aa44:	183b      	adds	r3, r7, r0
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	4a07      	ldr	r2, [pc, #28]	; (800aa68 <CmdServerReadBatTemp+0x64>)
 800aa4a:	56d3      	ldrsb	r3, [r2, r3]
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	701a      	strb	r2, [r3, #0]
		pData[1] = 0xFF;//reg[adr+1];
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	3301      	adds	r3, #1
 800aa56:	22ff      	movs	r2, #255	; 0xff
 800aa58:	701a      	strb	r2, [r3, #0]
		*dataLen = 2;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	801a      	strh	r2, [r3, #0]
	}
}
 800aa60:	46c0      	nop			; (mov r8, r8)
 800aa62:	46bd      	mov	sp, r7
 800aa64:	b007      	add	sp, #28
 800aa66:	bd90      	pop	{r4, r7, pc}
 800aa68:	20001284 	.word	0x20001284

0800aa6c <CmdServerReadBatVoltage>:

void CmdServerReadBatVoltage(const uint8_t dir, uint8_t * const p_data, uint16_t * const dataLen)
{
 800aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6e:	b087      	sub	sp, #28
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	260f      	movs	r6, #15
 800aa78:	19bb      	adds	r3, r7, r6
 800aa7a:	1c02      	adds	r2, r0, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
	const uint16_t batteryMv = FUELGAUGE_GetBatteryMv();
 800aa7e:	2516      	movs	r5, #22
 800aa80:	197c      	adds	r4, r7, r5
 800aa82:	f002 f8ad 	bl	800cbe0 <FUELGAUGE_GetBatteryMv>
 800aa86:	0003      	movs	r3, r0
 800aa88:	8023      	strh	r3, [r4, #0]

	if (dir == MASTER_CMD_DIR_READ)
 800aa8a:	19bb      	adds	r3, r7, r6
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d128      	bne.n	800aae4 <CmdServerReadBatVoltage+0x78>
	{
		uint8_t adr = p_data[0u];
 800aa92:	2015      	movs	r0, #21
 800aa94:	183b      	adds	r3, r7, r0
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	7812      	ldrb	r2, [r2, #0]
 800aa9a:	701a      	strb	r2, [r3, #0]
		reg[adr] = (uint8_t)(batteryMv & 0xFFu);
 800aa9c:	183b      	adds	r3, r7, r0
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	197a      	adds	r2, r7, r5
 800aaa2:	8812      	ldrh	r2, [r2, #0]
 800aaa4:	b251      	sxtb	r1, r2
 800aaa6:	4a11      	ldr	r2, [pc, #68]	; (800aaec <CmdServerReadBatVoltage+0x80>)
 800aaa8:	54d1      	strb	r1, [r2, r3]
		reg[adr + 1u] = (uint8_t)((batteryMv >> 8u) & 0xFFu);
 800aaaa:	197b      	adds	r3, r7, r5
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	0a1b      	lsrs	r3, r3, #8
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	183b      	adds	r3, r7, r0
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	3301      	adds	r3, #1
 800aab8:	b251      	sxtb	r1, r2
 800aaba:	4a0c      	ldr	r2, [pc, #48]	; (800aaec <CmdServerReadBatVoltage+0x80>)
 800aabc:	54d1      	strb	r1, [r2, r3]
		p_data[0] = reg[adr];
 800aabe:	183b      	adds	r3, r7, r0
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <CmdServerReadBatVoltage+0x80>)
 800aac4:	56d3      	ldrsb	r3, [r2, r3]
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	701a      	strb	r2, [r3, #0]
		p_data[1] = reg[adr+1];
 800aacc:	183b      	adds	r3, r7, r0
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	3301      	adds	r3, #1
 800aad2:	4a06      	ldr	r2, [pc, #24]	; (800aaec <CmdServerReadBatVoltage+0x80>)
 800aad4:	56d2      	ldrsb	r2, [r2, r3]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	3301      	adds	r3, #1
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	701a      	strb	r2, [r3, #0]
		*dataLen = 2;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2202      	movs	r2, #2
 800aae2:	801a      	strh	r2, [r3, #0]
	}
}
 800aae4:	46c0      	nop			; (mov r8, r8)
 800aae6:	46bd      	mov	sp, r7
 800aae8:	b007      	add	sp, #28
 800aaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaec:	20001284 	.word	0x20001284

0800aaf0 <CmdServerReadBatCurrent>:

void CmdServerReadBatCurrent(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800aaf0:	b590      	push	{r4, r7, lr}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60b9      	str	r1, [r7, #8]
 800aaf8:	607a      	str	r2, [r7, #4]
 800aafa:	240f      	movs	r4, #15
 800aafc:	193b      	adds	r3, r7, r4
 800aafe:	1c02      	adds	r2, r0, #0
 800ab00:	701a      	strb	r2, [r3, #0]
	// TODO - Check the units this is supposed to be in
	const uint16_t cur = FUELGAUGE_GetBatteryMaHr();
 800ab02:	f002 f863 	bl	800cbcc <FUELGAUGE_GetBatteryMaHr>
 800ab06:	0003      	movs	r3, r0
 800ab08:	001a      	movs	r2, r3
 800ab0a:	2116      	movs	r1, #22
 800ab0c:	187b      	adds	r3, r7, r1
 800ab0e:	801a      	strh	r2, [r3, #0]

	if (dir == MASTER_CMD_DIR_READ)
 800ab10:	193b      	adds	r3, r7, r4
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d129      	bne.n	800ab6c <CmdServerReadBatCurrent+0x7c>
	{
		uint8_t adr = pData[0u];
 800ab18:	2015      	movs	r0, #21
 800ab1a:	183b      	adds	r3, r7, r0
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	7812      	ldrb	r2, [r2, #0]
 800ab20:	701a      	strb	r2, [r3, #0]
		reg[adr] = cur;
 800ab22:	183b      	adds	r3, r7, r0
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	000c      	movs	r4, r1
 800ab28:	187a      	adds	r2, r7, r1
 800ab2a:	8812      	ldrh	r2, [r2, #0]
 800ab2c:	b251      	sxtb	r1, r2
 800ab2e:	4a11      	ldr	r2, [pc, #68]	; (800ab74 <CmdServerReadBatCurrent+0x84>)
 800ab30:	54d1      	strb	r1, [r2, r3]
		reg[adr + 1u] = cur >> 8u;
 800ab32:	193b      	adds	r3, r7, r4
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	0a1b      	lsrs	r3, r3, #8
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	183b      	adds	r3, r7, r0
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	b251      	sxtb	r1, r2
 800ab42:	4a0c      	ldr	r2, [pc, #48]	; (800ab74 <CmdServerReadBatCurrent+0x84>)
 800ab44:	54d1      	strb	r1, [r2, r3]
		pData[0u] = reg[adr];
 800ab46:	183b      	adds	r3, r7, r0
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	4a0a      	ldr	r2, [pc, #40]	; (800ab74 <CmdServerReadBatCurrent+0x84>)
 800ab4c:	56d3      	ldrsb	r3, [r2, r3]
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	701a      	strb	r2, [r3, #0]
		pData[1u] = reg[adr + 1u];
 800ab54:	183b      	adds	r3, r7, r0
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	4a06      	ldr	r2, [pc, #24]	; (800ab74 <CmdServerReadBatCurrent+0x84>)
 800ab5c:	56d2      	ldrsb	r2, [r2, r3]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	3301      	adds	r3, #1
 800ab62:	b2d2      	uxtb	r2, r2
 800ab64:	701a      	strb	r2, [r3, #0]
		*dataLen = 2u;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2202      	movs	r2, #2
 800ab6a:	801a      	strh	r2, [r3, #0]
	}
}
 800ab6c:	46c0      	nop			; (mov r8, r8)
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	b007      	add	sp, #28
 800ab72:	bd90      	pop	{r4, r7, pc}
 800ab74:	20001284 	.word	0x20001284

0800ab78 <CmdServerReadMainVoltage>:

void CmdServerReadMainVoltage(uint8_t dir, uint8_t *p_Data, uint16_t *dataLen)
{
 800ab78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab7a:	b087      	sub	sp, #28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60b9      	str	r1, [r7, #8]
 800ab80:	607a      	str	r2, [r7, #4]
 800ab82:	260f      	movs	r6, #15
 800ab84:	19bb      	adds	r3, r7, r6
 800ab86:	1c02      	adds	r2, r0, #0
 800ab88:	701a      	strb	r2, [r3, #0]
	const uint16_t ioVolt = ANALOG_Get5VRailMv();
 800ab8a:	2516      	movs	r5, #22
 800ab8c:	197c      	adds	r4, r7, r5
 800ab8e:	f7fc fe21 	bl	80077d4 <ANALOG_Get5VRailMv>
 800ab92:	0003      	movs	r3, r0
 800ab94:	8023      	strh	r3, [r4, #0]

	if (dir == MASTER_CMD_DIR_READ)
 800ab96:	19bb      	adds	r3, r7, r6
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d125      	bne.n	800abea <CmdServerReadMainVoltage+0x72>
	{
		uint8_t adr = *p_Data;
 800ab9e:	2015      	movs	r0, #21
 800aba0:	183b      	adds	r3, r7, r0
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	7812      	ldrb	r2, [r2, #0]
 800aba6:	701a      	strb	r2, [r3, #0]

		*p_Data = reg[adr] = (uint8_t)(ioVolt & 0xFFu);
 800aba8:	183b      	adds	r3, r7, r0
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	197a      	adds	r2, r7, r5
 800abae:	8812      	ldrh	r2, [r2, #0]
 800abb0:	b251      	sxtb	r1, r2
 800abb2:	4a10      	ldr	r2, [pc, #64]	; (800abf4 <CmdServerReadMainVoltage+0x7c>)
 800abb4:	54d1      	strb	r1, [r2, r3]
 800abb6:	4a0f      	ldr	r2, [pc, #60]	; (800abf4 <CmdServerReadMainVoltage+0x7c>)
 800abb8:	56d3      	ldrsb	r3, [r2, r3]
 800abba:	b2da      	uxtb	r2, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	701a      	strb	r2, [r3, #0]
		p_Data++;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	3301      	adds	r3, #1
 800abc4:	60bb      	str	r3, [r7, #8]
		*p_Data = reg[adr + 1u] = (uint8_t)((ioVolt >> 8u) & 0xFFu);
 800abc6:	197b      	adds	r3, r7, r5
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	0a1b      	lsrs	r3, r3, #8
 800abcc:	b29a      	uxth	r2, r3
 800abce:	183b      	adds	r3, r7, r0
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	3301      	adds	r3, #1
 800abd4:	b251      	sxtb	r1, r2
 800abd6:	4a07      	ldr	r2, [pc, #28]	; (800abf4 <CmdServerReadMainVoltage+0x7c>)
 800abd8:	54d1      	strb	r1, [r2, r3]
 800abda:	4a06      	ldr	r2, [pc, #24]	; (800abf4 <CmdServerReadMainVoltage+0x7c>)
 800abdc:	56d3      	ldrsb	r3, [r2, r3]
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	701a      	strb	r2, [r3, #0]

		*dataLen = 2u;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	801a      	strh	r2, [r3, #0]
	}
}
 800abea:	46c0      	nop			; (mov r8, r8)
 800abec:	46bd      	mov	sp, r7
 800abee:	b007      	add	sp, #28
 800abf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abf2:	46c0      	nop			; (mov r8, r8)
 800abf4:	20001284 	.word	0x20001284

0800abf8 <CmdServerReadMainCurrent>:

void CmdServerReadMainCurrent(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800abf8:	b590      	push	{r4, r7, lr}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	607a      	str	r2, [r7, #4]
 800ac02:	210f      	movs	r1, #15
 800ac04:	187b      	adds	r3, r7, r1
 800ac06:	1c02      	adds	r2, r0, #0
 800ac08:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_READ)
 800ac0a:	187b      	adds	r3, r7, r1
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d130      	bne.n	800ac74 <CmdServerReadMainCurrent+0x7c>
	{
		uint16_t cur = (uint16_t)ISENSE_GetLoadCurrentMa();
 800ac12:	f005 faad 	bl	8010170 <ISENSE_GetLoadCurrentMa>
 800ac16:	0003      	movs	r3, r0
 800ac18:	001a      	movs	r2, r3
 800ac1a:	2116      	movs	r1, #22
 800ac1c:	187b      	adds	r3, r7, r1
 800ac1e:	801a      	strh	r2, [r3, #0]

		uint8_t adr = pData[0];
 800ac20:	2015      	movs	r0, #21
 800ac22:	183b      	adds	r3, r7, r0
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	7812      	ldrb	r2, [r2, #0]
 800ac28:	701a      	strb	r2, [r3, #0]
		reg[adr] = cur;
 800ac2a:	183b      	adds	r3, r7, r0
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	000c      	movs	r4, r1
 800ac30:	187a      	adds	r2, r7, r1
 800ac32:	8812      	ldrh	r2, [r2, #0]
 800ac34:	b251      	sxtb	r1, r2
 800ac36:	4a11      	ldr	r2, [pc, #68]	; (800ac7c <CmdServerReadMainCurrent+0x84>)
 800ac38:	54d1      	strb	r1, [r2, r3]
		reg[adr+1] = cur >> 8;
 800ac3a:	193b      	adds	r3, r7, r4
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	0a1b      	lsrs	r3, r3, #8
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	183b      	adds	r3, r7, r0
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	b251      	sxtb	r1, r2
 800ac4a:	4a0c      	ldr	r2, [pc, #48]	; (800ac7c <CmdServerReadMainCurrent+0x84>)
 800ac4c:	54d1      	strb	r1, [r2, r3]
		pData[0] = reg[adr];
 800ac4e:	183b      	adds	r3, r7, r0
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	4a0a      	ldr	r2, [pc, #40]	; (800ac7c <CmdServerReadMainCurrent+0x84>)
 800ac54:	56d3      	ldrsb	r3, [r2, r3]
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	701a      	strb	r2, [r3, #0]
		pData[1] = reg[adr+1];
 800ac5c:	183b      	adds	r3, r7, r0
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	4a06      	ldr	r2, [pc, #24]	; (800ac7c <CmdServerReadMainCurrent+0x84>)
 800ac64:	56d2      	ldrsb	r2, [r2, r3]
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
		*dataLen = 2;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2202      	movs	r2, #2
 800ac72:	801a      	strh	r2, [r3, #0]
	}
}
 800ac74:	46c0      	nop			; (mov r8, r8)
 800ac76:	46bd      	mov	sp, r7
 800ac78:	b007      	add	sp, #28
 800ac7a:	bd90      	pop	{r4, r7, pc}
 800ac7c:	20001284 	.word	0x20001284

0800ac80 <CmdServerReadWriteChargingConfig>:
	}
}*/


void CmdServerReadWriteChargingConfig(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	607a      	str	r2, [r7, #4]
 800ac8a:	210f      	movs	r1, #15
 800ac8c:	187b      	adds	r3, r7, r1
 800ac8e:	1c02      	adds	r2, r0, #0
 800ac90:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800ac92:	187b      	adds	r3, r7, r1
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d106      	bne.n	800aca8 <CmdServerReadWriteChargingConfig+0x28>
	{
		CHARGER_SetChargeEnableConfig(pData[1u]);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	0018      	movs	r0, r3
 800aca2:	f7fe fedb 	bl	8009a5c <CHARGER_SetChargeEnableConfig>
	else
	{
		pData[0u] = CHARGER_GetChargeEnableConfig();
		*dataLen = 1u;
	}
}
 800aca6:	e008      	b.n	800acba <CmdServerReadWriteChargingConfig+0x3a>
		pData[0u] = CHARGER_GetChargeEnableConfig();
 800aca8:	f7fe fef8 	bl	8009a9c <CHARGER_GetChargeEnableConfig>
 800acac:	0003      	movs	r3, r0
 800acae:	001a      	movs	r2, r3
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	701a      	strb	r2, [r3, #0]
		*dataLen = 1u;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	801a      	strh	r2, [r3, #0]
}
 800acba:	46c0      	nop			; (mov r8, r8)
 800acbc:	46bd      	mov	sp, r7
 800acbe:	b004      	add	sp, #16
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <CmdServerReadWriteBatProfile>:


void CmdServerReadWriteBatProfile(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	210f      	movs	r1, #15
 800acce:	187b      	adds	r3, r7, r1
 800acd0:	1c02      	adds	r2, r0, #0
 800acd2:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800acd4:	187b      	adds	r3, r7, r1
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10a      	bne.n	800acf2 <CmdServerReadWriteBatProfile+0x30>
	{
		BATTERY_WriteCustomProfileData(&pData[1u], *dataLen - 1u);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	881b      	ldrh	r3, [r3, #0]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	0019      	movs	r1, r3
 800acea:	0010      	movs	r0, r2
 800acec:	f7fc ffe4 	bl	8007cb8 <BATTERY_WriteCustomProfileData>
	}
	else
	{
		BATTERY_ReadActiveProfileData(pData, dataLen);
	}
}
 800acf0:	e005      	b.n	800acfe <CmdServerReadWriteBatProfile+0x3c>
		BATTERY_ReadActiveProfileData(pData, dataLen);
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	0011      	movs	r1, r2
 800acf8:	0018      	movs	r0, r3
 800acfa:	f7fd f85f 	bl	8007dbc <BATTERY_ReadActiveProfileData>
}
 800acfe:	46c0      	nop			; (mov r8, r8)
 800ad00:	46bd      	mov	sp, r7
 800ad02:	b004      	add	sp, #16
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <CmdServerReadWriteBatExtendedProfile>:


void CmdServerReadWriteBatExtendedProfile(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
 800ad10:	210f      	movs	r1, #15
 800ad12:	187b      	adds	r3, r7, r1
 800ad14:	1c02      	adds	r2, r0, #0
 800ad16:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800ad18:	187b      	adds	r3, r7, r1
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10a      	bne.n	800ad36 <CmdServerReadWriteBatExtendedProfile+0x30>
	{
		BATTERY_WriteCustomProfileExtendedData(&pData[1], *dataLen-1);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	0019      	movs	r1, r3
 800ad2e:	0010      	movs	r0, r2
 800ad30:	f7fd f8fc 	bl	8007f2c <BATTERY_WriteCustomProfileExtendedData>
	}
	else
	{
		BATTERY_ReadActiveProfileExtendedData(pData, dataLen);
	}
}
 800ad34:	e005      	b.n	800ad42 <CmdServerReadWriteBatExtendedProfile+0x3c>
		BATTERY_ReadActiveProfileExtendedData(pData, dataLen);
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	0011      	movs	r1, r2
 800ad3c:	0018      	movs	r0, r3
 800ad3e:	f7fd f941 	bl	8007fc4 <BATTERY_ReadActiveProfileExtendedData>
}
 800ad42:	46c0      	nop			; (mov r8, r8)
 800ad44:	46bd      	mov	sp, r7
 800ad46:	b004      	add	sp, #16
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <CmdServerReadWriteBatteryProfileId>:


void CmdServerReadWriteBatteryProfileId(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	210f      	movs	r1, #15
 800ad56:	187b      	adds	r3, r7, r1
 800ad58:	1c02      	adds	r2, r0, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
	if (MASTER_CMD_DIR_WRITE == dir)
 800ad5c:	187b      	adds	r3, r7, r1
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d106      	bne.n	800ad72 <CmdServerReadWriteBatteryProfileId+0x28>
	{
		BATTERY_SetProfileIdReq(pData[1u]);
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	3301      	adds	r3, #1
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	0018      	movs	r0, r3
 800ad6c:	f7fc ff82 	bl	8007c74 <BATTERY_SetProfileIdReq>
	}
	else
	{
		BATTERY_ReadProfileStatusData(pData, dataLen);
	}
}
 800ad70:	e005      	b.n	800ad7e <CmdServerReadWriteBatteryProfileId+0x34>
		BATTERY_ReadProfileStatusData(pData, dataLen);
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	0011      	movs	r1, r2
 800ad78:	0018      	movs	r0, r3
 800ad7a:	f7fd f97d 	bl	8008078 <BATTERY_ReadProfileStatusData>
}
 800ad7e:	46c0      	nop			; (mov r8, r8)
 800ad80:	46bd      	mov	sp, r7
 800ad82:	b004      	add	sp, #16
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <CmdServerReadWriteFuelGaugeConfig>:


void CmdServerReadWriteFuelGaugeConfig(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	210f      	movs	r1, #15
 800ad92:	187b      	adds	r3, r7, r1
 800ad94:	1c02      	adds	r2, r0, #0
 800ad96:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800ad98:	187b      	adds	r3, r7, r1
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <CmdServerReadWriteFuelGaugeConfig+0x30>
	{
		FUELGAUGE_SetConfigData(&pData[1u], *dataLen - 1u);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	b29b      	uxth	r3, r3
 800adac:	0019      	movs	r1, r3
 800adae:	0010      	movs	r0, r2
 800adb0:	f001 fe72 	bl	800ca98 <FUELGAUGE_SetConfigData>
	}
	else
	{
		FUELGAUGE_GetConfigData(pData, dataLen);
	}
}
 800adb4:	e005      	b.n	800adc2 <CmdServerReadWriteFuelGaugeConfig+0x3c>
		FUELGAUGE_GetConfigData(pData, dataLen);
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	0011      	movs	r1, r2
 800adbc:	0018      	movs	r0, r3
 800adbe:	f001 feb1 	bl	800cb24 <FUELGAUGE_GetConfigData>
}
 800adc2:	46c0      	nop			; (mov r8, r8)
 800adc4:	46bd      	mov	sp, r7
 800adc6:	b004      	add	sp, #16
 800adc8:	bd80      	pop	{r7, pc}

0800adca <CmdServerReadWriteDateTime>:


void CmdServerReadWriteDateTime(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	210f      	movs	r1, #15
 800add6:	187b      	adds	r3, r7, r1
 800add8:	1c02      	adds	r2, r0, #0
 800adda:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800addc:	187b      	adds	r3, r7, r1
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d106      	bne.n	800adf2 <CmdServerReadWriteDateTime+0x28>
		RtcWriteTime(pData+1, 1);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	3301      	adds	r3, #1
 800ade8:	2101      	movs	r1, #1
 800adea:	0018      	movs	r0, r3
 800adec:	f007 feba 	bl	8012b64 <RtcWriteTime>
//		reg[adr+2] = pData[2];
//		pData[3] = dateConf.WeekDay;
//		reg[adr+3] = pData[3];
//		*dataLen = 4;
	}
}
 800adf0:	e007      	b.n	800ae02 <CmdServerReadWriteDateTime+0x38>
		RtcReadTime(pData, 1);
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2101      	movs	r1, #1
 800adf6:	0018      	movs	r0, r3
 800adf8:	f007 ff74 	bl	8012ce4 <RtcReadTime>
		*dataLen = 9;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2209      	movs	r2, #9
 800ae00:	801a      	strh	r2, [r3, #0]
}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	46bd      	mov	sp, r7
 800ae06:	b004      	add	sp, #16
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <CmdServerReadWriteAlarm>:

	}
}


void CmdServerReadWriteAlarm(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	210f      	movs	r1, #15
 800ae16:	187b      	adds	r3, r7, r1
 800ae18:	1c02      	adds	r2, r0, #0
 800ae1a:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800ae1c:	187b      	adds	r3, r7, r1
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d106      	bne.n	800ae32 <CmdServerReadWriteAlarm+0x28>
		RtcWriteAlarm1(pData+1, 1);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	3301      	adds	r3, #1
 800ae28:	2101      	movs	r1, #1
 800ae2a:	0018      	movs	r0, r3
 800ae2c:	f008 f8ca 	bl	8012fc4 <RtcWriteAlarm1>
	}else {
		RtcReadAlarm1(pData, 1);
		*dataLen = 9;
	}
}
 800ae30:	e007      	b.n	800ae42 <CmdServerReadWriteAlarm+0x38>
		RtcReadAlarm1(pData, 1);
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2101      	movs	r1, #1
 800ae36:	0018      	movs	r0, r3
 800ae38:	f007 fffe 	bl	8012e38 <RtcReadAlarm1>
		*dataLen = 9;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2209      	movs	r2, #9
 800ae40:	801a      	strh	r2, [r3, #0]
}
 800ae42:	46c0      	nop			; (mov r8, r8)
 800ae44:	46bd      	mov	sp, r7
 800ae46:	b004      	add	sp, #16
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <CmdServerReadWriteRtcAlarmCtrlStatus>:

void CmdServerReadWriteRtcAlarmCtrlStatus(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	210f      	movs	r1, #15
 800ae56:	187b      	adds	r3, r7, r1
 800ae58:	1c02      	adds	r2, r0, #0
 800ae5a:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800ae5c:	187b      	adds	r3, r7, r1
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d108      	bne.n	800ae76 <CmdServerReadWriteRtcAlarmCtrlStatus+0x2c>
	{
		RtcWriteControlStatus(pData+1, *dataLen);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	0019      	movs	r1, r3
 800ae6e:	0010      	movs	r0, r2
 800ae70:	f008 fa0a 	bl	8013288 <RtcWriteControlStatus>
	}
	else
	{
		RtcReadControlStatus(pData, dataLen);
	}
}
 800ae74:	e005      	b.n	800ae82 <CmdServerReadWriteRtcAlarmCtrlStatus+0x38>
		RtcReadControlStatus(pData, dataLen);
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	0011      	movs	r1, r2
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	f008 fa25 	bl	80132cc <RtcReadControlStatus>
}
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	46bd      	mov	sp, r7
 800ae86:	b004      	add	sp, #16
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <CmdServerReadWriteInputsConfig>:

void CmdServerReadWriteInputsConfig(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b084      	sub	sp, #16
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	210f      	movs	r1, #15
 800ae96:	187b      	adds	r3, r7, r1
 800ae98:	1c02      	adds	r2, r0, #0
 800ae9a:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800ae9c:	187b      	adds	r3, r7, r1
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <CmdServerReadWriteInputsConfig+0x28>
	{
		CHARGER_SetInputsConfig(pData[1u]);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	3301      	adds	r3, #1
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	0018      	movs	r0, r3
 800aeac:	f7fe fd8e 	bl	80099cc <CHARGER_SetInputsConfig>
	else
	{
		pData[0u] = CHARGER_GetInputsConfig();
		*dataLen = 1u;
	}
}
 800aeb0:	e008      	b.n	800aec4 <CmdServerReadWriteInputsConfig+0x3a>
		pData[0u] = CHARGER_GetInputsConfig();
 800aeb2:	f7fe fdaf 	bl	8009a14 <CHARGER_GetInputsConfig>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	001a      	movs	r2, r3
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	701a      	strb	r2, [r3, #0]
		*dataLen = 1u;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	801a      	strh	r2, [r3, #0]
}
 800aec4:	46c0      	nop			; (mov r8, r8)
 800aec6:	46bd      	mov	sp, r7
 800aec8:	b004      	add	sp, #16
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <CmdServerReadWriteScheduledPowerOff>:


void CmdServerReadWriteScheduledPowerOff(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60b9      	str	r1, [r7, #8]
 800aed4:	607a      	str	r2, [r7, #4]
 800aed6:	210f      	movs	r1, #15
 800aed8:	187b      	adds	r3, r7, r1
 800aeda:	1c02      	adds	r2, r0, #0
 800aedc:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800aede:	187b      	adds	r3, r7, r1
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d106      	bne.n	800aef4 <CmdServerReadWriteScheduledPowerOff+0x28>
	{
		POWERMAN_SchedulePowerOff(pData[1u]);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	3301      	adds	r3, #1
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	0018      	movs	r0, r3
 800aeee:	f006 fa5b 	bl	80113a8 <POWERMAN_SchedulePowerOff>
	else
	{
		pData[0u] = POWERMAN_GetPowerOffTime();
		*dataLen = 1u;
	}
}
 800aef2:	e008      	b.n	800af06 <CmdServerReadWriteScheduledPowerOff+0x3a>
		pData[0u] = POWERMAN_GetPowerOffTime();
 800aef4:	f006 fa86 	bl	8011404 <POWERMAN_GetPowerOffTime>
 800aef8:	0003      	movs	r3, r0
 800aefa:	001a      	movs	r2, r3
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	701a      	strb	r2, [r3, #0]
		*dataLen = 1u;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	801a      	strh	r2, [r3, #0]
}
 800af06:	46c0      	nop			; (mov r8, r8)
 800af08:	46bd      	mov	sp, r7
 800af0a:	b004      	add	sp, #16
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <CmdServerReadWriteVSysSwitchState>:


void CmdServerReadWriteVSysSwitchState(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	210f      	movs	r1, #15
 800af1a:	187b      	adds	r3, r7, r1
 800af1c:	1c02      	adds	r2, r0, #0
 800af1e:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800af20:	187b      	adds	r3, r7, r1
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <CmdServerReadWriteVSysSwitchState+0x28>
		POWERSOURCE_SetVSysSwitchState(pData[1]);
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	3301      	adds	r3, #1
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	0018      	movs	r0, r3
 800af30:	f006 fe4c 	bl	8011bcc <POWERSOURCE_SetVSysSwitchState>
	} else {
		pData[0] = POWERSOURCE_GetVSysSwitchState();
		*dataLen = 1;
	}
}
 800af34:	e008      	b.n	800af48 <CmdServerReadWriteVSysSwitchState+0x3a>
		pData[0] = POWERSOURCE_GetVSysSwitchState();
 800af36:	f006 fed5 	bl	8011ce4 <POWERSOURCE_GetVSysSwitchState>
 800af3a:	0003      	movs	r3, r0
 800af3c:	001a      	movs	r2, r3
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	701a      	strb	r2, [r3, #0]
		*dataLen = 1;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	801a      	strh	r2, [r3, #0]
}
 800af48:	46c0      	nop			; (mov r8, r8)
 800af4a:	46bd      	mov	sp, r7
 800af4c:	b004      	add	sp, #16
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <CmdServerReadWriteWakeupOnCharge>:

void CmdServerReadWriteWakeupOnCharge(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60b9      	str	r1, [r7, #8]
 800af58:	607a      	str	r2, [r7, #4]
 800af5a:	210f      	movs	r1, #15
 800af5c:	187b      	adds	r3, r7, r1
 800af5e:	1c02      	adds	r2, r0, #0
 800af60:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800af62:	187b      	adds	r3, r7, r1
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <CmdServerReadWriteWakeupOnCharge+0x30>
	{
		POWERMAN_SetWakeupOnChargeData(pData + 1u, *dataLen - 1u);
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	3b01      	subs	r3, #1
 800af74:	b29b      	uxth	r3, r3
 800af76:	0019      	movs	r1, r3
 800af78:	0010      	movs	r0, r2
 800af7a:	f006 fbab 	bl	80116d4 <POWERMAN_SetWakeupOnChargeData>
	}
	else
	{
		POWERMAN_GetWakeupOnChargeData(pData, dataLen);
	}
}
 800af7e:	e005      	b.n	800af8c <CmdServerReadWriteWakeupOnCharge+0x3c>
		POWERMAN_GetWakeupOnChargeData(pData, dataLen);
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	0011      	movs	r1, r2
 800af86:	0018      	movs	r0, r3
 800af88:	f006 fbfc 	bl	8011784 <POWERMAN_GetWakeupOnChargeData>
}
 800af8c:	46c0      	nop			; (mov r8, r8)
 800af8e:	46bd      	mov	sp, r7
 800af90:	b004      	add	sp, #16
 800af92:	bd80      	pop	{r7, pc}

0800af94 <CmdServerReadWriteButtonConfigurationSw1>:

void CmdServerReadWriteButtonConfigurationSw1(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	607a      	str	r2, [r7, #4]
 800af9e:	210f      	movs	r1, #15
 800afa0:	187b      	adds	r3, r7, r1
 800afa2:	1c02      	adds	r2, r0, #0
 800afa4:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800afa6:	187b      	adds	r3, r7, r1
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10b      	bne.n	800afc6 <CmdServerReadWriteButtonConfigurationSw1+0x32>
	{
		BUTTON_SetConfigurationData(0u, &pData[1u], *dataLen - 1u);
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	1c59      	adds	r1, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	3b01      	subs	r3, #1
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	001a      	movs	r2, r3
 800afbe:	2000      	movs	r0, #0
 800afc0:	f7fe f810 	bl	8008fe4 <BUTTON_SetConfigurationData>
	}
	else
	{
		BUTTON_GetConfigurationData(0u, pData, dataLen);
	}
}
 800afc4:	e005      	b.n	800afd2 <CmdServerReadWriteButtonConfigurationSw1+0x3e>
		BUTTON_GetConfigurationData(0u, pData, dataLen);
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	0019      	movs	r1, r3
 800afcc:	2000      	movs	r0, #0
 800afce:	f7fe f867 	bl	80090a0 <BUTTON_GetConfigurationData>
}
 800afd2:	46c0      	nop			; (mov r8, r8)
 800afd4:	46bd      	mov	sp, r7
 800afd6:	b004      	add	sp, #16
 800afd8:	bd80      	pop	{r7, pc}

0800afda <CmdServerReadWriteButtonConfigurationSw2>:

void CmdServerReadWriteButtonConfigurationSw2(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
 800afe4:	210f      	movs	r1, #15
 800afe6:	187b      	adds	r3, r7, r1
 800afe8:	1c02      	adds	r2, r0, #0
 800afea:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800afec:	187b      	adds	r3, r7, r1
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10b      	bne.n	800b00c <CmdServerReadWriteButtonConfigurationSw2+0x32>
	{
		BUTTON_SetConfigurationData(1u, &pData[1u], *dataLen - 1u);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	1c59      	adds	r1, r3, #1
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	881b      	ldrh	r3, [r3, #0]
 800affc:	b2db      	uxtb	r3, r3
 800affe:	3b01      	subs	r3, #1
 800b000:	b2db      	uxtb	r3, r3
 800b002:	001a      	movs	r2, r3
 800b004:	2001      	movs	r0, #1
 800b006:	f7fd ffed 	bl	8008fe4 <BUTTON_SetConfigurationData>
	}
	else
	{
		BUTTON_GetConfigurationData(1u, pData, dataLen);
	}
}
 800b00a:	e005      	b.n	800b018 <CmdServerReadWriteButtonConfigurationSw2+0x3e>
		BUTTON_GetConfigurationData(1u, pData, dataLen);
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	0019      	movs	r1, r3
 800b012:	2001      	movs	r0, #1
 800b014:	f7fe f844 	bl	80090a0 <BUTTON_GetConfigurationData>
}
 800b018:	46c0      	nop			; (mov r8, r8)
 800b01a:	46bd      	mov	sp, r7
 800b01c:	b004      	add	sp, #16
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <CmdServerReadWriteButtonConfigurationSw3>:

void CmdServerReadWriteButtonConfigurationSw3(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	60b9      	str	r1, [r7, #8]
 800b028:	607a      	str	r2, [r7, #4]
 800b02a:	210f      	movs	r1, #15
 800b02c:	187b      	adds	r3, r7, r1
 800b02e:	1c02      	adds	r2, r0, #0
 800b030:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b032:	187b      	adds	r3, r7, r1
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10b      	bne.n	800b052 <CmdServerReadWriteButtonConfigurationSw3+0x32>
	{
		BUTTON_SetConfigurationData(2u, &pData[1u], *dataLen - 1u);
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	1c59      	adds	r1, r3, #1
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	881b      	ldrh	r3, [r3, #0]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	3b01      	subs	r3, #1
 800b046:	b2db      	uxtb	r3, r3
 800b048:	001a      	movs	r2, r3
 800b04a:	2002      	movs	r0, #2
 800b04c:	f7fd ffca 	bl	8008fe4 <BUTTON_SetConfigurationData>
	}
	else
	{
		BUTTON_GetConfigurationData(2u, pData, dataLen);
	}
}
 800b050:	e005      	b.n	800b05e <CmdServerReadWriteButtonConfigurationSw3+0x3e>
		BUTTON_GetConfigurationData(2u, pData, dataLen);
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	0019      	movs	r1, r3
 800b058:	2002      	movs	r0, #2
 800b05a:	f7fe f821 	bl	80090a0 <BUTTON_GetConfigurationData>
}
 800b05e:	46c0      	nop			; (mov r8, r8)
 800b060:	46bd      	mov	sp, r7
 800b062:	b004      	add	sp, #16
 800b064:	bd80      	pop	{r7, pc}

0800b066 <CmdServerReadWriteLedState1>:


void CmdServerReadWriteLedState1(uint8_t dir, uint8_t * pData, uint16_t * dataLen)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	210f      	movs	r1, #15
 800b072:	187b      	adds	r3, r7, r1
 800b074:	1c02      	adds	r2, r0, #0
 800b076:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b078:	187b      	adds	r3, r7, r1
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10b      	bne.n	800b098 <CmdServerReadWriteLedState1+0x32>
	{
		LED_SetStateData(LED_LED1_IDX, &pData[1u], *dataLen - 1u);
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	1c59      	adds	r1, r3, #1
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	3b01      	subs	r3, #1
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	001a      	movs	r2, r3
 800b090:	2000      	movs	r0, #0
 800b092:	f004 fcbf 	bl	800fa14 <LED_SetStateData>
	}
	else
	{
		LED_GetStateData(LED_LED1_IDX, pData, dataLen);
	}
}
 800b096:	e005      	b.n	800b0a4 <CmdServerReadWriteLedState1+0x3e>
		LED_GetStateData(LED_LED1_IDX, pData, dataLen);
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	0019      	movs	r1, r3
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f004 fd12 	bl	800fac8 <LED_GetStateData>
}
 800b0a4:	46c0      	nop			; (mov r8, r8)
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	b004      	add	sp, #16
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <CmdServerReadWriteLedState2>:


void CmdServerReadWriteLedState2(uint8_t dir, uint8_t * pData, uint16_t * dataLen)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60b9      	str	r1, [r7, #8]
 800b0b4:	607a      	str	r2, [r7, #4]
 800b0b6:	210f      	movs	r1, #15
 800b0b8:	187b      	adds	r3, r7, r1
 800b0ba:	1c02      	adds	r2, r0, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b0be:	187b      	adds	r3, r7, r1
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10b      	bne.n	800b0de <CmdServerReadWriteLedState2+0x32>
	{
		LED_SetStateData(LED_LED2_IDX, &pData[1u], *dataLen - 1u);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	1c59      	adds	r1, r3, #1
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	001a      	movs	r2, r3
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	f004 fc9c 	bl	800fa14 <LED_SetStateData>
	}
	else
	{
		LED_GetStateData(LED_LED2_IDX, pData, dataLen);
	}
}
 800b0dc:	e005      	b.n	800b0ea <CmdServerReadWriteLedState2+0x3e>
		LED_GetStateData(LED_LED2_IDX, pData, dataLen);
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	0019      	movs	r1, r3
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	f004 fcef 	bl	800fac8 <LED_GetStateData>
}
 800b0ea:	46c0      	nop			; (mov r8, r8)
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	b004      	add	sp, #16
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <CmdServerReadWriteLedBlink1>:


void CmdServerReadWriteLedBlink1(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	210f      	movs	r1, #15
 800b0fe:	187b      	adds	r3, r7, r1
 800b100:	1c02      	adds	r2, r0, #0
 800b102:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b104:	187b      	adds	r3, r7, r1
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10b      	bne.n	800b124 <CmdServerReadWriteLedBlink1+0x32>
	{
		LED_SetBlinkData(LED_LED1_IDX, &pData[1u], *dataLen - 1u);
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	1c59      	adds	r1, r3, #1
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	3b01      	subs	r3, #1
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	001a      	movs	r2, r3
 800b11c:	2000      	movs	r0, #0
 800b11e:	f004 fd13 	bl	800fb48 <LED_SetBlinkData>
	}
	else
	{
		LED_GetBlinkData(LED_LED1_IDX, pData, dataLen);
	}
}
 800b122:	e005      	b.n	800b130 <CmdServerReadWriteLedBlink1+0x3e>
		LED_GetBlinkData(LED_LED1_IDX, pData, dataLen);
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	0019      	movs	r1, r3
 800b12a:	2000      	movs	r0, #0
 800b12c:	f004 fe32 	bl	800fd94 <LED_GetBlinkData>
}
 800b130:	46c0      	nop			; (mov r8, r8)
 800b132:	46bd      	mov	sp, r7
 800b134:	b004      	add	sp, #16
 800b136:	bd80      	pop	{r7, pc}

0800b138 <CmdServerReadWriteLedBlink2>:


void CmdServerReadWriteLedBlink2(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	607a      	str	r2, [r7, #4]
 800b142:	210f      	movs	r1, #15
 800b144:	187b      	adds	r3, r7, r1
 800b146:	1c02      	adds	r2, r0, #0
 800b148:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b14a:	187b      	adds	r3, r7, r1
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10b      	bne.n	800b16a <CmdServerReadWriteLedBlink2+0x32>
	{
		LED_SetBlinkData(LED_LED2_IDX, &pData[1u], *dataLen - 1u);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	1c59      	adds	r1, r3, #1
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	3b01      	subs	r3, #1
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	001a      	movs	r2, r3
 800b162:	2001      	movs	r0, #1
 800b164:	f004 fcf0 	bl	800fb48 <LED_SetBlinkData>
	}
	else
	{
		LED_GetBlinkData(LED_LED2_IDX, pData, dataLen);
	}
}
 800b168:	e005      	b.n	800b176 <CmdServerReadWriteLedBlink2+0x3e>
		LED_GetBlinkData(LED_LED2_IDX, pData, dataLen);
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	0019      	movs	r1, r3
 800b170:	2001      	movs	r0, #1
 800b172:	f004 fe0f 	bl	800fd94 <LED_GetBlinkData>
}
 800b176:	46c0      	nop			; (mov r8, r8)
 800b178:	46bd      	mov	sp, r7
 800b17a:	b004      	add	sp, #16
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <CmdServerReadWriteLedConfigurationLED1>:


void CmdServerReadWriteLedConfigurationLED1(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	210f      	movs	r1, #15
 800b18a:	187b      	adds	r3, r7, r1
 800b18c:	1c02      	adds	r2, r0, #0
 800b18e:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b190:	187b      	adds	r3, r7, r1
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10b      	bne.n	800b1b0 <CmdServerReadWriteLedConfigurationLED1+0x32>
	{
		LED_SetConfigurationData(LED_LED1_IDX, &pData[1u], *dataLen - 1u);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	1c59      	adds	r1, r3, #1
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	881b      	ldrh	r3, [r3, #0]
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	001a      	movs	r2, r3
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	f004 fb93 	bl	800f8d4 <LED_SetConfigurationData>
	}
	else
	{
		LED_GetConfigurationData(LED_LED1_IDX, pData, dataLen);
	}
}
 800b1ae:	e005      	b.n	800b1bc <CmdServerReadWriteLedConfigurationLED1+0x3e>
		LED_GetConfigurationData(LED_LED1_IDX, pData, dataLen);
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	0019      	movs	r1, r3
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	f004 fbe0 	bl	800f97c <LED_GetConfigurationData>
}
 800b1bc:	46c0      	nop			; (mov r8, r8)
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	b004      	add	sp, #16
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <CmdServerReadWriteLedConfigurationLED2>:


void CmdServerReadWriteLedConfigurationLED2(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60b9      	str	r1, [r7, #8]
 800b1cc:	607a      	str	r2, [r7, #4]
 800b1ce:	210f      	movs	r1, #15
 800b1d0:	187b      	adds	r3, r7, r1
 800b1d2:	1c02      	adds	r2, r0, #0
 800b1d4:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b1d6:	187b      	adds	r3, r7, r1
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10b      	bne.n	800b1f6 <CmdServerReadWriteLedConfigurationLED2+0x32>
	{
		LED_SetConfigurationData(LED_LED2_IDX, &pData[1u], *dataLen - 1u);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	1c59      	adds	r1, r3, #1
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	001a      	movs	r2, r3
 800b1ee:	2001      	movs	r0, #1
 800b1f0:	f004 fb70 	bl	800f8d4 <LED_SetConfigurationData>
	}
	else
	{
		LED_GetConfigurationData(LED_LED2_IDX, pData, dataLen);
	}
}
 800b1f4:	e005      	b.n	800b202 <CmdServerReadWriteLedConfigurationLED2+0x3e>
		LED_GetConfigurationData(LED_LED2_IDX, pData, dataLen);
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	0019      	movs	r1, r3
 800b1fc:	2001      	movs	r0, #1
 800b1fe:	f004 fbbd 	bl	800f97c <LED_GetConfigurationData>
}
 800b202:	46c0      	nop			; (mov r8, r8)
 800b204:	46bd      	mov	sp, r7
 800b206:	b004      	add	sp, #16
 800b208:	bd80      	pop	{r7, pc}

0800b20a <CmdServerReadWriteRunPinConfiguration>:


void CmdServerReadWriteRunPinConfiguration(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	210f      	movs	r1, #15
 800b216:	187b      	adds	r3, r7, r1
 800b218:	1c02      	adds	r2, r0, #0
 800b21a:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b21c:	187b      	adds	r3, r7, r1
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10b      	bne.n	800b23c <CmdServerReadWriteRunPinConfiguration+0x32>
	{
		POWERMAN_SetRunPinConfigData(&pData[1u], *dataLen - 1u);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	3b01      	subs	r3, #1
 800b230:	b2db      	uxtb	r3, r3
 800b232:	0019      	movs	r1, r3
 800b234:	0010      	movs	r0, r2
 800b236:	f006 f92f 	bl	8011498 <POWERMAN_SetRunPinConfigData>
	}
	else
	{
		POWERMAN_GetRunPinConfigData(pData, dataLen);
	}
}
 800b23a:	e005      	b.n	800b248 <CmdServerReadWriteRunPinConfiguration+0x3e>
		POWERMAN_GetRunPinConfigData(pData, dataLen);
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	0011      	movs	r1, r2
 800b242:	0018      	movs	r0, r3
 800b244:	f006 f950 	bl	80114e8 <POWERMAN_GetRunPinConfigData>
}
 800b248:	46c0      	nop			; (mov r8, r8)
 800b24a:	46bd      	mov	sp, r7
 800b24c:	b004      	add	sp, #16
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <CmdServerReadWriteWDGConfiguration>:


void CmdServerReadWriteWDGConfiguration(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	60b9      	str	r1, [r7, #8]
 800b258:	607a      	str	r2, [r7, #4]
 800b25a:	210f      	movs	r1, #15
 800b25c:	187b      	adds	r3, r7, r1
 800b25e:	1c02      	adds	r2, r0, #0
 800b260:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b262:	187b      	adds	r3, r7, r1
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10a      	bne.n	800b280 <CmdServerReadWriteWDGConfiguration+0x30>
	{
		POWERMAN_SetWatchdogConfigData(&pData[1u], *dataLen - 1u);
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	3b01      	subs	r3, #1
 800b274:	b29b      	uxth	r3, r3
 800b276:	0019      	movs	r1, r3
 800b278:	0010      	movs	r0, r2
 800b27a:	f006 f947 	bl	801150c <POWERMAN_SetWatchdogConfigData>
	}
	else
	{
		POWERMAN_GetWatchdogConfigData(pData, dataLen);
	}
}
 800b27e:	e005      	b.n	800b28c <CmdServerReadWriteWDGConfiguration+0x3c>
		POWERMAN_GetWatchdogConfigData(pData, dataLen);
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	0011      	movs	r1, r2
 800b286:	0018      	movs	r0, r3
 800b288:	f006 f9ce 	bl	8011628 <POWERMAN_GetWatchdogConfigData>
}
 800b28c:	46c0      	nop			; (mov r8, r8)
 800b28e:	46bd      	mov	sp, r7
 800b290:	b004      	add	sp, #16
 800b292:	bd80      	pop	{r7, pc}

0800b294 <CmdServerReadWritePowerRegulatorConfiguration>:


void CmdServerReadWritePowerRegulatorConfiguration(uint8_t dir, uint8_t * pData, uint16_t * dataLen)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	607a      	str	r2, [r7, #4]
 800b29e:	210f      	movs	r1, #15
 800b2a0:	187b      	adds	r3, r7, r1
 800b2a2:	1c02      	adds	r2, r0, #0
 800b2a4:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b2a6:	187b      	adds	r3, r7, r1
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10b      	bne.n	800b2c6 <CmdServerReadWritePowerRegulatorConfiguration+0x32>
	{
		POWERSOURCE_SetRegulatorConfigData(pData + 1u, *dataLen - 1u);
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	0019      	movs	r1, r3
 800b2be:	0010      	movs	r0, r2
 800b2c0:	f006 fd22 	bl	8011d08 <POWERSOURCE_SetRegulatorConfigData>
	}
	else
	{
		POWERSOURCE_GetRegulatorConfigData(pData, dataLen);
	}
}
 800b2c4:	e005      	b.n	800b2d2 <CmdServerReadWritePowerRegulatorConfiguration+0x3e>
		POWERSOURCE_GetRegulatorConfigData(pData, dataLen);
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	0011      	movs	r1, r2
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	f006 fd53 	bl	8011d78 <POWERSOURCE_GetRegulatorConfigData>
}
 800b2d2:	46c0      	nop			; (mov r8, r8)
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	b004      	add	sp, #16
 800b2d8:	bd80      	pop	{r7, pc}
	...

0800b2dc <CmdServerReadWriteOwnAddress1>:

void CmdServerReadWriteOwnAddress1(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800b2dc:	b5b0      	push	{r4, r5, r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	607a      	str	r2, [r7, #4]
 800b2e6:	210f      	movs	r1, #15
 800b2e8:	187b      	adds	r3, r7, r1
 800b2ea:	1c02      	adds	r2, r0, #0
 800b2ec:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800b2ee:	187b      	adds	r3, r7, r1
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d154      	bne.n	800b3a0 <CmdServerReadWriteOwnAddress1+0xc4>
		uint8_t adr = pData[1]*2;
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2417      	movs	r4, #23
 800b2fe:	193a      	adds	r2, r7, r4
 800b300:	18db      	adds	r3, r3, r3
 800b302:	7013      	strb	r3, [r2, #0]
		if (pData[1] > 0 && pData[1] < 128 && hi2c1.Init.OwnAddress1 != adr ){
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	3301      	adds	r3, #1
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d051      	beq.n	800b3b2 <CmdServerReadWriteOwnAddress1+0xd6>
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	3301      	adds	r3, #1
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	b25b      	sxtb	r3, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	db4b      	blt.n	800b3b2 <CmdServerReadWriteOwnAddress1+0xd6>
 800b31a:	4b28      	ldr	r3, [pc, #160]	; (800b3bc <CmdServerReadWriteOwnAddress1+0xe0>)
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	193b      	adds	r3, r7, r4
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	429a      	cmp	r2, r3
 800b324:	d045      	beq.n	800b3b2 <CmdServerReadWriteOwnAddress1+0xd6>
			EE_WriteVariable(OWN_ADDRESS1_NV_ADDR, adr | ((uint16_t)~adr<<8));
 800b326:	193b      	adds	r3, r7, r4
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	b21a      	sxth	r2, r3
 800b32c:	193b      	adds	r3, r7, r4
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	b29b      	uxth	r3, r3
 800b332:	43db      	mvns	r3, r3
 800b334:	b29b      	uxth	r3, r3
 800b336:	021b      	lsls	r3, r3, #8
 800b338:	b21b      	sxth	r3, r3
 800b33a:	4313      	orrs	r3, r2
 800b33c:	b21b      	sxth	r3, r3
 800b33e:	b29b      	uxth	r3, r3
 800b340:	0019      	movs	r1, r3
 800b342:	2059      	movs	r0, #89	; 0x59
 800b344:	f000 ffe6 	bl	800c314 <EE_WriteVariable>
			uint16_t var = 0;
 800b348:	2114      	movs	r1, #20
 800b34a:	187b      	adds	r3, r7, r1
 800b34c:	2200      	movs	r2, #0
 800b34e:	801a      	strh	r2, [r3, #0]
			EE_ReadVariable(OWN_ADDRESS1_NV_ADDR, &var);
 800b350:	000d      	movs	r5, r1
 800b352:	187b      	adds	r3, r7, r1
 800b354:	0019      	movs	r1, r3
 800b356:	2059      	movs	r0, #89	; 0x59
 800b358:	f000 ff7a 	bl	800c250 <EE_ReadVariable>
			if ( (var&0xFF) == adr && (((~var)&0xFF) == (var>>8)) ) {
 800b35c:	0029      	movs	r1, r5
 800b35e:	187b      	adds	r3, r7, r1
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	001a      	movs	r2, r3
 800b364:	23ff      	movs	r3, #255	; 0xff
 800b366:	401a      	ands	r2, r3
 800b368:	193b      	adds	r3, r7, r4
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d120      	bne.n	800b3b2 <CmdServerReadWriteOwnAddress1+0xd6>
 800b370:	187b      	adds	r3, r7, r1
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	43db      	mvns	r3, r3
 800b376:	22ff      	movs	r2, #255	; 0xff
 800b378:	4013      	ands	r3, r2
 800b37a:	187a      	adds	r2, r7, r1
 800b37c:	8812      	ldrh	r2, [r2, #0]
 800b37e:	0a12      	lsrs	r2, r2, #8
 800b380:	b292      	uxth	r2, r2
 800b382:	4293      	cmp	r3, r2
 800b384:	d115      	bne.n	800b3b2 <CmdServerReadWriteOwnAddress1+0xd6>
				// if successfully saved reinitialize I2C with new address
				hi2c1.Init.OwnAddress1 = adr;
 800b386:	193b      	adds	r3, r7, r4
 800b388:	781a      	ldrb	r2, [r3, #0]
 800b38a:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <CmdServerReadWriteOwnAddress1+0xe0>)
 800b38c:	609a      	str	r2, [r3, #8]
				if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800b38e:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <CmdServerReadWriteOwnAddress1+0xe0>)
 800b390:	0018      	movs	r0, r3
 800b392:	f7f9 fb59 	bl	8004a48 <HAL_I2C_DeInit>
				{
					//Error_Handler();
				}
				if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <CmdServerReadWriteOwnAddress1+0xe0>)
 800b398:	0018      	movs	r0, r3
 800b39a:	f7f9 fabf 	bl	800491c <HAL_I2C_Init>
		}
	} else {
		pData[0] = hi2c1.Init.OwnAddress1 >> 1;
		*dataLen = 1;
	}
}
 800b39e:	e008      	b.n	800b3b2 <CmdServerReadWriteOwnAddress1+0xd6>
		pData[0] = hi2c1.Init.OwnAddress1 >> 1;
 800b3a0:	4b06      	ldr	r3, [pc, #24]	; (800b3bc <CmdServerReadWriteOwnAddress1+0xe0>)
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	085b      	lsrs	r3, r3, #1
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	701a      	strb	r2, [r3, #0]
		*dataLen = 1;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	801a      	strh	r2, [r3, #0]
}
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	b006      	add	sp, #24
 800b3b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ba:	46c0      	nop			; (mov r8, r8)
 800b3bc:	20001634 	.word	0x20001634

0800b3c0 <CmdServerReadWriteOwnAddress2>:

void CmdServerReadWriteOwnAddress2(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800b3c0:	b5b0      	push	{r4, r5, r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60b9      	str	r1, [r7, #8]
 800b3c8:	607a      	str	r2, [r7, #4]
 800b3ca:	210f      	movs	r1, #15
 800b3cc:	187b      	adds	r3, r7, r1
 800b3ce:	1c02      	adds	r2, r0, #0
 800b3d0:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800b3d2:	187b      	adds	r3, r7, r1
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d154      	bne.n	800b484 <CmdServerReadWriteOwnAddress2+0xc4>
		uint8_t adr = pData[1]*2;
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	2417      	movs	r4, #23
 800b3e2:	193a      	adds	r2, r7, r4
 800b3e4:	18db      	adds	r3, r3, r3
 800b3e6:	7013      	strb	r3, [r2, #0]
		if (pData[1] > 0 && pData[1] < 128 && hi2c1.Init.OwnAddress2 != adr ){
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d051      	beq.n	800b496 <CmdServerReadWriteOwnAddress2+0xd6>
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	b25b      	sxtb	r3, r3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	db4b      	blt.n	800b496 <CmdServerReadWriteOwnAddress2+0xd6>
 800b3fe:	4b28      	ldr	r3, [pc, #160]	; (800b4a0 <CmdServerReadWriteOwnAddress2+0xe0>)
 800b400:	695a      	ldr	r2, [r3, #20]
 800b402:	193b      	adds	r3, r7, r4
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	429a      	cmp	r2, r3
 800b408:	d045      	beq.n	800b496 <CmdServerReadWriteOwnAddress2+0xd6>
			EE_WriteVariable(OWN_ADDRESS2_NV_ADDR, adr | ((uint16_t)~adr<<8));
 800b40a:	193b      	adds	r3, r7, r4
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	b21a      	sxth	r2, r3
 800b410:	193b      	adds	r3, r7, r4
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	b29b      	uxth	r3, r3
 800b416:	43db      	mvns	r3, r3
 800b418:	b29b      	uxth	r3, r3
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	b21b      	sxth	r3, r3
 800b41e:	4313      	orrs	r3, r2
 800b420:	b21b      	sxth	r3, r3
 800b422:	b29b      	uxth	r3, r3
 800b424:	0019      	movs	r1, r3
 800b426:	205a      	movs	r0, #90	; 0x5a
 800b428:	f000 ff74 	bl	800c314 <EE_WriteVariable>
			uint16_t var = 0;
 800b42c:	2114      	movs	r1, #20
 800b42e:	187b      	adds	r3, r7, r1
 800b430:	2200      	movs	r2, #0
 800b432:	801a      	strh	r2, [r3, #0]
			EE_ReadVariable(OWN_ADDRESS2_NV_ADDR, &var);
 800b434:	000d      	movs	r5, r1
 800b436:	187b      	adds	r3, r7, r1
 800b438:	0019      	movs	r1, r3
 800b43a:	205a      	movs	r0, #90	; 0x5a
 800b43c:	f000 ff08 	bl	800c250 <EE_ReadVariable>
			if ( (var&0xFF) == adr && (((~var)&0xFF) == (var>>8)) ) {
 800b440:	0029      	movs	r1, r5
 800b442:	187b      	adds	r3, r7, r1
 800b444:	881b      	ldrh	r3, [r3, #0]
 800b446:	001a      	movs	r2, r3
 800b448:	23ff      	movs	r3, #255	; 0xff
 800b44a:	401a      	ands	r2, r3
 800b44c:	193b      	adds	r3, r7, r4
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d120      	bne.n	800b496 <CmdServerReadWriteOwnAddress2+0xd6>
 800b454:	187b      	adds	r3, r7, r1
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	43db      	mvns	r3, r3
 800b45a:	22ff      	movs	r2, #255	; 0xff
 800b45c:	4013      	ands	r3, r2
 800b45e:	187a      	adds	r2, r7, r1
 800b460:	8812      	ldrh	r2, [r2, #0]
 800b462:	0a12      	lsrs	r2, r2, #8
 800b464:	b292      	uxth	r2, r2
 800b466:	4293      	cmp	r3, r2
 800b468:	d115      	bne.n	800b496 <CmdServerReadWriteOwnAddress2+0xd6>
				// if successfully saved reinitialize I2C with new address
				hi2c1.Init.OwnAddress2 = adr;
 800b46a:	193b      	adds	r3, r7, r4
 800b46c:	781a      	ldrb	r2, [r3, #0]
 800b46e:	4b0c      	ldr	r3, [pc, #48]	; (800b4a0 <CmdServerReadWriteOwnAddress2+0xe0>)
 800b470:	615a      	str	r2, [r3, #20]
				if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800b472:	4b0b      	ldr	r3, [pc, #44]	; (800b4a0 <CmdServerReadWriteOwnAddress2+0xe0>)
 800b474:	0018      	movs	r0, r3
 800b476:	f7f9 fae7 	bl	8004a48 <HAL_I2C_DeInit>
				{
					//Error_Handler();
				}
				if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b47a:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <CmdServerReadWriteOwnAddress2+0xe0>)
 800b47c:	0018      	movs	r0, r3
 800b47e:	f7f9 fa4d 	bl	800491c <HAL_I2C_Init>
		}
	} else {
		pData[0] = hi2c1.Init.OwnAddress2 >> 1;
		*dataLen = 1;
	}
}
 800b482:	e008      	b.n	800b496 <CmdServerReadWriteOwnAddress2+0xd6>
		pData[0] = hi2c1.Init.OwnAddress2 >> 1;
 800b484:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <CmdServerReadWriteOwnAddress2+0xe0>)
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	085b      	lsrs	r3, r3, #1
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	701a      	strb	r2, [r3, #0]
		*dataLen = 1;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	801a      	strh	r2, [r3, #0]
}
 800b496:	46c0      	nop			; (mov r8, r8)
 800b498:	46bd      	mov	sp, r7
 800b49a:	b006      	add	sp, #24
 800b49c:	bdb0      	pop	{r4, r5, r7, pc}
 800b49e:	46c0      	nop			; (mov r8, r8)
 800b4a0:	20001634 	.word	0x20001634

0800b4a4 <CmdServerReadWriteEEPROM_WriteProtect>:

void CmdServerReadWriteEEPROM_WriteProtect(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
 800b4ae:	210f      	movs	r1, #15
 800b4b0:	187b      	adds	r3, r7, r1
 800b4b2:	1c02      	adds	r2, r0, #0
 800b4b4:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800b4b6:	187b      	adds	r3, r7, r1
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10c      	bne.n	800b4d8 <CmdServerReadWriteEEPROM_WriteProtect+0x34>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (pData[1]&0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	2380      	movs	r3, #128	; 0x80
 800b4cc:	005b      	lsls	r3, r3, #1
 800b4ce:	480d      	ldr	r0, [pc, #52]	; (800b504 <CmdServerReadWriteEEPROM_WriteProtect+0x60>)
 800b4d0:	0019      	movs	r1, r3
 800b4d2:	f7f9 f9ea 	bl	80048aa <HAL_GPIO_WritePin>
	} else {
		pData[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET ? 1 : 0;
		*dataLen = 1;
	}
}
 800b4d6:	e011      	b.n	800b4fc <CmdServerReadWriteEEPROM_WriteProtect+0x58>
		pData[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET ? 1 : 0;
 800b4d8:	2380      	movs	r3, #128	; 0x80
 800b4da:	005b      	lsls	r3, r3, #1
 800b4dc:	4a09      	ldr	r2, [pc, #36]	; (800b504 <CmdServerReadWriteEEPROM_WriteProtect+0x60>)
 800b4de:	0019      	movs	r1, r3
 800b4e0:	0010      	movs	r0, r2
 800b4e2:	f7f9 f9c5 	bl	8004870 <HAL_GPIO_ReadPin>
 800b4e6:	0003      	movs	r3, r0
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	425a      	negs	r2, r3
 800b4ec:	4153      	adcs	r3, r2
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	001a      	movs	r2, r3
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	701a      	strb	r2, [r3, #0]
		*dataLen = 1;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	801a      	strh	r2, [r3, #0]
}
 800b4fc:	46c0      	nop			; (mov r8, r8)
 800b4fe:	46bd      	mov	sp, r7
 800b500:	b004      	add	sp, #16
 800b502:	bd80      	pop	{r7, pc}
 800b504:	48000400 	.word	0x48000400

0800b508 <CmdServerReadWriteEEPROM_WriteAddress>:

void CmdServerReadWriteEEPROM_WriteAddress(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800b508:	b590      	push	{r4, r7, lr}
 800b50a:	b087      	sub	sp, #28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	607a      	str	r2, [r7, #4]
 800b512:	210f      	movs	r1, #15
 800b514:	187b      	adds	r3, r7, r1
 800b516:	1c02      	adds	r2, r0, #0
 800b518:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800b51a:	187b      	adds	r3, r7, r1
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d160      	bne.n	800b5e4 <CmdServerReadWriteEEPROM_WriteAddress+0xdc>
		uint8_t adrState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET ? 0x52 : 0x50;
 800b522:	4b3a      	ldr	r3, [pc, #232]	; (800b60c <CmdServerReadWriteEEPROM_WriteAddress+0x104>)
 800b524:	2108      	movs	r1, #8
 800b526:	0018      	movs	r0, r3
 800b528:	f7f9 f9a2 	bl	8004870 <HAL_GPIO_ReadPin>
 800b52c:	0003      	movs	r3, r0
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d101      	bne.n	800b536 <CmdServerReadWriteEEPROM_WriteAddress+0x2e>
 800b532:	2252      	movs	r2, #82	; 0x52
 800b534:	e000      	b.n	800b538 <CmdServerReadWriteEEPROM_WriteAddress+0x30>
 800b536:	2250      	movs	r2, #80	; 0x50
 800b538:	2317      	movs	r3, #23
 800b53a:	18fb      	adds	r3, r7, r3
 800b53c:	701a      	strb	r2, [r3, #0]
		if ( (pData[1] == 0x50 || pData[1] == 0x52) && adrState != pData[1] ){
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	3301      	adds	r3, #1
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b50      	cmp	r3, #80	; 0x50
 800b546:	d004      	beq.n	800b552 <CmdServerReadWriteEEPROM_WriteAddress+0x4a>
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	3301      	adds	r3, #1
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	2b52      	cmp	r3, #82	; 0x52
 800b550:	d158      	bne.n	800b604 <CmdServerReadWriteEEPROM_WriteAddress+0xfc>
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	3301      	adds	r3, #1
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2217      	movs	r2, #23
 800b55a:	18ba      	adds	r2, r7, r2
 800b55c:	7812      	ldrb	r2, [r2, #0]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d050      	beq.n	800b604 <CmdServerReadWriteEEPROM_WriteAddress+0xfc>
			EE_WriteVariable(ID_EEPROM_ADR_NV_ADDR, pData[1] | ((uint16_t)~(pData[1])<<8));
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	3301      	adds	r3, #1
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	b21a      	sxth	r2, r3
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	3301      	adds	r3, #1
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	b29b      	uxth	r3, r3
 800b572:	43db      	mvns	r3, r3
 800b574:	b29b      	uxth	r3, r3
 800b576:	021b      	lsls	r3, r3, #8
 800b578:	b21b      	sxth	r3, r3
 800b57a:	4313      	orrs	r3, r2
 800b57c:	b21b      	sxth	r3, r3
 800b57e:	b29b      	uxth	r3, r3
 800b580:	0019      	movs	r1, r3
 800b582:	205b      	movs	r0, #91	; 0x5b
 800b584:	f000 fec6 	bl	800c314 <EE_WriteVariable>
			uint16_t var = 0;
 800b588:	2114      	movs	r1, #20
 800b58a:	187b      	adds	r3, r7, r1
 800b58c:	2200      	movs	r2, #0
 800b58e:	801a      	strh	r2, [r3, #0]
			EE_ReadVariable(ID_EEPROM_ADR_NV_ADDR, &var);
 800b590:	000c      	movs	r4, r1
 800b592:	187b      	adds	r3, r7, r1
 800b594:	0019      	movs	r1, r3
 800b596:	205b      	movs	r0, #91	; 0x5b
 800b598:	f000 fe5a 	bl	800c250 <EE_ReadVariable>
			if ( (var&0xFF) == pData[1] && (((~var)&0xFF) == (var>>8)) ) {
 800b59c:	0021      	movs	r1, r4
 800b59e:	187b      	adds	r3, r7, r1
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	001a      	movs	r2, r3
 800b5a4:	23ff      	movs	r3, #255	; 0xff
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	3201      	adds	r2, #1
 800b5ac:	7812      	ldrb	r2, [r2, #0]
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d128      	bne.n	800b604 <CmdServerReadWriteEEPROM_WriteAddress+0xfc>
 800b5b2:	187b      	adds	r3, r7, r1
 800b5b4:	881b      	ldrh	r3, [r3, #0]
 800b5b6:	43db      	mvns	r3, r3
 800b5b8:	22ff      	movs	r2, #255	; 0xff
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	187a      	adds	r2, r7, r1
 800b5be:	8812      	ldrh	r2, [r2, #0]
 800b5c0:	0a12      	lsrs	r2, r2, #8
 800b5c2:	b292      	uxth	r2, r2
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d11d      	bne.n	800b604 <CmdServerReadWriteEEPROM_WriteAddress+0xfc>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (pData[1]&0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	105b      	asrs	r3, r3, #1
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	480c      	ldr	r0, [pc, #48]	; (800b60c <CmdServerReadWriteEEPROM_WriteAddress+0x104>)
 800b5da:	001a      	movs	r2, r3
 800b5dc:	2108      	movs	r1, #8
 800b5de:	f7f9 f964 	bl	80048aa <HAL_GPIO_WritePin>
		}
	} else {
		pData[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET ? 0x52 : 0x50;
		*dataLen = 1;
	}
}
 800b5e2:	e00f      	b.n	800b604 <CmdServerReadWriteEEPROM_WriteAddress+0xfc>
		pData[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET ? 0x52 : 0x50;
 800b5e4:	4b09      	ldr	r3, [pc, #36]	; (800b60c <CmdServerReadWriteEEPROM_WriteAddress+0x104>)
 800b5e6:	2108      	movs	r1, #8
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	f7f9 f941 	bl	8004870 <HAL_GPIO_ReadPin>
 800b5ee:	0003      	movs	r3, r0
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d101      	bne.n	800b5f8 <CmdServerReadWriteEEPROM_WriteAddress+0xf0>
 800b5f4:	2252      	movs	r2, #82	; 0x52
 800b5f6:	e000      	b.n	800b5fa <CmdServerReadWriteEEPROM_WriteAddress+0xf2>
 800b5f8:	2250      	movs	r2, #80	; 0x50
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	701a      	strb	r2, [r3, #0]
		*dataLen = 1;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	801a      	strh	r2, [r3, #0]
}
 800b604:	46c0      	nop			; (mov r8, r8)
 800b606:	46bd      	mov	sp, r7
 800b608:	b007      	add	sp, #28
 800b60a:	bd90      	pop	{r4, r7, pc}
 800b60c:	48000400 	.word	0x48000400

0800b610 <CmdServerReadWriteTestAndCalibration>:

void CmdServerReadWriteTestAndCalibration(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	210f      	movs	r1, #15
 800b61c:	187b      	adds	r3, r7, r1
 800b61e:	1c02      	adds	r2, r0, #0
 800b620:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b622:	187b      	adds	r3, r7, r1
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d136      	bne.n	800b698 <CmdServerReadWriteTestAndCalibration+0x88>
	{
		if ((pData[1] == 0x55) && (pData[2] == 0x26) && (pData[3] == 0xa0))
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	3301      	adds	r3, #1
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	2b55      	cmp	r3, #85	; 0x55
 800b632:	d134      	bne.n	800b69e <CmdServerReadWriteTestAndCalibration+0x8e>
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	3302      	adds	r3, #2
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2b26      	cmp	r3, #38	; 0x26
 800b63c:	d12f      	bne.n	800b69e <CmdServerReadWriteTestAndCalibration+0x8e>
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	3303      	adds	r3, #3
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2ba0      	cmp	r3, #160	; 0xa0
 800b646:	d12a      	bne.n	800b69e <CmdServerReadWriteTestAndCalibration+0x8e>
		{
			if (pData[4] == 0x2b)
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	3304      	adds	r3, #4
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	2b2b      	cmp	r3, #43	; 0x2b
 800b650:	d102      	bne.n	800b658 <CmdServerReadWriteTestAndCalibration+0x48>
			{
				ISENSE_CalibrateLoadCurrent();
 800b652:	f004 fd97 	bl	8010184 <ISENSE_CalibrateLoadCurrent>
	}
	else
	{
		*dataLen = 0;
	}
}
 800b656:	e022      	b.n	800b69e <CmdServerReadWriteTestAndCalibration+0x8e>
			else if (pData[4u] == 0x3Au)
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	3304      	adds	r3, #4
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	2b3a      	cmp	r3, #58	; 0x3a
 800b660:	d102      	bne.n	800b668 <CmdServerReadWriteTestAndCalibration+0x58>
				ISENSE_CalibrateZeroCurrent();
 800b662:	f004 fe27 	bl	80102b4 <ISENSE_CalibrateZeroCurrent>
}
 800b666:	e01a      	b.n	800b69e <CmdServerReadWriteTestAndCalibration+0x8e>
			else if (pData[4u] == 0x4Fu)
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	3304      	adds	r3, #4
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b4f      	cmp	r3, #79	; 0x4f
 800b670:	d102      	bne.n	800b678 <CmdServerReadWriteTestAndCalibration+0x68>
				ISENSE_Calibrate51mACurrent();
 800b672:	f004 fe28 	bl	80102c6 <ISENSE_Calibrate51mACurrent>
}
 800b676:	e012      	b.n	800b69e <CmdServerReadWriteTestAndCalibration+0x8e>
			else if (pData[4u] == 0x52u)
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	3304      	adds	r3, #4
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	2b52      	cmp	r3, #82	; 0x52
 800b680:	d102      	bne.n	800b688 <CmdServerReadWriteTestAndCalibration+0x78>
				ISENSE_Calibrate510mACurrent();
 800b682:	f004 fe29 	bl	80102d8 <ISENSE_Calibrate510mACurrent>
}
 800b686:	e00a      	b.n	800b69e <CmdServerReadWriteTestAndCalibration+0x8e>
			else if (pData[4u] == 0x69u)
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	3304      	adds	r3, #4
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	2b69      	cmp	r3, #105	; 0x69
 800b690:	d105      	bne.n	800b69e <CmdServerReadWriteTestAndCalibration+0x8e>
				ISENSE_WriteNVCalibration();
 800b692:	f004 fe2d 	bl	80102f0 <ISENSE_WriteNVCalibration>
}
 800b696:	e002      	b.n	800b69e <CmdServerReadWriteTestAndCalibration+0x8e>
		*dataLen = 0;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	801a      	strh	r2, [r3, #0]
}
 800b69e:	46c0      	nop			; (mov r8, r8)
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	b004      	add	sp, #16
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <CmdServerRunBootloader>:

void CmdServerRunBootloader(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	607a      	str	r2, [r7, #4]
 800b6b2:	210f      	movs	r1, #15
 800b6b4:	187b      	adds	r3, r7, r1
 800b6b6:	1c02      	adds	r2, r0, #0
 800b6b8:	701a      	strb	r2, [r3, #0]
  // Execute bootloader by jumping to system memory

	if ( pData[1] != 0x01 || dir == MASTER_CMD_DIR_READ ) return;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d000      	beq.n	800b6c6 <CmdServerRunBootloader+0x1e>
 800b6c4:	e0af      	b.n	800b826 <CmdServerRunBootloader+0x17e>
 800b6c6:	187b      	adds	r3, r7, r1
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d100      	bne.n	800b6d0 <CmdServerRunBootloader+0x28>
 800b6ce:	e0aa      	b.n	800b826 <CmdServerRunBootloader+0x17e>

	executionState = EXECUTION_STATE_UPDATE;
 800b6d0:	4b57      	ldr	r3, [pc, #348]	; (800b830 <CmdServerRunBootloader+0x188>)
 800b6d2:	4a58      	ldr	r2, [pc, #352]	; (800b834 <CmdServerRunBootloader+0x18c>)
 800b6d4:	601a      	str	r2, [r3, #0]

	HAL_ADC_MspDeInit(&hadc);
 800b6d6:	4b58      	ldr	r3, [pc, #352]	; (800b838 <CmdServerRunBootloader+0x190>)
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f7f7 f879 	bl	80027d0 <HAL_ADC_MspDeInit>
	HAL_I2C_DeInit(&hi2c1);//HAL_SMBUS_MspDeInit(&hsmbus);
 800b6de:	4b57      	ldr	r3, [pc, #348]	; (800b83c <CmdServerRunBootloader+0x194>)
 800b6e0:	0018      	movs	r0, r3
 800b6e2:	f7f9 f9b1 	bl	8004a48 <HAL_I2C_DeInit>
	HAL_I2C_MspDeInit(&hi2c2);
 800b6e6:	4b56      	ldr	r3, [pc, #344]	; (800b840 <CmdServerRunBootloader+0x198>)
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f7f7 fa23 	bl	8002b34 <HAL_I2C_MspDeInit>
	HAL_RTC_MspDeInit(&hrtc);
 800b6ee:	4b55      	ldr	r3, [pc, #340]	; (800b844 <CmdServerRunBootloader+0x19c>)
 800b6f0:	0018      	movs	r0, r3
 800b6f2:	f7f7 fa9d 	bl	8002c30 <HAL_RTC_MspDeInit>
	HAL_TIM_PWM_MspDeInit(&htim3);
 800b6f6:	4b54      	ldr	r3, [pc, #336]	; (800b848 <CmdServerRunBootloader+0x1a0>)
 800b6f8:	0018      	movs	r0, r3
 800b6fa:	f7f7 fbbf 	bl	8002e7c <HAL_TIM_PWM_MspDeInit>
	HAL_TIM_PWM_MspDeInit(&htim15);
 800b6fe:	4b53      	ldr	r3, [pc, #332]	; (800b84c <CmdServerRunBootloader+0x1a4>)
 800b700:	0018      	movs	r0, r3
 800b702:	f7f7 fbbb 	bl	8002e7c <HAL_TIM_PWM_MspDeInit>
	HAL_TIM_Base_MspDeInit(&htim17);
 800b706:	4b52      	ldr	r3, [pc, #328]	; (800b850 <CmdServerRunBootloader+0x1a8>)
 800b708:	0018      	movs	r0, r3
 800b70a:	f7f7 fbdf 	bl	8002ecc <HAL_TIM_Base_MspDeInit>
  // Disable all peripheral clocks
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800b70e:	4b51      	ldr	r3, [pc, #324]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b710:	695a      	ldr	r2, [r3, #20]
 800b712:	4b50      	ldr	r3, [pc, #320]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b714:	4950      	ldr	r1, [pc, #320]	; (800b858 <CmdServerRunBootloader+0x1b0>)
 800b716:	400a      	ands	r2, r1
 800b718:	615a      	str	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_DISABLE();
 800b71a:	4b4e      	ldr	r3, [pc, #312]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b71c:	695a      	ldr	r2, [r3, #20]
 800b71e:	4b4d      	ldr	r3, [pc, #308]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b720:	494e      	ldr	r1, [pc, #312]	; (800b85c <CmdServerRunBootloader+0x1b4>)
 800b722:	400a      	ands	r2, r1
 800b724:	615a      	str	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800b726:	4b4b      	ldr	r3, [pc, #300]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b728:	695a      	ldr	r2, [r3, #20]
 800b72a:	4b4a      	ldr	r3, [pc, #296]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b72c:	494c      	ldr	r1, [pc, #304]	; (800b860 <CmdServerRunBootloader+0x1b8>)
 800b72e:	400a      	ands	r2, r1
 800b730:	615a      	str	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800b732:	4b48      	ldr	r3, [pc, #288]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b734:	695a      	ldr	r2, [r3, #20]
 800b736:	4b47      	ldr	r3, [pc, #284]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b738:	494a      	ldr	r1, [pc, #296]	; (800b864 <CmdServerRunBootloader+0x1bc>)
 800b73a:	400a      	ands	r2, r1
 800b73c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_ADC1_CLK_DISABLE();
 800b73e:	4b45      	ldr	r3, [pc, #276]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b740:	699a      	ldr	r2, [r3, #24]
 800b742:	4b44      	ldr	r3, [pc, #272]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b744:	4948      	ldr	r1, [pc, #288]	; (800b868 <CmdServerRunBootloader+0x1c0>)
 800b746:	400a      	ands	r2, r1
 800b748:	619a      	str	r2, [r3, #24]
  __HAL_RCC_DMA1_CLK_DISABLE();
 800b74a:	4b42      	ldr	r3, [pc, #264]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b74c:	695a      	ldr	r2, [r3, #20]
 800b74e:	4b41      	ldr	r3, [pc, #260]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b750:	2101      	movs	r1, #1
 800b752:	438a      	bics	r2, r1
 800b754:	615a      	str	r2, [r3, #20]
  __HAL_RCC_I2C1_CLK_DISABLE();
 800b756:	4b3f      	ldr	r3, [pc, #252]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b758:	69da      	ldr	r2, [r3, #28]
 800b75a:	4b3e      	ldr	r3, [pc, #248]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b75c:	4943      	ldr	r1, [pc, #268]	; (800b86c <CmdServerRunBootloader+0x1c4>)
 800b75e:	400a      	ands	r2, r1
 800b760:	61da      	str	r2, [r3, #28]
  __HAL_RCC_I2C2_CLK_DISABLE();
 800b762:	4b3c      	ldr	r3, [pc, #240]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b764:	69da      	ldr	r2, [r3, #28]
 800b766:	4b3b      	ldr	r3, [pc, #236]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b768:	493c      	ldr	r1, [pc, #240]	; (800b85c <CmdServerRunBootloader+0x1b4>)
 800b76a:	400a      	ands	r2, r1
 800b76c:	61da      	str	r2, [r3, #28]
  __HAL_RCC_TIM1_CLK_DISABLE();
 800b76e:	4b39      	ldr	r3, [pc, #228]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b770:	699a      	ldr	r2, [r3, #24]
 800b772:	4b38      	ldr	r3, [pc, #224]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b774:	493e      	ldr	r1, [pc, #248]	; (800b870 <CmdServerRunBootloader+0x1c8>)
 800b776:	400a      	ands	r2, r1
 800b778:	619a      	str	r2, [r3, #24]
  __HAL_RCC_TIM3_CLK_DISABLE();
 800b77a:	4b36      	ldr	r3, [pc, #216]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b77c:	69da      	ldr	r2, [r3, #28]
 800b77e:	4b35      	ldr	r3, [pc, #212]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b780:	2102      	movs	r1, #2
 800b782:	438a      	bics	r2, r1
 800b784:	61da      	str	r2, [r3, #28]
  __HAL_RCC_TIM14_CLK_DISABLE();
 800b786:	4b33      	ldr	r3, [pc, #204]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b788:	69da      	ldr	r2, [r3, #28]
 800b78a:	4b32      	ldr	r3, [pc, #200]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b78c:	4939      	ldr	r1, [pc, #228]	; (800b874 <CmdServerRunBootloader+0x1cc>)
 800b78e:	400a      	ands	r2, r1
 800b790:	61da      	str	r2, [r3, #28]
  __HAL_RCC_TIM15_CLK_DISABLE();
 800b792:	4b30      	ldr	r3, [pc, #192]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b794:	699a      	ldr	r2, [r3, #24]
 800b796:	4b2f      	ldr	r3, [pc, #188]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b798:	4937      	ldr	r1, [pc, #220]	; (800b878 <CmdServerRunBootloader+0x1d0>)
 800b79a:	400a      	ands	r2, r1
 800b79c:	619a      	str	r2, [r3, #24]
  __HAL_RCC_TIM17_CLK_DISABLE();
 800b79e:	4b2d      	ldr	r3, [pc, #180]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b7a0:	699a      	ldr	r2, [r3, #24]
 800b7a2:	4b2c      	ldr	r3, [pc, #176]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b7a4:	492f      	ldr	r1, [pc, #188]	; (800b864 <CmdServerRunBootloader+0x1bc>)
 800b7a6:	400a      	ands	r2, r1
 800b7a8:	619a      	str	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_DISABLE();
 800b7aa:	4b2a      	ldr	r3, [pc, #168]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b7ac:	69da      	ldr	r2, [r3, #28]
 800b7ae:	4b29      	ldr	r3, [pc, #164]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b7b0:	4932      	ldr	r1, [pc, #200]	; (800b87c <CmdServerRunBootloader+0x1d4>)
 800b7b2:	400a      	ands	r2, r1
 800b7b4:	61da      	str	r2, [r3, #28]
  __HAL_RCC_SYSCFG_CLK_DISABLE();
 800b7b6:	4b27      	ldr	r3, [pc, #156]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b7b8:	699a      	ldr	r2, [r3, #24]
 800b7ba:	4b26      	ldr	r3, [pc, #152]	; (800b854 <CmdServerRunBootloader+0x1ac>)
 800b7bc:	2101      	movs	r1, #1
 800b7be:	438a      	bics	r2, r1
 800b7c0:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7c2:	b672      	cpsid	i
}
 800b7c4:	46c0      	nop			; (mov r8, r8)

  // Disable and clear interrupts
  // disable global interrupt
  __disable_irq();
  int i;
  for (i = 0; i <= 29; i++) {
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	61fb      	str	r3, [r7, #28]
 800b7ca:	e00c      	b.n	800b7e6 <CmdServerRunBootloader+0x13e>
	  HAL_NVIC_DisableIRQ(i);
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	b25b      	sxtb	r3, r3
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	f7f8 fbf8 	bl	8003fc6 <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_ClearPendingIRQ(i);
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	b25b      	sxtb	r3, r3
 800b7da:	0018      	movs	r0, r3
 800b7dc:	f7f8 fc10 	bl	8004000 <HAL_NVIC_ClearPendingIRQ>
  for (i = 0; i <= 29; i++) {
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	61fb      	str	r3, [r7, #28]
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	2b1d      	cmp	r3, #29
 800b7ea:	ddef      	ble.n	800b7cc <CmdServerRunBootloader+0x124>
  }

  __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 800b7ec:	4b24      	ldr	r3, [pc, #144]	; (800b880 <CmdServerRunBootloader+0x1d8>)
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	4b23      	ldr	r3, [pc, #140]	; (800b880 <CmdServerRunBootloader+0x1d8>)
 800b7f2:	2103      	movs	r1, #3
 800b7f4:	438a      	bics	r2, r1
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	4b21      	ldr	r3, [pc, #132]	; (800b880 <CmdServerRunBootloader+0x1d8>)
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	4b20      	ldr	r3, [pc, #128]	; (800b880 <CmdServerRunBootloader+0x1d8>)
 800b7fe:	2101      	movs	r1, #1
 800b800:	430a      	orrs	r2, r1
 800b802:	601a      	str	r2, [r3, #0]

  // jump to bootloader address
  uint32_t JumpAddress = *(__IO uint32_t*) (SYS_MEM_ADDRESS + 4);
 800b804:	4b1f      	ldr	r3, [pc, #124]	; (800b884 <CmdServerRunBootloader+0x1dc>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	61bb      	str	r3, [r7, #24]
  Jump_To_Bootloader = (pFunction) JumpAddress;
 800b80a:	69ba      	ldr	r2, [r7, #24]
 800b80c:	4b1e      	ldr	r3, [pc, #120]	; (800b888 <CmdServerRunBootloader+0x1e0>)
 800b80e:	601a      	str	r2, [r3, #0]
   __set_MSP(*(__IO uint32_t*)SYS_MEM_ADDRESS);
 800b810:	4b1e      	ldr	r3, [pc, #120]	; (800b88c <CmdServerRunBootloader+0x1e4>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f383 8808 	msr	MSP, r3
}
 800b81c:	46c0      	nop			; (mov r8, r8)
  Jump_To_Bootloader();
 800b81e:	4b1a      	ldr	r3, [pc, #104]	; (800b888 <CmdServerRunBootloader+0x1e0>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4798      	blx	r3
 800b824:	e000      	b.n	800b828 <CmdServerRunBootloader+0x180>
	if ( pData[1] != 0x01 || dir == MASTER_CMD_DIR_READ ) return;
 800b826:	46c0      	nop			; (mov r8, r8)
}
 800b828:	46bd      	mov	sp, r7
 800b82a:	b008      	add	sp, #32
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	46c0      	nop			; (mov r8, r8)
 800b830:	2000185c 	.word	0x2000185c
 800b834:	a1a15151 	.word	0xa1a15151
 800b838:	20001930 	.word	0x20001930
 800b83c:	20001634 	.word	0x20001634
 800b840:	200016d8 	.word	0x200016d8
 800b844:	2000183c 	.word	0x2000183c
 800b848:	2000176c 	.word	0x2000176c
 800b84c:	20001680 	.word	0x20001680
 800b850:	20001724 	.word	0x20001724
 800b854:	40021000 	.word	0x40021000
 800b858:	fff7ffff 	.word	0xfff7ffff
 800b85c:	ffbfffff 	.word	0xffbfffff
 800b860:	fffdffff 	.word	0xfffdffff
 800b864:	fffbffff 	.word	0xfffbffff
 800b868:	fffffdff 	.word	0xfffffdff
 800b86c:	ffdfffff 	.word	0xffdfffff
 800b870:	fffff7ff 	.word	0xfffff7ff
 800b874:	fffffeff 	.word	0xfffffeff
 800b878:	fffeffff 	.word	0xfffeffff
 800b87c:	efffffff 	.word	0xefffffff
 800b880:	40010000 	.word	0x40010000
 800b884:	1fffd804 	.word	0x1fffd804
 800b888:	200019ac 	.word	0x200019ac
 800b88c:	1fffd800 	.word	0x1fffd800

0800b890 <CmdServerReadWriteDefaultConfiguration>:


void CmdServerReadWriteDefaultConfiguration(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	60b9      	str	r1, [r7, #8]
 800b898:	607a      	str	r2, [r7, #4]
 800b89a:	210f      	movs	r1, #15
 800b89c:	187b      	adds	r3, r7, r1
 800b89e:	1c02      	adds	r2, r0, #0
 800b8a0:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE)
 800b8a2:	187b      	adds	r3, r7, r1
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d115      	bne.n	800b8d6 <CmdServerReadWriteDefaultConfiguration+0x46>
	{
		if (pData[1] == 0xaa && pData[2] == 0x55 && pData[3] == 0x0a && pData[4] == 0xa3 )
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2baa      	cmp	r3, #170	; 0xaa
 800b8b2:	d110      	bne.n	800b8d6 <CmdServerReadWriteDefaultConfiguration+0x46>
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	3302      	adds	r3, #2
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b55      	cmp	r3, #85	; 0x55
 800b8bc:	d10b      	bne.n	800b8d6 <CmdServerReadWriteDefaultConfiguration+0x46>
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	3303      	adds	r3, #3
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	2b0a      	cmp	r3, #10
 800b8c6:	d106      	bne.n	800b8d6 <CmdServerReadWriteDefaultConfiguration+0x46>
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	2ba3      	cmp	r3, #163	; 0xa3
 800b8d0:	d101      	bne.n	800b8d6 <CmdServerReadWriteDefaultConfiguration+0x46>
		{
			// TODO - look at this to make sure the world doesn't implode once initiated.
			NV_FactoryReset();
 800b8d2:	f005 f89f 	bl	8010a14 <NV_FactoryReset>
		}
	}
}
 800b8d6:	46c0      	nop			; (mov r8, r8)
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	b004      	add	sp, #16
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <CmdServerReadFirmwareVersion>:


void CmdServerReadFirmwareVersion(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b084      	sub	sp, #16
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	210f      	movs	r1, #15
 800b8ea:	187b      	adds	r3, r7, r1
 800b8ec:	1c02      	adds	r2, r0, #0
 800b8ee:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_READ) {
 800b8f0:	187b      	adds	r3, r7, r1
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d109      	bne.n	800b90c <CmdServerReadFirmwareVersion+0x2e>
		pData[0] = firmwareVer;
 800b8f8:	2215      	movs	r2, #21
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	701a      	strb	r2, [r3, #0]
		pData[1] = firmwareVariant;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	3301      	adds	r3, #1
 800b902:	2200      	movs	r2, #0
 800b904:	701a      	strb	r2, [r3, #0]
		*dataLen = 2;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2202      	movs	r2, #2
 800b90a:	801a      	strh	r2, [r3, #0]
	}
}
 800b90c:	46c0      	nop			; (mov r8, r8)
 800b90e:	46bd      	mov	sp, r7
 800b910:	b004      	add	sp, #16
 800b912:	bd80      	pop	{r7, pc}

0800b914 <CmdServerReadBoardFaultStatus>:

void CmdServerReadBoardFaultStatus(uint8_t dir, uint8_t *pData, uint16_t *dataLen)
{
 800b914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b916:	b087      	sub	sp, #28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	607a      	str	r2, [r7, #4]
 800b91e:	250f      	movs	r5, #15
 800b920:	197b      	adds	r3, r7, r5
 800b922:	1c02      	adds	r2, r0, #0
 800b924:	701a      	strb	r2, [r3, #0]
	const bool fuelguageOnline = FUELGAUGE_IsOnline();
 800b926:	2617      	movs	r6, #23
 800b928:	19bc      	adds	r4, r7, r6
 800b92a:	f001 f925 	bl	800cb78 <FUELGAUGE_IsOnline>
 800b92e:	0003      	movs	r3, r0
 800b930:	7023      	strb	r3, [r4, #0]
	const bool tempSensorFault = FUELGAUGE_IsNtcOK();
 800b932:	2316      	movs	r3, #22
 800b934:	18fc      	adds	r4, r7, r3
 800b936:	f001 f915 	bl	800cb64 <FUELGAUGE_IsNtcOK>
 800b93a:	0003      	movs	r3, r0
 800b93c:	7023      	strb	r3, [r4, #0]
	const uint8_t chargerFault = CHARGER_GetFaultStatus();
 800b93e:	2315      	movs	r3, #21
 800b940:	18fc      	adds	r4, r7, r3
 800b942:	f7fe f9a5 	bl	8009c90 <CHARGER_GetFaultStatus>
 800b946:	0003      	movs	r3, r0
 800b948:	7023      	strb	r3, [r4, #0]

	if (dir == MASTER_CMD_DIR_READ)
 800b94a:	197b      	adds	r3, r7, r5
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d12d      	bne.n	800b9ae <CmdServerReadBoardFaultStatus+0x9a>
	{
		// bit 0 charger i2c fault
		pData[0u] = 0u;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	2200      	movs	r2, #0
 800b956:	701a      	strb	r2, [r3, #0]
		// bit 1-3 charger fault status
		pData[0u] |= (chargerFault << 1u);
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	b25a      	sxtb	r2, r3
 800b95e:	2315      	movs	r3, #21
 800b960:	18fb      	adds	r3, r7, r3
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	b25b      	sxtb	r3, r3
 800b968:	4313      	orrs	r3, r2
 800b96a:	b25b      	sxtb	r3, r3
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	701a      	strb	r2, [r3, #0]
		// bit 4 fuel gauge i2c fault
		pData[0u] |= (true == fuelguageOnline) ? 0x10u : 0u;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	781a      	ldrb	r2, [r3, #0]
 800b976:	19bb      	adds	r3, r7, r6
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <CmdServerReadBoardFaultStatus+0x6e>
 800b97e:	2310      	movs	r3, #16
 800b980:	e000      	b.n	800b984 <CmdServerReadBoardFaultStatus+0x70>
 800b982:	2300      	movs	r3, #0
 800b984:	4313      	orrs	r3, r2
 800b986:	b2da      	uxtb	r2, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	701a      	strb	r2, [r3, #0]
		// bit 5 fuel gauge temp sense fault (bad sensor connection)
		pData[0u] |= (true == tempSensorFault) ? 0x20u : 0u;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	781a      	ldrb	r2, [r3, #0]
 800b990:	2316      	movs	r3, #22
 800b992:	18fb      	adds	r3, r7, r3
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <CmdServerReadBoardFaultStatus+0x8a>
 800b99a:	2320      	movs	r3, #32
 800b99c:	e000      	b.n	800b9a0 <CmdServerReadBoardFaultStatus+0x8c>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	701a      	strb	r2, [r3, #0]

		*dataLen = 1u;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	801a      	strh	r2, [r3, #0]
	}
}
 800b9ae:	46c0      	nop			; (mov r8, r8)
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	b007      	add	sp, #28
 800b9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9b6 <CmdServerReadWriteIoConfig1>:

void CmdServerReadWriteIoConfig1(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	210f      	movs	r1, #15
 800b9c2:	187b      	adds	r3, r7, r1
 800b9c4:	1c02      	adds	r2, r0, #0
 800b9c6:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800b9c8:	187b      	adds	r3, r7, r1
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d10b      	bne.n	800b9e8 <CmdServerReadWriteIoConfig1+0x32>
		IoSetConfiguarion(1, pData+1, *dataLen - 1);
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	1c59      	adds	r1, r3, #1
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	001a      	movs	r2, r3
 800b9e0:	2001      	movs	r0, #1
 800b9e2:	f002 ff5b 	bl	800e89c <IoSetConfiguarion>
	} else {
		IoGetConfiguarion(1, pData, dataLen);
	}
}
 800b9e6:	e005      	b.n	800b9f4 <CmdServerReadWriteIoConfig1+0x3e>
		IoGetConfiguarion(1, pData, dataLen);
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	0019      	movs	r1, r3
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	f003 f80c 	bl	800ea0c <IoGetConfiguarion>
}
 800b9f4:	46c0      	nop			; (mov r8, r8)
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	b004      	add	sp, #16
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <CmdServerReadWriteIoConfig2>:

void CmdServerReadWriteIoConfig2(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	607a      	str	r2, [r7, #4]
 800ba06:	210f      	movs	r1, #15
 800ba08:	187b      	adds	r3, r7, r1
 800ba0a:	1c02      	adds	r2, r0, #0
 800ba0c:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800ba0e:	187b      	adds	r3, r7, r1
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10b      	bne.n	800ba2e <CmdServerReadWriteIoConfig2+0x32>
		IoSetConfiguarion(2, pData+1, *dataLen - 1);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	1c59      	adds	r1, r3, #1
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	3b01      	subs	r3, #1
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	001a      	movs	r2, r3
 800ba26:	2002      	movs	r0, #2
 800ba28:	f002 ff38 	bl	800e89c <IoSetConfiguarion>
	} else {
		IoGetConfiguarion(2, pData, dataLen);
	}
}
 800ba2c:	e005      	b.n	800ba3a <CmdServerReadWriteIoConfig2+0x3e>
		IoGetConfiguarion(2, pData, dataLen);
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	0019      	movs	r1, r3
 800ba34:	2002      	movs	r0, #2
 800ba36:	f002 ffe9 	bl	800ea0c <IoGetConfiguarion>
}
 800ba3a:	46c0      	nop			; (mov r8, r8)
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	b004      	add	sp, #16
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <CmdServerReadWriteIoValue1>:

void CmdServerReadWriteIoValue1(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	210f      	movs	r1, #15
 800ba4e:	187b      	adds	r3, r7, r1
 800ba50:	1c02      	adds	r2, r0, #0
 800ba52:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800ba54:	187b      	adds	r3, r7, r1
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10a      	bne.n	800ba72 <CmdServerReadWriteIoValue1+0x30>
		IoWrite(1, pData+1, *dataLen - 1);
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	1c59      	adds	r1, r3, #1
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	881b      	ldrh	r3, [r3, #0]
 800ba64:	3b01      	subs	r3, #1
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	001a      	movs	r2, r3
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	f003 f818 	bl	800eaa0 <IoWrite>
	} else {
		IoRead(1, pData, dataLen);
	}
}
 800ba70:	e005      	b.n	800ba7e <CmdServerReadWriteIoValue1+0x3c>
		IoRead(1, pData, dataLen);
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	0019      	movs	r1, r3
 800ba78:	2001      	movs	r0, #1
 800ba7a:	f003 f8a3 	bl	800ebc4 <IoRead>
}
 800ba7e:	46c0      	nop			; (mov r8, r8)
 800ba80:	46bd      	mov	sp, r7
 800ba82:	b004      	add	sp, #16
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <CmdServerReadWriteIoValue2>:

void CmdServerReadWriteIoValue2(uint8_t dir, uint8_t *pData, uint16_t *dataLen) {
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	210f      	movs	r1, #15
 800ba92:	187b      	adds	r3, r7, r1
 800ba94:	1c02      	adds	r2, r0, #0
 800ba96:	701a      	strb	r2, [r3, #0]
	if (dir == MASTER_CMD_DIR_WRITE) {
 800ba98:	187b      	adds	r3, r7, r1
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <CmdServerReadWriteIoValue2+0x30>
		IoWrite(2, pData+1, *dataLen - 1);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	1c59      	adds	r1, r3, #1
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	b29b      	uxth	r3, r3
 800baac:	001a      	movs	r2, r3
 800baae:	2002      	movs	r0, #2
 800bab0:	f002 fff6 	bl	800eaa0 <IoWrite>
	} else {
		IoRead(2, pData, dataLen);
	}
}
 800bab4:	e005      	b.n	800bac2 <CmdServerReadWriteIoValue2+0x3c>
		IoRead(2, pData, dataLen);
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	0019      	movs	r1, r3
 800babc:	2002      	movs	r0, #2
 800babe:	f003 f881 	bl	800ebc4 <IoRead>
}
 800bac2:	46c0      	nop			; (mov r8, r8)
 800bac4:	46bd      	mov	sp, r7
 800bac6:	b004      	add	sp, #16
 800bac8:	bd80      	pop	{r7, pc}
	...

0800bacc <SwitchResCongigInit>:
int8_t switchConfigCode = -1;
int16_t resistorConfig1Code7 = -1;
int8_t resistorConfig2Code4 = -1;

void SwitchResCongigInit(uint32_t resistorConfigAdc)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
	if ( resistorConfigAdc > CONFIG_SW_11_ADC_HIGH + 2)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a60      	ldr	r2, [pc, #384]	; (800bc58 <SwitchResCongigInit+0x18c>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d903      	bls.n	800bae4 <SwitchResCongigInit+0x18>
	{
		switchConfigCode = 0x3;
 800badc:	4b5f      	ldr	r3, [pc, #380]	; (800bc5c <SwitchResCongigInit+0x190>)
 800bade:	2203      	movs	r2, #3
 800bae0:	701a      	strb	r2, [r3, #0]
	}
	else if (resistorConfigAdc < 8)
	{
		switchConfigCode = 0x0;
	}
}
 800bae2:	e0b4      	b.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SW_11_ADC_LOW )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a5e      	ldr	r2, [pc, #376]	; (800bc60 <SwitchResCongigInit+0x194>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d912      	bls.n	800bb12 <SwitchResCongigInit+0x46>
		switchConfigCode = 0x3;
 800baec:	4b5b      	ldr	r3, [pc, #364]	; (800bc5c <SwitchResCongigInit+0x190>)
 800baee:	2203      	movs	r2, #3
 800baf0:	701a      	strb	r2, [r3, #0]
		resistorConfig1Code7 = ((((CONFIG_SW_11_ADC_HIGH - resistorConfigAdc) * 128 / (CONFIG_SW_11_ADC_HIGH - CONFIG_SW_11_ADC_LOW)) << 1) + 1) >> 1;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a5b      	ldr	r2, [pc, #364]	; (800bc64 <SwitchResCongigInit+0x198>)
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	01db      	lsls	r3, r3, #7
 800bafa:	21e5      	movs	r1, #229	; 0xe5
 800bafc:	0018      	movs	r0, r3
 800bafe:	f7f4 fb01 	bl	8000104 <__udivsi3>
 800bb02:	0003      	movs	r3, r0
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	3301      	adds	r3, #1
 800bb08:	085b      	lsrs	r3, r3, #1
 800bb0a:	b21a      	sxth	r2, r3
 800bb0c:	4b56      	ldr	r3, [pc, #344]	; (800bc68 <SwitchResCongigInit+0x19c>)
 800bb0e:	801a      	strh	r2, [r3, #0]
}
 800bb10:	e09d      	b.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SW_10_ADC_HIGH + 2)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a55      	ldr	r2, [pc, #340]	; (800bc6c <SwitchResCongigInit+0x1a0>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d903      	bls.n	800bb22 <SwitchResCongigInit+0x56>
		switchConfigCode = 0x2;
 800bb1a:	4b50      	ldr	r3, [pc, #320]	; (800bc5c <SwitchResCongigInit+0x190>)
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	701a      	strb	r2, [r3, #0]
}
 800bb20:	e095      	b.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SW_10_ADC_LOW )
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a52      	ldr	r2, [pc, #328]	; (800bc70 <SwitchResCongigInit+0x1a4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d914      	bls.n	800bb54 <SwitchResCongigInit+0x88>
		switchConfigCode = 0x2;
 800bb2a:	4b4c      	ldr	r3, [pc, #304]	; (800bc5c <SwitchResCongigInit+0x190>)
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	701a      	strb	r2, [r3, #0]
		resistorConfig1Code7 = ((((CONFIG_SW_10_ADC_HIGH - resistorConfigAdc) * 128 / (CONFIG_SW_10_ADC_HIGH - CONFIG_SW_10_ADC_LOW)) << 1) + 1) >> 1;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	22ba      	movs	r2, #186	; 0xba
 800bb34:	0112      	lsls	r2, r2, #4
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	01db      	lsls	r3, r3, #7
 800bb3a:	2284      	movs	r2, #132	; 0x84
 800bb3c:	0051      	lsls	r1, r2, #1
 800bb3e:	0018      	movs	r0, r3
 800bb40:	f7f4 fae0 	bl	8000104 <__udivsi3>
 800bb44:	0003      	movs	r3, r0
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	3301      	adds	r3, #1
 800bb4a:	085b      	lsrs	r3, r3, #1
 800bb4c:	b21a      	sxth	r2, r3
 800bb4e:	4b46      	ldr	r3, [pc, #280]	; (800bc68 <SwitchResCongigInit+0x19c>)
 800bb50:	801a      	strh	r2, [r3, #0]
}
 800bb52:	e07c      	b.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SW_01_ADC_HIGH + 2)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a47      	ldr	r2, [pc, #284]	; (800bc74 <SwitchResCongigInit+0x1a8>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d903      	bls.n	800bb64 <SwitchResCongigInit+0x98>
		switchConfigCode = 0x1;
 800bb5c:	4b3f      	ldr	r3, [pc, #252]	; (800bc5c <SwitchResCongigInit+0x190>)
 800bb5e:	2201      	movs	r2, #1
 800bb60:	701a      	strb	r2, [r3, #0]
}
 800bb62:	e074      	b.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SW_01_ADC_LOW )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a44      	ldr	r2, [pc, #272]	; (800bc78 <SwitchResCongigInit+0x1ac>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d914      	bls.n	800bb96 <SwitchResCongigInit+0xca>
		switchConfigCode = 0x1;
 800bb6c:	4b3b      	ldr	r3, [pc, #236]	; (800bc5c <SwitchResCongigInit+0x190>)
 800bb6e:	2201      	movs	r2, #1
 800bb70:	701a      	strb	r2, [r3, #0]
		resistorConfig1Code7 = ((((CONFIG_SW_01_ADC_HIGH - resistorConfigAdc) * 128 / (CONFIG_SW_01_ADC_HIGH - CONFIG_SW_01_ADC_LOW)) << 1) + 1) >> 1;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a41      	ldr	r2, [pc, #260]	; (800bc7c <SwitchResCongigInit+0x1b0>)
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	01db      	lsls	r3, r3, #7
 800bb7a:	2238      	movs	r2, #56	; 0x38
 800bb7c:	32ff      	adds	r2, #255	; 0xff
 800bb7e:	0011      	movs	r1, r2
 800bb80:	0018      	movs	r0, r3
 800bb82:	f7f4 fabf 	bl	8000104 <__udivsi3>
 800bb86:	0003      	movs	r3, r0
 800bb88:	005b      	lsls	r3, r3, #1
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	085b      	lsrs	r3, r3, #1
 800bb8e:	b21a      	sxth	r2, r3
 800bb90:	4b35      	ldr	r3, [pc, #212]	; (800bc68 <SwitchResCongigInit+0x19c>)
 800bb92:	801a      	strh	r2, [r3, #0]
}
 800bb94:	e05b      	b.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SWR2_11_ADC_HIGH + 3)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a39      	ldr	r2, [pc, #228]	; (800bc80 <SwitchResCongigInit+0x1b4>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d857      	bhi.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SWR2_11_ADC_LOW )
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a38      	ldr	r2, [pc, #224]	; (800bc84 <SwitchResCongigInit+0x1b8>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d913      	bls.n	800bbce <SwitchResCongigInit+0x102>
		switchConfigCode = 0x3;
 800bba6:	4b2d      	ldr	r3, [pc, #180]	; (800bc5c <SwitchResCongigInit+0x190>)
 800bba8:	2203      	movs	r2, #3
 800bbaa:	701a      	strb	r2, [r3, #0]
		resistorConfig2Code4 = ((((CONFIG_SWR2_11_ADC_HIGH - resistorConfigAdc) * 16 / (CONFIG_SWR2_11_ADC_HIGH - CONFIG_SWR2_11_ADC_LOW)) << 1) + 1) >> 1;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a36      	ldr	r2, [pc, #216]	; (800bc88 <SwitchResCongigInit+0x1bc>)
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	011b      	lsls	r3, r3, #4
 800bbb4:	2294      	movs	r2, #148	; 0x94
 800bbb6:	0051      	lsls	r1, r2, #1
 800bbb8:	0018      	movs	r0, r3
 800bbba:	f7f4 faa3 	bl	8000104 <__udivsi3>
 800bbbe:	0003      	movs	r3, r0
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	085b      	lsrs	r3, r3, #1
 800bbc6:	b25a      	sxtb	r2, r3
 800bbc8:	4b30      	ldr	r3, [pc, #192]	; (800bc8c <SwitchResCongigInit+0x1c0>)
 800bbca:	701a      	strb	r2, [r3, #0]
}
 800bbcc:	e03f      	b.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SWR2_10_ADC_HIGH + 3)
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	23af      	movs	r3, #175	; 0xaf
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d23a      	bcs.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SWR2_10_ADC_LOW )
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a2d      	ldr	r2, [pc, #180]	; (800bc90 <SwitchResCongigInit+0x1c4>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d914      	bls.n	800bc0a <SwitchResCongigInit+0x13e>
		switchConfigCode = 0x2;
 800bbe0:	4b1e      	ldr	r3, [pc, #120]	; (800bc5c <SwitchResCongigInit+0x190>)
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	701a      	strb	r2, [r3, #0]
		resistorConfig2Code4 = ((((CONFIG_SWR2_10_ADC_HIGH - resistorConfigAdc) * 16 / (CONFIG_SWR2_10_ADC_HIGH - CONFIG_SWR2_10_ADC_LOW)) << 1) + 1) >> 1;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a2a      	ldr	r2, [pc, #168]	; (800bc94 <SwitchResCongigInit+0x1c8>)
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	011b      	lsls	r3, r3, #4
 800bbee:	220c      	movs	r2, #12
 800bbf0:	32ff      	adds	r2, #255	; 0xff
 800bbf2:	0011      	movs	r1, r2
 800bbf4:	0018      	movs	r0, r3
 800bbf6:	f7f4 fa85 	bl	8000104 <__udivsi3>
 800bbfa:	0003      	movs	r3, r0
 800bbfc:	005b      	lsls	r3, r3, #1
 800bbfe:	3301      	adds	r3, #1
 800bc00:	085b      	lsrs	r3, r3, #1
 800bc02:	b25a      	sxtb	r2, r3
 800bc04:	4b21      	ldr	r3, [pc, #132]	; (800bc8c <SwitchResCongigInit+0x1c0>)
 800bc06:	701a      	strb	r2, [r3, #0]
}
 800bc08:	e021      	b.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SWR2_01_ADC_HIGH + 3)
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	23a7      	movs	r3, #167	; 0xa7
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d81c      	bhi.n	800bc4e <SwitchResCongigInit+0x182>
	else if ( resistorConfigAdc > CONFIG_SWR2_01_ADC_LOW )
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a20      	ldr	r2, [pc, #128]	; (800bc98 <SwitchResCongigInit+0x1cc>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d912      	bls.n	800bc42 <SwitchResCongigInit+0x176>
		switchConfigCode = 0x1;
 800bc1c:	4b0f      	ldr	r3, [pc, #60]	; (800bc5c <SwitchResCongigInit+0x190>)
 800bc1e:	2201      	movs	r2, #1
 800bc20:	701a      	strb	r2, [r3, #0]
		resistorConfig2Code4 = ((((CONFIG_SWR2_01_ADC_HIGH - resistorConfigAdc) * 16 / (CONFIG_SWR2_01_ADC_HIGH - CONFIG_SWR2_01_ADC_LOW)) << 1) + 1) >> 1;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4a1d      	ldr	r2, [pc, #116]	; (800bc9c <SwitchResCongigInit+0x1d0>)
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	011b      	lsls	r3, r3, #4
 800bc2a:	2197      	movs	r1, #151	; 0x97
 800bc2c:	0018      	movs	r0, r3
 800bc2e:	f7f4 fa69 	bl	8000104 <__udivsi3>
 800bc32:	0003      	movs	r3, r0
 800bc34:	005b      	lsls	r3, r3, #1
 800bc36:	3301      	adds	r3, #1
 800bc38:	085b      	lsrs	r3, r3, #1
 800bc3a:	b25a      	sxtb	r2, r3
 800bc3c:	4b13      	ldr	r3, [pc, #76]	; (800bc8c <SwitchResCongigInit+0x1c0>)
 800bc3e:	701a      	strb	r2, [r3, #0]
}
 800bc40:	e005      	b.n	800bc4e <SwitchResCongigInit+0x182>
	else if (resistorConfigAdc < 8)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b07      	cmp	r3, #7
 800bc46:	d802      	bhi.n	800bc4e <SwitchResCongigInit+0x182>
		switchConfigCode = 0x0;
 800bc48:	4b04      	ldr	r3, [pc, #16]	; (800bc5c <SwitchResCongigInit+0x190>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	701a      	strb	r2, [r3, #0]
}
 800bc4e:	46c0      	nop			; (mov r8, r8)
 800bc50:	46bd      	mov	sp, r7
 800bc52:	b002      	add	sp, #8
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	00000c91 	.word	0x00000c91
 800bc5c:	200004c4 	.word	0x200004c4
 800bc60:	00000baa 	.word	0x00000baa
 800bc64:	00000c8f 	.word	0x00000c8f
 800bc68:	200004c6 	.word	0x200004c6
 800bc6c:	00000ba2 	.word	0x00000ba2
 800bc70:	00000a98 	.word	0x00000a98
 800bc74:	000007fd 	.word	0x000007fd
 800bc78:	000006c4 	.word	0x000006c4
 800bc7c:	000007fb 	.word	0x000007fb
 800bc80:	000006a9 	.word	0x000006a9
 800bc84:	0000057e 	.word	0x0000057e
 800bc88:	000006a6 	.word	0x000006a6
 800bc8c:	200004c8 	.word	0x200004c8
 800bc90:	00000469 	.word	0x00000469
 800bc94:	00000574 	.word	0x00000574
 800bc98:	00000202 	.word	0x00000202
 800bc9c:	00000299 	.word	0x00000299

0800bca0 <crc_8_update>:
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
};


crc_t crc_8_update(crc_t crc, const void *data, size_t data_len)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
    uint8_t *d = (uint8_t*)data;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	617b      	str	r3, [r7, #20]
    uint16_t tbl_idx;

    while (data_len--)
 800bcb0:	e013      	b.n	800bcda <crc_8_update+0x3a>
    {
        tbl_idx = (crc ^ *d);
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	b299      	uxth	r1, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	2012      	movs	r0, #18
 800bcbe:	183b      	adds	r3, r7, r0
 800bcc0:	404a      	eors	r2, r1
 800bcc2:	801a      	strh	r2, [r3, #0]
        crc = (crc_8_table[tbl_idx] & 0xFFu);
 800bcc4:	183b      	adds	r3, r7, r0
 800bcc6:	881a      	ldrh	r2, [r3, #0]
 800bcc8:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <crc_8_update+0x54>)
 800bcca:	0092      	lsls	r2, r2, #2
 800bccc:	58d3      	ldr	r3, [r2, r3]
 800bcce:	22ff      	movs	r2, #255	; 0xff
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]
        d++;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	617b      	str	r3, [r7, #20]
    while (data_len--)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	1e5a      	subs	r2, r3, #1
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1e6      	bne.n	800bcb2 <crc_8_update+0x12>
    }

    return crc & 0xFFu;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	22ff      	movs	r2, #255	; 0xff
 800bce8:	4013      	ands	r3, r2
}
 800bcea:	0018      	movs	r0, r3
 800bcec:	46bd      	mov	sp, r7
 800bcee:	b006      	add	sp, #24
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	46c0      	nop			; (mov r8, r8)
 800bcf4:	08013b64 	.word	0x08013b64

0800bcf8 <crc_8_init>:


crc_t crc_8_init(const uint8_t data)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	0002      	movs	r2, r0
 800bd00:	1dfb      	adds	r3, r7, #7
 800bd02:	701a      	strb	r2, [r3, #0]
	return crc_8_update(0x00u, &data, 1u);
 800bd04:	1dfb      	adds	r3, r7, #7
 800bd06:	2201      	movs	r2, #1
 800bd08:	0019      	movs	r1, r3
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	f7ff ffc8 	bl	800bca0 <crc_8_update>
 800bd10:	0003      	movs	r3, r0
}
 800bd12:	0018      	movs	r0, r3
 800bd14:	46bd      	mov	sp, r7
 800bd16:	b002      	add	sp, #8
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <E2_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void E2_Init(void)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	af00      	add	r7, sp, #0
	uint8_t tempU8;
	bool EE_AddrPinValue = GPIO_PIN_RESET;
 800bd20:	1dfb      	adds	r3, r7, #7
 800bd22:	2200      	movs	r2, #0
 800bd24:	701a      	strb	r2, [r3, #0]

	IODRV_SetPin(IODRV_PIN_EE_WP, GPIO_PIN_SET);
 800bd26:	2101      	movs	r1, #1
 800bd28:	200e      	movs	r0, #14
 800bd2a:	f003 f895 	bl	800ee58 <IODRV_SetPin>

	if (NV_ReadVariable_U8(ID_EEPROM_ADR_NV_ADDR, &tempU8))
 800bd2e:	1dbb      	adds	r3, r7, #6
 800bd30:	0019      	movs	r1, r3
 800bd32:	205b      	movs	r0, #91	; 0x5b
 800bd34:	f004 ff02 	bl	8010b3c <NV_ReadVariable_U8>
 800bd38:	1e03      	subs	r3, r0, #0
 800bd3a:	d008      	beq.n	800bd4e <E2_Init+0x34>
	{
		EE_AddrPinValue = (0u != (tempU8 & 0x02u));
 800bd3c:	1dbb      	adds	r3, r7, #6
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	001a      	movs	r2, r3
 800bd42:	2302      	movs	r3, #2
 800bd44:	401a      	ands	r2, r3
 800bd46:	1dfb      	adds	r3, r7, #7
 800bd48:	1e51      	subs	r1, r2, #1
 800bd4a:	418a      	sbcs	r2, r1
 800bd4c:	701a      	strb	r2, [r3, #0]
	}

	IODRV_SetPin(IODRV_PIN_EE_A, EE_AddrPinValue);
 800bd4e:	1dfb      	adds	r3, r7, #7
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	0019      	movs	r1, r3
 800bd54:	200d      	movs	r0, #13
 800bd56:	f003 f87f 	bl	800ee58 <IODRV_SetPin>
}
 800bd5a:	46c0      	nop			; (mov r8, r8)
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	b002      	add	sp, #8
 800bd60:	bd80      	pop	{r7, pc}
	...

0800bd64 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register and program memory access.
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800bd68:	4b06      	ldr	r3, [pc, #24]	; (800bd84 <FLASH_Unlock+0x20>)
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	2280      	movs	r2, #128	; 0x80
 800bd6e:	4013      	ands	r3, r2
 800bd70:	d005      	beq.n	800bd7e <FLASH_Unlock+0x1a>
  {
    /* Unlocking the program memory access */
    FLASH->KEYR = FLASH_FKEY1;
 800bd72:	4b04      	ldr	r3, [pc, #16]	; (800bd84 <FLASH_Unlock+0x20>)
 800bd74:	4a04      	ldr	r2, [pc, #16]	; (800bd88 <FLASH_Unlock+0x24>)
 800bd76:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_FKEY2;
 800bd78:	4b02      	ldr	r3, [pc, #8]	; (800bd84 <FLASH_Unlock+0x20>)
 800bd7a:	4a04      	ldr	r2, [pc, #16]	; (800bd8c <FLASH_Unlock+0x28>)
 800bd7c:	605a      	str	r2, [r3, #4]
  }
}
 800bd7e:	46c0      	nop			; (mov r8, r8)
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40022000 	.word	0x40022000
 800bd88:	45670123 	.word	0x45670123
 800bd8c:	cdef89ab 	.word	0xcdef89ab

0800bd90 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, HAL_OK or FLASH_TIMEOUT.
  */
HAL_StatusTypeDef FLASH_ErasePage(uint32_t Page_Address)
{
 800bd90:	b5b0      	push	{r4, r5, r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK/*HAL_OK*/;
 800bd98:	250f      	movs	r5, #15
 800bd9a:	197b      	adds	r3, r7, r5
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800bda0:	197c      	adds	r4, r7, r5
 800bda2:	23b0      	movs	r3, #176	; 0xb0
 800bda4:	031b      	lsls	r3, r3, #12
 800bda6:	0018      	movs	r0, r3
 800bda8:	f7f8 fab2 	bl	8004310 <FLASH_WaitForLastOperation>
 800bdac:	0003      	movs	r3, r0
 800bdae:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK/*HAL_OK*/)
 800bdb0:	0028      	movs	r0, r5
 800bdb2:	183b      	adds	r3, r7, r0
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d11c      	bne.n	800bdf4 <FLASH_ErasePage+0x64>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 800bdba:	4b12      	ldr	r3, [pc, #72]	; (800be04 <FLASH_ErasePage+0x74>)
 800bdbc:	691a      	ldr	r2, [r3, #16]
 800bdbe:	4b11      	ldr	r3, [pc, #68]	; (800be04 <FLASH_ErasePage+0x74>)
 800bdc0:	2102      	movs	r1, #2
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	611a      	str	r2, [r3, #16]
    FLASH->AR  = Page_Address;
 800bdc6:	4b0f      	ldr	r3, [pc, #60]	; (800be04 <FLASH_ErasePage+0x74>)
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	615a      	str	r2, [r3, #20]
    FLASH->CR |= FLASH_CR_STRT;
 800bdcc:	4b0d      	ldr	r3, [pc, #52]	; (800be04 <FLASH_ErasePage+0x74>)
 800bdce:	691a      	ldr	r2, [r3, #16]
 800bdd0:	4b0c      	ldr	r3, [pc, #48]	; (800be04 <FLASH_ErasePage+0x74>)
 800bdd2:	2140      	movs	r1, #64	; 0x40
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800bdd8:	183c      	adds	r4, r7, r0
 800bdda:	23b0      	movs	r3, #176	; 0xb0
 800bddc:	031b      	lsls	r3, r3, #12
 800bdde:	0018      	movs	r0, r3
 800bde0:	f7f8 fa96 	bl	8004310 <FLASH_WaitForLastOperation>
 800bde4:	0003      	movs	r3, r0
 800bde6:	7023      	strb	r3, [r4, #0]
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 800bde8:	4b06      	ldr	r3, [pc, #24]	; (800be04 <FLASH_ErasePage+0x74>)
 800bdea:	691a      	ldr	r2, [r3, #16]
 800bdec:	4b05      	ldr	r3, [pc, #20]	; (800be04 <FLASH_ErasePage+0x74>)
 800bdee:	2102      	movs	r1, #2
 800bdf0:	438a      	bics	r2, r1
 800bdf2:	611a      	str	r2, [r3, #16]
  }
    
  /* Return the Erase Status */
  return status;
 800bdf4:	230f      	movs	r3, #15
 800bdf6:	18fb      	adds	r3, r7, r3
 800bdf8:	781b      	ldrb	r3, [r3, #0]
}
 800bdfa:	0018      	movs	r0, r3
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	b004      	add	sp, #16
 800be00:	bdb0      	pop	{r4, r5, r7, pc}
 800be02:	46c0      	nop			; (mov r8, r8)
 800be04:	40022000 	.word	0x40022000

0800be08 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, HAL_OK or FLASH_TIMEOUT.
  */
HAL_StatusTypeDef FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800be08:	b5b0      	push	{r4, r5, r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	000a      	movs	r2, r1
 800be12:	1cbb      	adds	r3, r7, #2
 800be14:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK/*HAL_OK*/;
 800be16:	250f      	movs	r5, #15
 800be18:	197b      	adds	r3, r7, r5
 800be1a:	2200      	movs	r2, #0
 800be1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800be1e:	197c      	adds	r4, r7, r5
 800be20:	23b0      	movs	r3, #176	; 0xb0
 800be22:	031b      	lsls	r3, r3, #12
 800be24:	0018      	movs	r0, r3
 800be26:	f7f8 fa73 	bl	8004310 <FLASH_WaitForLastOperation>
 800be2a:	0003      	movs	r3, r0
 800be2c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK/*HAL_OK*/)
 800be2e:	0028      	movs	r0, r5
 800be30:	183b      	adds	r3, r7, r0
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d117      	bne.n	800be68 <FLASH_ProgramHalfWord+0x60>
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 800be38:	4b0f      	ldr	r3, [pc, #60]	; (800be78 <FLASH_ProgramHalfWord+0x70>)
 800be3a:	691a      	ldr	r2, [r3, #16]
 800be3c:	4b0e      	ldr	r3, [pc, #56]	; (800be78 <FLASH_ProgramHalfWord+0x70>)
 800be3e:	2101      	movs	r1, #1
 800be40:	430a      	orrs	r2, r1
 800be42:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	1cba      	adds	r2, r7, #2
 800be48:	8812      	ldrh	r2, [r2, #0]
 800be4a:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800be4c:	183c      	adds	r4, r7, r0
 800be4e:	23b0      	movs	r3, #176	; 0xb0
 800be50:	031b      	lsls	r3, r3, #12
 800be52:	0018      	movs	r0, r3
 800be54:	f7f8 fa5c 	bl	8004310 <FLASH_WaitForLastOperation>
 800be58:	0003      	movs	r3, r0
 800be5a:	7023      	strb	r3, [r4, #0]
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 800be5c:	4b06      	ldr	r3, [pc, #24]	; (800be78 <FLASH_ProgramHalfWord+0x70>)
 800be5e:	691a      	ldr	r2, [r3, #16]
 800be60:	4b05      	ldr	r3, [pc, #20]	; (800be78 <FLASH_ProgramHalfWord+0x70>)
 800be62:	2101      	movs	r1, #1
 800be64:	438a      	bics	r2, r1
 800be66:	611a      	str	r2, [r3, #16]
  } 
  
  /* Return the Program Status */
  return status;
 800be68:	230f      	movs	r3, #15
 800be6a:	18fb      	adds	r3, r7, r3
 800be6c:	781b      	ldrb	r3, [r3, #0]
}
 800be6e:	0018      	movs	r0, r3
 800be70:	46bd      	mov	sp, r7
 800be72:	b004      	add	sp, #16
 800be74:	bdb0      	pop	{r4, r5, r7, pc}
 800be76:	46c0      	nop			; (mov r8, r8)
 800be78:	40022000 	.word	0x40022000

0800be7c <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - HAL_OK: on success
  */
uint16_t EE_Init(void)
{
 800be7c:	b5b0      	push	{r4, r5, r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800be82:	210a      	movs	r1, #10
 800be84:	187b      	adds	r3, r7, r1
 800be86:	2206      	movs	r2, #6
 800be88:	801a      	strh	r2, [r3, #0]
 800be8a:	2008      	movs	r0, #8
 800be8c:	183b      	adds	r3, r7, r0
 800be8e:	2206      	movs	r2, #6
 800be90:	801a      	strh	r2, [r3, #0]
  uint16_t VarIdx = 0;
 800be92:	230e      	movs	r3, #14
 800be94:	18fb      	adds	r3, r7, r3
 800be96:	2200      	movs	r2, #0
 800be98:	801a      	strh	r2, [r3, #0]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800be9a:	1dbb      	adds	r3, r7, #6
 800be9c:	2200      	movs	r2, #0
 800be9e:	801a      	strh	r2, [r3, #0]
 800bea0:	1d3b      	adds	r3, r7, #4
 800bea2:	2200      	movs	r2, #0
 800bea4:	801a      	strh	r2, [r3, #0]
  int16_t x = -1;
 800bea6:	230c      	movs	r3, #12
 800bea8:	18fb      	adds	r3, r7, r3
 800beaa:	2201      	movs	r2, #1
 800beac:	4252      	negs	r2, r2
 800beae:	801a      	strh	r2, [r3, #0]
  uint16_t  HAL_StatusTypeDef;

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800beb0:	4abb      	ldr	r2, [pc, #748]	; (800c1a0 <EE_Init+0x324>)
 800beb2:	187b      	adds	r3, r7, r1
 800beb4:	8812      	ldrh	r2, [r2, #0]
 800beb6:	801a      	strh	r2, [r3, #0]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800beb8:	4aba      	ldr	r2, [pc, #744]	; (800c1a4 <EE_Init+0x328>)
 800beba:	183b      	adds	r3, r7, r0
 800bebc:	8812      	ldrh	r2, [r2, #0]
 800bebe:	801a      	strh	r2, [r3, #0]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 800bec0:	187b      	adds	r3, r7, r1
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	4ab8      	ldr	r2, [pc, #736]	; (800c1a8 <EE_Init+0x32c>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d00b      	beq.n	800bee2 <EE_Init+0x66>
 800beca:	2280      	movs	r2, #128	; 0x80
 800becc:	0252      	lsls	r2, r2, #9
 800bece:	4293      	cmp	r3, r2
 800bed0:	db00      	blt.n	800bed4 <EE_Init+0x58>
 800bed2:	e19f      	b.n	800c214 <EE_Init+0x398>
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d100      	bne.n	800beda <EE_Init+0x5e>
 800bed8:	e0f5      	b.n	800c0c6 <EE_Init+0x24a>
 800beda:	4ab4      	ldr	r2, [pc, #720]	; (800c1ac <EE_Init+0x330>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d049      	beq.n	800bf74 <EE_Init+0xf8>
 800bee0:	e198      	b.n	800c214 <EE_Init+0x398>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800bee2:	2308      	movs	r3, #8
 800bee4:	18fb      	adds	r3, r7, r3
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10f      	bne.n	800bf0c <EE_Init+0x90>
      {
        /* Erase Page0 */
        HAL_StatusTypeDef = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800beec:	4bac      	ldr	r3, [pc, #688]	; (800c1a0 <EE_Init+0x324>)
 800beee:	0018      	movs	r0, r3
 800bef0:	f7ff ff4e 	bl	800bd90 <FLASH_ErasePage>
 800bef4:	0003      	movs	r3, r0
 800bef6:	001a      	movs	r2, r3
 800bef8:	1cbb      	adds	r3, r7, #2
 800befa:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800befc:	1cbb      	adds	r3, r7, #2
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d100      	bne.n	800bf06 <EE_Init+0x8a>
 800bf04:	e193      	b.n	800c22e <EE_Init+0x3b2>
        {
          return HAL_StatusTypeDef;
 800bf06:	1cbb      	adds	r3, r7, #2
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	e198      	b.n	800c23e <EE_Init+0x3c2>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800bf0c:	2308      	movs	r3, #8
 800bf0e:	18fb      	adds	r3, r7, r3
 800bf10:	881b      	ldrh	r3, [r3, #0]
 800bf12:	4aa6      	ldr	r2, [pc, #664]	; (800c1ac <EE_Init+0x330>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d11f      	bne.n	800bf58 <EE_Init+0xdc>
      {
        /* Erase Page0 */
        HAL_StatusTypeDef = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800bf18:	4ba1      	ldr	r3, [pc, #644]	; (800c1a0 <EE_Init+0x324>)
 800bf1a:	0018      	movs	r0, r3
 800bf1c:	f7ff ff38 	bl	800bd90 <FLASH_ErasePage>
 800bf20:	0003      	movs	r3, r0
 800bf22:	001a      	movs	r2, r3
 800bf24:	1cbb      	adds	r3, r7, #2
 800bf26:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800bf28:	1cbb      	adds	r3, r7, #2
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <EE_Init+0xba>
        {
          return HAL_StatusTypeDef;
 800bf30:	1cbb      	adds	r3, r7, #2
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	e183      	b.n	800c23e <EE_Init+0x3c2>
        }
        /* Mark Page1 as valid */
        HAL_StatusTypeDef = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 800bf36:	4b9b      	ldr	r3, [pc, #620]	; (800c1a4 <EE_Init+0x328>)
 800bf38:	2100      	movs	r1, #0
 800bf3a:	0018      	movs	r0, r3
 800bf3c:	f7ff ff64 	bl	800be08 <FLASH_ProgramHalfWord>
 800bf40:	0003      	movs	r3, r0
 800bf42:	001a      	movs	r2, r3
 800bf44:	1cbb      	adds	r3, r7, #2
 800bf46:	801a      	strh	r2, [r3, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800bf48:	1cbb      	adds	r3, r7, #2
 800bf4a:	881b      	ldrh	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d100      	bne.n	800bf52 <EE_Init+0xd6>
 800bf50:	e16d      	b.n	800c22e <EE_Init+0x3b2>
        {
          return HAL_StatusTypeDef;
 800bf52:	1cbb      	adds	r3, r7, #2
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	e172      	b.n	800c23e <EE_Init+0x3c2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        HAL_StatusTypeDef = EE_Format();
 800bf58:	f000 fa0a 	bl	800c370 <EE_Format>
 800bf5c:	0003      	movs	r3, r0
 800bf5e:	001a      	movs	r2, r3
 800bf60:	1cbb      	adds	r3, r7, #2
 800bf62:	801a      	strh	r2, [r3, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800bf64:	1cbb      	adds	r3, r7, #2
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d100      	bne.n	800bf6e <EE_Init+0xf2>
 800bf6c:	e15f      	b.n	800c22e <EE_Init+0x3b2>
        {
          return HAL_StatusTypeDef;
 800bf6e:	1cbb      	adds	r3, r7, #2
 800bf70:	881b      	ldrh	r3, [r3, #0]
 800bf72:	e164      	b.n	800c23e <EE_Init+0x3c2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800bf74:	2308      	movs	r3, #8
 800bf76:	18fb      	adds	r3, r7, r3
 800bf78:	881b      	ldrh	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d000      	beq.n	800bf80 <EE_Init+0x104>
 800bf7e:	e06e      	b.n	800c05e <EE_Init+0x1e2>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800bf80:	230e      	movs	r3, #14
 800bf82:	18fb      	adds	r3, r7, r3
 800bf84:	2200      	movs	r2, #0
 800bf86:	801a      	strh	r2, [r3, #0]
 800bf88:	e044      	b.n	800c014 <EE_Init+0x198>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800bf8a:	4b89      	ldr	r3, [pc, #548]	; (800c1b0 <EE_Init+0x334>)
 800bf8c:	881b      	ldrh	r3, [r3, #0]
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	200e      	movs	r0, #14
 800bf92:	183b      	adds	r3, r7, r0
 800bf94:	8819      	ldrh	r1, [r3, #0]
 800bf96:	4b87      	ldr	r3, [pc, #540]	; (800c1b4 <EE_Init+0x338>)
 800bf98:	0049      	lsls	r1, r1, #1
 800bf9a:	5acb      	ldrh	r3, [r1, r3]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d104      	bne.n	800bfaa <EE_Init+0x12e>
          {
            x = VarIdx;
 800bfa0:	230c      	movs	r3, #12
 800bfa2:	18fb      	adds	r3, r7, r3
 800bfa4:	183a      	adds	r2, r7, r0
 800bfa6:	8812      	ldrh	r2, [r2, #0]
 800bfa8:	801a      	strh	r2, [r3, #0]
          }
          if (VarIdx != x)
 800bfaa:	250e      	movs	r5, #14
 800bfac:	197b      	adds	r3, r7, r5
 800bfae:	881a      	ldrh	r2, [r3, #0]
 800bfb0:	230c      	movs	r3, #12
 800bfb2:	18fb      	adds	r3, r7, r3
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	5e5b      	ldrsh	r3, [r3, r1]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d025      	beq.n	800c008 <EE_Init+0x18c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800bfbc:	197b      	adds	r3, r7, r5
 800bfbe:	881a      	ldrh	r2, [r3, #0]
 800bfc0:	4b7c      	ldr	r3, [pc, #496]	; (800c1b4 <EE_Init+0x338>)
 800bfc2:	0052      	lsls	r2, r2, #1
 800bfc4:	5ad3      	ldrh	r3, [r2, r3]
 800bfc6:	1d3c      	adds	r4, r7, #4
 800bfc8:	4a7b      	ldr	r2, [pc, #492]	; (800c1b8 <EE_Init+0x33c>)
 800bfca:	0011      	movs	r1, r2
 800bfcc:	0018      	movs	r0, r3
 800bfce:	f000 f93f 	bl	800c250 <EE_ReadVariable>
 800bfd2:	0003      	movs	r3, r0
 800bfd4:	8023      	strh	r3, [r4, #0]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800bfd6:	1d3b      	adds	r3, r7, #4
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d014      	beq.n	800c008 <EE_Init+0x18c>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800bfde:	197b      	adds	r3, r7, r5
 800bfe0:	881a      	ldrh	r2, [r3, #0]
 800bfe2:	4b74      	ldr	r3, [pc, #464]	; (800c1b4 <EE_Init+0x338>)
 800bfe4:	0052      	lsls	r2, r2, #1
 800bfe6:	5ad2      	ldrh	r2, [r2, r3]
 800bfe8:	4b73      	ldr	r3, [pc, #460]	; (800c1b8 <EE_Init+0x33c>)
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	1dbc      	adds	r4, r7, #6
 800bfee:	0019      	movs	r1, r3
 800bff0:	0010      	movs	r0, r2
 800bff2:	f000 fa47 	bl	800c484 <EE_VerifyPageFullWriteVariable>
 800bff6:	0003      	movs	r3, r0
 800bff8:	8023      	strh	r3, [r4, #0]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800bffa:	1dbb      	adds	r3, r7, #6
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <EE_Init+0x18c>
              {
                return EepromStatus;
 800c002:	1dbb      	adds	r3, r7, #6
 800c004:	881b      	ldrh	r3, [r3, #0]
 800c006:	e11a      	b.n	800c23e <EE_Init+0x3c2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c008:	210e      	movs	r1, #14
 800c00a:	187b      	adds	r3, r7, r1
 800c00c:	881a      	ldrh	r2, [r3, #0]
 800c00e:	187b      	adds	r3, r7, r1
 800c010:	3201      	adds	r2, #1
 800c012:	801a      	strh	r2, [r3, #0]
 800c014:	230e      	movs	r3, #14
 800c016:	18fb      	adds	r3, r7, r3
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	2b73      	cmp	r3, #115	; 0x73
 800c01c:	d9b5      	bls.n	800bf8a <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        HAL_StatusTypeDef = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c01e:	4b60      	ldr	r3, [pc, #384]	; (800c1a0 <EE_Init+0x324>)
 800c020:	2100      	movs	r1, #0
 800c022:	0018      	movs	r0, r3
 800c024:	f7ff fef0 	bl	800be08 <FLASH_ProgramHalfWord>
 800c028:	0003      	movs	r3, r0
 800c02a:	001a      	movs	r2, r3
 800c02c:	1cbb      	adds	r3, r7, #2
 800c02e:	801a      	strh	r2, [r3, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800c030:	1cbb      	adds	r3, r7, #2
 800c032:	881b      	ldrh	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <EE_Init+0x1c2>
        {
          return HAL_StatusTypeDef;
 800c038:	1cbb      	adds	r3, r7, #2
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	e0ff      	b.n	800c23e <EE_Init+0x3c2>
        }
        /* Erase Page1 */
        HAL_StatusTypeDef = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800c03e:	4b59      	ldr	r3, [pc, #356]	; (800c1a4 <EE_Init+0x328>)
 800c040:	0018      	movs	r0, r3
 800c042:	f7ff fea5 	bl	800bd90 <FLASH_ErasePage>
 800c046:	0003      	movs	r3, r0
 800c048:	001a      	movs	r2, r3
 800c04a:	1cbb      	adds	r3, r7, #2
 800c04c:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800c04e:	1cbb      	adds	r3, r7, #2
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d100      	bne.n	800c058 <EE_Init+0x1dc>
 800c056:	e0ec      	b.n	800c232 <EE_Init+0x3b6>
        {
          return HAL_StatusTypeDef;
 800c058:	1cbb      	adds	r3, r7, #2
 800c05a:	881b      	ldrh	r3, [r3, #0]
 800c05c:	e0ef      	b.n	800c23e <EE_Init+0x3c2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800c05e:	2308      	movs	r3, #8
 800c060:	18fb      	adds	r3, r7, r3
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	4a50      	ldr	r2, [pc, #320]	; (800c1a8 <EE_Init+0x32c>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d11f      	bne.n	800c0aa <EE_Init+0x22e>
      {
        /* Erase Page1 */
        HAL_StatusTypeDef = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800c06a:	4b4e      	ldr	r3, [pc, #312]	; (800c1a4 <EE_Init+0x328>)
 800c06c:	0018      	movs	r0, r3
 800c06e:	f7ff fe8f 	bl	800bd90 <FLASH_ErasePage>
 800c072:	0003      	movs	r3, r0
 800c074:	001a      	movs	r2, r3
 800c076:	1cbb      	adds	r3, r7, #2
 800c078:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800c07a:	1cbb      	adds	r3, r7, #2
 800c07c:	881b      	ldrh	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d002      	beq.n	800c088 <EE_Init+0x20c>
        {
          return HAL_StatusTypeDef;
 800c082:	1cbb      	adds	r3, r7, #2
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	e0da      	b.n	800c23e <EE_Init+0x3c2>
        }
        /* Mark Page0 as valid */
        HAL_StatusTypeDef = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c088:	4b45      	ldr	r3, [pc, #276]	; (800c1a0 <EE_Init+0x324>)
 800c08a:	2100      	movs	r1, #0
 800c08c:	0018      	movs	r0, r3
 800c08e:	f7ff febb 	bl	800be08 <FLASH_ProgramHalfWord>
 800c092:	0003      	movs	r3, r0
 800c094:	001a      	movs	r2, r3
 800c096:	1cbb      	adds	r3, r7, #2
 800c098:	801a      	strh	r2, [r3, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800c09a:	1cbb      	adds	r3, r7, #2
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d100      	bne.n	800c0a4 <EE_Init+0x228>
 800c0a2:	e0c6      	b.n	800c232 <EE_Init+0x3b6>
        {
          return HAL_StatusTypeDef;
 800c0a4:	1cbb      	adds	r3, r7, #2
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	e0c9      	b.n	800c23e <EE_Init+0x3c2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        HAL_StatusTypeDef = EE_Format();
 800c0aa:	f000 f961 	bl	800c370 <EE_Format>
 800c0ae:	0003      	movs	r3, r0
 800c0b0:	001a      	movs	r2, r3
 800c0b2:	1cbb      	adds	r3, r7, #2
 800c0b4:	801a      	strh	r2, [r3, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800c0b6:	1cbb      	adds	r3, r7, #2
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d100      	bne.n	800c0c0 <EE_Init+0x244>
 800c0be:	e0b8      	b.n	800c232 <EE_Init+0x3b6>
        {
          return HAL_StatusTypeDef;
 800c0c0:	1cbb      	adds	r3, r7, #2
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	e0bb      	b.n	800c23e <EE_Init+0x3c2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800c0c6:	2308      	movs	r3, #8
 800c0c8:	18fb      	adds	r3, r7, r3
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10d      	bne.n	800c0ec <EE_Init+0x270>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        HAL_StatusTypeDef = EE_Format();
 800c0d0:	f000 f94e 	bl	800c370 <EE_Format>
 800c0d4:	0003      	movs	r3, r0
 800c0d6:	001a      	movs	r2, r3
 800c0d8:	1cbb      	adds	r3, r7, #2
 800c0da:	801a      	strh	r2, [r3, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800c0dc:	1cbb      	adds	r3, r7, #2
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d100      	bne.n	800c0e6 <EE_Init+0x26a>
 800c0e4:	e0a7      	b.n	800c236 <EE_Init+0x3ba>
        {
          return HAL_StatusTypeDef;
 800c0e6:	1cbb      	adds	r3, r7, #2
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	e0a8      	b.n	800c23e <EE_Init+0x3c2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800c0ec:	2308      	movs	r3, #8
 800c0ee:	18fb      	adds	r3, r7, r3
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	4a2d      	ldr	r2, [pc, #180]	; (800c1a8 <EE_Init+0x32c>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d10f      	bne.n	800c118 <EE_Init+0x29c>
      {
        /* Erase Page1 */
        HAL_StatusTypeDef = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800c0f8:	4b2a      	ldr	r3, [pc, #168]	; (800c1a4 <EE_Init+0x328>)
 800c0fa:	0018      	movs	r0, r3
 800c0fc:	f7ff fe48 	bl	800bd90 <FLASH_ErasePage>
 800c100:	0003      	movs	r3, r0
 800c102:	001a      	movs	r2, r3
 800c104:	1cbb      	adds	r3, r7, #2
 800c106:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800c108:	1cbb      	adds	r3, r7, #2
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d100      	bne.n	800c112 <EE_Init+0x296>
 800c110:	e091      	b.n	800c236 <EE_Init+0x3ba>
        {
          return HAL_StatusTypeDef;
 800c112:	1cbb      	adds	r3, r7, #2
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	e092      	b.n	800c23e <EE_Init+0x3c2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c118:	230e      	movs	r3, #14
 800c11a:	18fb      	adds	r3, r7, r3
 800c11c:	2200      	movs	r2, #0
 800c11e:	801a      	strh	r2, [r3, #0]
 800c120:	e054      	b.n	800c1cc <EE_Init+0x350>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800c122:	4b26      	ldr	r3, [pc, #152]	; (800c1bc <EE_Init+0x340>)
 800c124:	881b      	ldrh	r3, [r3, #0]
 800c126:	b29a      	uxth	r2, r3
 800c128:	200e      	movs	r0, #14
 800c12a:	183b      	adds	r3, r7, r0
 800c12c:	8819      	ldrh	r1, [r3, #0]
 800c12e:	4b21      	ldr	r3, [pc, #132]	; (800c1b4 <EE_Init+0x338>)
 800c130:	0049      	lsls	r1, r1, #1
 800c132:	5acb      	ldrh	r3, [r1, r3]
 800c134:	429a      	cmp	r2, r3
 800c136:	d104      	bne.n	800c142 <EE_Init+0x2c6>
          {
            x = VarIdx;
 800c138:	230c      	movs	r3, #12
 800c13a:	18fb      	adds	r3, r7, r3
 800c13c:	183a      	adds	r2, r7, r0
 800c13e:	8812      	ldrh	r2, [r2, #0]
 800c140:	801a      	strh	r2, [r3, #0]
          }
          if (VarIdx != x)
 800c142:	250e      	movs	r5, #14
 800c144:	197b      	adds	r3, r7, r5
 800c146:	881a      	ldrh	r2, [r3, #0]
 800c148:	230c      	movs	r3, #12
 800c14a:	18fb      	adds	r3, r7, r3
 800c14c:	2100      	movs	r1, #0
 800c14e:	5e5b      	ldrsh	r3, [r3, r1]
 800c150:	429a      	cmp	r2, r3
 800c152:	d035      	beq.n	800c1c0 <EE_Init+0x344>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c154:	197b      	adds	r3, r7, r5
 800c156:	881a      	ldrh	r2, [r3, #0]
 800c158:	4b16      	ldr	r3, [pc, #88]	; (800c1b4 <EE_Init+0x338>)
 800c15a:	0052      	lsls	r2, r2, #1
 800c15c:	5ad3      	ldrh	r3, [r2, r3]
 800c15e:	1d3c      	adds	r4, r7, #4
 800c160:	4a15      	ldr	r2, [pc, #84]	; (800c1b8 <EE_Init+0x33c>)
 800c162:	0011      	movs	r1, r2
 800c164:	0018      	movs	r0, r3
 800c166:	f000 f873 	bl	800c250 <EE_ReadVariable>
 800c16a:	0003      	movs	r3, r0
 800c16c:	8023      	strh	r3, [r4, #0]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800c16e:	1d3b      	adds	r3, r7, #4
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d024      	beq.n	800c1c0 <EE_Init+0x344>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c176:	197b      	adds	r3, r7, r5
 800c178:	881a      	ldrh	r2, [r3, #0]
 800c17a:	4b0e      	ldr	r3, [pc, #56]	; (800c1b4 <EE_Init+0x338>)
 800c17c:	0052      	lsls	r2, r2, #1
 800c17e:	5ad2      	ldrh	r2, [r2, r3]
 800c180:	4b0d      	ldr	r3, [pc, #52]	; (800c1b8 <EE_Init+0x33c>)
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	1dbc      	adds	r4, r7, #6
 800c186:	0019      	movs	r1, r3
 800c188:	0010      	movs	r0, r2
 800c18a:	f000 f97b 	bl	800c484 <EE_VerifyPageFullWriteVariable>
 800c18e:	0003      	movs	r3, r0
 800c190:	8023      	strh	r3, [r4, #0]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800c192:	1dbb      	adds	r3, r7, #6
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d012      	beq.n	800c1c0 <EE_Init+0x344>
              {
                return EepromStatus;
 800c19a:	1dbb      	adds	r3, r7, #6
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	e04e      	b.n	800c23e <EE_Init+0x3c2>
 800c1a0:	0803bc00 	.word	0x0803bc00
 800c1a4:	0803c000 	.word	0x0803c000
 800c1a8:	0000ffff 	.word	0x0000ffff
 800c1ac:	0000eeee 	.word	0x0000eeee
 800c1b0:	0803bc06 	.word	0x0803bc06
 800c1b4:	20000918 	.word	0x20000918
 800c1b8:	20001384 	.word	0x20001384
 800c1bc:	0803c006 	.word	0x0803c006
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c1c0:	210e      	movs	r1, #14
 800c1c2:	187b      	adds	r3, r7, r1
 800c1c4:	881a      	ldrh	r2, [r3, #0]
 800c1c6:	187b      	adds	r3, r7, r1
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	801a      	strh	r2, [r3, #0]
 800c1cc:	230e      	movs	r3, #14
 800c1ce:	18fb      	adds	r3, r7, r3
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	2b73      	cmp	r3, #115	; 0x73
 800c1d4:	d9a5      	bls.n	800c122 <EE_Init+0x2a6>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        HAL_StatusTypeDef = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 800c1d6:	4b1c      	ldr	r3, [pc, #112]	; (800c248 <EE_Init+0x3cc>)
 800c1d8:	2100      	movs	r1, #0
 800c1da:	0018      	movs	r0, r3
 800c1dc:	f7ff fe14 	bl	800be08 <FLASH_ProgramHalfWord>
 800c1e0:	0003      	movs	r3, r0
 800c1e2:	001a      	movs	r2, r3
 800c1e4:	1cbb      	adds	r3, r7, #2
 800c1e6:	801a      	strh	r2, [r3, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800c1e8:	1cbb      	adds	r3, r7, #2
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <EE_Init+0x37a>
        {
          return HAL_StatusTypeDef;
 800c1f0:	1cbb      	adds	r3, r7, #2
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	e023      	b.n	800c23e <EE_Init+0x3c2>
        }
        /* Erase Page0 */
        HAL_StatusTypeDef = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800c1f6:	4b15      	ldr	r3, [pc, #84]	; (800c24c <EE_Init+0x3d0>)
 800c1f8:	0018      	movs	r0, r3
 800c1fa:	f7ff fdc9 	bl	800bd90 <FLASH_ErasePage>
 800c1fe:	0003      	movs	r3, r0
 800c200:	001a      	movs	r2, r3
 800c202:	1cbb      	adds	r3, r7, #2
 800c204:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (HAL_StatusTypeDef != HAL_OK)
 800c206:	1cbb      	adds	r3, r7, #2
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d013      	beq.n	800c236 <EE_Init+0x3ba>
        {
          return HAL_StatusTypeDef;
 800c20e:	1cbb      	adds	r3, r7, #2
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	e014      	b.n	800c23e <EE_Init+0x3c2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      HAL_StatusTypeDef = EE_Format();
 800c214:	f000 f8ac 	bl	800c370 <EE_Format>
 800c218:	0003      	movs	r3, r0
 800c21a:	001a      	movs	r2, r3
 800c21c:	1cbb      	adds	r3, r7, #2
 800c21e:	801a      	strh	r2, [r3, #0]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (HAL_StatusTypeDef != HAL_OK)
 800c220:	1cbb      	adds	r3, r7, #2
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d008      	beq.n	800c23a <EE_Init+0x3be>
      {
        return HAL_StatusTypeDef;
 800c228:	1cbb      	adds	r3, r7, #2
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	e007      	b.n	800c23e <EE_Init+0x3c2>
      break;
 800c22e:	46c0      	nop			; (mov r8, r8)
 800c230:	e004      	b.n	800c23c <EE_Init+0x3c0>
      break;
 800c232:	46c0      	nop			; (mov r8, r8)
 800c234:	e002      	b.n	800c23c <EE_Init+0x3c0>
      break;
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	e000      	b.n	800c23c <EE_Init+0x3c0>
      }
      break;
 800c23a:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	0018      	movs	r0, r3
 800c240:	46bd      	mov	sp, r7
 800c242:	b004      	add	sp, #16
 800c244:	bdb0      	pop	{r4, r5, r7, pc}
 800c246:	46c0      	nop			; (mov r8, r8)
 800c248:	0803c000 	.word	0x0803c000
 800c24c:	0803bc00 	.word	0x0803bc00

0800c250 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800c250:	b5b0      	push	{r4, r5, r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	0002      	movs	r2, r0
 800c258:	6039      	str	r1, [r7, #0]
 800c25a:	1dbb      	adds	r3, r7, #6
 800c25c:	801a      	strh	r2, [r3, #0]
  uint16_t ValidPage = PAGE0;
 800c25e:	210e      	movs	r1, #14
 800c260:	187b      	adds	r3, r7, r1
 800c262:	2200      	movs	r2, #0
 800c264:	801a      	strh	r2, [r3, #0]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800c266:	230c      	movs	r3, #12
 800c268:	18fb      	adds	r3, r7, r3
 800c26a:	4a26      	ldr	r2, [pc, #152]	; (800c304 <EE_ReadVariable+0xb4>)
 800c26c:	801a      	strh	r2, [r3, #0]
 800c26e:	2316      	movs	r3, #22
 800c270:	18fb      	adds	r3, r7, r3
 800c272:	2201      	movs	r2, #1
 800c274:	801a      	strh	r2, [r3, #0]
  uint32_t Address = 0x08010000, PageStartAddress = 0x08010000;
 800c276:	4b24      	ldr	r3, [pc, #144]	; (800c308 <EE_ReadVariable+0xb8>)
 800c278:	613b      	str	r3, [r7, #16]
 800c27a:	4b23      	ldr	r3, [pc, #140]	; (800c308 <EE_ReadVariable+0xb8>)
 800c27c:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800c27e:	000d      	movs	r5, r1
 800c280:	187c      	adds	r4, r7, r1
 800c282:	2000      	movs	r0, #0
 800c284:	f000 f8a8 	bl	800c3d8 <EE_FindValidPage>
 800c288:	0003      	movs	r3, r0
 800c28a:	8023      	strh	r3, [r4, #0]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800c28c:	197b      	adds	r3, r7, r5
 800c28e:	881b      	ldrh	r3, [r3, #0]
 800c290:	2bab      	cmp	r3, #171	; 0xab
 800c292:	d101      	bne.n	800c298 <EE_ReadVariable+0x48>
  {
    return  NO_VALID_PAGE;
 800c294:	23ab      	movs	r3, #171	; 0xab
 800c296:	e031      	b.n	800c2fc <EE_ReadVariable+0xac>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800c298:	220e      	movs	r2, #14
 800c29a:	18bb      	adds	r3, r7, r2
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	491b      	ldr	r1, [pc, #108]	; (800c30c <EE_ReadVariable+0xbc>)
 800c2a0:	468c      	mov	ip, r1
 800c2a2:	4463      	add	r3, ip
 800c2a4:	029b      	lsls	r3, r3, #10
 800c2a6:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800c2a8:	18bb      	adds	r3, r7, r2
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	029b      	lsls	r3, r3, #10
 800c2b0:	4a17      	ldr	r2, [pc, #92]	; (800c310 <EE_ReadVariable+0xc0>)
 800c2b2:	4694      	mov	ip, r2
 800c2b4:	4463      	add	r3, ip
 800c2b6:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800c2b8:	e018      	b.n	800c2ec <EE_ReadVariable+0x9c>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	210c      	movs	r1, #12
 800c2be:	187b      	adds	r3, r7, r1
 800c2c0:	8812      	ldrh	r2, [r2, #0]
 800c2c2:	801a      	strh	r2, [r3, #0]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800c2c4:	187a      	adds	r2, r7, r1
 800c2c6:	1dbb      	adds	r3, r7, #6
 800c2c8:	8812      	ldrh	r2, [r2, #0]
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d10a      	bne.n	800c2e6 <EE_ReadVariable+0x96>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	3b02      	subs	r3, #2
 800c2d4:	881b      	ldrh	r3, [r3, #0]
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800c2dc:	2316      	movs	r3, #22
 800c2de:	18fb      	adds	r3, r7, r3
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	801a      	strh	r2, [r3, #0]

      break;
 800c2e4:	e007      	b.n	800c2f6 <EE_ReadVariable+0xa6>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	3b04      	subs	r3, #4
 800c2ea:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	3302      	adds	r3, #2
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d8e1      	bhi.n	800c2ba <EE_ReadVariable+0x6a>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800c2f6:	2316      	movs	r3, #22
 800c2f8:	18fb      	adds	r3, r7, r3
 800c2fa:	881b      	ldrh	r3, [r3, #0]
}
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	46bd      	mov	sp, r7
 800c300:	b006      	add	sp, #24
 800c302:	bdb0      	pop	{r4, r5, r7, pc}
 800c304:	00005555 	.word	0x00005555
 800c308:	08010000 	.word	0x08010000
 800c30c:	000200ef 	.word	0x000200ef
 800c310:	0803bbfe 	.word	0x0803bbfe

0800c314 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800c314:	b5b0      	push	{r4, r5, r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	0002      	movs	r2, r0
 800c31c:	1dbb      	adds	r3, r7, #6
 800c31e:	801a      	strh	r2, [r3, #0]
 800c320:	1d3b      	adds	r3, r7, #4
 800c322:	1c0a      	adds	r2, r1, #0
 800c324:	801a      	strh	r2, [r3, #0]
  uint16_t Status = 0;
 800c326:	250e      	movs	r5, #14
 800c328:	197b      	adds	r3, r7, r5
 800c32a:	2200      	movs	r2, #0
 800c32c:	801a      	strh	r2, [r3, #0]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800c32e:	197c      	adds	r4, r7, r5
 800c330:	1d3b      	adds	r3, r7, #4
 800c332:	881a      	ldrh	r2, [r3, #0]
 800c334:	1dbb      	adds	r3, r7, #6
 800c336:	881b      	ldrh	r3, [r3, #0]
 800c338:	0011      	movs	r1, r2
 800c33a:	0018      	movs	r0, r3
 800c33c:	f000 f8a2 	bl	800c484 <EE_VerifyPageFullWriteVariable>
 800c340:	0003      	movs	r3, r0
 800c342:	8023      	strh	r3, [r4, #0]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800c344:	197b      	adds	r3, r7, r5
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	2b80      	cmp	r3, #128	; 0x80
 800c34a:	d10a      	bne.n	800c362 <EE_WriteVariable+0x4e>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800c34c:	197c      	adds	r4, r7, r5
 800c34e:	1d3b      	adds	r3, r7, #4
 800c350:	881a      	ldrh	r2, [r3, #0]
 800c352:	1dbb      	adds	r3, r7, #6
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	0011      	movs	r1, r2
 800c358:	0018      	movs	r0, r3
 800c35a:	f000 f901 	bl	800c560 <EE_PageTransfer>
 800c35e:	0003      	movs	r3, r0
 800c360:	8023      	strh	r3, [r4, #0]
  }

  /* Return last operation status */
  return Status;
 800c362:	230e      	movs	r3, #14
 800c364:	18fb      	adds	r3, r7, r3
 800c366:	881b      	ldrh	r3, [r3, #0]
}
 800c368:	0018      	movs	r0, r3
 800c36a:	46bd      	mov	sp, r7
 800c36c:	b004      	add	sp, #16
 800c36e:	bdb0      	pop	{r4, r5, r7, pc}

0800c370 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800c370:	b590      	push	{r4, r7, lr}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef HAL_StatusTypeDef = HAL_OK;
 800c376:	1dfb      	adds	r3, r7, #7
 800c378:	2200      	movs	r2, #0
 800c37a:	701a      	strb	r2, [r3, #0]

  /* Erase Page0 */
  HAL_StatusTypeDef = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800c37c:	1dfc      	adds	r4, r7, #7
 800c37e:	4b14      	ldr	r3, [pc, #80]	; (800c3d0 <EE_Format+0x60>)
 800c380:	0018      	movs	r0, r3
 800c382:	f7ff fd05 	bl	800bd90 <FLASH_ErasePage>
 800c386:	0003      	movs	r3, r0
 800c388:	7023      	strb	r3, [r4, #0]

  /* If erase operation was failed, a Flash error code is returned */
  if (HAL_StatusTypeDef != HAL_OK)
 800c38a:	1dfb      	adds	r3, r7, #7
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <EE_Format+0x28>
  {
    return HAL_StatusTypeDef;
 800c392:	1dfb      	adds	r3, r7, #7
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	e017      	b.n	800c3c8 <EE_Format+0x58>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  HAL_StatusTypeDef = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c398:	1dfc      	adds	r4, r7, #7
 800c39a:	4b0d      	ldr	r3, [pc, #52]	; (800c3d0 <EE_Format+0x60>)
 800c39c:	2100      	movs	r1, #0
 800c39e:	0018      	movs	r0, r3
 800c3a0:	f7ff fd32 	bl	800be08 <FLASH_ProgramHalfWord>
 800c3a4:	0003      	movs	r3, r0
 800c3a6:	7023      	strb	r3, [r4, #0]

  /* If program operation was failed, a Flash error code is returned */
  if (HAL_StatusTypeDef != HAL_OK)
 800c3a8:	1dfb      	adds	r3, r7, #7
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <EE_Format+0x46>
  {
    return HAL_StatusTypeDef;
 800c3b0:	1dfb      	adds	r3, r7, #7
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	e008      	b.n	800c3c8 <EE_Format+0x58>
  }

  /* Erase Page1 */
  HAL_StatusTypeDef = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800c3b6:	1dfc      	adds	r4, r7, #7
 800c3b8:	4b06      	ldr	r3, [pc, #24]	; (800c3d4 <EE_Format+0x64>)
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	f7ff fce8 	bl	800bd90 <FLASH_ErasePage>
 800c3c0:	0003      	movs	r3, r0
 800c3c2:	7023      	strb	r3, [r4, #0]

  /* Return Page1 erase operation status */
  return HAL_StatusTypeDef;
 800c3c4:	1dfb      	adds	r3, r7, #7
 800c3c6:	781b      	ldrb	r3, [r3, #0]
}
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	b003      	add	sp, #12
 800c3ce:	bd90      	pop	{r4, r7, pc}
 800c3d0:	0803bc00 	.word	0x0803bc00
 800c3d4:	0803c000 	.word	0x0803c000

0800c3d8 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE0 or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	0002      	movs	r2, r0
 800c3e0:	1dfb      	adds	r3, r7, #7
 800c3e2:	701a      	strb	r2, [r3, #0]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800c3e4:	210e      	movs	r1, #14
 800c3e6:	187b      	adds	r3, r7, r1
 800c3e8:	2206      	movs	r2, #6
 800c3ea:	801a      	strh	r2, [r3, #0]
 800c3ec:	200c      	movs	r0, #12
 800c3ee:	183b      	adds	r3, r7, r0
 800c3f0:	2206      	movs	r2, #6
 800c3f2:	801a      	strh	r2, [r3, #0]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800c3f4:	4a20      	ldr	r2, [pc, #128]	; (800c478 <EE_FindValidPage+0xa0>)
 800c3f6:	187b      	adds	r3, r7, r1
 800c3f8:	8812      	ldrh	r2, [r2, #0]
 800c3fa:	801a      	strh	r2, [r3, #0]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800c3fc:	4a1f      	ldr	r2, [pc, #124]	; (800c47c <EE_FindValidPage+0xa4>)
 800c3fe:	183b      	adds	r3, r7, r0
 800c400:	8812      	ldrh	r2, [r2, #0]
 800c402:	801a      	strh	r2, [r3, #0]

  /* Write or read operation */
  switch (Operation)
 800c404:	1dfb      	adds	r3, r7, #7
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d01f      	beq.n	800c44c <EE_FindValidPage+0x74>
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d12d      	bne.n	800c46c <EE_FindValidPage+0x94>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800c410:	183b      	adds	r3, r7, r0
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d108      	bne.n	800c42a <EE_FindValidPage+0x52>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800c418:	187b      	adds	r3, r7, r1
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	4a18      	ldr	r2, [pc, #96]	; (800c480 <EE_FindValidPage+0xa8>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d101      	bne.n	800c426 <EE_FindValidPage+0x4e>
        {
          return PAGE0;         /* Page0 valid */
 800c422:	2300      	movs	r3, #0
 800c424:	e023      	b.n	800c46e <EE_FindValidPage+0x96>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800c426:	2301      	movs	r3, #1
 800c428:	e021      	b.n	800c46e <EE_FindValidPage+0x96>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 800c42a:	230e      	movs	r3, #14
 800c42c:	18fb      	adds	r3, r7, r3
 800c42e:	881b      	ldrh	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d109      	bne.n	800c448 <EE_FindValidPage+0x70>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800c434:	230c      	movs	r3, #12
 800c436:	18fb      	adds	r3, r7, r3
 800c438:	881b      	ldrh	r3, [r3, #0]
 800c43a:	4a11      	ldr	r2, [pc, #68]	; (800c480 <EE_FindValidPage+0xa8>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d101      	bne.n	800c444 <EE_FindValidPage+0x6c>
        {
          return PAGE1;         /* Page1 valid */
 800c440:	2301      	movs	r3, #1
 800c442:	e014      	b.n	800c46e <EE_FindValidPage+0x96>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800c444:	2300      	movs	r3, #0
 800c446:	e012      	b.n	800c46e <EE_FindValidPage+0x96>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800c448:	23ab      	movs	r3, #171	; 0xab
 800c44a:	e010      	b.n	800c46e <EE_FindValidPage+0x96>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 800c44c:	230e      	movs	r3, #14
 800c44e:	18fb      	adds	r3, r7, r3
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <EE_FindValidPage+0x82>
      {
        return PAGE0;           /* Page0 valid */
 800c456:	2300      	movs	r3, #0
 800c458:	e009      	b.n	800c46e <EE_FindValidPage+0x96>
      }
      else if (PageStatus1 == VALID_PAGE)
 800c45a:	230c      	movs	r3, #12
 800c45c:	18fb      	adds	r3, r7, r3
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <EE_FindValidPage+0x90>
      {
        return PAGE1;           /* Page1 valid */
 800c464:	2301      	movs	r3, #1
 800c466:	e002      	b.n	800c46e <EE_FindValidPage+0x96>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 800c468:	23ab      	movs	r3, #171	; 0xab
 800c46a:	e000      	b.n	800c46e <EE_FindValidPage+0x96>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800c46c:	2300      	movs	r3, #0
  }
}
 800c46e:	0018      	movs	r0, r3
 800c470:	46bd      	mov	sp, r7
 800c472:	b004      	add	sp, #16
 800c474:	bd80      	pop	{r7, pc}
 800c476:	46c0      	nop			; (mov r8, r8)
 800c478:	0803bc00 	.word	0x0803bc00
 800c47c:	0803c000 	.word	0x0803c000
 800c480:	0000eeee 	.word	0x0000eeee

0800c484 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800c484:	b5b0      	push	{r4, r5, r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af00      	add	r7, sp, #0
 800c48a:	0002      	movs	r2, r0
 800c48c:	1dbb      	adds	r3, r7, #6
 800c48e:	801a      	strh	r2, [r3, #0]
 800c490:	1d3b      	adds	r3, r7, #4
 800c492:	1c0a      	adds	r2, r1, #0
 800c494:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef HAL_StatusTypeDef = HAL_OK/*HAL_OK*/;
 800c496:	2313      	movs	r3, #19
 800c498:	18fb      	adds	r3, r7, r3
 800c49a:	2200      	movs	r2, #0
 800c49c:	701a      	strb	r2, [r3, #0]
  uint16_t ValidPage = PAGE0;
 800c49e:	2110      	movs	r1, #16
 800c4a0:	187b      	adds	r3, r7, r1
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	801a      	strh	r2, [r3, #0]
  uint32_t Address = 0x08010000, PageEndAddress = 0x080107FF;
 800c4a6:	4b2a      	ldr	r3, [pc, #168]	; (800c550 <EE_VerifyPageFullWriteVariable+0xcc>)
 800c4a8:	617b      	str	r3, [r7, #20]
 800c4aa:	4b2a      	ldr	r3, [pc, #168]	; (800c554 <EE_VerifyPageFullWriteVariable+0xd0>)
 800c4ac:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800c4ae:	000d      	movs	r5, r1
 800c4b0:	187c      	adds	r4, r7, r1
 800c4b2:	2001      	movs	r0, #1
 800c4b4:	f7ff ff90 	bl	800c3d8 <EE_FindValidPage>
 800c4b8:	0003      	movs	r3, r0
 800c4ba:	8023      	strh	r3, [r4, #0]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800c4bc:	197b      	adds	r3, r7, r5
 800c4be:	881b      	ldrh	r3, [r3, #0]
 800c4c0:	2bab      	cmp	r3, #171	; 0xab
 800c4c2:	d101      	bne.n	800c4c8 <EE_VerifyPageFullWriteVariable+0x44>
  {
    return  NO_VALID_PAGE;
 800c4c4:	23ab      	movs	r3, #171	; 0xab
 800c4c6:	e03f      	b.n	800c548 <EE_VerifyPageFullWriteVariable+0xc4>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800c4c8:	2210      	movs	r2, #16
 800c4ca:	18bb      	adds	r3, r7, r2
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	4922      	ldr	r1, [pc, #136]	; (800c558 <EE_VerifyPageFullWriteVariable+0xd4>)
 800c4d0:	468c      	mov	ip, r1
 800c4d2:	4463      	add	r3, ip
 800c4d4:	029b      	lsls	r3, r3, #10
 800c4d6:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800c4d8:	18bb      	adds	r3, r7, r2
 800c4da:	881b      	ldrh	r3, [r3, #0]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	029b      	lsls	r3, r3, #10
 800c4e0:	4a1e      	ldr	r2, [pc, #120]	; (800c55c <EE_VerifyPageFullWriteVariable+0xd8>)
 800c4e2:	4694      	mov	ip, r2
 800c4e4:	4463      	add	r3, ip
 800c4e6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800c4e8:	e029      	b.n	800c53e <EE_VerifyPageFullWriteVariable+0xba>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	d122      	bne.n	800c538 <EE_VerifyPageFullWriteVariable+0xb4>
    {
      /* Set variable data */
      HAL_StatusTypeDef = FLASH_ProgramHalfWord(Address, Data);
 800c4f2:	2513      	movs	r5, #19
 800c4f4:	197c      	adds	r4, r7, r5
 800c4f6:	1d3b      	adds	r3, r7, #4
 800c4f8:	881a      	ldrh	r2, [r3, #0]
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	0011      	movs	r1, r2
 800c4fe:	0018      	movs	r0, r3
 800c500:	f7ff fc82 	bl	800be08 <FLASH_ProgramHalfWord>
 800c504:	0003      	movs	r3, r0
 800c506:	7023      	strb	r3, [r4, #0]
      /* If program operation was failed, a Flash error code is returned */
      if (HAL_StatusTypeDef != HAL_OK/*HAL_OK*/)
 800c508:	197b      	adds	r3, r7, r5
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d003      	beq.n	800c518 <EE_VerifyPageFullWriteVariable+0x94>
      {
        return HAL_StatusTypeDef;
 800c510:	197b      	adds	r3, r7, r5
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	b29b      	uxth	r3, r3
 800c516:	e017      	b.n	800c548 <EE_VerifyPageFullWriteVariable+0xc4>
      }
      /* Set variable virtual address */
      HAL_StatusTypeDef = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	1c9a      	adds	r2, r3, #2
 800c51c:	2513      	movs	r5, #19
 800c51e:	197c      	adds	r4, r7, r5
 800c520:	1dbb      	adds	r3, r7, #6
 800c522:	881b      	ldrh	r3, [r3, #0]
 800c524:	0019      	movs	r1, r3
 800c526:	0010      	movs	r0, r2
 800c528:	f7ff fc6e 	bl	800be08 <FLASH_ProgramHalfWord>
 800c52c:	0003      	movs	r3, r0
 800c52e:	7023      	strb	r3, [r4, #0]
      /* Return program operation status */
      return HAL_StatusTypeDef;
 800c530:	197b      	adds	r3, r7, r5
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	b29b      	uxth	r3, r3
 800c536:	e007      	b.n	800c548 <EE_VerifyPageFullWriteVariable+0xc4>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	3304      	adds	r3, #4
 800c53c:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	429a      	cmp	r2, r3
 800c544:	d3d1      	bcc.n	800c4ea <EE_VerifyPageFullWriteVariable+0x66>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800c546:	2380      	movs	r3, #128	; 0x80
}
 800c548:	0018      	movs	r0, r3
 800c54a:	46bd      	mov	sp, r7
 800c54c:	b006      	add	sp, #24
 800c54e:	bdb0      	pop	{r4, r5, r7, pc}
 800c550:	08010000 	.word	0x08010000
 800c554:	080107ff 	.word	0x080107ff
 800c558:	000200ef 	.word	0x000200ef
 800c55c:	0803bbfe 	.word	0x0803bbfe

0800c560 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800c560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c562:	b089      	sub	sp, #36	; 0x24
 800c564:	af00      	add	r7, sp, #0
 800c566:	0002      	movs	r2, r0
 800c568:	1dbb      	adds	r3, r7, #6
 800c56a:	801a      	strh	r2, [r3, #0]
 800c56c:	1d3b      	adds	r3, r7, #4
 800c56e:	1c0a      	adds	r2, r1, #0
 800c570:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef HAL_StatusTypeDef = HAL_OK;
 800c572:	2315      	movs	r3, #21
 800c574:	18fb      	adds	r3, r7, r3
 800c576:	2200      	movs	r2, #0
 800c578:	701a      	strb	r2, [r3, #0]
  uint32_t NewPageAddress = 0x080103FF, OldPageAddress = 0x08010000;
 800c57a:	4b60      	ldr	r3, [pc, #384]	; (800c6fc <EE_PageTransfer+0x19c>)
 800c57c:	61fb      	str	r3, [r7, #28]
 800c57e:	4b60      	ldr	r3, [pc, #384]	; (800c700 <EE_PageTransfer+0x1a0>)
 800c580:	61bb      	str	r3, [r7, #24]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800c582:	2112      	movs	r1, #18
 800c584:	187b      	adds	r3, r7, r1
 800c586:	2200      	movs	r2, #0
 800c588:	801a      	strh	r2, [r3, #0]
 800c58a:	2316      	movs	r3, #22
 800c58c:	18fb      	adds	r3, r7, r3
 800c58e:	2200      	movs	r2, #0
 800c590:	801a      	strh	r2, [r3, #0]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800c592:	2310      	movs	r3, #16
 800c594:	18fb      	adds	r3, r7, r3
 800c596:	2200      	movs	r2, #0
 800c598:	801a      	strh	r2, [r3, #0]
 800c59a:	230e      	movs	r3, #14
 800c59c:	18fb      	adds	r3, r7, r3
 800c59e:	2200      	movs	r2, #0
 800c5a0:	801a      	strh	r2, [r3, #0]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800c5a2:	000d      	movs	r5, r1
 800c5a4:	187c      	adds	r4, r7, r1
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	f7ff ff16 	bl	800c3d8 <EE_FindValidPage>
 800c5ac:	0003      	movs	r3, r0
 800c5ae:	8023      	strh	r3, [r4, #0]

  if (ValidPage == PAGE1)       /* Page1 valid */
 800c5b0:	197b      	adds	r3, r7, r5
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d104      	bne.n	800c5c2 <EE_PageTransfer+0x62>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 800c5b8:	4b52      	ldr	r3, [pc, #328]	; (800c704 <EE_PageTransfer+0x1a4>)
 800c5ba:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE1_BASE_ADDRESS;
 800c5bc:	4b52      	ldr	r3, [pc, #328]	; (800c708 <EE_PageTransfer+0x1a8>)
 800c5be:	61bb      	str	r3, [r7, #24]
 800c5c0:	e00b      	b.n	800c5da <EE_PageTransfer+0x7a>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 800c5c2:	2312      	movs	r3, #18
 800c5c4:	18fb      	adds	r3, r7, r3
 800c5c6:	881b      	ldrh	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d104      	bne.n	800c5d6 <EE_PageTransfer+0x76>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 800c5cc:	4b4e      	ldr	r3, [pc, #312]	; (800c708 <EE_PageTransfer+0x1a8>)
 800c5ce:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE0_BASE_ADDRESS;
 800c5d0:	4b4c      	ldr	r3, [pc, #304]	; (800c704 <EE_PageTransfer+0x1a4>)
 800c5d2:	61bb      	str	r3, [r7, #24]
 800c5d4:	e001      	b.n	800c5da <EE_PageTransfer+0x7a>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800c5d6:	23ab      	movs	r3, #171	; 0xab
 800c5d8:	e08b      	b.n	800c6f2 <EE_PageTransfer+0x192>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  HAL_StatusTypeDef = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 800c5da:	2515      	movs	r5, #21
 800c5dc:	197c      	adds	r4, r7, r5
 800c5de:	4a4b      	ldr	r2, [pc, #300]	; (800c70c <EE_PageTransfer+0x1ac>)
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	0011      	movs	r1, r2
 800c5e4:	0018      	movs	r0, r3
 800c5e6:	f7ff fc0f 	bl	800be08 <FLASH_ProgramHalfWord>
 800c5ea:	0003      	movs	r3, r0
 800c5ec:	7023      	strb	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (HAL_StatusTypeDef != HAL_OK)
 800c5ee:	197b      	adds	r3, r7, r5
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d003      	beq.n	800c5fe <EE_PageTransfer+0x9e>
  {
    return HAL_StatusTypeDef;
 800c5f6:	197b      	adds	r3, r7, r5
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	e079      	b.n	800c6f2 <EE_PageTransfer+0x192>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800c5fe:	2510      	movs	r5, #16
 800c600:	197c      	adds	r4, r7, r5
 800c602:	1d3b      	adds	r3, r7, #4
 800c604:	881a      	ldrh	r2, [r3, #0]
 800c606:	1dbb      	adds	r3, r7, #6
 800c608:	881b      	ldrh	r3, [r3, #0]
 800c60a:	0011      	movs	r1, r2
 800c60c:	0018      	movs	r0, r3
 800c60e:	f7ff ff39 	bl	800c484 <EE_VerifyPageFullWriteVariable>
 800c612:	0003      	movs	r3, r0
 800c614:	8023      	strh	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800c616:	197b      	adds	r3, r7, r5
 800c618:	881b      	ldrh	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d002      	beq.n	800c624 <EE_PageTransfer+0xc4>
  {
    return EepromStatus;
 800c61e:	197b      	adds	r3, r7, r5
 800c620:	881b      	ldrh	r3, [r3, #0]
 800c622:	e066      	b.n	800c6f2 <EE_PageTransfer+0x192>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c624:	2316      	movs	r3, #22
 800c626:	18fb      	adds	r3, r7, r3
 800c628:	2200      	movs	r2, #0
 800c62a:	801a      	strh	r2, [r3, #0]
 800c62c:	e037      	b.n	800c69e <EE_PageTransfer+0x13e>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800c62e:	2516      	movs	r5, #22
 800c630:	197b      	adds	r3, r7, r5
 800c632:	881a      	ldrh	r2, [r3, #0]
 800c634:	4b36      	ldr	r3, [pc, #216]	; (800c710 <EE_PageTransfer+0x1b0>)
 800c636:	0052      	lsls	r2, r2, #1
 800c638:	5ad3      	ldrh	r3, [r2, r3]
 800c63a:	1dba      	adds	r2, r7, #6
 800c63c:	8812      	ldrh	r2, [r2, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d027      	beq.n	800c692 <EE_PageTransfer+0x132>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c642:	197b      	adds	r3, r7, r5
 800c644:	881a      	ldrh	r2, [r3, #0]
 800c646:	4b32      	ldr	r3, [pc, #200]	; (800c710 <EE_PageTransfer+0x1b0>)
 800c648:	0052      	lsls	r2, r2, #1
 800c64a:	5ad3      	ldrh	r3, [r2, r3]
 800c64c:	260e      	movs	r6, #14
 800c64e:	19bc      	adds	r4, r7, r6
 800c650:	4a30      	ldr	r2, [pc, #192]	; (800c714 <EE_PageTransfer+0x1b4>)
 800c652:	0011      	movs	r1, r2
 800c654:	0018      	movs	r0, r3
 800c656:	f7ff fdfb 	bl	800c250 <EE_ReadVariable>
 800c65a:	0003      	movs	r3, r0
 800c65c:	8023      	strh	r3, [r4, #0]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800c65e:	19bb      	adds	r3, r7, r6
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d015      	beq.n	800c692 <EE_PageTransfer+0x132>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c666:	197b      	adds	r3, r7, r5
 800c668:	881a      	ldrh	r2, [r3, #0]
 800c66a:	4b29      	ldr	r3, [pc, #164]	; (800c710 <EE_PageTransfer+0x1b0>)
 800c66c:	0052      	lsls	r2, r2, #1
 800c66e:	5ad2      	ldrh	r2, [r2, r3]
 800c670:	4b28      	ldr	r3, [pc, #160]	; (800c714 <EE_PageTransfer+0x1b4>)
 800c672:	881b      	ldrh	r3, [r3, #0]
 800c674:	2510      	movs	r5, #16
 800c676:	197c      	adds	r4, r7, r5
 800c678:	0019      	movs	r1, r3
 800c67a:	0010      	movs	r0, r2
 800c67c:	f7ff ff02 	bl	800c484 <EE_VerifyPageFullWriteVariable>
 800c680:	0003      	movs	r3, r0
 800c682:	8023      	strh	r3, [r4, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800c684:	197b      	adds	r3, r7, r5
 800c686:	881b      	ldrh	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <EE_PageTransfer+0x132>
        {
          return EepromStatus;
 800c68c:	197b      	adds	r3, r7, r5
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	e02f      	b.n	800c6f2 <EE_PageTransfer+0x192>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c692:	2116      	movs	r1, #22
 800c694:	187b      	adds	r3, r7, r1
 800c696:	881a      	ldrh	r2, [r3, #0]
 800c698:	187b      	adds	r3, r7, r1
 800c69a:	3201      	adds	r2, #1
 800c69c:	801a      	strh	r2, [r3, #0]
 800c69e:	2316      	movs	r3, #22
 800c6a0:	18fb      	adds	r3, r7, r3
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	2b73      	cmp	r3, #115	; 0x73
 800c6a6:	d9c2      	bls.n	800c62e <EE_PageTransfer+0xce>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  HAL_StatusTypeDef = FLASH_ErasePage(OldPageAddress);
 800c6a8:	2515      	movs	r5, #21
 800c6aa:	197c      	adds	r4, r7, r5
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	0018      	movs	r0, r3
 800c6b0:	f7ff fb6e 	bl	800bd90 <FLASH_ErasePage>
 800c6b4:	0003      	movs	r3, r0
 800c6b6:	7023      	strb	r3, [r4, #0]
  /* If erase operation was failed, a Flash error code is returned */
  if (HAL_StatusTypeDef != HAL_OK)
 800c6b8:	197b      	adds	r3, r7, r5
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d003      	beq.n	800c6c8 <EE_PageTransfer+0x168>
  {
    return HAL_StatusTypeDef;
 800c6c0:	197b      	adds	r3, r7, r5
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	e014      	b.n	800c6f2 <EE_PageTransfer+0x192>
  }

  /* Set new Page status to VALID_PAGE status */
  HAL_StatusTypeDef = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 800c6c8:	2515      	movs	r5, #21
 800c6ca:	197c      	adds	r4, r7, r5
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	0018      	movs	r0, r3
 800c6d2:	f7ff fb99 	bl	800be08 <FLASH_ProgramHalfWord>
 800c6d6:	0003      	movs	r3, r0
 800c6d8:	7023      	strb	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (HAL_StatusTypeDef != HAL_OK)
 800c6da:	197b      	adds	r3, r7, r5
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d003      	beq.n	800c6ea <EE_PageTransfer+0x18a>
  {
    return HAL_StatusTypeDef;
 800c6e2:	197b      	adds	r3, r7, r5
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	e003      	b.n	800c6f2 <EE_PageTransfer+0x192>
  }

  /* Return last operation flash status */
  return HAL_StatusTypeDef;
 800c6ea:	2315      	movs	r3, #21
 800c6ec:	18fb      	adds	r3, r7, r3
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	b29b      	uxth	r3, r3
}
 800c6f2:	0018      	movs	r0, r3
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	b009      	add	sp, #36	; 0x24
 800c6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6fa:	46c0      	nop			; (mov r8, r8)
 800c6fc:	080103ff 	.word	0x080103ff
 800c700:	08010000 	.word	0x08010000
 800c704:	0803bc00 	.word	0x0803bc00
 800c708:	0803c000 	.word	0x0803c000
 800c70c:	0000eeee 	.word	0x0000eeee
 800c710:	20000918 	.word	0x20000918
 800c714:	20001384 	.word	0x20001384

0800c718 <FUELGAUGE_I2C_Callback>:
 * @param	p_i2cdrvDevice		pointer to the i2cdrv internals
 * @retval	none
 */
// ****************************************************************************
static void FUELGAUGE_I2C_Callback(const I2CDRV_Device_t * const p_i2cdrvDevice)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
	if (p_i2cdrvDevice->event == I2CDRV_EVENT_RX_COMPLETE)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	7d9b      	ldrb	r3, [r3, #22]
 800c724:	2b02      	cmp	r3, #2
 800c726:	d128      	bne.n	800c77a <FUELGAUGE_I2C_Callback+0x62>
	{
		crc_t crc = crc_8_init(FUELGAUGE_I2C_ADDR);
 800c728:	2016      	movs	r0, #22
 800c72a:	f7ff fae5 	bl	800bcf8 <crc_8_init>
 800c72e:	0003      	movs	r3, r0
 800c730:	60fb      	str	r3, [r7, #12]
		// crc includes address, mem address, address | 0x01, data
		crc = crc_8_update(crc, p_i2cdrvDevice->data, 4u);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	3317      	adds	r3, #23
 800c736:	0019      	movs	r1, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2204      	movs	r2, #4
 800c73c:	0018      	movs	r0, r3
 800c73e:	f7ff faaf 	bl	800bca0 <crc_8_update>
 800c742:	0003      	movs	r3, r0
 800c744:	60fb      	str	r3, [r7, #12]

		if (crc == p_i2cdrvDevice->data[4u])
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	7edb      	ldrb	r3, [r3, #27]
 800c74a:	001a      	movs	r2, r3
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4293      	cmp	r3, r2
 800c750:	d10f      	bne.n	800c772 <FUELGAUGE_I2C_Callback+0x5a>
		{
			m_fuelgaugeI2CReadResult = (uint16_t)p_i2cdrvDevice->data[2u] | (p_i2cdrvDevice->data[3u] << 8u);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	7e5b      	ldrb	r3, [r3, #25]
 800c756:	b21a      	sxth	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7e9b      	ldrb	r3, [r3, #26]
 800c75c:	021b      	lsls	r3, r3, #8
 800c75e:	b21b      	sxth	r3, r3
 800c760:	4313      	orrs	r3, r2
 800c762:	b21b      	sxth	r3, r3
 800c764:	b29a      	uxth	r2, r3
 800c766:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <FUELGAUGE_I2C_Callback+0x80>)
 800c768:	801a      	strh	r2, [r3, #0]

			m_fuelgaugeI2CSuccess = true;
 800c76a:	4b0c      	ldr	r3, [pc, #48]	; (800c79c <FUELGAUGE_I2C_Callback+0x84>)
 800c76c:	2201      	movs	r2, #1
 800c76e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		m_fuelgaugeI2CSuccess = false;
	}
}
 800c770:	e00e      	b.n	800c790 <FUELGAUGE_I2C_Callback+0x78>
			m_fuelgaugeI2CSuccess = false;
 800c772:	4b0a      	ldr	r3, [pc, #40]	; (800c79c <FUELGAUGE_I2C_Callback+0x84>)
 800c774:	2200      	movs	r2, #0
 800c776:	701a      	strb	r2, [r3, #0]
}
 800c778:	e00a      	b.n	800c790 <FUELGAUGE_I2C_Callback+0x78>
	else if (p_i2cdrvDevice->event == I2CDRV_EVENT_TX_COMPLETE)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	7d9b      	ldrb	r3, [r3, #22]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d103      	bne.n	800c78a <FUELGAUGE_I2C_Callback+0x72>
		m_fuelgaugeI2CSuccess = true;
 800c782:	4b06      	ldr	r3, [pc, #24]	; (800c79c <FUELGAUGE_I2C_Callback+0x84>)
 800c784:	2201      	movs	r2, #1
 800c786:	701a      	strb	r2, [r3, #0]
}
 800c788:	e002      	b.n	800c790 <FUELGAUGE_I2C_Callback+0x78>
		m_fuelgaugeI2CSuccess = false;
 800c78a:	4b04      	ldr	r3, [pc, #16]	; (800c79c <FUELGAUGE_I2C_Callback+0x84>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	701a      	strb	r2, [r3, #0]
}
 800c790:	46c0      	nop			; (mov r8, r8)
 800c792:	46bd      	mov	sp, r7
 800c794:	b004      	add	sp, #16
 800c796:	bd80      	pop	{r7, pc}
 800c798:	20001386 	.word	0x20001386
 800c79c:	20001388 	.word	0x20001388

0800c7a0 <FUELGAUGE_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void FUELGAUGE_Init(void)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 800c7a6:	f7f6 fc93 	bl	80030d0 <HAL_GetTick>
 800c7aa:	0003      	movs	r3, r0
 800c7ac:	607b      	str	r3, [r7, #4]

	uint16_t tempU16;
	uint8_t config;

	if (NV_READ_VARIABLE_SUCCESS == NvReadVariableU8(FUEL_GAUGE_CONFIG_NV_ADDR, &config))
 800c7ae:	1c7b      	adds	r3, r7, #1
 800c7b0:	0019      	movs	r1, r3
 800c7b2:	2020      	movs	r0, #32
 800c7b4:	f004 fa10 	bl	8010bd8 <NvReadVariableU8>
 800c7b8:	1e03      	subs	r3, r0, #0
 800c7ba:	d10f      	bne.n	800c7dc <FUELGAUGE_Init+0x3c>
	{
		m_tempSensorConfig = (uint8_t)(config & 0x7u);
 800c7bc:	1c7b      	adds	r3, r7, #1
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	2207      	movs	r2, #7
 800c7c2:	4013      	ands	r3, r2
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	4b1e      	ldr	r3, [pc, #120]	; (800c840 <FUELGAUGE_Init+0xa0>)
 800c7c8:	701a      	strb	r2, [r3, #0]
		m_rsocMeasurementConfig = (uint8_t)(config >> 4u) & 0x3u;
 800c7ca:	1c7b      	adds	r3, r7, #1
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	091b      	lsrs	r3, r3, #4
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2203      	movs	r2, #3
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	4b1a      	ldr	r3, [pc, #104]	; (800c844 <FUELGAUGE_Init+0xa4>)
 800c7da:	701a      	strb	r2, [r3, #0]
		// FuelGaugeDvInit();
	}

	// Try and talk to the fuel gauge ic
	// Note: SOC might not be correctly evaluated if the battery is being charged or discharged
	if (true == FUELGAUGE_IcInit())
 800c7dc:	f000 fa14 	bl	800cc08 <FUELGAUGE_IcInit>
 800c7e0:	1e03      	subs	r3, r0, #0
 800c7e2:	d01c      	beq.n	800c81e <FUELGAUGE_Init+0x7e>
	{
		m_fuelgaugeIcStatus = FUELGAUGE_STATUS_ONLINE;
 800c7e4:	4b18      	ldr	r3, [pc, #96]	; (800c848 <FUELGAUGE_Init+0xa8>)
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	701a      	strb	r2, [r3, #0]

		if (true == FUELGAUGE_ReadWord(FG_MEM_ADDR_ITE, &tempU16))
 800c7ea:	1cbb      	adds	r3, r7, #2
 800c7ec:	0019      	movs	r1, r3
 800c7ee:	200f      	movs	r0, #15
 800c7f0:	f000 face 	bl	800cd90 <FUELGAUGE_ReadWord>
 800c7f4:	1e03      	subs	r3, r0, #0
 800c7f6:	d006      	beq.n	800c806 <FUELGAUGE_Init+0x66>
		{
			m_lastSocPt1 = tempU16;
 800c7f8:	1cbb      	adds	r3, r7, #2
 800c7fa:	881a      	ldrh	r2, [r3, #0]
 800c7fc:	4b13      	ldr	r3, [pc, #76]	; (800c84c <FUELGAUGE_Init+0xac>)
 800c7fe:	801a      	strh	r2, [r3, #0]

			MS_TIMEREF_INIT(m_lastSocTimeMs, sysTime);
 800c800:	4b13      	ldr	r3, [pc, #76]	; (800c850 <FUELGAUGE_Init+0xb0>)
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	601a      	str	r2, [r3, #0]
		}

		if (true == FUELGAUGE_ReadWord(FG_MEM_ADDR_CELL_MV, &tempU16))
 800c806:	1cbb      	adds	r3, r7, #2
 800c808:	0019      	movs	r1, r3
 800c80a:	2009      	movs	r0, #9
 800c80c:	f000 fac0 	bl	800cd90 <FUELGAUGE_ReadWord>
 800c810:	1e03      	subs	r3, r0, #0
 800c812:	d00d      	beq.n	800c830 <FUELGAUGE_Init+0x90>
		{
			m_batteryMv = tempU16;
 800c814:	1cbb      	adds	r3, r7, #2
 800c816:	881a      	ldrh	r2, [r3, #0]
 800c818:	4b0e      	ldr	r3, [pc, #56]	; (800c854 <FUELGAUGE_Init+0xb4>)
 800c81a:	801a      	strh	r2, [r3, #0]
 800c81c:	e008      	b.n	800c830 <FUELGAUGE_Init+0x90>
		}
	}
	else
	{
		m_fuelgaugeIcStatus = FUELGAUGE_STATUS_OFFLINE;
 800c81e:	4b0a      	ldr	r3, [pc, #40]	; (800c848 <FUELGAUGE_Init+0xa8>)
 800c820:	2200      	movs	r2, #0
 800c822:	701a      	strb	r2, [r3, #0]
		m_lastSocPt1 = 0u;
 800c824:	4b09      	ldr	r3, [pc, #36]	; (800c84c <FUELGAUGE_Init+0xac>)
 800c826:	2200      	movs	r2, #0
 800c828:	801a      	strh	r2, [r3, #0]
		m_batteryMv = 0u;
 800c82a:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <FUELGAUGE_Init+0xb4>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	801a      	strh	r2, [r3, #0]
	}

	MS_TIMEREF_INIT(m_lastFuelGaugeTaskTimeMs, sysTime);
 800c830:	4b09      	ldr	r3, [pc, #36]	; (800c858 <FUELGAUGE_Init+0xb8>)
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	601a      	str	r2, [r3, #0]

}
 800c836:	46c0      	nop			; (mov r8, r8)
 800c838:	46bd      	mov	sp, r7
 800c83a:	b002      	add	sp, #8
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	46c0      	nop			; (mov r8, r8)
 800c840:	200004c9 	.word	0x200004c9
 800c844:	20001396 	.word	0x20001396
 800c848:	20001389 	.word	0x20001389
 800c84c:	2000138e 	.word	0x2000138e
 800c850:	20001390 	.word	0x20001390
 800c854:	2000138a 	.word	0x2000138a
 800c858:	200013a0 	.word	0x200013a0

0800c85c <FUELGAUGE_Task>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void FUELGAUGE_Task(void)
{
 800c85c:	b5b0      	push	{r4, r5, r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 800c862:	f7f6 fc35 	bl	80030d0 <HAL_GetTick>
 800c866:	0003      	movs	r3, r0
 800c868:	60fb      	str	r3, [r7, #12]
	const int16_t mcuTemperature = ANALOG_GetMCUTemp();
 800c86a:	230a      	movs	r3, #10
 800c86c:	18fc      	adds	r4, r7, r3
 800c86e:	f7fa ffcd 	bl	800780c <ANALOG_GetMCUTemp>
 800c872:	0003      	movs	r3, r0
 800c874:	8023      	strh	r3, [r4, #0]
	const uint16_t battMv = ANALOG_GetBatteryMv();
 800c876:	2508      	movs	r5, #8
 800c878:	197c      	adds	r4, r7, r5
 800c87a:	f7fa ff8f 	bl	800779c <ANALOG_GetBatteryMv>
 800c87e:	0003      	movs	r3, r0
 800c880:	8023      	strh	r3, [r4, #0]

	uint16_t tempU16;
	int16_t tempS16;
	uint32_t socTimeDiff;

	if (MS_TIMEREF_TIMEOUT(m_lastFuelGaugeTaskTimeMs, sysTime, FUELGAUGE_TASK_PERIOD_MS))
 800c882:	4b73      	ldr	r3, [pc, #460]	; (800ca50 <FUELGAUGE_Task+0x1f4>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	2b7c      	cmp	r3, #124	; 0x7c
 800c88c:	d800      	bhi.n	800c890 <FUELGAUGE_Task+0x34>
 800c88e:	e0dc      	b.n	800ca4a <FUELGAUGE_Task+0x1ee>
	{
		if (battMv < FUELGAUGE_MIN_BATT_MV)
 800c890:	197b      	adds	r3, r7, r5
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	4a6f      	ldr	r2, [pc, #444]	; (800ca54 <FUELGAUGE_Task+0x1f8>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d809      	bhi.n	800c8ae <FUELGAUGE_Task+0x52>
		{
			// If the battery voltage is less than the device operating limit then don't even bother!
			m_fuelgaugeIcStatus = FUELGAUGE_STATUS_OFFLINE;
 800c89a:	4b6f      	ldr	r3, [pc, #444]	; (800ca58 <FUELGAUGE_Task+0x1fc>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	701a      	strb	r2, [r3, #0]
			m_lastSocPt1 = 0u;
 800c8a0:	4b6e      	ldr	r3, [pc, #440]	; (800ca5c <FUELGAUGE_Task+0x200>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	801a      	strh	r2, [r3, #0]
			m_batteryMv = 0u;
 800c8a6:	4b6e      	ldr	r3, [pc, #440]	; (800ca60 <FUELGAUGE_Task+0x204>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	801a      	strh	r2, [r3, #0]
 800c8ac:	e0cd      	b.n	800ca4a <FUELGAUGE_Task+0x1ee>

			return;
		}

		if ( (FUELGAUGE_STATUS_OFFLINE == m_fuelgaugeIcStatus) || m_updateBatteryProfile )
 800c8ae:	4b6a      	ldr	r3, [pc, #424]	; (800ca58 <FUELGAUGE_Task+0x1fc>)
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <FUELGAUGE_Task+0x62>
 800c8b6:	4b6b      	ldr	r3, [pc, #428]	; (800ca64 <FUELGAUGE_Task+0x208>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d012      	beq.n	800c8e4 <FUELGAUGE_Task+0x88>
		{
			m_updateBatteryProfile = false;
 800c8be:	4b69      	ldr	r3, [pc, #420]	; (800ca64 <FUELGAUGE_Task+0x208>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	701a      	strb	r2, [r3, #0]

			if (true == FUELGAUGE_IcInit())
 800c8c4:	f000 f9a0 	bl	800cc08 <FUELGAUGE_IcInit>
 800c8c8:	1e03      	subs	r3, r0, #0
 800c8ca:	d002      	beq.n	800c8d2 <FUELGAUGE_Task+0x76>
			{
				m_fuelgaugeIcStatus = FUELGAUGE_STATUS_ONLINE;
 800c8cc:	4b62      	ldr	r3, [pc, #392]	; (800ca58 <FUELGAUGE_Task+0x1fc>)
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	701a      	strb	r2, [r3, #0]
			}

			if (RSOC_MEASUREMENT_DIRECT_DV == m_rsocMeasurementConfig)
 800c8d2:	4b65      	ldr	r3, [pc, #404]	; (800ca68 <FUELGAUGE_Task+0x20c>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d104      	bne.n	800c8e4 <FUELGAUGE_Task+0x88>
			{
				FUELGAUGE_CalculateSOCInit();
 800c8da:	f000 fb31 	bl	800cf40 <FUELGAUGE_CalculateSOCInit>
				m_initBatterySOC =  true;
 800c8de:	4b63      	ldr	r3, [pc, #396]	; (800ca6c <FUELGAUGE_Task+0x210>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	701a      	strb	r2, [r3, #0]
			}
		}

		// If battery just inserted or there has been a profile change, work out the SOC
		// Should not run if soc is used from fuel gauge ic.
		if (m_initBatterySOC)
 800c8e4:	4b61      	ldr	r3, [pc, #388]	; (800ca6c <FUELGAUGE_Task+0x210>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00b      	beq.n	800c904 <FUELGAUGE_Task+0xa8>
		{
			m_initBatterySOC = false;
 800c8ec:	4b5f      	ldr	r3, [pc, #380]	; (800ca6c <FUELGAUGE_Task+0x210>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	701a      	strb	r2, [r3, #0]

			FUELGAUGE_GetSOCFromOCV(battMv);
 800c8f2:	2308      	movs	r3, #8
 800c8f4:	18fb      	adds	r3, r7, r3
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	0018      	movs	r0, r3
 800c8fa:	f000 faf7 	bl	800ceec <FUELGAUGE_GetSOCFromOCV>
			MS_TIMEREF_INIT(m_lastSocTimeMs, sysTime);
 800c8fe:	4b5c      	ldr	r3, [pc, #368]	; (800ca70 <FUELGAUGE_Task+0x214>)
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	601a      	str	r2, [r3, #0]

		}


		if (FUELGAUGE_STATUS_ONLINE == m_fuelgaugeIcStatus)
 800c904:	4b54      	ldr	r3, [pc, #336]	; (800ca58 <FUELGAUGE_Task+0x1fc>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d000      	beq.n	800c90e <FUELGAUGE_Task+0xb2>
 800c90c:	e083      	b.n	800ca16 <FUELGAUGE_Task+0x1ba>
		{
			if (true == FUELGAUGE_ReadWord(FG_MEM_ADDR_CELL_MV, &tempU16))
 800c90e:	003b      	movs	r3, r7
 800c910:	0019      	movs	r1, r3
 800c912:	2009      	movs	r0, #9
 800c914:	f000 fa3c 	bl	800cd90 <FUELGAUGE_ReadWord>
 800c918:	1e03      	subs	r3, r0, #0
 800c91a:	d003      	beq.n	800c924 <FUELGAUGE_Task+0xc8>
			{
				m_batteryMv = tempU16;
 800c91c:	003b      	movs	r3, r7
 800c91e:	881a      	ldrh	r2, [r3, #0]
 800c920:	4b4f      	ldr	r3, [pc, #316]	; (800ca60 <FUELGAUGE_Task+0x204>)
 800c922:	801a      	strh	r2, [r3, #0]
			}

			if (m_temperatureMode == FUEL_GAUGE_TEMP_MODE_THERMISTOR)
 800c924:	4b53      	ldr	r3, [pc, #332]	; (800ca74 <FUELGAUGE_Task+0x218>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d129      	bne.n	800c980 <FUELGAUGE_Task+0x124>
			{
				if (true == FUELGAUGE_ReadWord(FG_MEM_ADDR_CELL_TEMP, &tempU16))
 800c92c:	003b      	movs	r3, r7
 800c92e:	0019      	movs	r1, r3
 800c930:	2008      	movs	r0, #8
 800c932:	f000 fa2d 	bl	800cd90 <FUELGAUGE_ReadWord>
 800c936:	1e03      	subs	r3, r0, #0
 800c938:	d039      	beq.n	800c9ae <FUELGAUGE_Task+0x152>
				{
					tempS16 = ((int16_t)tempU16 - CELL_TEMP_OFS);
 800c93a:	003b      	movs	r3, r7
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	4a4e      	ldr	r2, [pc, #312]	; (800ca78 <FUELGAUGE_Task+0x21c>)
 800c940:	4694      	mov	ip, r2
 800c942:	4463      	add	r3, ip
 800c944:	b29a      	uxth	r2, r3
 800c946:	1cbb      	adds	r3, r7, #2
 800c948:	801a      	strh	r2, [r3, #0]

					// Check for a sane number
					if (tempS16 < (int16_t)(mcuTemperature - 10))
 800c94a:	210a      	movs	r1, #10
 800c94c:	187b      	adds	r3, r7, r1
 800c94e:	881b      	ldrh	r3, [r3, #0]
 800c950:	3b0a      	subs	r3, #10
 800c952:	b29b      	uxth	r3, r3
 800c954:	b21b      	sxth	r3, r3
 800c956:	1cba      	adds	r2, r7, #2
 800c958:	2000      	movs	r0, #0
 800c95a:	5e12      	ldrsh	r2, [r2, r0]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	da0a      	bge.n	800c976 <FUELGAUGE_Task+0x11a>
					{
						m_batteryTemperaturePt1 = mcuTemperature * 10;
 800c960:	187b      	adds	r3, r7, r1
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	1c1a      	adds	r2, r3, #0
 800c966:	0092      	lsls	r2, r2, #2
 800c968:	18d3      	adds	r3, r2, r3
 800c96a:	18db      	adds	r3, r3, r3
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	b21a      	sxth	r2, r3
 800c970:	4b42      	ldr	r3, [pc, #264]	; (800ca7c <FUELGAUGE_Task+0x220>)
 800c972:	801a      	strh	r2, [r3, #0]
 800c974:	e01b      	b.n	800c9ae <FUELGAUGE_Task+0x152>
					}
					else
					{
						m_batteryTemperaturePt1 = tempS16;
 800c976:	4b41      	ldr	r3, [pc, #260]	; (800ca7c <FUELGAUGE_Task+0x220>)
 800c978:	1cba      	adds	r2, r7, #2
 800c97a:	8812      	ldrh	r2, [r2, #0]
 800c97c:	801a      	strh	r2, [r3, #0]
 800c97e:	e016      	b.n	800c9ae <FUELGAUGE_Task+0x152>
					}
				}
			}
			else
			{
				m_batteryTemperaturePt1 = mcuTemperature * 10;
 800c980:	230a      	movs	r3, #10
 800c982:	18fb      	adds	r3, r7, r3
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	1c1a      	adds	r2, r3, #0
 800c988:	0092      	lsls	r2, r2, #2
 800c98a:	18d3      	adds	r3, r2, r3
 800c98c:	18db      	adds	r3, r3, r3
 800c98e:	b29b      	uxth	r3, r3
 800c990:	b21a      	sxth	r2, r3
 800c992:	4b3a      	ldr	r3, [pc, #232]	; (800ca7c <FUELGAUGE_Task+0x220>)
 800c994:	801a      	strh	r2, [r3, #0]
				FUELGAUGE_WriteWord(0x08, m_batteryTemperaturePt1 + CELL_TEMP_OFS);
 800c996:	4b39      	ldr	r3, [pc, #228]	; (800ca7c <FUELGAUGE_Task+0x220>)
 800c998:	2200      	movs	r2, #0
 800c99a:	5e9b      	ldrsh	r3, [r3, r2]
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	4a38      	ldr	r2, [pc, #224]	; (800ca80 <FUELGAUGE_Task+0x224>)
 800c9a0:	4694      	mov	ip, r2
 800c9a2:	4463      	add	r3, ip
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	0019      	movs	r1, r3
 800c9a8:	2008      	movs	r0, #8
 800c9aa:	f000 fa37 	bl	800ce1c <FUELGAUGE_WriteWord>
			}

			socTimeDiff = MS_TIMEREF_DIFF(m_lastSocTimeMs, HAL_GetTick());
 800c9ae:	f7f6 fb8f 	bl	80030d0 <HAL_GetTick>
 800c9b2:	0002      	movs	r2, r0
 800c9b4:	4b2e      	ldr	r3, [pc, #184]	; (800ca70 <FUELGAUGE_Task+0x214>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	607b      	str	r3, [r7, #4]

			if (RSOC_MEASUREMENT_DIRECT_DV == m_rsocMeasurementConfig)
 800c9bc:	4b2a      	ldr	r3, [pc, #168]	; (800ca68 <FUELGAUGE_Task+0x20c>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d10b      	bne.n	800c9dc <FUELGAUGE_Task+0x180>
			{
				// TODO - does this need to happen every 125ms?
				FUELGAUGE_UpdateCalculateSOC(battMv, socTimeDiff);
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	2308      	movs	r3, #8
 800c9c8:	18fb      	adds	r3, r7, r3
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	0011      	movs	r1, r2
 800c9ce:	0018      	movs	r0, r3
 800c9d0:	f000 fdf2 	bl	800d5b8 <FUELGAUGE_UpdateCalculateSOC>

				MS_TIMEREF_INIT(m_lastSocTimeMs, sysTime);
 800c9d4:	4b26      	ldr	r3, [pc, #152]	; (800ca70 <FUELGAUGE_Task+0x214>)
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	e036      	b.n	800ca4a <FUELGAUGE_Task+0x1ee>
			}
			else
			{
				if (true == FUELGAUGE_ReadWord(FG_MEM_ADDR_ITE, &tempU16))
 800c9dc:	003b      	movs	r3, r7
 800c9de:	0019      	movs	r1, r3
 800c9e0:	200f      	movs	r0, #15
 800c9e2:	f000 f9d5 	bl	800cd90 <FUELGAUGE_ReadWord>
 800c9e6:	1e03      	subs	r3, r0, #0
 800c9e8:	d02f      	beq.n	800ca4a <FUELGAUGE_Task+0x1ee>
				{
					if (m_lastSocPt1 != tempU16)
 800c9ea:	4b1c      	ldr	r3, [pc, #112]	; (800ca5c <FUELGAUGE_Task+0x200>)
 800c9ec:	881a      	ldrh	r2, [r3, #0]
 800c9ee:	003b      	movs	r3, r7
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d029      	beq.n	800ca4a <FUELGAUGE_Task+0x1ee>
					{
						FUELGAUGE_CalculateDischargeRate(m_lastSocPt1, tempU16,
 800c9f6:	4b19      	ldr	r3, [pc, #100]	; (800ca5c <FUELGAUGE_Task+0x200>)
 800c9f8:	8818      	ldrh	r0, [r3, #0]
 800c9fa:	003b      	movs	r3, r7
 800c9fc:	881b      	ldrh	r3, [r3, #0]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	0019      	movs	r1, r3
 800ca02:	f000 fe4f 	bl	800d6a4 <FUELGAUGE_CalculateDischargeRate>
															socTimeDiff);

						m_lastSocPt1 = tempU16;
 800ca06:	003b      	movs	r3, r7
 800ca08:	881a      	ldrh	r2, [r3, #0]
 800ca0a:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <FUELGAUGE_Task+0x200>)
 800ca0c:	801a      	strh	r2, [r3, #0]

						MS_TIMEREF_INIT(m_lastSocTimeMs, sysTime);
 800ca0e:	4b18      	ldr	r3, [pc, #96]	; (800ca70 <FUELGAUGE_Task+0x214>)
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	e019      	b.n	800ca4a <FUELGAUGE_Task+0x1ee>
				}
			}
		}
		else
		{
			m_batteryMv = battMv;
 800ca16:	4b12      	ldr	r3, [pc, #72]	; (800ca60 <FUELGAUGE_Task+0x204>)
 800ca18:	2408      	movs	r4, #8
 800ca1a:	193a      	adds	r2, r7, r4
 800ca1c:	8812      	ldrh	r2, [r2, #0]
 800ca1e:	801a      	strh	r2, [r3, #0]

			socTimeDiff = MS_TIMEREF_DIFF(m_lastSocTimeMs, HAL_GetTick());
 800ca20:	f7f6 fb56 	bl	80030d0 <HAL_GetTick>
 800ca24:	0002      	movs	r2, r0
 800ca26:	4b12      	ldr	r3, [pc, #72]	; (800ca70 <FUELGAUGE_Task+0x214>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	607b      	str	r3, [r7, #4]

			if (RSOC_MEASUREMENT_DIRECT_DV == m_rsocMeasurementConfig)
 800ca2e:	4b0e      	ldr	r3, [pc, #56]	; (800ca68 <FUELGAUGE_Task+0x20c>)
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d109      	bne.n	800ca4a <FUELGAUGE_Task+0x1ee>
			{
				// TODO - does this need to happen every 125ms?
				FUELGAUGE_UpdateCalculateSOC(battMv, socTimeDiff);
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	193b      	adds	r3, r7, r4
 800ca3a:	881b      	ldrh	r3, [r3, #0]
 800ca3c:	0011      	movs	r1, r2
 800ca3e:	0018      	movs	r0, r3
 800ca40:	f000 fdba 	bl	800d5b8 <FUELGAUGE_UpdateCalculateSOC>

				MS_TIMEREF_INIT(m_lastSocTimeMs, sysTime);
 800ca44:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <FUELGAUGE_Task+0x214>)
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	b004      	add	sp, #16
 800ca4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca50:	200013a0 	.word	0x200013a0
 800ca54:	000009c3 	.word	0x000009c3
 800ca58:	20001389 	.word	0x20001389
 800ca5c:	2000138e 	.word	0x2000138e
 800ca60:	2000138a 	.word	0x2000138a
 800ca64:	200013a4 	.word	0x200013a4
 800ca68:	20001396 	.word	0x20001396
 800ca6c:	200013a5 	.word	0x200013a5
 800ca70:	20001390 	.word	0x20001390
 800ca74:	200004ca 	.word	0x200004ca
 800ca78:	fffff554 	.word	0xfffff554
 800ca7c:	20001394 	.word	0x20001394
 800ca80:	00000aac 	.word	0x00000aac

0800ca84 <FUELGAUGE_UpdateBatteryProfile>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void FUELGAUGE_UpdateBatteryProfile(void)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	af00      	add	r7, sp, #0
	m_updateBatteryProfile = true;
 800ca88:	4b02      	ldr	r3, [pc, #8]	; (800ca94 <FUELGAUGE_UpdateBatteryProfile+0x10>)
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	701a      	strb	r2, [r3, #0]
}
 800ca8e:	46c0      	nop			; (mov r8, r8)
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	200013a4 	.word	0x200013a4

0800ca98 <FUELGAUGE_SetConfigData>:
 * @param	len			length of config data
 * @retval	none
 */
// ****************************************************************************
void FUELGAUGE_SetConfigData(const uint8_t * const p_data, const uint16_t len)
{
 800ca98:	b5b0      	push	{r4, r5, r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	000a      	movs	r2, r1
 800caa2:	1cbb      	adds	r3, r7, #2
 800caa4:	801a      	strh	r2, [r3, #0]
	const uint8_t newTempConfig = p_data[0u] & 0x07u;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	781a      	ldrb	r2, [r3, #0]
 800caaa:	240f      	movs	r4, #15
 800caac:	193b      	adds	r3, r7, r4
 800caae:	2107      	movs	r1, #7
 800cab0:	400a      	ands	r2, r1
 800cab2:	701a      	strb	r2, [r3, #0]
	const uint8_t newRsocConfig = (uint8_t)((p_data[0u] & 0x30u) >> 4u);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	091b      	lsrs	r3, r3, #4
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	250e      	movs	r5, #14
 800cabe:	197b      	adds	r3, r7, r5
 800cac0:	2103      	movs	r1, #3
 800cac2:	400a      	ands	r2, r1
 800cac4:	701a      	strb	r2, [r3, #0]

	uint8_t config;

	if ( (newTempConfig >= BAT_TEMP_SENSE_CONFIG_TYPES)
 800cac6:	193b      	adds	r3, r7, r4
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b03      	cmp	r3, #3
 800cacc:	d821      	bhi.n	800cb12 <FUELGAUGE_SetConfigData+0x7a>
			|| (newRsocConfig >= RSOC_MEASUREMENT_CONFIG_TYPES)
 800cace:	197b      	adds	r3, r7, r5
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d81d      	bhi.n	800cb12 <FUELGAUGE_SetConfigData+0x7a>
			)
	{
		return;
	}

	NV_WriteVariable_U8(FUEL_GAUGE_CONFIG_NV_ADDR, p_data[0u]);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	0019      	movs	r1, r3
 800cadc:	2020      	movs	r0, #32
 800cade:	f004 f809 	bl	8010af4 <NV_WriteVariable_U8>

	if (NvReadVariableU8(FUEL_GAUGE_CONFIG_NV_ADDR, &config) == NV_READ_VARIABLE_SUCCESS)
 800cae2:	230d      	movs	r3, #13
 800cae4:	18fb      	adds	r3, r7, r3
 800cae6:	0019      	movs	r1, r3
 800cae8:	2020      	movs	r0, #32
 800caea:	f004 f875 	bl	8010bd8 <NvReadVariableU8>
 800caee:	1e03      	subs	r3, r0, #0
 800caf0:	d108      	bne.n	800cb04 <FUELGAUGE_SetConfigData+0x6c>
	{
		m_rsocMeasurementConfig = (RsocMeasurementConfig_T)newRsocConfig;
 800caf2:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <FUELGAUGE_SetConfigData+0x84>)
 800caf4:	197a      	adds	r2, r7, r5
 800caf6:	7812      	ldrb	r2, [r2, #0]
 800caf8:	701a      	strb	r2, [r3, #0]
		m_tempSensorConfig = (BatteryTempSenseConfig_T)newTempConfig;
 800cafa:	4b09      	ldr	r3, [pc, #36]	; (800cb20 <FUELGAUGE_SetConfigData+0x88>)
 800cafc:	193a      	adds	r2, r7, r4
 800cafe:	7812      	ldrb	r2, [r2, #0]
 800cb00:	701a      	strb	r2, [r3, #0]
 800cb02:	e007      	b.n	800cb14 <FUELGAUGE_SetConfigData+0x7c>
	}
	else
	{
		m_tempSensorConfig = BAT_TEMP_SENSE_CONFIG_AUTO_DETECT;
 800cb04:	4b06      	ldr	r3, [pc, #24]	; (800cb20 <FUELGAUGE_SetConfigData+0x88>)
 800cb06:	2203      	movs	r2, #3
 800cb08:	701a      	strb	r2, [r3, #0]
		m_rsocMeasurementConfig = RSOC_MEASUREMENT_FROM_IC;
 800cb0a:	4b04      	ldr	r3, [pc, #16]	; (800cb1c <FUELGAUGE_SetConfigData+0x84>)
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	701a      	strb	r2, [r3, #0]
 800cb10:	e000      	b.n	800cb14 <FUELGAUGE_SetConfigData+0x7c>
		return;
 800cb12:	46c0      	nop			; (mov r8, r8)
	}
}
 800cb14:	46bd      	mov	sp, r7
 800cb16:	b004      	add	sp, #16
 800cb18:	bdb0      	pop	{r4, r5, r7, pc}
 800cb1a:	46c0      	nop			; (mov r8, r8)
 800cb1c:	20001396 	.word	0x20001396
 800cb20:	200004c9 	.word	0x200004c9

0800cb24 <FUELGAUGE_GetConfigData>:
 * @param	p_len		length of status data
 * @retval	none
 */
// ****************************************************************************
void FUELGAUGE_GetConfigData(uint8_t * const p_data, uint16_t * const p_len)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
	p_data[0u] = (m_tempSensorConfig & 0x07u) | ( (m_rsocMeasurementConfig & 0x03u) << 4u);
 800cb2e:	4b0b      	ldr	r3, [pc, #44]	; (800cb5c <FUELGAUGE_GetConfigData+0x38>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	2207      	movs	r2, #7
 800cb34:	4013      	ands	r3, r2
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	4b09      	ldr	r3, [pc, #36]	; (800cb60 <FUELGAUGE_GetConfigData+0x3c>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	011b      	lsls	r3, r3, #4
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2130      	movs	r1, #48	; 0x30
 800cb42:	400b      	ands	r3, r1
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	4313      	orrs	r3, r2
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	701a      	strb	r2, [r3, #0]
	*p_len = 1u;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	2201      	movs	r2, #1
 800cb52:	801a      	strh	r2, [r3, #0]
}
 800cb54:	46c0      	nop			; (mov r8, r8)
 800cb56:	46bd      	mov	sp, r7
 800cb58:	b002      	add	sp, #8
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	200004c9 	.word	0x200004c9
 800cb60:	20001396 	.word	0x20001396

0800cb64 <FUELGAUGE_IsNtcOK>:
 * @retval	bool		false = thermister faulty
 * 						true = thermister appears ok
 */
// ****************************************************************************
bool FUELGAUGE_IsNtcOK(void)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	af00      	add	r7, sp, #0
	return m_thermistorGood;
 800cb68:	4b02      	ldr	r3, [pc, #8]	; (800cb74 <FUELGAUGE_IsNtcOK+0x10>)
 800cb6a:	781b      	ldrb	r3, [r3, #0]
}
 800cb6c:	0018      	movs	r0, r3
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	46c0      	nop			; (mov r8, r8)
 800cb74:	2000139c 	.word	0x2000139c

0800cb78 <FUELGAUGE_IsOnline>:
 * @retval	bool		false = fuel gauge IC is not powered
 * 						true = fuel gauge IC is powered
 */
// ****************************************************************************
bool FUELGAUGE_IsOnline(void)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
	return FUELGAUGE_STATUS_ONLINE == m_fuelgaugeIcStatus;
 800cb7c:	4b04      	ldr	r3, [pc, #16]	; (800cb90 <FUELGAUGE_IsOnline+0x18>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	425a      	negs	r2, r3
 800cb84:	4153      	adcs	r3, r2
 800cb86:	b2db      	uxtb	r3, r3
}
 800cb88:	0018      	movs	r0, r3
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	46c0      	nop			; (mov r8, r8)
 800cb90:	20001389 	.word	0x20001389

0800cb94 <FUELGAUGE_GetBatteryTemperature>:
 * @param	none
 * @retval	int8_t		temperature in degrees of the battery (or processor!)
 */
// ****************************************************************************
int8_t FUELGAUGE_GetBatteryTemperature(void)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	af00      	add	r7, sp, #0
	return m_batteryTemperaturePt1 / 10;
 800cb98:	4b06      	ldr	r3, [pc, #24]	; (800cbb4 <FUELGAUGE_GetBatteryTemperature+0x20>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	5e9b      	ldrsh	r3, [r3, r2]
 800cb9e:	210a      	movs	r1, #10
 800cba0:	0018      	movs	r0, r3
 800cba2:	f7f3 fb39 	bl	8000218 <__divsi3>
 800cba6:	0003      	movs	r3, r0
 800cba8:	b21b      	sxth	r3, r3
 800cbaa:	b25b      	sxtb	r3, r3
}
 800cbac:	0018      	movs	r0, r3
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	46c0      	nop			; (mov r8, r8)
 800cbb4:	20001394 	.word	0x20001394

0800cbb8 <FUELGAUGE_GetSocPt1>:
 * @param	none
 * @retval	uint16_t	battery soc in 0.1% steps
 */
// ****************************************************************************
uint16_t FUELGAUGE_GetSocPt1(void)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	af00      	add	r7, sp, #0
	return m_lastSocPt1;
 800cbbc:	4b02      	ldr	r3, [pc, #8]	; (800cbc8 <FUELGAUGE_GetSocPt1+0x10>)
 800cbbe:	881b      	ldrh	r3, [r3, #0]
}
 800cbc0:	0018      	movs	r0, r3
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	46c0      	nop			; (mov r8, r8)
 800cbc8:	2000138e 	.word	0x2000138e

0800cbcc <FUELGAUGE_GetBatteryMaHr>:
 * @param	none
 * @retval	int16_t		battery discharge/charge rate
 */
// ****************************************************************************
int16_t FUELGAUGE_GetBatteryMaHr(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	af00      	add	r7, sp, #0
	return m_dischargeRate;
 800cbd0:	4b02      	ldr	r3, [pc, #8]	; (800cbdc <FUELGAUGE_GetBatteryMaHr+0x10>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	5e9b      	ldrsh	r3, [r3, r2]
}
 800cbd6:	0018      	movs	r0, r3
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	20001398 	.word	0x20001398

0800cbe0 <FUELGAUGE_GetBatteryMv>:
 * @param	none
 * @retval	uint16_t		Battery voltage in mV
 */
// ****************************************************************************
uint16_t FUELGAUGE_GetBatteryMv(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
	return m_batteryMv;
 800cbe4:	4b02      	ldr	r3, [pc, #8]	; (800cbf0 <FUELGAUGE_GetBatteryMv+0x10>)
 800cbe6:	881b      	ldrh	r3, [r3, #0]
}
 800cbe8:	0018      	movs	r0, r3
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	46c0      	nop			; (mov r8, r8)
 800cbf0:	2000138a 	.word	0x2000138a

0800cbf4 <FUELGAUGE_GetBatteryTempSensorCfg>:
 * @param	none
 * @retval	BatteryTempSenseConfig_T	battery temperature configuration
 */
// ****************************************************************************
BatteryTempSenseConfig_T FUELGAUGE_GetBatteryTempSensorCfg(void)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
	return m_tempSensorConfig;
 800cbf8:	4b02      	ldr	r3, [pc, #8]	; (800cc04 <FUELGAUGE_GetBatteryTempSensorCfg+0x10>)
 800cbfa:	781b      	ldrb	r3, [r3, #0]
}
 800cbfc:	0018      	movs	r0, r3
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	46c0      	nop			; (mov r8, r8)
 800cc04:	200004c9 	.word	0x200004c9

0800cc08 <FUELGAUGE_IcInit>:
 * @param	none
 * @retval	bool
 */
// ****************************************************************************
static bool FUELGAUGE_IcInit(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
	const BatteryProfile_T * currentBatProfile = BATTERY_GetActiveProfileHandle();
 800cc0e:	f7fb fa45 	bl	800809c <BATTERY_GetActiveProfileHandle>
 800cc12:	0003      	movs	r3, r0
 800cc14:	607b      	str	r3, [r7, #4]
	uint16_t tempU16;

	m_icInitState = 0u;
 800cc16:	4b59      	ldr	r3, [pc, #356]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	701a      	strb	r2, [r3, #0]

	// Check to see if the device is online
	if (FUELGAUGE_ReadWord(0x11, &tempU16))
 800cc1c:	1cbb      	adds	r3, r7, #2
 800cc1e:	0019      	movs	r1, r3
 800cc20:	2011      	movs	r0, #17
 800cc22:	f000 f8b5 	bl	800cd90 <FUELGAUGE_ReadWord>
 800cc26:	1e03      	subs	r3, r0, #0
 800cc28:	d100      	bne.n	800cc2c <FUELGAUGE_IcInit+0x24>
 800cc2a:	e09e      	b.n	800cd6a <FUELGAUGE_IcInit+0x162>
	{
		m_fuelgaugeIcId = tempU16;
 800cc2c:	1cbb      	adds	r3, r7, #2
 800cc2e:	881a      	ldrh	r2, [r3, #0]
 800cc30:	4b53      	ldr	r3, [pc, #332]	; (800cd80 <FUELGAUGE_IcInit+0x178>)
 800cc32:	801a      	strh	r2, [r3, #0]

		m_icInitState++;
 800cc34:	4b51      	ldr	r3, [pc, #324]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	4b4f      	ldr	r3, [pc, #316]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cc3e:	701a      	strb	r2, [r3, #0]

		// Set operational mode
		if (false == FUELGAUGE_WriteWord(FG_MEM_ADDR_POWER_MODE, POWER_MODE_OPERATIONAL))
 800cc40:	2101      	movs	r1, #1
 800cc42:	2015      	movs	r0, #21
 800cc44:	f000 f8ea 	bl	800ce1c <FUELGAUGE_WriteWord>
 800cc48:	0003      	movs	r3, r0
 800cc4a:	001a      	movs	r2, r3
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	4053      	eors	r3, r2
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d001      	beq.n	800cc5a <FUELGAUGE_IcInit+0x52>
		{
			return false;
 800cc56:	2300      	movs	r3, #0
 800cc58:	e08b      	b.n	800cd72 <FUELGAUGE_IcInit+0x16a>
		}

		m_icInitState++;
 800cc5a:	4b48      	ldr	r3, [pc, #288]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	b2da      	uxtb	r2, r3
 800cc62:	4b46      	ldr	r3, [pc, #280]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cc64:	701a      	strb	r2, [r3, #0]

		// set APA
		if (false == FUELGAUGE_WriteWord(FG_MEM_ADDR_APA, 0x36u))
 800cc66:	2136      	movs	r1, #54	; 0x36
 800cc68:	200b      	movs	r0, #11
 800cc6a:	f000 f8d7 	bl	800ce1c <FUELGAUGE_WriteWord>
 800cc6e:	0003      	movs	r3, r0
 800cc70:	001a      	movs	r2, r3
 800cc72:	2301      	movs	r3, #1
 800cc74:	4053      	eors	r3, r2
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d001      	beq.n	800cc80 <FUELGAUGE_IcInit+0x78>
		{
			return false;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	e078      	b.n	800cd72 <FUELGAUGE_IcInit+0x16a>
		}

		m_icInitState++;
 800cc80:	4b3e      	ldr	r3, [pc, #248]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	3301      	adds	r3, #1
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	4b3c      	ldr	r3, [pc, #240]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cc8a:	701a      	strb	r2, [r3, #0]

		// set change of the parameter
		if (false == FUELGAUGE_WriteWord(FG_MEM_ADDR_PARAM_NO_SET,
				(currentBatProfile->chemistry == BAT_CHEMISTRY_LIPO_GRAPHENE) ?
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
		if (false == FUELGAUGE_WriteWord(FG_MEM_ADDR_PARAM_NO_SET,
 800cc90:	3b02      	subs	r3, #2
 800cc92:	1e5a      	subs	r2, r3, #1
 800cc94:	4193      	sbcs	r3, r2
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	0019      	movs	r1, r3
 800cc9c:	2012      	movs	r0, #18
 800cc9e:	f000 f8bd 	bl	800ce1c <FUELGAUGE_WriteWord>
 800cca2:	0003      	movs	r3, r0
 800cca4:	001a      	movs	r2, r3
 800cca6:	2301      	movs	r3, #1
 800cca8:	4053      	eors	r3, r2
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <FUELGAUGE_IcInit+0xac>
						BATT_PROFILE_0 :
						BATT_PROFILE_1)
				)
		{
			return false;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	e05e      	b.n	800cd72 <FUELGAUGE_IcInit+0x16a>
		}

		m_icInitState++;
 800ccb4:	4b31      	ldr	r3, [pc, #196]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	4b2f      	ldr	r3, [pc, #188]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800ccbe:	701a      	strb	r2, [r3, #0]

		// set APT
		if (false == FUELGAUGE_WriteWord(FG_MEM_ADDR_APT, 0x3000u))
 800ccc0:	23c0      	movs	r3, #192	; 0xc0
 800ccc2:	019b      	lsls	r3, r3, #6
 800ccc4:	0019      	movs	r1, r3
 800ccc6:	200c      	movs	r0, #12
 800ccc8:	f000 f8a8 	bl	800ce1c <FUELGAUGE_WriteWord>
 800cccc:	0003      	movs	r3, r0
 800ccce:	001a      	movs	r2, r3
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	4053      	eors	r3, r2
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <FUELGAUGE_IcInit+0xd6>
		{
			return false;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e049      	b.n	800cd72 <FUELGAUGE_IcInit+0x16a>
		}

		m_icInitState++;
 800ccde:	4b27      	ldr	r3, [pc, #156]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	3301      	adds	r3, #1
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	4b25      	ldr	r3, [pc, #148]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cce8:	701a      	strb	r2, [r3, #0]

		if ( (NULL != currentBatProfile) && (0xFFFFu != currentBatProfile->ntcB) )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d013      	beq.n	800cd18 <FUELGAUGE_IcInit+0x110>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	8b9b      	ldrh	r3, [r3, #28]
 800ccf4:	4a23      	ldr	r2, [pc, #140]	; (800cd84 <FUELGAUGE_IcInit+0x17c>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d00e      	beq.n	800cd18 <FUELGAUGE_IcInit+0x110>
		{
			// Set NTC B constant
			if (false == FUELGAUGE_WriteWord(FG_MEM_ADDR_THERMB, currentBatProfile->ntcB))
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	8b9b      	ldrh	r3, [r3, #28]
 800ccfe:	0019      	movs	r1, r3
 800cd00:	2006      	movs	r0, #6
 800cd02:	f000 f88b 	bl	800ce1c <FUELGAUGE_WriteWord>
 800cd06:	0003      	movs	r3, r0
 800cd08:	001a      	movs	r2, r3
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	4053      	eors	r3, r2
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <FUELGAUGE_IcInit+0x110>
			{
				return false;
 800cd14:	2300      	movs	r3, #0
 800cd16:	e02c      	b.n	800cd72 <FUELGAUGE_IcInit+0x16a>
			}
		}

		m_icInitState++;
 800cd18:	4b18      	ldr	r3, [pc, #96]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	4b16      	ldr	r3, [pc, #88]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cd22:	701a      	strb	r2, [r3, #0]

		// Set NTC mode
		if (false == FUELGAUGE_WriteWord(FG_MEM_ADDR_THERM_TYPE, THERM_TYPE_NTC))
 800cd24:	2101      	movs	r1, #1
 800cd26:	2016      	movs	r0, #22
 800cd28:	f000 f878 	bl	800ce1c <FUELGAUGE_WriteWord>
 800cd2c:	0003      	movs	r3, r0
 800cd2e:	001a      	movs	r2, r3
 800cd30:	2301      	movs	r3, #1
 800cd32:	4053      	eors	r3, r2
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <FUELGAUGE_IcInit+0x136>
		{
			return false;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	e019      	b.n	800cd72 <FUELGAUGE_IcInit+0x16a>
		}

		m_temperatureMode = FUEL_GAUGE_TEMP_MODE_THERMISTOR;
 800cd3e:	4b12      	ldr	r3, [pc, #72]	; (800cd88 <FUELGAUGE_IcInit+0x180>)
 800cd40:	2201      	movs	r2, #1
 800cd42:	701a      	strb	r2, [r3, #0]

		// IC only calculates for LIPO chemistry, override the setting
		if ( (currentBatProfile->chemistry != BAT_CHEMISTRY_LIPO) && (currentBatProfile->chemistry != BAT_CHEMISTRY_LIPO_GRAPHENE) )
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d006      	beq.n	800cd5a <FUELGAUGE_IcInit+0x152>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d002      	beq.n	800cd5a <FUELGAUGE_IcInit+0x152>
		{
			m_rsocMeasurementConfig = RSOC_MEASUREMENT_DIRECT_DV;
 800cd54:	4b0d      	ldr	r3, [pc, #52]	; (800cd8c <FUELGAUGE_IcInit+0x184>)
 800cd56:	2201      	movs	r2, #1
 800cd58:	701a      	strb	r2, [r3, #0]
		}

		m_icInitState++;
 800cd5a:	4b08      	ldr	r3, [pc, #32]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	4b06      	ldr	r3, [pc, #24]	; (800cd7c <FUELGAUGE_IcInit+0x174>)
 800cd64:	701a      	strb	r2, [r3, #0]

		return true;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e003      	b.n	800cd72 <FUELGAUGE_IcInit+0x16a>
	}

	m_fuelgaugeIcId = 0u;
 800cd6a:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <FUELGAUGE_IcInit+0x178>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	801a      	strh	r2, [r3, #0]

	return false;
 800cd70:	2300      	movs	r3, #0

}
 800cd72:	0018      	movs	r0, r3
 800cd74:	46bd      	mov	sp, r7
 800cd76:	b002      	add	sp, #8
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	46c0      	nop			; (mov r8, r8)
 800cd7c:	2000138c 	.word	0x2000138c
 800cd80:	2000139a 	.word	0x2000139a
 800cd84:	0000ffff 	.word	0x0000ffff
 800cd88:	200004ca 	.word	0x200004ca
 800cd8c:	20001396 	.word	0x20001396

0800cd90 <FUELGAUGE_ReadWord>:
 * @retval	bool		false = read unsuccessful
 * 						true = read successful
 */
// ****************************************************************************
static bool FUELGAUGE_ReadWord(const uint8_t cmd, uint16_t * const p_word)
{
 800cd90:	b5b0      	push	{r4, r5, r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af04      	add	r7, sp, #16
 800cd96:	0002      	movs	r2, r0
 800cd98:	6039      	str	r1, [r7, #0]
 800cd9a:	1dfb      	adds	r3, r7, #7
 800cd9c:	701a      	strb	r2, [r3, #0]
	const uint32_t sysTime = HAL_GetTick();
 800cd9e:	f7f6 f997 	bl	80030d0 <HAL_GetTick>
 800cda2:	0003      	movs	r3, r0
 800cda4:	60fb      	str	r3, [r7, #12]
	bool transactGood;

	m_fuelgaugeI2CSuccess = false;
 800cda6:	4b1a      	ldr	r3, [pc, #104]	; (800ce10 <FUELGAUGE_ReadWord+0x80>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	701a      	strb	r2, [r3, #0]

	transactGood = I2CDRV_Transact(FUELGAUGE_I2C_PORTNO, FUELGAUGE_I2C_ADDR, &cmd, 3u,
 800cdac:	250b      	movs	r5, #11
 800cdae:	197c      	adds	r4, r7, r5
 800cdb0:	1dfa      	adds	r2, r7, #7
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	9303      	str	r3, [sp, #12]
 800cdb6:	23fa      	movs	r3, #250	; 0xfa
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	9302      	str	r3, [sp, #8]
 800cdbc:	4b15      	ldr	r3, [pc, #84]	; (800ce14 <FUELGAUGE_ReadWord+0x84>)
 800cdbe:	9301      	str	r3, [sp, #4]
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	2116      	movs	r1, #22
 800cdc8:	2001      	movs	r0, #1
 800cdca:	f001 f9cb 	bl	800e164 <I2CDRV_Transact>
 800cdce:	0003      	movs	r3, r0
 800cdd0:	7023      	strb	r3, [r4, #0]
						I2CDRV_TRANSACTION_RX, FUELGAUGE_I2C_Callback,
						1000u, sysTime
						);

	if (false == transactGood)
 800cdd2:	197b      	adds	r3, r7, r5
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	4053      	eors	r3, r2
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <FUELGAUGE_ReadWord+0x54>
	{
		return false;
 800cde0:	2300      	movs	r3, #0
 800cde2:	e010      	b.n	800ce06 <FUELGAUGE_ReadWord+0x76>
	}

	while(false == I2CDRV_IsReady(FUELGAUGE_I2C_PORTNO))
 800cde4:	46c0      	nop			; (mov r8, r8)
 800cde6:	2001      	movs	r0, #1
 800cde8:	f001 f99c 	bl	800e124 <I2CDRV_IsReady>
 800cdec:	0003      	movs	r3, r0
 800cdee:	001a      	movs	r2, r3
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	4053      	eors	r3, r2
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1f5      	bne.n	800cde6 <FUELGAUGE_ReadWord+0x56>
	{
		// Wait for transfer
	}

	*p_word = m_fuelgaugeI2CReadResult;
 800cdfa:	4b07      	ldr	r3, [pc, #28]	; (800ce18 <FUELGAUGE_ReadWord+0x88>)
 800cdfc:	881a      	ldrh	r2, [r3, #0]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	801a      	strh	r2, [r3, #0]

	return m_fuelgaugeI2CSuccess;
 800ce02:	4b03      	ldr	r3, [pc, #12]	; (800ce10 <FUELGAUGE_ReadWord+0x80>)
 800ce04:	781b      	ldrb	r3, [r3, #0]
}
 800ce06:	0018      	movs	r0, r3
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	b004      	add	sp, #16
 800ce0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	20001388 	.word	0x20001388
 800ce14:	0800c719 	.word	0x0800c719
 800ce18:	20001386 	.word	0x20001386

0800ce1c <FUELGAUGE_WriteWord>:
 * @retval	bool			false = write unsuccessful
 * 							true = write successful
 */
// ****************************************************************************
static bool FUELGAUGE_WriteWord(const uint8_t memAddress, const uint16_t value)
{
 800ce1c:	b5b0      	push	{r4, r5, r7, lr}
 800ce1e:	b08a      	sub	sp, #40	; 0x28
 800ce20:	af04      	add	r7, sp, #16
 800ce22:	0002      	movs	r2, r0
 800ce24:	1dfb      	adds	r3, r7, #7
 800ce26:	701a      	strb	r2, [r3, #0]
 800ce28:	1d3b      	adds	r3, r7, #4
 800ce2a:	1c0a      	adds	r2, r1, #0
 800ce2c:	801a      	strh	r2, [r3, #0]
	const uint32_t sysTime = HAL_GetTick();
 800ce2e:	f7f6 f94f 	bl	80030d0 <HAL_GetTick>
 800ce32:	0003      	movs	r3, r0
 800ce34:	617b      	str	r3, [r7, #20]
	bool transactGood;
	uint8_t writeData[4u] = { memAddress, (uint8_t)(value & 0xFFu), (uint8_t)(value >> 8u), 0u};
 800ce36:	2108      	movs	r1, #8
 800ce38:	187b      	adds	r3, r7, r1
 800ce3a:	1dfa      	adds	r2, r7, #7
 800ce3c:	7812      	ldrb	r2, [r2, #0]
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	1d3b      	adds	r3, r7, #4
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	187b      	adds	r3, r7, r1
 800ce48:	705a      	strb	r2, [r3, #1]
 800ce4a:	1d3b      	adds	r3, r7, #4
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	0a1b      	lsrs	r3, r3, #8
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	000c      	movs	r4, r1
 800ce56:	193b      	adds	r3, r7, r4
 800ce58:	709a      	strb	r2, [r3, #2]
 800ce5a:	193b      	adds	r3, r7, r4
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	70da      	strb	r2, [r3, #3]

	crc_t crc = crc_8_init(FUELGAUGE_I2C_ADDR);
 800ce60:	2016      	movs	r0, #22
 800ce62:	f7fe ff49 	bl	800bcf8 <crc_8_init>
 800ce66:	0003      	movs	r3, r0
 800ce68:	613b      	str	r3, [r7, #16]
	crc = crc_8_update(crc, writeData, 3u);
 800ce6a:	1939      	adds	r1, r7, r4
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	2203      	movs	r2, #3
 800ce70:	0018      	movs	r0, r3
 800ce72:	f7fe ff15 	bl	800bca0 <crc_8_update>
 800ce76:	0003      	movs	r3, r0
 800ce78:	613b      	str	r3, [r7, #16]

	writeData[3u] = (uint8_t)crc;
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	0021      	movs	r1, r4
 800ce80:	187b      	adds	r3, r7, r1
 800ce82:	70da      	strb	r2, [r3, #3]

	m_fuelgaugeI2CSuccess = false;
 800ce84:	4b17      	ldr	r3, [pc, #92]	; (800cee4 <FUELGAUGE_WriteWord+0xc8>)
 800ce86:	2200      	movs	r2, #0
 800ce88:	701a      	strb	r2, [r3, #0]

	transactGood = I2CDRV_Transact(FUELGAUGE_I2C_PORTNO, FUELGAUGE_I2C_ADDR, writeData, 4u,
 800ce8a:	250f      	movs	r5, #15
 800ce8c:	197c      	adds	r4, r7, r5
 800ce8e:	187a      	adds	r2, r7, r1
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	9303      	str	r3, [sp, #12]
 800ce94:	23fa      	movs	r3, #250	; 0xfa
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	9302      	str	r3, [sp, #8]
 800ce9a:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <FUELGAUGE_WriteWord+0xcc>)
 800ce9c:	9301      	str	r3, [sp, #4]
 800ce9e:	2300      	movs	r3, #0
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	2304      	movs	r3, #4
 800cea4:	2116      	movs	r1, #22
 800cea6:	2001      	movs	r0, #1
 800cea8:	f001 f95c 	bl	800e164 <I2CDRV_Transact>
 800ceac:	0003      	movs	r3, r0
 800ceae:	7023      	strb	r3, [r4, #0]
						I2CDRV_TRANSACTION_TX, FUELGAUGE_I2C_Callback,
						1000u, sysTime
						);

	if (false == transactGood)
 800ceb0:	197b      	adds	r3, r7, r5
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	4053      	eors	r3, r2
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d001      	beq.n	800cec2 <FUELGAUGE_WriteWord+0xa6>
	{
		return false;
 800cebe:	2300      	movs	r3, #0
 800cec0:	e00c      	b.n	800cedc <FUELGAUGE_WriteWord+0xc0>
	}

	while(false == I2CDRV_IsReady(FUELGAUGE_I2C_PORTNO))
 800cec2:	46c0      	nop			; (mov r8, r8)
 800cec4:	2001      	movs	r0, #1
 800cec6:	f001 f92d 	bl	800e124 <I2CDRV_IsReady>
 800ceca:	0003      	movs	r3, r0
 800cecc:	001a      	movs	r2, r3
 800cece:	2301      	movs	r3, #1
 800ced0:	4053      	eors	r3, r2
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1f5      	bne.n	800cec4 <FUELGAUGE_WriteWord+0xa8>
	{
		// Wait for transfer
	}

	return m_fuelgaugeI2CSuccess;
 800ced8:	4b02      	ldr	r3, [pc, #8]	; (800cee4 <FUELGAUGE_WriteWord+0xc8>)
 800ceda:	781b      	ldrb	r3, [r3, #0]
}
 800cedc:	0018      	movs	r0, r3
 800cede:	46bd      	mov	sp, r7
 800cee0:	b006      	add	sp, #24
 800cee2:	bdb0      	pop	{r4, r5, r7, pc}
 800cee4:	20001388 	.word	0x20001388
 800cee8:	0800c719 	.word	0x0800c719

0800ceec <FUELGAUGE_GetSOCFromOCV>:
 * @param	batteryMv	battery voltage in millivolts
 * @retval	uint32_t	index of SOC table * 2^23
 */
// ****************************************************************************
static uint32_t FUELGAUGE_GetSOCFromOCV(uint16_t batteryMv)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	0002      	movs	r2, r0
 800cef4:	1dbb      	adds	r3, r7, #6
 800cef6:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0u;
 800cef8:	230f      	movs	r3, #15
 800cefa:	18fb      	adds	r3, r7, r3
 800cefc:	2200      	movs	r2, #0
 800cefe:	701a      	strb	r2, [r3, #0]

	while ( (m_ocvSocTbl[i] < batteryMv) && (i < 255u) )
 800cf00:	e005      	b.n	800cf0e <FUELGAUGE_GetSOCFromOCV+0x22>
	{
		i++;
 800cf02:	210f      	movs	r1, #15
 800cf04:	187b      	adds	r3, r7, r1
 800cf06:	781a      	ldrb	r2, [r3, #0]
 800cf08:	187b      	adds	r3, r7, r1
 800cf0a:	3201      	adds	r2, #1
 800cf0c:	701a      	strb	r2, [r3, #0]
	while ( (m_ocvSocTbl[i] < batteryMv) && (i < 255u) )
 800cf0e:	210f      	movs	r1, #15
 800cf10:	187b      	adds	r3, r7, r1
 800cf12:	781a      	ldrb	r2, [r3, #0]
 800cf14:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <FUELGAUGE_GetSOCFromOCV+0x50>)
 800cf16:	0052      	lsls	r2, r2, #1
 800cf18:	5ad3      	ldrh	r3, [r2, r3]
 800cf1a:	1dba      	adds	r2, r7, #6
 800cf1c:	8812      	ldrh	r2, [r2, #0]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d903      	bls.n	800cf2a <FUELGAUGE_GetSOCFromOCV+0x3e>
 800cf22:	187b      	adds	r3, r7, r1
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2bff      	cmp	r3, #255	; 0xff
 800cf28:	d1eb      	bne.n	800cf02 <FUELGAUGE_GetSOCFromOCV+0x16>
	}

	return i * (1u << 23u);
 800cf2a:	230f      	movs	r3, #15
 800cf2c:	18fb      	adds	r3, r7, r3
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	05db      	lsls	r3, r3, #23
}
 800cf32:	0018      	movs	r0, r3
 800cf34:	46bd      	mov	sp, r7
 800cf36:	b004      	add	sp, #16
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	46c0      	nop			; (mov r8, r8)
 800cf3c:	20000a00 	.word	0x20000a00

0800cf40 <FUELGAUGE_CalculateSOCInit>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void FUELGAUGE_CalculateSOCInit(void)
{
 800cf40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf42:	b08f      	sub	sp, #60	; 0x3c
 800cf44:	af00      	add	r7, sp, #0
	const BatteryProfile_T * const p_currentBatProfile = BATTERY_GetActiveProfileHandle();
 800cf46:	f7fb f8a9 	bl	800809c <BATTERY_GetActiveProfileHandle>
 800cf4a:	0003      	movs	r3, r0
 800cf4c:	623b      	str	r3, [r7, #32]
	const int16_t * ocvSocTableRef = ocvSocTableNormLipo;
 800cf4e:	4bcb      	ldr	r3, [pc, #812]	; (800d27c <FUELGAUGE_CalculateSOCInit+0x33c>)
 800cf50:	637b      	str	r3, [r7, #52]	; 0x34

	int16_t i;
	uint16_t ocv50 = 3800u;
 800cf52:	231e      	movs	r3, #30
 800cf54:	18fb      	adds	r3, r7, r3
 800cf56:	4aca      	ldr	r2, [pc, #808]	; (800d280 <FUELGAUGE_CalculateSOCInit+0x340>)
 800cf58:	801a      	strh	r2, [r3, #0]
	uint16_t ocv10 = 3649u;
 800cf5a:	231c      	movs	r3, #28
 800cf5c:	18fb      	adds	r3, r7, r3
 800cf5e:	4ac9      	ldr	r2, [pc, #804]	; (800d284 <FUELGAUGE_CalculateSOCInit+0x344>)
 800cf60:	801a      	strh	r2, [r3, #0]
	uint16_t ocv90 = 4077u;
 800cf62:	231a      	movs	r3, #26
 800cf64:	18fb      	adds	r3, r7, r3
 800cf66:	4ac8      	ldr	r2, [pc, #800]	; (800d288 <FUELGAUGE_CalculateSOCInit+0x348>)
 800cf68:	801a      	strh	r2, [r3, #0]

	uint16_t r50 = 1.82 * 156u;
 800cf6a:	2330      	movs	r3, #48	; 0x30
 800cf6c:	18fb      	adds	r3, r7, r3
 800cf6e:	221c      	movs	r2, #28
 800cf70:	32ff      	adds	r2, #255	; 0xff
 800cf72:	801a      	strh	r2, [r3, #0]
	uint16_t r10 = 1.82 * 160u;
 800cf74:	2318      	movs	r3, #24
 800cf76:	18fb      	adds	r3, r7, r3
 800cf78:	2224      	movs	r2, #36	; 0x24
 800cf7a:	32ff      	adds	r2, #255	; 0xff
 800cf7c:	801a      	strh	r2, [r3, #0]
	uint16_t r90 = 1.82 * 155u;
 800cf7e:	2316      	movs	r3, #22
 800cf80:	18fb      	adds	r3, r7, r3
 800cf82:	228d      	movs	r2, #141	; 0x8d
 800cf84:	0052      	lsls	r2, r2, #1
 800cf86:	801a      	strh	r2, [r3, #0]

	uint32_t ocvRef50 = 3791u;
 800cf88:	4bc0      	ldr	r3, [pc, #768]	; (800d28c <FUELGAUGE_CalculateSOCInit+0x34c>)
 800cf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ocvRef10 = 3652u;
 800cf8c:	4bc0      	ldr	r3, [pc, #768]	; (800d290 <FUELGAUGE_CalculateSOCInit+0x350>)
 800cf8e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ocvRef90 = 4070u;
 800cf90:	4bc0      	ldr	r3, [pc, #768]	; (800d294 <FUELGAUGE_CalculateSOCInit+0x354>)
 800cf92:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OCVdSoc50;
	int32_t k2;
	int32_t d1;
	int32_t d2;

	m_c0 = 1820u;
 800cf94:	4bc0      	ldr	r3, [pc, #768]	; (800d298 <FUELGAUGE_CalculateSOCInit+0x358>)
 800cf96:	4ac1      	ldr	r2, [pc, #772]	; (800d29c <FUELGAUGE_CalculateSOCInit+0x35c>)
 800cf98:	801a      	strh	r2, [r3, #0]

	if (NULL == p_currentBatProfile)
 800cf9a:	6a3b      	ldr	r3, [r7, #32]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d100      	bne.n	800cfa2 <FUELGAUGE_CalculateSOCInit+0x62>
 800cfa0:	e2f1      	b.n	800d586 <FUELGAUGE_CalculateSOCInit+0x646>
	{
		return;
	}

	if (BAT_CHEMISTRY_LIFEPO4 == p_currentBatProfile->chemistry)
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d108      	bne.n	800cfbc <FUELGAUGE_CalculateSOCInit+0x7c>
	{
		ocvSocTableRef = ocvSocTableNormLifepo4;
 800cfaa:	4bbd      	ldr	r3, [pc, #756]	; (800d2a0 <FUELGAUGE_CalculateSOCInit+0x360>)
 800cfac:	637b      	str	r3, [r7, #52]	; 0x34
		ocvRef50 = 3243;
 800cfae:	4bbd      	ldr	r3, [pc, #756]	; (800d2a4 <FUELGAUGE_CalculateSOCInit+0x364>)
 800cfb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		ocvRef10 = 3111;
 800cfb2:	4bbd      	ldr	r3, [pc, #756]	; (800d2a8 <FUELGAUGE_CalculateSOCInit+0x368>)
 800cfb4:	62bb      	str	r3, [r7, #40]	; 0x28
		ocvRef90 = 3283;
 800cfb6:	4bbd      	ldr	r3, [pc, #756]	; (800d2ac <FUELGAUGE_CalculateSOCInit+0x36c>)
 800cfb8:	627b      	str	r3, [r7, #36]	; 0x24
 800cfba:	e007      	b.n	800cfcc <FUELGAUGE_CalculateSOCInit+0x8c>
	}
	else
	{
		ocvSocTableRef = ocvSocTableNormLipo;
 800cfbc:	4baf      	ldr	r3, [pc, #700]	; (800d27c <FUELGAUGE_CalculateSOCInit+0x33c>)
 800cfbe:	637b      	str	r3, [r7, #52]	; 0x34
		ocvRef50 = 3791;
 800cfc0:	4bb2      	ldr	r3, [pc, #712]	; (800d28c <FUELGAUGE_CalculateSOCInit+0x34c>)
 800cfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		ocvRef10 = 3652;
 800cfc4:	4bb2      	ldr	r3, [pc, #712]	; (800d290 <FUELGAUGE_CalculateSOCInit+0x350>)
 800cfc6:	62bb      	str	r3, [r7, #40]	; 0x28
		ocvRef90 = 4070;
 800cfc8:	4bb2      	ldr	r3, [pc, #712]	; (800d294 <FUELGAUGE_CalculateSOCInit+0x354>)
 800cfca:	627b      	str	r3, [r7, #36]	; 0x24
	}


	m_c0 = p_currentBatProfile->capacity;
 800cfcc:	6a3b      	ldr	r3, [r7, #32]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	4bb1      	ldr	r3, [pc, #708]	; (800d298 <FUELGAUGE_CalculateSOCInit+0x358>)
 800cfd4:	801a      	strh	r2, [r3, #0]


	ocv50 = (0xFFFF != p_currentBatProfile->ocv50) ?
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	89db      	ldrh	r3, [r3, #14]
 800cfda:	4ab5      	ldr	r2, [pc, #724]	; (800d2b0 <FUELGAUGE_CalculateSOCInit+0x370>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d002      	beq.n	800cfe6 <FUELGAUGE_CalculateSOCInit+0xa6>
 800cfe0:	6a3b      	ldr	r3, [r7, #32]
 800cfe2:	89db      	ldrh	r3, [r3, #14]
 800cfe4:	e00f      	b.n	800d006 <FUELGAUGE_CalculateSOCInit+0xc6>
				p_currentBatProfile->ocv50 :
				((uint16_t)p_currentBatProfile->regulationVoltage + 175u + p_currentBatProfile->cutoffVoltage) * 10u;
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	7a9b      	ldrb	r3, [r3, #10]
 800cfea:	001a      	movs	r2, r3
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	7adb      	ldrb	r3, [r3, #11]
 800cff0:	18d3      	adds	r3, r2, r3
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	1c1a      	adds	r2, r3, #0
 800cff6:	0092      	lsls	r2, r2, #2
 800cff8:	18d3      	adds	r3, r2, r3
 800cffa:	18db      	adds	r3, r3, r3
 800cffc:	b29b      	uxth	r3, r3
	ocv50 = (0xFFFF != p_currentBatProfile->ocv50) ?
 800cffe:	4aad      	ldr	r2, [pc, #692]	; (800d2b4 <FUELGAUGE_CalculateSOCInit+0x374>)
 800d000:	4694      	mov	ip, r2
 800d002:	4463      	add	r3, ip
 800d004:	b29b      	uxth	r3, r3
 800d006:	221e      	movs	r2, #30
 800d008:	18ba      	adds	r2, r7, r2
 800d00a:	8013      	strh	r3, [r2, #0]


	ocv10 = (0xFFFF != p_currentBatProfile->ocv10) ?
 800d00c:	6a3b      	ldr	r3, [r7, #32]
 800d00e:	899b      	ldrh	r3, [r3, #12]
 800d010:	4aa7      	ldr	r2, [pc, #668]	; (800d2b0 <FUELGAUGE_CalculateSOCInit+0x370>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d00b      	beq.n	800d02e <FUELGAUGE_CalculateSOCInit+0xee>
				p_currentBatProfile->ocv10 :
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	899b      	ldrh	r3, [r3, #12]
	ocv10 = (0xFFFF != p_currentBatProfile->ocv10) ?
 800d01a:	0018      	movs	r0, r3
 800d01c:	f7f4 f8a2 	bl	8001164 <__aeabi_i2f>
 800d020:	1c03      	adds	r3, r0, #0
 800d022:	1c18      	adds	r0, r3, #0
 800d024:	f7f3 fa1e 	bl	8000464 <__aeabi_f2uiz>
 800d028:	0003      	movs	r3, r0
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	e010      	b.n	800d050 <FUELGAUGE_CalculateSOCInit+0x110>
				0.96322f * ocv50;
 800d02e:	231e      	movs	r3, #30
 800d030:	18fb      	adds	r3, r7, r3
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	0018      	movs	r0, r3
 800d036:	f7f4 f895 	bl	8001164 <__aeabi_i2f>
 800d03a:	1c03      	adds	r3, r0, #0
 800d03c:	499e      	ldr	r1, [pc, #632]	; (800d2b8 <FUELGAUGE_CalculateSOCInit+0x378>)
 800d03e:	1c18      	adds	r0, r3, #0
 800d040:	f7f3 fd8e 	bl	8000b60 <__aeabi_fmul>
 800d044:	1c03      	adds	r3, r0, #0
	ocv10 = (0xFFFF != p_currentBatProfile->ocv10) ?
 800d046:	1c18      	adds	r0, r3, #0
 800d048:	f7f3 fa0c 	bl	8000464 <__aeabi_f2uiz>
 800d04c:	0003      	movs	r3, r0
 800d04e:	b29b      	uxth	r3, r3
 800d050:	221c      	movs	r2, #28
 800d052:	18ba      	adds	r2, r7, r2
 800d054:	8013      	strh	r3, [r2, #0]


	ocv90 = (0xFFFF != p_currentBatProfile->ocv90) ?
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	8a1b      	ldrh	r3, [r3, #16]
 800d05a:	4a95      	ldr	r2, [pc, #596]	; (800d2b0 <FUELGAUGE_CalculateSOCInit+0x370>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d00b      	beq.n	800d078 <FUELGAUGE_CalculateSOCInit+0x138>
				p_currentBatProfile->ocv90 :
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	8a1b      	ldrh	r3, [r3, #16]
	ocv90 = (0xFFFF != p_currentBatProfile->ocv90) ?
 800d064:	0018      	movs	r0, r3
 800d066:	f7f4 f87d 	bl	8001164 <__aeabi_i2f>
 800d06a:	1c03      	adds	r3, r0, #0
 800d06c:	1c18      	adds	r0, r3, #0
 800d06e:	f7f3 f9f9 	bl	8000464 <__aeabi_f2uiz>
 800d072:	0003      	movs	r3, r0
 800d074:	b29b      	uxth	r3, r3
 800d076:	e010      	b.n	800d09a <FUELGAUGE_CalculateSOCInit+0x15a>
				1.0735f * ocv50;
 800d078:	231e      	movs	r3, #30
 800d07a:	18fb      	adds	r3, r7, r3
 800d07c:	881b      	ldrh	r3, [r3, #0]
 800d07e:	0018      	movs	r0, r3
 800d080:	f7f4 f870 	bl	8001164 <__aeabi_i2f>
 800d084:	1c03      	adds	r3, r0, #0
 800d086:	498d      	ldr	r1, [pc, #564]	; (800d2bc <FUELGAUGE_CalculateSOCInit+0x37c>)
 800d088:	1c18      	adds	r0, r3, #0
 800d08a:	f7f3 fd69 	bl	8000b60 <__aeabi_fmul>
 800d08e:	1c03      	adds	r3, r0, #0
	ocv90 = (0xFFFF != p_currentBatProfile->ocv90) ?
 800d090:	1c18      	adds	r0, r3, #0
 800d092:	f7f3 f9e7 	bl	8000464 <__aeabi_f2uiz>
 800d096:	0003      	movs	r3, r0
 800d098:	b29b      	uxth	r3, r3
 800d09a:	221a      	movs	r2, #26
 800d09c:	18ba      	adds	r2, r7, r2
 800d09e:	8013      	strh	r3, [r2, #0]


	if (0xFFFFu != p_currentBatProfile->r50)
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	8a9b      	ldrh	r3, [r3, #20]
 800d0a4:	4a82      	ldr	r2, [pc, #520]	; (800d2b0 <FUELGAUGE_CalculateSOCInit+0x370>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00e      	beq.n	800d0c8 <FUELGAUGE_CalculateSOCInit+0x188>
	{
		r50 = ((uint32_t)m_c0 * p_currentBatProfile->r50) / 100000u;
 800d0aa:	4b7b      	ldr	r3, [pc, #492]	; (800d298 <FUELGAUGE_CalculateSOCInit+0x358>)
 800d0ac:	881b      	ldrh	r3, [r3, #0]
 800d0ae:	001a      	movs	r2, r3
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	8a9b      	ldrh	r3, [r3, #20]
 800d0b4:	4353      	muls	r3, r2
 800d0b6:	4982      	ldr	r1, [pc, #520]	; (800d2c0 <FUELGAUGE_CalculateSOCInit+0x380>)
 800d0b8:	0018      	movs	r0, r3
 800d0ba:	f7f3 f823 	bl	8000104 <__udivsi3>
 800d0be:	0003      	movs	r3, r0
 800d0c0:	001a      	movs	r2, r3
 800d0c2:	2330      	movs	r3, #48	; 0x30
 800d0c4:	18fb      	adds	r3, r7, r3
 800d0c6:	801a      	strh	r2, [r3, #0]
	}


	r10 = (0xFFFFu != p_currentBatProfile->r10) ?
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	8a5b      	ldrh	r3, [r3, #18]
 800d0cc:	4a78      	ldr	r2, [pc, #480]	; (800d2b0 <FUELGAUGE_CalculateSOCInit+0x370>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d00c      	beq.n	800d0ec <FUELGAUGE_CalculateSOCInit+0x1ac>
			((uint32_t)m_c0 * p_currentBatProfile->r10) / 100000u :
 800d0d2:	4b71      	ldr	r3, [pc, #452]	; (800d298 <FUELGAUGE_CalculateSOCInit+0x358>)
 800d0d4:	881b      	ldrh	r3, [r3, #0]
 800d0d6:	001a      	movs	r2, r3
 800d0d8:	6a3b      	ldr	r3, [r7, #32]
 800d0da:	8a5b      	ldrh	r3, [r3, #18]
 800d0dc:	4353      	muls	r3, r2
 800d0de:	4978      	ldr	r1, [pc, #480]	; (800d2c0 <FUELGAUGE_CalculateSOCInit+0x380>)
 800d0e0:	0018      	movs	r0, r3
 800d0e2:	f7f3 f80f 	bl	8000104 <__udivsi3>
 800d0e6:	0003      	movs	r3, r0
	r10 = (0xFFFFu != p_currentBatProfile->r10) ?
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	e002      	b.n	800d0f2 <FUELGAUGE_CalculateSOCInit+0x1b2>
 800d0ec:	2330      	movs	r3, #48	; 0x30
 800d0ee:	18fb      	adds	r3, r7, r3
 800d0f0:	881b      	ldrh	r3, [r3, #0]
 800d0f2:	2218      	movs	r2, #24
 800d0f4:	18ba      	adds	r2, r7, r2
 800d0f6:	8013      	strh	r3, [r2, #0]
			r50;


	r90 = (0xFFFFu != p_currentBatProfile->r90) ?
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	8adb      	ldrh	r3, [r3, #22]
 800d0fc:	4a6c      	ldr	r2, [pc, #432]	; (800d2b0 <FUELGAUGE_CalculateSOCInit+0x370>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d00c      	beq.n	800d11c <FUELGAUGE_CalculateSOCInit+0x1dc>
			((uint32_t)m_c0 * p_currentBatProfile->r90) / 100000u :
 800d102:	4b65      	ldr	r3, [pc, #404]	; (800d298 <FUELGAUGE_CalculateSOCInit+0x358>)
 800d104:	881b      	ldrh	r3, [r3, #0]
 800d106:	001a      	movs	r2, r3
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	8adb      	ldrh	r3, [r3, #22]
 800d10c:	4353      	muls	r3, r2
 800d10e:	496c      	ldr	r1, [pc, #432]	; (800d2c0 <FUELGAUGE_CalculateSOCInit+0x380>)
 800d110:	0018      	movs	r0, r3
 800d112:	f7f2 fff7 	bl	8000104 <__udivsi3>
 800d116:	0003      	movs	r3, r0
	r90 = (0xFFFFu != p_currentBatProfile->r90) ?
 800d118:	b29b      	uxth	r3, r3
 800d11a:	e002      	b.n	800d122 <FUELGAUGE_CalculateSOCInit+0x1e2>
 800d11c:	2330      	movs	r3, #48	; 0x30
 800d11e:	18fb      	adds	r3, r7, r3
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	2216      	movs	r2, #22
 800d124:	18ba      	adds	r2, r7, r2
 800d126:	8013      	strh	r3, [r2, #0]


	// TODO - sanity check on parameters


	k1 = ((ocvRef90 - ocvRef50) * (230 - 26) * (ocv50 - ocv10)) / 1024u;
 800d128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	221e      	movs	r2, #30
 800d130:	18ba      	adds	r2, r7, r2
 800d132:	8811      	ldrh	r1, [r2, #0]
 800d134:	221c      	movs	r2, #28
 800d136:	18ba      	adds	r2, r7, r2
 800d138:	8812      	ldrh	r2, [r2, #0]
 800d13a:	1a8a      	subs	r2, r1, r2
 800d13c:	4353      	muls	r3, r2
 800d13e:	22cc      	movs	r2, #204	; 0xcc
 800d140:	4353      	muls	r3, r2
 800d142:	0a9b      	lsrs	r3, r3, #10
 800d144:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 26u; i++)
 800d146:	2332      	movs	r3, #50	; 0x32
 800d148:	18fb      	adds	r3, r7, r3
 800d14a:	2200      	movs	r2, #0
 800d14c:	801a      	strh	r2, [r3, #0]
 800d14e:	e065      	b.n	800d21c <FUELGAUGE_CalculateSOCInit+0x2dc>
	{
		m_ocvSocTbl[i] = ocv50 - ((k1 * ocvSocTableRef[i]) / 65536); //ocv50 - (((((int32_t)(4070-3791)*(230-26.0)*dOCV10)>>8)*ocvSocTableNorm[i])>>10);
 800d150:	2332      	movs	r3, #50	; 0x32
 800d152:	18fb      	adds	r3, r7, r3
 800d154:	2200      	movs	r2, #0
 800d156:	5e9b      	ldrsh	r3, [r3, r2]
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d15c:	18d3      	adds	r3, r2, r3
 800d15e:	2200      	movs	r2, #0
 800d160:	5e9b      	ldrsh	r3, [r3, r2]
 800d162:	001a      	movs	r2, r3
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	4353      	muls	r3, r2
 800d168:	2b00      	cmp	r3, #0
 800d16a:	da02      	bge.n	800d172 <FUELGAUGE_CalculateSOCInit+0x232>
 800d16c:	4a50      	ldr	r2, [pc, #320]	; (800d2b0 <FUELGAUGE_CalculateSOCInit+0x370>)
 800d16e:	4694      	mov	ip, r2
 800d170:	4463      	add	r3, ip
 800d172:	141b      	asrs	r3, r3, #16
 800d174:	425b      	negs	r3, r3
 800d176:	b299      	uxth	r1, r3
 800d178:	2632      	movs	r6, #50	; 0x32
 800d17a:	19bb      	adds	r3, r7, r6
 800d17c:	2200      	movs	r2, #0
 800d17e:	5e9a      	ldrsh	r2, [r3, r2]
 800d180:	231e      	movs	r3, #30
 800d182:	18fb      	adds	r3, r7, r3
 800d184:	881b      	ldrh	r3, [r3, #0]
 800d186:	18cb      	adds	r3, r1, r3
 800d188:	b299      	uxth	r1, r3
 800d18a:	4b4e      	ldr	r3, [pc, #312]	; (800d2c4 <FUELGAUGE_CalculateSOCInit+0x384>)
 800d18c:	0052      	lsls	r2, r2, #1
 800d18e:	52d1      	strh	r1, [r2, r3]
		m_rSocTbl[i] = 65535 / (r50 + (r50 - r10) * (i - 128.0f) / (128 - 26));
 800d190:	2530      	movs	r5, #48	; 0x30
 800d192:	197b      	adds	r3, r7, r5
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	0018      	movs	r0, r3
 800d198:	f7f3 ffe4 	bl	8001164 <__aeabi_i2f>
 800d19c:	1c04      	adds	r4, r0, #0
 800d19e:	197b      	adds	r3, r7, r5
 800d1a0:	881a      	ldrh	r2, [r3, #0]
 800d1a2:	2318      	movs	r3, #24
 800d1a4:	18fb      	adds	r3, r7, r3
 800d1a6:	881b      	ldrh	r3, [r3, #0]
 800d1a8:	1ad3      	subs	r3, r2, r3
 800d1aa:	0018      	movs	r0, r3
 800d1ac:	f7f3 ffda 	bl	8001164 <__aeabi_i2f>
 800d1b0:	1c05      	adds	r5, r0, #0
 800d1b2:	19bb      	adds	r3, r7, r6
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	5e9b      	ldrsh	r3, [r3, r2]
 800d1b8:	0018      	movs	r0, r3
 800d1ba:	f7f3 ffd3 	bl	8001164 <__aeabi_i2f>
 800d1be:	1c03      	adds	r3, r0, #0
 800d1c0:	2186      	movs	r1, #134	; 0x86
 800d1c2:	05c9      	lsls	r1, r1, #23
 800d1c4:	1c18      	adds	r0, r3, #0
 800d1c6:	f7f3 fde5 	bl	8000d94 <__aeabi_fsub>
 800d1ca:	1c03      	adds	r3, r0, #0
 800d1cc:	1c19      	adds	r1, r3, #0
 800d1ce:	1c28      	adds	r0, r5, #0
 800d1d0:	f7f3 fcc6 	bl	8000b60 <__aeabi_fmul>
 800d1d4:	1c03      	adds	r3, r0, #0
 800d1d6:	493c      	ldr	r1, [pc, #240]	; (800d2c8 <FUELGAUGE_CalculateSOCInit+0x388>)
 800d1d8:	1c18      	adds	r0, r3, #0
 800d1da:	f7f3 faf7 	bl	80007cc <__aeabi_fdiv>
 800d1de:	1c03      	adds	r3, r0, #0
 800d1e0:	1c19      	adds	r1, r3, #0
 800d1e2:	1c20      	adds	r0, r4, #0
 800d1e4:	f7f3 f956 	bl	8000494 <__aeabi_fadd>
 800d1e8:	1c03      	adds	r3, r0, #0
 800d1ea:	1c19      	adds	r1, r3, #0
 800d1ec:	4837      	ldr	r0, [pc, #220]	; (800d2cc <FUELGAUGE_CalculateSOCInit+0x38c>)
 800d1ee:	f7f3 faed 	bl	80007cc <__aeabi_fdiv>
 800d1f2:	1c03      	adds	r3, r0, #0
 800d1f4:	1c1a      	adds	r2, r3, #0
 800d1f6:	19bb      	adds	r3, r7, r6
 800d1f8:	2400      	movs	r4, #0
 800d1fa:	5f1c      	ldrsh	r4, [r3, r4]
 800d1fc:	1c10      	adds	r0, r2, #0
 800d1fe:	f7f3 f931 	bl	8000464 <__aeabi_f2uiz>
 800d202:	0003      	movs	r3, r0
 800d204:	b299      	uxth	r1, r3
 800d206:	4b32      	ldr	r3, [pc, #200]	; (800d2d0 <FUELGAUGE_CalculateSOCInit+0x390>)
 800d208:	0062      	lsls	r2, r4, #1
 800d20a:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < 26u; i++)
 800d20c:	19bb      	adds	r3, r7, r6
 800d20e:	2200      	movs	r2, #0
 800d210:	5e9b      	ldrsh	r3, [r3, r2]
 800d212:	b29b      	uxth	r3, r3
 800d214:	3301      	adds	r3, #1
 800d216:	b29a      	uxth	r2, r3
 800d218:	19bb      	adds	r3, r7, r6
 800d21a:	801a      	strh	r2, [r3, #0]
 800d21c:	2532      	movs	r5, #50	; 0x32
 800d21e:	197b      	adds	r3, r7, r5
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	2b19      	cmp	r3, #25
 800d224:	d994      	bls.n	800d150 <FUELGAUGE_CalculateSOCInit+0x210>
	}

	OCVdSoc50 = (((uint32_t)ocv50) * 8196u) / (230u - 26u);
 800d226:	241e      	movs	r4, #30
 800d228:	193b      	adds	r3, r7, r4
 800d22a:	881a      	ldrh	r2, [r3, #0]
 800d22c:	0013      	movs	r3, r2
 800d22e:	02db      	lsls	r3, r3, #11
 800d230:	189b      	adds	r3, r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	21cc      	movs	r1, #204	; 0xcc
 800d236:	0018      	movs	r0, r3
 800d238:	f7f2 ff64 	bl	8000104 <__udivsi3>
 800d23c:	0003      	movs	r3, r0
 800d23e:	60fb      	str	r3, [r7, #12]

	k1 = ((ocvRef90 - ocvRef50) * (ocv50 - ocv10)) / 16;
 800d240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d244:	1ad3      	subs	r3, r2, r3
 800d246:	0020      	movs	r0, r4
 800d248:	183a      	adds	r2, r7, r0
 800d24a:	8811      	ldrh	r1, [r2, #0]
 800d24c:	221c      	movs	r2, #28
 800d24e:	18ba      	adds	r2, r7, r2
 800d250:	8812      	ldrh	r2, [r2, #0]
 800d252:	1a8a      	subs	r2, r1, r2
 800d254:	4353      	muls	r3, r2
 800d256:	091b      	lsrs	r3, r3, #4
 800d258:	613b      	str	r3, [r7, #16]
	k2 = ((ocvRef50 - ocvRef10) * (ocv90 - ocv50)) / 16;
 800d25a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	1ad3      	subs	r3, r2, r3
 800d260:	221a      	movs	r2, #26
 800d262:	18ba      	adds	r2, r7, r2
 800d264:	8811      	ldrh	r1, [r2, #0]
 800d266:	183a      	adds	r2, r7, r0
 800d268:	8812      	ldrh	r2, [r2, #0]
 800d26a:	1a8a      	subs	r2, r1, r2
 800d26c:	4353      	muls	r3, r2
 800d26e:	091b      	lsrs	r3, r3, #4
 800d270:	60bb      	str	r3, [r7, #8]

	for (i = 26; i < 128; i++)
 800d272:	197b      	adds	r3, r7, r5
 800d274:	221a      	movs	r2, #26
 800d276:	801a      	strh	r2, [r3, #0]
 800d278:	e0cf      	b.n	800d41a <FUELGAUGE_CalculateSOCInit+0x4da>
 800d27a:	46c0      	nop			; (mov r8, r8)
 800d27c:	08013f64 	.word	0x08013f64
 800d280:	00000ed8 	.word	0x00000ed8
 800d284:	00000e41 	.word	0x00000e41
 800d288:	00000fed 	.word	0x00000fed
 800d28c:	00000ecf 	.word	0x00000ecf
 800d290:	00000e44 	.word	0x00000e44
 800d294:	00000fe6 	.word	0x00000fe6
 800d298:	20000f00 	.word	0x20000f00
 800d29c:	0000071c 	.word	0x0000071c
 800d2a0:	08014164 	.word	0x08014164
 800d2a4:	00000cab 	.word	0x00000cab
 800d2a8:	00000c27 	.word	0x00000c27
 800d2ac:	00000cd3 	.word	0x00000cd3
 800d2b0:	0000ffff 	.word	0x0000ffff
 800d2b4:	000006d6 	.word	0x000006d6
 800d2b8:	3f769596 	.word	0x3f769596
 800d2bc:	3f896873 	.word	0x3f896873
 800d2c0:	000186a0 	.word	0x000186a0
 800d2c4:	20000a00 	.word	0x20000a00
 800d2c8:	42cc0000 	.word	0x42cc0000
 800d2cc:	477fff00 	.word	0x477fff00
 800d2d0:	20000c00 	.word	0x20000c00
	{
		d1= (OCVdSoc50 - ((k1 * ocvSocTableRef[i]) / 512)) * (230.0f - i); //ocv50/(230-26.0) - (((((int32_t)(4070-3791)*dOCV10))*ocvSocTableNorm[i])>>18);
 800d2d4:	2332      	movs	r3, #50	; 0x32
 800d2d6:	18fb      	adds	r3, r7, r3
 800d2d8:	2200      	movs	r2, #0
 800d2da:	5e9b      	ldrsh	r3, [r3, r2]
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2e0:	18d3      	adds	r3, r2, r3
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	5e9b      	ldrsh	r3, [r3, r2]
 800d2e6:	001a      	movs	r2, r3
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	4353      	muls	r3, r2
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	da02      	bge.n	800d2f6 <FUELGAUGE_CalculateSOCInit+0x3b6>
 800d2f0:	4aa7      	ldr	r2, [pc, #668]	; (800d590 <FUELGAUGE_CalculateSOCInit+0x650>)
 800d2f2:	4694      	mov	ip, r2
 800d2f4:	4463      	add	r3, ip
 800d2f6:	125b      	asrs	r3, r3, #9
 800d2f8:	001a      	movs	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	1a9b      	subs	r3, r3, r2
 800d2fe:	0018      	movs	r0, r3
 800d300:	f7f3 ff76 	bl	80011f0 <__aeabi_ui2f>
 800d304:	1c04      	adds	r4, r0, #0
 800d306:	2532      	movs	r5, #50	; 0x32
 800d308:	197b      	adds	r3, r7, r5
 800d30a:	2200      	movs	r2, #0
 800d30c:	5e9b      	ldrsh	r3, [r3, r2]
 800d30e:	0018      	movs	r0, r3
 800d310:	f7f3 ff28 	bl	8001164 <__aeabi_i2f>
 800d314:	1c03      	adds	r3, r0, #0
 800d316:	1c19      	adds	r1, r3, #0
 800d318:	489e      	ldr	r0, [pc, #632]	; (800d594 <FUELGAUGE_CalculateSOCInit+0x654>)
 800d31a:	f7f3 fd3b 	bl	8000d94 <__aeabi_fsub>
 800d31e:	1c03      	adds	r3, r0, #0
 800d320:	1c19      	adds	r1, r3, #0
 800d322:	1c20      	adds	r0, r4, #0
 800d324:	f7f3 fc1c 	bl	8000b60 <__aeabi_fmul>
 800d328:	1c03      	adds	r3, r0, #0
 800d32a:	1c18      	adds	r0, r3, #0
 800d32c:	f7f3 fefa 	bl	8001124 <__aeabi_f2iz>
 800d330:	0003      	movs	r3, r0
 800d332:	607b      	str	r3, [r7, #4]
		d2= (OCVdSoc50 - ((k2 * ocvSocTableRef[i]) / 512)) * (i - 26); //ocv50/(230-26.0) + (((((int32_t)(3652-3791)*dOCV90))*ocvSocTableNorm[i])>>18);
 800d334:	197b      	adds	r3, r7, r5
 800d336:	2200      	movs	r2, #0
 800d338:	5e9b      	ldrsh	r3, [r3, r2]
 800d33a:	005b      	lsls	r3, r3, #1
 800d33c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d33e:	18d3      	adds	r3, r2, r3
 800d340:	2200      	movs	r2, #0
 800d342:	5e9b      	ldrsh	r3, [r3, r2]
 800d344:	001a      	movs	r2, r3
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	4353      	muls	r3, r2
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	da02      	bge.n	800d354 <FUELGAUGE_CalculateSOCInit+0x414>
 800d34e:	4a90      	ldr	r2, [pc, #576]	; (800d590 <FUELGAUGE_CalculateSOCInit+0x650>)
 800d350:	4694      	mov	ip, r2
 800d352:	4463      	add	r3, ip
 800d354:	125b      	asrs	r3, r3, #9
 800d356:	001a      	movs	r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	1a9b      	subs	r3, r3, r2
 800d35c:	2232      	movs	r2, #50	; 0x32
 800d35e:	18ba      	adds	r2, r7, r2
 800d360:	2100      	movs	r1, #0
 800d362:	5e52      	ldrsh	r2, [r2, r1]
 800d364:	3a1a      	subs	r2, #26
 800d366:	4353      	muls	r3, r2
 800d368:	603b      	str	r3, [r7, #0]
		m_ocvSocTbl[i] = (d2 + d1) / 8192;
 800d36a:	683a      	ldr	r2, [r7, #0]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	18d3      	adds	r3, r2, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	da02      	bge.n	800d37a <FUELGAUGE_CalculateSOCInit+0x43a>
 800d374:	4a88      	ldr	r2, [pc, #544]	; (800d598 <FUELGAUGE_CalculateSOCInit+0x658>)
 800d376:	4694      	mov	ip, r2
 800d378:	4463      	add	r3, ip
 800d37a:	135b      	asrs	r3, r3, #13
 800d37c:	0019      	movs	r1, r3
 800d37e:	2632      	movs	r6, #50	; 0x32
 800d380:	19bb      	adds	r3, r7, r6
 800d382:	2200      	movs	r2, #0
 800d384:	5e9a      	ldrsh	r2, [r3, r2]
 800d386:	b289      	uxth	r1, r1
 800d388:	4b84      	ldr	r3, [pc, #528]	; (800d59c <FUELGAUGE_CalculateSOCInit+0x65c>)
 800d38a:	0052      	lsls	r2, r2, #1
 800d38c:	52d1      	strh	r1, [r2, r3]
		m_rSocTbl[i] = 65535 / (r50 + (r50 - r10) * (i - 128.0f) / (128 - 26));
 800d38e:	2530      	movs	r5, #48	; 0x30
 800d390:	197b      	adds	r3, r7, r5
 800d392:	881b      	ldrh	r3, [r3, #0]
 800d394:	0018      	movs	r0, r3
 800d396:	f7f3 fee5 	bl	8001164 <__aeabi_i2f>
 800d39a:	1c04      	adds	r4, r0, #0
 800d39c:	197b      	adds	r3, r7, r5
 800d39e:	881a      	ldrh	r2, [r3, #0]
 800d3a0:	2318      	movs	r3, #24
 800d3a2:	18fb      	adds	r3, r7, r3
 800d3a4:	881b      	ldrh	r3, [r3, #0]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	0018      	movs	r0, r3
 800d3aa:	f7f3 fedb 	bl	8001164 <__aeabi_i2f>
 800d3ae:	1c05      	adds	r5, r0, #0
 800d3b0:	19bb      	adds	r3, r7, r6
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	5e9b      	ldrsh	r3, [r3, r2]
 800d3b6:	0018      	movs	r0, r3
 800d3b8:	f7f3 fed4 	bl	8001164 <__aeabi_i2f>
 800d3bc:	1c03      	adds	r3, r0, #0
 800d3be:	2186      	movs	r1, #134	; 0x86
 800d3c0:	05c9      	lsls	r1, r1, #23
 800d3c2:	1c18      	adds	r0, r3, #0
 800d3c4:	f7f3 fce6 	bl	8000d94 <__aeabi_fsub>
 800d3c8:	1c03      	adds	r3, r0, #0
 800d3ca:	1c19      	adds	r1, r3, #0
 800d3cc:	1c28      	adds	r0, r5, #0
 800d3ce:	f7f3 fbc7 	bl	8000b60 <__aeabi_fmul>
 800d3d2:	1c03      	adds	r3, r0, #0
 800d3d4:	4972      	ldr	r1, [pc, #456]	; (800d5a0 <FUELGAUGE_CalculateSOCInit+0x660>)
 800d3d6:	1c18      	adds	r0, r3, #0
 800d3d8:	f7f3 f9f8 	bl	80007cc <__aeabi_fdiv>
 800d3dc:	1c03      	adds	r3, r0, #0
 800d3de:	1c19      	adds	r1, r3, #0
 800d3e0:	1c20      	adds	r0, r4, #0
 800d3e2:	f7f3 f857 	bl	8000494 <__aeabi_fadd>
 800d3e6:	1c03      	adds	r3, r0, #0
 800d3e8:	1c19      	adds	r1, r3, #0
 800d3ea:	486e      	ldr	r0, [pc, #440]	; (800d5a4 <FUELGAUGE_CalculateSOCInit+0x664>)
 800d3ec:	f7f3 f9ee 	bl	80007cc <__aeabi_fdiv>
 800d3f0:	1c03      	adds	r3, r0, #0
 800d3f2:	1c1a      	adds	r2, r3, #0
 800d3f4:	19bb      	adds	r3, r7, r6
 800d3f6:	2400      	movs	r4, #0
 800d3f8:	5f1c      	ldrsh	r4, [r3, r4]
 800d3fa:	1c10      	adds	r0, r2, #0
 800d3fc:	f7f3 f832 	bl	8000464 <__aeabi_f2uiz>
 800d400:	0003      	movs	r3, r0
 800d402:	b299      	uxth	r1, r3
 800d404:	4b68      	ldr	r3, [pc, #416]	; (800d5a8 <FUELGAUGE_CalculateSOCInit+0x668>)
 800d406:	0062      	lsls	r2, r4, #1
 800d408:	52d1      	strh	r1, [r2, r3]
	for (i = 26; i < 128; i++)
 800d40a:	19bb      	adds	r3, r7, r6
 800d40c:	2200      	movs	r2, #0
 800d40e:	5e9b      	ldrsh	r3, [r3, r2]
 800d410:	b29b      	uxth	r3, r3
 800d412:	3301      	adds	r3, #1
 800d414:	b29a      	uxth	r2, r3
 800d416:	19bb      	adds	r3, r7, r6
 800d418:	801a      	strh	r2, [r3, #0]
 800d41a:	2032      	movs	r0, #50	; 0x32
 800d41c:	183b      	adds	r3, r7, r0
 800d41e:	2200      	movs	r2, #0
 800d420:	5e9b      	ldrsh	r3, [r3, r2]
 800d422:	2b7f      	cmp	r3, #127	; 0x7f
 800d424:	dc00      	bgt.n	800d428 <FUELGAUGE_CalculateSOCInit+0x4e8>
 800d426:	e755      	b.n	800d2d4 <FUELGAUGE_CalculateSOCInit+0x394>
	}

	k2 = ((ocvRef50 - ocvRef10) * (230 - 26) * (ocv90 - ocv50)) / 1024;
 800d428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	221a      	movs	r2, #26
 800d430:	18ba      	adds	r2, r7, r2
 800d432:	8811      	ldrh	r1, [r2, #0]
 800d434:	221e      	movs	r2, #30
 800d436:	18ba      	adds	r2, r7, r2
 800d438:	8812      	ldrh	r2, [r2, #0]
 800d43a:	1a8a      	subs	r2, r1, r2
 800d43c:	4353      	muls	r3, r2
 800d43e:	22cc      	movs	r2, #204	; 0xcc
 800d440:	4353      	muls	r3, r2
 800d442:	0a9b      	lsrs	r3, r3, #10
 800d444:	60bb      	str	r3, [r7, #8]

	// TODO - int converts to uint!
	for (i = 128; i < 256; i++)
 800d446:	183b      	adds	r3, r7, r0
 800d448:	2280      	movs	r2, #128	; 0x80
 800d44a:	801a      	strh	r2, [r3, #0]
 800d44c:	e065      	b.n	800d51a <FUELGAUGE_CalculateSOCInit+0x5da>
	{
		m_ocvSocTbl[i] = ocv50 - ((k2 * ocvSocTableRef[i]) / 65536); //ocv50 + (((((int32_t)(3652-3791)*(230-26.0)*dOCV90)>>8)*ocvSocTableNorm[i])>>10);
 800d44e:	2332      	movs	r3, #50	; 0x32
 800d450:	18fb      	adds	r3, r7, r3
 800d452:	2200      	movs	r2, #0
 800d454:	5e9b      	ldrsh	r3, [r3, r2]
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d45a:	18d3      	adds	r3, r2, r3
 800d45c:	2200      	movs	r2, #0
 800d45e:	5e9b      	ldrsh	r3, [r3, r2]
 800d460:	001a      	movs	r2, r3
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	4353      	muls	r3, r2
 800d466:	2b00      	cmp	r3, #0
 800d468:	da02      	bge.n	800d470 <FUELGAUGE_CalculateSOCInit+0x530>
 800d46a:	4a50      	ldr	r2, [pc, #320]	; (800d5ac <FUELGAUGE_CalculateSOCInit+0x66c>)
 800d46c:	4694      	mov	ip, r2
 800d46e:	4463      	add	r3, ip
 800d470:	141b      	asrs	r3, r3, #16
 800d472:	425b      	negs	r3, r3
 800d474:	b299      	uxth	r1, r3
 800d476:	2632      	movs	r6, #50	; 0x32
 800d478:	19bb      	adds	r3, r7, r6
 800d47a:	2200      	movs	r2, #0
 800d47c:	5e9a      	ldrsh	r2, [r3, r2]
 800d47e:	231e      	movs	r3, #30
 800d480:	18fb      	adds	r3, r7, r3
 800d482:	881b      	ldrh	r3, [r3, #0]
 800d484:	18cb      	adds	r3, r1, r3
 800d486:	b299      	uxth	r1, r3
 800d488:	4b44      	ldr	r3, [pc, #272]	; (800d59c <FUELGAUGE_CalculateSOCInit+0x65c>)
 800d48a:	0052      	lsls	r2, r2, #1
 800d48c:	52d1      	strh	r1, [r2, r3]
		m_rSocTbl[i] = 65535 / (r50 + (r50 - r90) * (i - 128.0f) / (128 - 230));
 800d48e:	2530      	movs	r5, #48	; 0x30
 800d490:	197b      	adds	r3, r7, r5
 800d492:	881b      	ldrh	r3, [r3, #0]
 800d494:	0018      	movs	r0, r3
 800d496:	f7f3 fe65 	bl	8001164 <__aeabi_i2f>
 800d49a:	1c04      	adds	r4, r0, #0
 800d49c:	197b      	adds	r3, r7, r5
 800d49e:	881a      	ldrh	r2, [r3, #0]
 800d4a0:	2316      	movs	r3, #22
 800d4a2:	18fb      	adds	r3, r7, r3
 800d4a4:	881b      	ldrh	r3, [r3, #0]
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	0018      	movs	r0, r3
 800d4aa:	f7f3 fe5b 	bl	8001164 <__aeabi_i2f>
 800d4ae:	1c05      	adds	r5, r0, #0
 800d4b0:	19bb      	adds	r3, r7, r6
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	5e9b      	ldrsh	r3, [r3, r2]
 800d4b6:	0018      	movs	r0, r3
 800d4b8:	f7f3 fe54 	bl	8001164 <__aeabi_i2f>
 800d4bc:	1c03      	adds	r3, r0, #0
 800d4be:	2186      	movs	r1, #134	; 0x86
 800d4c0:	05c9      	lsls	r1, r1, #23
 800d4c2:	1c18      	adds	r0, r3, #0
 800d4c4:	f7f3 fc66 	bl	8000d94 <__aeabi_fsub>
 800d4c8:	1c03      	adds	r3, r0, #0
 800d4ca:	1c19      	adds	r1, r3, #0
 800d4cc:	1c28      	adds	r0, r5, #0
 800d4ce:	f7f3 fb47 	bl	8000b60 <__aeabi_fmul>
 800d4d2:	1c03      	adds	r3, r0, #0
 800d4d4:	4936      	ldr	r1, [pc, #216]	; (800d5b0 <FUELGAUGE_CalculateSOCInit+0x670>)
 800d4d6:	1c18      	adds	r0, r3, #0
 800d4d8:	f7f3 f978 	bl	80007cc <__aeabi_fdiv>
 800d4dc:	1c03      	adds	r3, r0, #0
 800d4de:	1c19      	adds	r1, r3, #0
 800d4e0:	1c20      	adds	r0, r4, #0
 800d4e2:	f7f2 ffd7 	bl	8000494 <__aeabi_fadd>
 800d4e6:	1c03      	adds	r3, r0, #0
 800d4e8:	1c19      	adds	r1, r3, #0
 800d4ea:	482e      	ldr	r0, [pc, #184]	; (800d5a4 <FUELGAUGE_CalculateSOCInit+0x664>)
 800d4ec:	f7f3 f96e 	bl	80007cc <__aeabi_fdiv>
 800d4f0:	1c03      	adds	r3, r0, #0
 800d4f2:	1c1a      	adds	r2, r3, #0
 800d4f4:	19bb      	adds	r3, r7, r6
 800d4f6:	2400      	movs	r4, #0
 800d4f8:	5f1c      	ldrsh	r4, [r3, r4]
 800d4fa:	1c10      	adds	r0, r2, #0
 800d4fc:	f7f2 ffb2 	bl	8000464 <__aeabi_f2uiz>
 800d500:	0003      	movs	r3, r0
 800d502:	b299      	uxth	r1, r3
 800d504:	4b28      	ldr	r3, [pc, #160]	; (800d5a8 <FUELGAUGE_CalculateSOCInit+0x668>)
 800d506:	0062      	lsls	r2, r4, #1
 800d508:	52d1      	strh	r1, [r2, r3]
	for (i = 128; i < 256; i++)
 800d50a:	19bb      	adds	r3, r7, r6
 800d50c:	2200      	movs	r2, #0
 800d50e:	5e9b      	ldrsh	r3, [r3, r2]
 800d510:	b29b      	uxth	r3, r3
 800d512:	3301      	adds	r3, #1
 800d514:	b29a      	uxth	r2, r3
 800d516:	19bb      	adds	r3, r7, r6
 800d518:	801a      	strh	r2, [r3, #0]
 800d51a:	2232      	movs	r2, #50	; 0x32
 800d51c:	18bb      	adds	r3, r7, r2
 800d51e:	2100      	movs	r1, #0
 800d520:	5e5b      	ldrsh	r3, [r3, r1]
 800d522:	2bff      	cmp	r3, #255	; 0xff
 800d524:	dd93      	ble.n	800d44e <FUELGAUGE_CalculateSOCInit+0x50e>
	}

	// TODO - this hurts my head.
	for (i = -127; i < 129; i++)
 800d526:	18bb      	adds	r3, r7, r2
 800d528:	227f      	movs	r2, #127	; 0x7f
 800d52a:	4252      	negs	r2, r2
 800d52c:	801a      	strh	r2, [r3, #0]
 800d52e:	e023      	b.n	800d578 <FUELGAUGE_CalculateSOCInit+0x638>
	{
		m_rSocTempCompensateTbl[(uint8_t)i] = (i < 21) ? 255ul * 32 / (32 + 2 * (20 - i)) : 255; // 1 + 2*(20-batteryTemp)/(20-(-12)), krtemp ~ 3, temperature=i
 800d530:	2232      	movs	r2, #50	; 0x32
 800d532:	18bb      	adds	r3, r7, r2
 800d534:	2100      	movs	r1, #0
 800d536:	5e5b      	ldrsh	r3, [r3, r1]
 800d538:	2b14      	cmp	r3, #20
 800d53a:	dc0d      	bgt.n	800d558 <FUELGAUGE_CalculateSOCInit+0x618>
 800d53c:	18bb      	adds	r3, r7, r2
 800d53e:	2200      	movs	r2, #0
 800d540:	5e9b      	ldrsh	r3, [r3, r2]
 800d542:	2224      	movs	r2, #36	; 0x24
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	0019      	movs	r1, r3
 800d54a:	23ff      	movs	r3, #255	; 0xff
 800d54c:	0158      	lsls	r0, r3, #5
 800d54e:	f7f2 fdd9 	bl	8000104 <__udivsi3>
 800d552:	0003      	movs	r3, r0
 800d554:	b2da      	uxtb	r2, r3
 800d556:	e000      	b.n	800d55a <FUELGAUGE_CalculateSOCInit+0x61a>
 800d558:	22ff      	movs	r2, #255	; 0xff
 800d55a:	2032      	movs	r0, #50	; 0x32
 800d55c:	183b      	adds	r3, r7, r0
 800d55e:	881b      	ldrh	r3, [r3, #0]
 800d560:	b2db      	uxtb	r3, r3
 800d562:	0019      	movs	r1, r3
 800d564:	4b13      	ldr	r3, [pc, #76]	; (800d5b4 <FUELGAUGE_CalculateSOCInit+0x674>)
 800d566:	545a      	strb	r2, [r3, r1]
	for (i = -127; i < 129; i++)
 800d568:	183b      	adds	r3, r7, r0
 800d56a:	2200      	movs	r2, #0
 800d56c:	5e9b      	ldrsh	r3, [r3, r2]
 800d56e:	b29b      	uxth	r3, r3
 800d570:	3301      	adds	r3, #1
 800d572:	b29a      	uxth	r2, r3
 800d574:	183b      	adds	r3, r7, r0
 800d576:	801a      	strh	r2, [r3, #0]
 800d578:	2332      	movs	r3, #50	; 0x32
 800d57a:	18fb      	adds	r3, r7, r3
 800d57c:	2200      	movs	r2, #0
 800d57e:	5e9b      	ldrsh	r3, [r3, r2]
 800d580:	2b80      	cmp	r3, #128	; 0x80
 800d582:	ddd5      	ble.n	800d530 <FUELGAUGE_CalculateSOCInit+0x5f0>
 800d584:	e000      	b.n	800d588 <FUELGAUGE_CalculateSOCInit+0x648>
		return;
 800d586:	46c0      	nop			; (mov r8, r8)
	}

	//batteryCurrent = 0;
}
 800d588:	46bd      	mov	sp, r7
 800d58a:	b00f      	add	sp, #60	; 0x3c
 800d58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d58e:	46c0      	nop			; (mov r8, r8)
 800d590:	000001ff 	.word	0x000001ff
 800d594:	43660000 	.word	0x43660000
 800d598:	00001fff 	.word	0x00001fff
 800d59c:	20000a00 	.word	0x20000a00
 800d5a0:	42cc0000 	.word	0x42cc0000
 800d5a4:	477fff00 	.word	0x477fff00
 800d5a8:	20000c00 	.word	0x20000c00
 800d5ac:	0000ffff 	.word	0x0000ffff
 800d5b0:	c2cc0000 	.word	0xc2cc0000
 800d5b4:	20000e00 	.word	0x20000e00

0800d5b8 <FUELGAUGE_UpdateCalculateSOC>:
 * @param	dt				period in mS since the last update
 * @retval	none
 */
// ****************************************************************************
static void FUELGAUGE_UpdateCalculateSOC(const uint16_t batteryMv, const uint32_t dt)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b086      	sub	sp, #24
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	0002      	movs	r2, r0
 800d5c0:	6039      	str	r1, [r7, #0]
 800d5c2:	1dbb      	adds	r3, r7, #6
 800d5c4:	801a      	strh	r2, [r3, #0]
	const uint32_t ind = m_soc >> 23u;
 800d5c6:	4b2f      	ldr	r3, [pc, #188]	; (800d684 <FUELGAUGE_UpdateCalculateSOC+0xcc>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	0ddb      	lsrs	r3, r3, #23
 800d5cc:	617b      	str	r3, [r7, #20]
	const int32_t dif = m_ocvSocTbl[ind] - batteryMv;
 800d5ce:	4b2e      	ldr	r3, [pc, #184]	; (800d688 <FUELGAUGE_UpdateCalculateSOC+0xd0>)
 800d5d0:	697a      	ldr	r2, [r7, #20]
 800d5d2:	0052      	lsls	r2, r2, #1
 800d5d4:	5ad3      	ldrh	r3, [r2, r3]
 800d5d6:	001a      	movs	r2, r3
 800d5d8:	1dbb      	adds	r3, r7, #6
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	613b      	str	r3, [r7, #16]
	const uint16_t rsoc = ((uint32_t)m_rSocTbl[ind] * m_rSocTempCompensateTbl[(uint8_t)m_batteryTemperaturePt1]) >> 8;
 800d5e0:	4b2a      	ldr	r3, [pc, #168]	; (800d68c <FUELGAUGE_UpdateCalculateSOC+0xd4>)
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	0052      	lsls	r2, r2, #1
 800d5e6:	5ad3      	ldrh	r3, [r2, r3]
 800d5e8:	001a      	movs	r2, r3
 800d5ea:	4b29      	ldr	r3, [pc, #164]	; (800d690 <FUELGAUGE_UpdateCalculateSOC+0xd8>)
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	5e5b      	ldrsh	r3, [r3, r1]
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	0019      	movs	r1, r3
 800d5f4:	4b27      	ldr	r3, [pc, #156]	; (800d694 <FUELGAUGE_UpdateCalculateSOC+0xdc>)
 800d5f6:	5c5b      	ldrb	r3, [r3, r1]
 800d5f8:	4353      	muls	r3, r2
 800d5fa:	0a1a      	lsrs	r2, r3, #8
 800d5fc:	210e      	movs	r1, #14
 800d5fe:	187b      	adds	r3, r7, r1
 800d600:	801a      	strh	r2, [r3, #0]
	const int32_t dSoC = ((dif * dt * ((596l * rsoc) / 256))) / 256; //dif*596*dt/res;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	683a      	ldr	r2, [r7, #0]
 800d606:	435a      	muls	r2, r3
 800d608:	187b      	adds	r3, r7, r1
 800d60a:	881b      	ldrh	r3, [r3, #0]
 800d60c:	2195      	movs	r1, #149	; 0x95
 800d60e:	0089      	lsls	r1, r1, #2
 800d610:	434b      	muls	r3, r1
 800d612:	2b00      	cmp	r3, #0
 800d614:	da00      	bge.n	800d618 <FUELGAUGE_UpdateCalculateSOC+0x60>
 800d616:	33ff      	adds	r3, #255	; 0xff
 800d618:	121b      	asrs	r3, r3, #8
 800d61a:	4353      	muls	r3, r2
 800d61c:	0a1b      	lsrs	r3, r3, #8
 800d61e:	60bb      	str	r3, [r7, #8]

	m_dischargeRate = (dif * (((uint32_t)m_c0 * rsoc) / 64)) / 1024;
 800d620:	4b1d      	ldr	r3, [pc, #116]	; (800d698 <FUELGAUGE_UpdateCalculateSOC+0xe0>)
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	001a      	movs	r2, r3
 800d626:	230e      	movs	r3, #14
 800d628:	18fb      	adds	r3, r7, r3
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	4353      	muls	r3, r2
 800d62e:	099b      	lsrs	r3, r3, #6
 800d630:	693a      	ldr	r2, [r7, #16]
 800d632:	4353      	muls	r3, r2
 800d634:	0a9b      	lsrs	r3, r3, #10
 800d636:	b21a      	sxth	r2, r3
 800d638:	4b18      	ldr	r3, [pc, #96]	; (800d69c <FUELGAUGE_UpdateCalculateSOC+0xe4>)
 800d63a:	801a      	strh	r2, [r3, #0]

	m_soc -= dSoC;
 800d63c:	4b11      	ldr	r3, [pc, #68]	; (800d684 <FUELGAUGE_UpdateCalculateSOC+0xcc>)
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	1ad2      	subs	r2, r2, r3
 800d644:	4b0f      	ldr	r3, [pc, #60]	; (800d684 <FUELGAUGE_UpdateCalculateSOC+0xcc>)
 800d646:	601a      	str	r2, [r3, #0]
	m_soc = m_soc <= 2139095040 ? m_soc : 2139095040;
 800d648:	4b0e      	ldr	r3, [pc, #56]	; (800d684 <FUELGAUGE_UpdateCalculateSOC+0xcc>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	22ff      	movs	r2, #255	; 0xff
 800d64e:	05d2      	lsls	r2, r2, #23
 800d650:	4293      	cmp	r3, r2
 800d652:	d901      	bls.n	800d658 <FUELGAUGE_UpdateCalculateSOC+0xa0>
 800d654:	23ff      	movs	r3, #255	; 0xff
 800d656:	05db      	lsls	r3, r3, #23
 800d658:	4a0a      	ldr	r2, [pc, #40]	; (800d684 <FUELGAUGE_UpdateCalculateSOC+0xcc>)
 800d65a:	6013      	str	r3, [r2, #0]

	m_soc = (m_soc > 0) ? m_soc : 0;
 800d65c:	4b09      	ldr	r3, [pc, #36]	; (800d684 <FUELGAUGE_UpdateCalculateSOC+0xcc>)
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	4b08      	ldr	r3, [pc, #32]	; (800d684 <FUELGAUGE_UpdateCalculateSOC+0xcc>)
 800d662:	601a      	str	r2, [r3, #0]

	// Divide SOC by 2147483.648 to get batterySOC
	m_lastSocPt1 = ((m_soc >> 7) * 125) >> 21;
 800d664:	4b07      	ldr	r3, [pc, #28]	; (800d684 <FUELGAUGE_UpdateCalculateSOC+0xcc>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	09da      	lsrs	r2, r3, #7
 800d66a:	0013      	movs	r3, r2
 800d66c:	015b      	lsls	r3, r3, #5
 800d66e:	1a9b      	subs	r3, r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	189b      	adds	r3, r3, r2
 800d674:	0d5b      	lsrs	r3, r3, #21
 800d676:	b29a      	uxth	r2, r3
 800d678:	4b09      	ldr	r3, [pc, #36]	; (800d6a0 <FUELGAUGE_UpdateCalculateSOC+0xe8>)
 800d67a:	801a      	strh	r2, [r3, #0]
}
 800d67c:	46c0      	nop			; (mov r8, r8)
 800d67e:	46bd      	mov	sp, r7
 800d680:	b006      	add	sp, #24
 800d682:	bd80      	pop	{r7, pc}
 800d684:	20000f04 	.word	0x20000f04
 800d688:	20000a00 	.word	0x20000a00
 800d68c:	20000c00 	.word	0x20000c00
 800d690:	20001394 	.word	0x20001394
 800d694:	20000e00 	.word	0x20000e00
 800d698:	20000f00 	.word	0x20000f00
 800d69c:	20001398 	.word	0x20001398
 800d6a0:	2000138e 	.word	0x2000138e

0800d6a4 <FUELGAUGE_CalculateDischargeRate>:
// ****************************************************************************
// TODO - check this calculation against original code
static void FUELGAUGE_CalculateDischargeRate(const uint16_t previousRSoc,
												const uint16_t newRsoc,
												const uint32_t timeDeltaMs)
{
 800d6a4:	b5b0      	push	{r4, r5, r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	603a      	str	r2, [r7, #0]
 800d6ac:	1dbb      	adds	r3, r7, #6
 800d6ae:	1c02      	adds	r2, r0, #0
 800d6b0:	801a      	strh	r2, [r3, #0]
 800d6b2:	1d3b      	adds	r3, r7, #4
 800d6b4:	1c0a      	adds	r2, r1, #0
 800d6b6:	801a      	strh	r2, [r3, #0]
	const BatteryProfile_T * currentBatProfile = BATTERY_GetActiveProfileHandle();
 800d6b8:	f7fa fcf0 	bl	800809c <BATTERY_GetActiveProfileHandle>
 800d6bc:	0003      	movs	r3, r0
 800d6be:	617b      	str	r3, [r7, #20]
	const int16_t socDelta = previousRSoc - newRsoc;
 800d6c0:	1dba      	adds	r2, r7, #6
 800d6c2:	1d3b      	adds	r3, r7, #4
 800d6c4:	8812      	ldrh	r2, [r2, #0]
 800d6c6:	881b      	ldrh	r3, [r3, #0]
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	2112      	movs	r1, #18
 800d6ce:	187b      	adds	r3, r7, r1
 800d6d0:	801a      	strh	r2, [r3, #0]
	const int32_t deltaFactor = (int32_t)socDelta * timeDeltaMs * currentBatProfile->capacity;
 800d6d2:	187b      	adds	r3, r7, r1
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	5e9b      	ldrsh	r3, [r3, r2]
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	435a      	muls	r2, r3
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	4353      	muls	r3, r2
 800d6e2:	60fb      	str	r3, [r7, #12]
	uint16_t dischargeRate;

	// Check to make sure there is a change in both time and SOC
	if (deltaFactor != 0)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d01c      	beq.n	800d724 <FUELGAUGE_CalculateDischargeRate+0x80>
	{
		dischargeRate = UTIL_FixMul_U32_U16(FUELGAUGE_SOC_TO_I_K, abs(deltaFactor));
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	17da      	asrs	r2, r3, #31
 800d6ee:	189b      	adds	r3, r3, r2
 800d6f0:	4053      	eors	r3, r2
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	250a      	movs	r5, #10
 800d6f6:	197c      	adds	r4, r7, r5
 800d6f8:	4a0c      	ldr	r2, [pc, #48]	; (800d72c <FUELGAUGE_CalculateDischargeRate+0x88>)
 800d6fa:	0019      	movs	r1, r3
 800d6fc:	0010      	movs	r0, r2
 800d6fe:	f006 f812 	bl	8013726 <UTIL_FixMul_U32_U16>
 800d702:	0003      	movs	r3, r0
 800d704:	8023      	strh	r3, [r4, #0]
		m_dischargeRate = (deltaFactor > 0) ? dischargeRate : -dischargeRate;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	dc05      	bgt.n	800d718 <FUELGAUGE_CalculateDischargeRate+0x74>
 800d70c:	197b      	adds	r3, r7, r5
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	425b      	negs	r3, r3
 800d712:	b29b      	uxth	r3, r3
 800d714:	b21b      	sxth	r3, r3
 800d716:	e003      	b.n	800d720 <FUELGAUGE_CalculateDischargeRate+0x7c>
 800d718:	230a      	movs	r3, #10
 800d71a:	18fb      	adds	r3, r7, r3
 800d71c:	2200      	movs	r2, #0
 800d71e:	5e9b      	ldrsh	r3, [r3, r2]
 800d720:	4a03      	ldr	r2, [pc, #12]	; (800d730 <FUELGAUGE_CalculateDischargeRate+0x8c>)
 800d722:	8013      	strh	r3, [r2, #0]
	}
}
 800d724:	46c0      	nop			; (mov r8, r8)
 800d726:	46bd      	mov	sp, r7
 800d728:	b006      	add	sp, #24
 800d72a:	bdb0      	pop	{r4, r5, r7, pc}
 800d72c:	0000128c 	.word	0x0000128c
 800d730:	20001398 	.word	0x20001398

0800d734 <HOSTCOMMS_Init>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void HOSTCOMMS_Init(uint32_t sysTime)
{
 800d734:	b590      	push	{r4, r7, lr}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
	uint8_t tempU8;

	HAL_I2C_DisableListen_IT(&hi2c1);
 800d73c:	4b57      	ldr	r3, [pc, #348]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d73e:	0018      	movs	r0, r3
 800d740:	f7f7 f9b2 	bl	8004aa8 <HAL_I2C_DisableListen_IT>

	I2C1->CR1 &= ~(I2C_CR1_PE);
 800d744:	4b56      	ldr	r3, [pc, #344]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	4b55      	ldr	r3, [pc, #340]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d74a:	2101      	movs	r1, #1
 800d74c:	438a      	bics	r2, r1
 800d74e:	601a      	str	r2, [r3, #0]

	I2C1->OAR1 = 0u;
 800d750:	4b53      	ldr	r3, [pc, #332]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d752:	2200      	movs	r2, #0
 800d754:	609a      	str	r2, [r3, #8]
	I2C1->OAR2 = 0u;
 800d756:	4b52      	ldr	r3, [pc, #328]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d758:	2200      	movs	r2, #0
 800d75a:	60da      	str	r2, [r3, #12]

	m_txCount = 0u;
 800d75c:	4b51      	ldr	r3, [pc, #324]	; (800d8a4 <HOSTCOMMS_Init+0x170>)
 800d75e:	2200      	movs	r2, #0
 800d760:	601a      	str	r2, [r3, #0]
	m_rxCount = 0u;
 800d762:	4b51      	ldr	r3, [pc, #324]	; (800d8a8 <HOSTCOMMS_Init+0x174>)
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]
	m_addrCount = 0u;
 800d768:	4b50      	ldr	r3, [pc, #320]	; (800d8ac <HOSTCOMMS_Init+0x178>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	601a      	str	r2, [r3, #0]

	m_i2cBusyCount = 0u;
 800d76e:	4b50      	ldr	r3, [pc, #320]	; (800d8b0 <HOSTCOMMS_Init+0x17c>)
 800d770:	2200      	movs	r2, #0
 800d772:	601a      	str	r2, [r3, #0]
	m_i2cResetCount = 0u;
 800d774:	4b4f      	ldr	r3, [pc, #316]	; (800d8b4 <HOSTCOMMS_Init+0x180>)
 800d776:	2200      	movs	r2, #0
 800d778:	601a      	str	r2, [r3, #0]


	if (executionState != EXECUTION_STATE_NORMAL)
 800d77a:	4b4f      	ldr	r3, [pc, #316]	; (800d8b8 <HOSTCOMMS_Init+0x184>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a4f      	ldr	r2, [pc, #316]	; (800d8bc <HOSTCOMMS_Init+0x188>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d004      	beq.n	800d78e <HOSTCOMMS_Init+0x5a>
	{
		MS_TIME_COUNTER_INIT(m_lastHostCommandTimeMs);
 800d784:	f7f5 fca4 	bl	80030d0 <HAL_GetTick>
 800d788:	0002      	movs	r2, r0
 800d78a:	4b4d      	ldr	r3, [pc, #308]	; (800d8c0 <HOSTCOMMS_Init+0x18c>)
 800d78c:	601a      	str	r2, [r3, #0]
	}


	if (NV_ReadVariable_U8(OWN_ADDRESS1_NV_ADDR, &tempU8))
 800d78e:	240f      	movs	r4, #15
 800d790:	193b      	adds	r3, r7, r4
 800d792:	0019      	movs	r1, r3
 800d794:	2059      	movs	r0, #89	; 0x59
 800d796:	f003 f9d1 	bl	8010b3c <NV_ReadVariable_U8>
 800d79a:	1e03      	subs	r3, r0, #0
 800d79c:	d005      	beq.n	800d7aa <HOSTCOMMS_Init+0x76>
	{
		I2C1->OAR1 = (tempU8 << 1u);
 800d79e:	193b      	adds	r3, r7, r4
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	005a      	lsls	r2, r3, #1
 800d7a4:	4b3e      	ldr	r3, [pc, #248]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d7a6:	609a      	str	r2, [r3, #8]
 800d7a8:	e002      	b.n	800d7b0 <HOSTCOMMS_Init+0x7c>
	}
	else
	{
		// Use default address
		I2C1->OAR1 = (OWN1_I2C_ADDRESS << 1u);
 800d7aa:	4b3d      	ldr	r3, [pc, #244]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d7ac:	2228      	movs	r2, #40	; 0x28
 800d7ae:	609a      	str	r2, [r3, #8]
	}


	if (NV_ReadVariable_U8(OWN_ADDRESS2_NV_ADDR, &tempU8))
 800d7b0:	240f      	movs	r4, #15
 800d7b2:	193b      	adds	r3, r7, r4
 800d7b4:	0019      	movs	r1, r3
 800d7b6:	205a      	movs	r0, #90	; 0x5a
 800d7b8:	f003 f9c0 	bl	8010b3c <NV_ReadVariable_U8>
 800d7bc:	1e03      	subs	r3, r0, #0
 800d7be:	d008      	beq.n	800d7d2 <HOSTCOMMS_Init+0x9e>
	{
		// Note: this is not shifting address as original code
		I2C1->OAR2 = tempU8 | I2C_OAR2_OA2EN;
 800d7c0:	193b      	adds	r3, r7, r4
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	0019      	movs	r1, r3
 800d7c6:	4b36      	ldr	r3, [pc, #216]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d7c8:	2280      	movs	r2, #128	; 0x80
 800d7ca:	0212      	lsls	r2, r2, #8
 800d7cc:	430a      	orrs	r2, r1
 800d7ce:	60da      	str	r2, [r3, #12]
 800d7d0:	e002      	b.n	800d7d8 <HOSTCOMMS_Init+0xa4>
	}
	else
	{
		// Use default address
		I2C1->OAR2 = (OWN2_I2C_ADDRESS << 1u) | I2C_OAR2_OA2EN;
 800d7d2:	4b33      	ldr	r3, [pc, #204]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d7d4:	4a3b      	ldr	r2, [pc, #236]	; (800d8c4 <HOSTCOMMS_Init+0x190>)
 800d7d6:	60da      	str	r2, [r3, #12]
	}


	// Assign the peripheral address
	hi2c1.hdmarx->Instance->CPAR = (uint32_t)&I2C1->RXDR;
 800d7d8:	4b30      	ldr	r3, [pc, #192]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a3a      	ldr	r2, [pc, #232]	; (800d8c8 <HOSTCOMMS_Init+0x194>)
 800d7e0:	609a      	str	r2, [r3, #8]
	// Point to the second byte, the first will contain the device address.
	hi2c1.hdmarx->Instance->CMAR = (uint32_t)&m_hostcommsBuffer[1u];
 800d7e2:	4b2e      	ldr	r3, [pc, #184]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a38      	ldr	r2, [pc, #224]	; (800d8cc <HOSTCOMMS_Init+0x198>)
 800d7ea:	60da      	str	r2, [r3, #12]

	// Disable the dma channel for now
	hi2c1.hdmarx->Instance->CCR &= ~(DMA_CCR_EN);
 800d7ec:	4b2b      	ldr	r3, [pc, #172]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	4b29      	ldr	r3, [pc, #164]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2101      	movs	r1, #1
 800d7fc:	438a      	bics	r2, r1
 800d7fe:	601a      	str	r2, [r3, #0]

	// Assign the peripheral address
	hi2c1.hdmatx->Instance->CPAR = (uint32_t)&I2C1->TXDR;
 800d800:	4b26      	ldr	r3, [pc, #152]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a32      	ldr	r2, [pc, #200]	; (800d8d0 <HOSTCOMMS_Init+0x19c>)
 800d808:	609a      	str	r2, [r3, #8]

	// The tx buffer will be dynamic but point to the hostcomms buffer for now
	hi2c1.hdmatx->Instance->CMAR = (uint32_t)&m_hostcommsBuffer[1u];
 800d80a:	4b24      	ldr	r3, [pc, #144]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a2e      	ldr	r2, [pc, #184]	; (800d8cc <HOSTCOMMS_Init+0x198>)
 800d812:	60da      	str	r2, [r3, #12]

	// Disable the dma channel for now
	hi2c1.hdmatx->Instance->CCR &= ~(DMA_CCR_EN);
 800d814:	4b21      	ldr	r3, [pc, #132]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	4b1f      	ldr	r3, [pc, #124]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2101      	movs	r1, #1
 800d824:	438a      	bics	r2, r1
 800d826:	601a      	str	r2, [r3, #0]

	// Clear any flags
	hi2c1.hdmarx->DmaBaseAddress->IFCR |= (DMA_FLAG_GL1 << hi2c1.hdmarx->ChannelIndex);
 800d828:	4b1c      	ldr	r3, [pc, #112]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82e:	6859      	ldr	r1, [r3, #4]
 800d830:	4b1a      	ldr	r3, [pc, #104]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d836:	2201      	movs	r2, #1
 800d838:	409a      	lsls	r2, r3
 800d83a:	4b18      	ldr	r3, [pc, #96]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d840:	430a      	orrs	r2, r1
 800d842:	605a      	str	r2, [r3, #4]
	hi2c1.hdmatx->DmaBaseAddress->IFCR |= (DMA_FLAG_GL1 << hi2c1.hdmatx->ChannelIndex);
 800d844:	4b15      	ldr	r3, [pc, #84]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d84a:	6859      	ldr	r1, [r3, #4]
 800d84c:	4b13      	ldr	r3, [pc, #76]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d852:	2201      	movs	r2, #1
 800d854:	409a      	lsls	r2, r3
 800d856:	4b11      	ldr	r3, [pc, #68]	; (800d89c <HOSTCOMMS_Init+0x168>)
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85c:	430a      	orrs	r2, r1
 800d85e:	605a      	str	r2, [r3, #4]

	// Clear any digital filter settings
	I2C1->CR1 &= ~(I2C_CR1_DNF_Msk);
 800d860:	4b0f      	ldr	r3, [pc, #60]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d866:	491b      	ldr	r1, [pc, #108]	; (800d8d4 <HOSTCOMMS_Init+0x1a0>)
 800d868:	400a      	ands	r2, r1
 800d86a:	601a      	str	r2, [r3, #0]

	// Enable the DMA transfer mode
	I2C1->CR1 |= I2C_CR1_TXDMAEN | I2C_CR1_RXDMAEN | I2C_CR1_WUPEN;
 800d86c:	4b0c      	ldr	r3, [pc, #48]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	4b0b      	ldr	r3, [pc, #44]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d872:	2198      	movs	r1, #152	; 0x98
 800d874:	02c9      	lsls	r1, r1, #11
 800d876:	430a      	orrs	r2, r1
 800d878:	601a      	str	r2, [r3, #0]

	// Enable the interrupts
	I2C1->CR1 |= (I2C_CR1_ADDRIE | I2C_CR1_STOPIE);
 800d87a:	4b09      	ldr	r3, [pc, #36]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	4b08      	ldr	r3, [pc, #32]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d880:	2128      	movs	r1, #40	; 0x28
 800d882:	430a      	orrs	r2, r1
 800d884:	601a      	str	r2, [r3, #0]

	// Enable the i2c device
	I2C1->CR1 |= I2C_CR1_PE;
 800d886:	4b06      	ldr	r3, [pc, #24]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	4b05      	ldr	r3, [pc, #20]	; (800d8a0 <HOSTCOMMS_Init+0x16c>)
 800d88c:	2101      	movs	r1, #1
 800d88e:	430a      	orrs	r2, r1
 800d890:	601a      	str	r2, [r3, #0]
}
 800d892:	46c0      	nop			; (mov r8, r8)
 800d894:	46bd      	mov	sp, r7
 800d896:	b005      	add	sp, #20
 800d898:	bd90      	pop	{r4, r7, pc}
 800d89a:	46c0      	nop			; (mov r8, r8)
 800d89c:	20001634 	.word	0x20001634
 800d8a0:	40005400 	.word	0x40005400
 800d8a4:	200014ac 	.word	0x200014ac
 800d8a8:	200014b0 	.word	0x200014b0
 800d8ac:	200014b4 	.word	0x200014b4
 800d8b0:	200014b8 	.word	0x200014b8
 800d8b4:	200014bc 	.word	0x200014bc
 800d8b8:	2000185c 	.word	0x2000185c
 800d8bc:	aaaaaaaa 	.word	0xaaaaaaaa
 800d8c0:	20000f08 	.word	0x20000f08
 800d8c4:	000080d0 	.word	0x000080d0
 800d8c8:	40005424 	.word	0x40005424
 800d8cc:	200013a9 	.word	0x200013a9
 800d8d0:	40005428 	.word	0x40005428
 800d8d4:	fffff0ff 	.word	0xfffff0ff

0800d8d8 <HOSTCOMMS_PiJuiceAddressSetEnable>:


void HOSTCOMMS_PiJuiceAddressSetEnable(const bool enabled)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	0002      	movs	r2, r0
 800d8e0:	1dfb      	adds	r3, r7, #7
 800d8e2:	701a      	strb	r2, [r3, #0]
	if (enabled)
 800d8e4:	1dfb      	adds	r3, r7, #7
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d007      	beq.n	800d8fc <HOSTCOMMS_PiJuiceAddressSetEnable+0x24>
	{
		I2C1->OAR1 |= I2C_OAR1_OA1EN;
 800d8ec:	4b09      	ldr	r3, [pc, #36]	; (800d914 <HOSTCOMMS_PiJuiceAddressSetEnable+0x3c>)
 800d8ee:	689a      	ldr	r2, [r3, #8]
 800d8f0:	4b08      	ldr	r3, [pc, #32]	; (800d914 <HOSTCOMMS_PiJuiceAddressSetEnable+0x3c>)
 800d8f2:	2180      	movs	r1, #128	; 0x80
 800d8f4:	0209      	lsls	r1, r1, #8
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	609a      	str	r2, [r3, #8]
	}
	else
	{
		I2C1->OAR1 &= I2C_OAR1_OA1EN;
	}
}
 800d8fa:	e006      	b.n	800d90a <HOSTCOMMS_PiJuiceAddressSetEnable+0x32>
		I2C1->OAR1 &= I2C_OAR1_OA1EN;
 800d8fc:	4b05      	ldr	r3, [pc, #20]	; (800d914 <HOSTCOMMS_PiJuiceAddressSetEnable+0x3c>)
 800d8fe:	6899      	ldr	r1, [r3, #8]
 800d900:	4b04      	ldr	r3, [pc, #16]	; (800d914 <HOSTCOMMS_PiJuiceAddressSetEnable+0x3c>)
 800d902:	2280      	movs	r2, #128	; 0x80
 800d904:	0212      	lsls	r2, r2, #8
 800d906:	400a      	ands	r2, r1
 800d908:	609a      	str	r2, [r3, #8]
}
 800d90a:	46c0      	nop			; (mov r8, r8)
 800d90c:	46bd      	mov	sp, r7
 800d90e:	b002      	add	sp, #8
 800d910:	bd80      	pop	{r7, pc}
 800d912:	46c0      	nop			; (mov r8, r8)
 800d914:	40005400 	.word	0x40005400

0800d918 <HOSTCOMMS_Service>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void HOSTCOMMS_Service(uint32_t sysTime)
{
 800d918:	b5b0      	push	{r4, r5, r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
	uint8_t readCmdCode;
	uint16_t dataLen = 1u;
 800d920:	230c      	movs	r3, #12
 800d922:	18fb      	adds	r3, r7, r3
 800d924:	2201      	movs	r2, #1
 800d926:	801a      	strh	r2, [r3, #0]

	if (I2C_ISR_BUSY == (I2C1->ISR & I2C_ISR_BUSY))
 800d928:	4b59      	ldr	r3, [pc, #356]	; (800da90 <HOSTCOMMS_Service+0x178>)
 800d92a:	699a      	ldr	r2, [r3, #24]
 800d92c:	2380      	movs	r3, #128	; 0x80
 800d92e:	021b      	lsls	r3, r3, #8
 800d930:	401a      	ands	r2, r3
 800d932:	2380      	movs	r3, #128	; 0x80
 800d934:	021b      	lsls	r3, r3, #8
 800d936:	429a      	cmp	r2, r3
 800d938:	d105      	bne.n	800d946 <HOSTCOMMS_Service+0x2e>
	{
		m_i2cBusyCount++;
 800d93a:	4b56      	ldr	r3, [pc, #344]	; (800da94 <HOSTCOMMS_Service+0x17c>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	1c5a      	adds	r2, r3, #1
 800d940:	4b54      	ldr	r3, [pc, #336]	; (800da94 <HOSTCOMMS_Service+0x17c>)
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	e002      	b.n	800d94c <HOSTCOMMS_Service+0x34>
	}
	else
	{
		m_i2cBusyCount = 0u;
 800d946:	4b53      	ldr	r3, [pc, #332]	; (800da94 <HOSTCOMMS_Service+0x17c>)
 800d948:	2200      	movs	r2, #0
 800d94a:	601a      	str	r2, [r3, #0]
	}

	// Timeout after a second, will catch fault mode
	if ( ( MS_TIMEREF_TIMEOUT(m_lastHostCommandTimeMs, sysTime, 100u) &&
 800d94c:	4b52      	ldr	r3, [pc, #328]	; (800da98 <HOSTCOMMS_Service+0x180>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	2b63      	cmp	r3, #99	; 0x63
 800d956:	d907      	bls.n	800d968 <HOSTCOMMS_Service+0x50>
			(HOSTCOMMS_MODE_WAIT != m_hostcommsMode) &&
 800d958:	4b50      	ldr	r3, [pc, #320]	; (800da9c <HOSTCOMMS_Service+0x184>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
	if ( ( MS_TIMEREF_TIMEOUT(m_lastHostCommandTimeMs, sysTime, 100u) &&
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d003      	beq.n	800d968 <HOSTCOMMS_Service+0x50>
			(HOSTCOMMS_MODE_RXC != m_hostcommsMode) ) ||
 800d960:	4b4e      	ldr	r3, [pc, #312]	; (800da9c <HOSTCOMMS_Service+0x184>)
 800d962:	781b      	ldrb	r3, [r3, #0]
			(HOSTCOMMS_MODE_WAIT != m_hostcommsMode) &&
 800d964:	2b02      	cmp	r3, #2
 800d966:	d105      	bne.n	800d974 <HOSTCOMMS_Service+0x5c>
			(m_i2cBusyCount > 500u)
 800d968:	4b4a      	ldr	r3, [pc, #296]	; (800da94 <HOSTCOMMS_Service+0x17c>)
 800d96a:	681a      	ldr	r2, [r3, #0]
			(HOSTCOMMS_MODE_RXC != m_hostcommsMode) ) ||
 800d96c:	23fa      	movs	r3, #250	; 0xfa
 800d96e:	005b      	lsls	r3, r3, #1
 800d970:	429a      	cmp	r2, r3
 800d972:	d92d      	bls.n	800d9d0 <HOSTCOMMS_Service+0xb8>
			)
	{
		// Something bad must have happened, reset the peripheral
		I2C1->CR1 &= ~(I2C_CR1_PE);
 800d974:	4b46      	ldr	r3, [pc, #280]	; (800da90 <HOSTCOMMS_Service+0x178>)
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	4b45      	ldr	r3, [pc, #276]	; (800da90 <HOSTCOMMS_Service+0x178>)
 800d97a:	2101      	movs	r1, #1
 800d97c:	438a      	bics	r2, r1
 800d97e:	601a      	str	r2, [r3, #0]

		// Disable the dma controllers
		hi2c1.hdmatx->Instance->CCR &= ~(DMA_CCR_EN);
 800d980:	4b47      	ldr	r3, [pc, #284]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800d982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	4b45      	ldr	r3, [pc, #276]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800d98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2101      	movs	r1, #1
 800d990:	438a      	bics	r2, r1
 800d992:	601a      	str	r2, [r3, #0]
		hi2c1.hdmarx->Instance->CCR &= ~(DMA_CCR_EN);
 800d994:	4b42      	ldr	r3, [pc, #264]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800d996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	4b40      	ldr	r3, [pc, #256]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800d99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2101      	movs	r1, #1
 800d9a4:	438a      	bics	r2, r1
 800d9a6:	601a      	str	r2, [r3, #0]

		// Re-enable the peripheral and addr interrupt
		I2C1->CR1 |= I2C_CR1_PE;
 800d9a8:	4b39      	ldr	r3, [pc, #228]	; (800da90 <HOSTCOMMS_Service+0x178>)
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	4b38      	ldr	r3, [pc, #224]	; (800da90 <HOSTCOMMS_Service+0x178>)
 800d9ae:	2101      	movs	r1, #1
 800d9b0:	430a      	orrs	r2, r1
 800d9b2:	601a      	str	r2, [r3, #0]
		I2C1->CR1 |= I2C_CR1_ADDRIE;
 800d9b4:	4b36      	ldr	r3, [pc, #216]	; (800da90 <HOSTCOMMS_Service+0x178>)
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	4b35      	ldr	r3, [pc, #212]	; (800da90 <HOSTCOMMS_Service+0x178>)
 800d9ba:	2108      	movs	r1, #8
 800d9bc:	430a      	orrs	r2, r1
 800d9be:	601a      	str	r2, [r3, #0]

		m_i2cResetCount++;
 800d9c0:	4b38      	ldr	r3, [pc, #224]	; (800daa4 <HOSTCOMMS_Service+0x18c>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	4b37      	ldr	r3, [pc, #220]	; (800daa4 <HOSTCOMMS_Service+0x18c>)
 800d9c8:	601a      	str	r2, [r3, #0]
		m_hostcommsMode = HOSTCOMMS_MODE_WAIT;
 800d9ca:	4b34      	ldr	r3, [pc, #208]	; (800da9c <HOSTCOMMS_Service+0x184>)
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	701a      	strb	r2, [r3, #0]
	}


	if (HOSTCOMMS_MODE_TX == m_hostcommsMode)
 800d9d0:	4b32      	ldr	r3, [pc, #200]	; (800da9c <HOSTCOMMS_Service+0x184>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	2b03      	cmp	r3, #3
 800d9d6:	d156      	bne.n	800da86 <HOSTCOMMS_Service+0x16e>
	{
		readCmdCode = m_hostcommsBuffer[1u];
 800d9d8:	240f      	movs	r4, #15
 800d9da:	193b      	adds	r3, r7, r4
 800d9dc:	4a32      	ldr	r2, [pc, #200]	; (800daa8 <HOSTCOMMS_Service+0x190>)
 800d9de:	7852      	ldrb	r2, [r2, #1]
 800d9e0:	701a      	strb	r2, [r3, #0]

		// Something is requested by the host
		if (m_hostcommsBuffer[0u] == (I2C1->OAR1 & 0xFE))
 800d9e2:	4b31      	ldr	r3, [pc, #196]	; (800daa8 <HOSTCOMMS_Service+0x190>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	0019      	movs	r1, r3
 800d9e8:	4b29      	ldr	r3, [pc, #164]	; (800da90 <HOSTCOMMS_Service+0x178>)
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	22fe      	movs	r2, #254	; 0xfe
 800d9ee:	4013      	ands	r3, r2
 800d9f0:	4299      	cmp	r1, r3
 800d9f2:	d148      	bne.n	800da86 <HOSTCOMMS_Service+0x16e>
		{
			// Is a pijuice request
			if ( (readCmdCode >= 0x80u) && (readCmdCode <= 0x8Fu) )
 800d9f4:	193b      	adds	r3, r7, r4
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	b25b      	sxtb	r3, r3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	da1a      	bge.n	800da34 <HOSTCOMMS_Service+0x11c>
 800d9fe:	193b      	adds	r3, r7, r4
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b8f      	cmp	r3, #143	; 0x8f
 800da04:	d816      	bhi.n	800da34 <HOSTCOMMS_Service+0x11c>
			{
				RtcDs1339ProcessRequest(I2C_DIRECTION_RECEIVE, readCmdCode - 0x80u, &m_hostcommsBuffer[1u], &dataLen);
 800da06:	193b      	adds	r3, r7, r4
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	3b80      	subs	r3, #128	; 0x80
 800da0c:	b2d9      	uxtb	r1, r3
 800da0e:	250c      	movs	r5, #12
 800da10:	197b      	adds	r3, r7, r5
 800da12:	4a26      	ldr	r2, [pc, #152]	; (800daac <HOSTCOMMS_Service+0x194>)
 800da14:	2001      	movs	r0, #1
 800da16:	f004 ff83 	bl	8012920 <RtcDs1339ProcessRequest>
				RtcSetPointer(readCmdCode - 0x80u + dataLen);
 800da1a:	197b      	adds	r3, r7, r5
 800da1c:	881b      	ldrh	r3, [r3, #0]
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	193b      	adds	r3, r7, r4
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	18d3      	adds	r3, r2, r3
 800da26:	b2db      	uxtb	r3, r3
 800da28:	3b80      	subs	r3, #128	; 0x80
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	0018      	movs	r0, r3
 800da2e:	f005 f883 	bl	8012b38 <RtcSetPointer>
 800da32:	e006      	b.n	800da42 <HOSTCOMMS_Service+0x12a>
			}
			else
			{
				CmdServerProcessRequest(MASTER_CMD_DIR_READ, &m_hostcommsBuffer[1u], &dataLen);
 800da34:	230c      	movs	r3, #12
 800da36:	18fa      	adds	r2, r7, r3
 800da38:	4b1c      	ldr	r3, [pc, #112]	; (800daac <HOSTCOMMS_Service+0x194>)
 800da3a:	0019      	movs	r1, r3
 800da3c:	2001      	movs	r0, #1
 800da3e:	f7fc fd31 	bl	800a4a4 <CmdServerProcessRequest>
			}

			hi2c1.hdmatx->Instance->CMAR = (uint32_t)&m_hostcommsBuffer[1u];
 800da42:	4b17      	ldr	r3, [pc, #92]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800da44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a18      	ldr	r2, [pc, #96]	; (800daac <HOSTCOMMS_Service+0x194>)
 800da4a:	60da      	str	r2, [r3, #12]
			hi2c1.hdmatx->DmaBaseAddress->IFCR |= (DMA_FLAG_GL1 << hi2c1.hdmatx->ChannelIndex);
 800da4c:	4b14      	ldr	r3, [pc, #80]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800da4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da52:	6859      	ldr	r1, [r3, #4]
 800da54:	4b12      	ldr	r3, [pc, #72]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800da56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5a:	2201      	movs	r2, #1
 800da5c:	409a      	lsls	r2, r3
 800da5e:	4b10      	ldr	r3, [pc, #64]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800da60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da64:	430a      	orrs	r2, r1
 800da66:	605a      	str	r2, [r3, #4]
			hi2c1.hdmatx->Instance->CNDTR = (sizeof(m_hostcommsBuffer) - 1u);
 800da68:	4b0d      	ldr	r3, [pc, #52]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800da6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	22ff      	movs	r2, #255	; 0xff
 800da70:	605a      	str	r2, [r3, #4]
			hi2c1.hdmatx->Instance->CCR |= DMA_CCR_EN;
 800da72:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800da74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	4b09      	ldr	r3, [pc, #36]	; (800daa0 <HOSTCOMMS_Service+0x188>)
 800da7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2101      	movs	r1, #1
 800da82:	430a      	orrs	r2, r1
 800da84:	601a      	str	r2, [r3, #0]
		}
	}
}
 800da86:	46c0      	nop			; (mov r8, r8)
 800da88:	46bd      	mov	sp, r7
 800da8a:	b004      	add	sp, #16
 800da8c:	bdb0      	pop	{r4, r5, r7, pc}
 800da8e:	46c0      	nop			; (mov r8, r8)
 800da90:	40005400 	.word	0x40005400
 800da94:	200014b8 	.word	0x200014b8
 800da98:	20000f08 	.word	0x20000f08
 800da9c:	200014c0 	.word	0x200014c0
 800daa0:	20001634 	.word	0x20001634
 800daa4:	200014bc 	.word	0x200014bc
 800daa8:	200013a8 	.word	0x200013a8
 800daac:	200013a9 	.word	0x200013a9

0800dab0 <HOSTCOMMS_Task>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void HOSTCOMMS_Task(void)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
	uint16_t dataLen;
	uint8_t readCmdCode;


	if (HOSTCOMMS_MODE_RXC == m_hostcommsMode)
 800dab6:	4b4d      	ldr	r3, [pc, #308]	; (800dbec <HOSTCOMMS_Task+0x13c>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	2b02      	cmp	r3, #2
 800dabc:	d138      	bne.n	800db30 <HOSTCOMMS_Task+0x80>
	{
		dataLen = m_rxLen;
 800dabe:	4b4c      	ldr	r3, [pc, #304]	; (800dbf0 <HOSTCOMMS_Task+0x140>)
 800dac0:	881a      	ldrh	r2, [r3, #0]
 800dac2:	1d3b      	adds	r3, r7, #4
 800dac4:	801a      	strh	r2, [r3, #0]
		readCmdCode = m_hostcommsBuffer[1u];
 800dac6:	1dfb      	adds	r3, r7, #7
 800dac8:	4a4a      	ldr	r2, [pc, #296]	; (800dbf4 <HOSTCOMMS_Task+0x144>)
 800daca:	7852      	ldrb	r2, [r2, #1]
 800dacc:	701a      	strb	r2, [r3, #0]

		// Something sent from the host
		if (m_hostcommsBuffer[0u] == (I2C1->OAR1 & 0xFEu))
 800dace:	4b49      	ldr	r3, [pc, #292]	; (800dbf4 <HOSTCOMMS_Task+0x144>)
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	0019      	movs	r1, r3
 800dad4:	4b48      	ldr	r3, [pc, #288]	; (800dbf8 <HOSTCOMMS_Task+0x148>)
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	22fe      	movs	r2, #254	; 0xfe
 800dada:	4013      	ands	r3, r2
 800dadc:	4299      	cmp	r1, r3
 800dade:	d11e      	bne.n	800db1e <HOSTCOMMS_Task+0x6e>
		{
			// Is a pijuice command
			if ( (readCmdCode >= 0x80u) && (readCmdCode <= 0x8Fu) )
 800dae0:	1dfb      	adds	r3, r7, #7
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	b25b      	sxtb	r3, r3
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	da13      	bge.n	800db12 <HOSTCOMMS_Task+0x62>
 800daea:	1dfb      	adds	r3, r7, #7
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	2b8f      	cmp	r3, #143	; 0x8f
 800daf0:	d80f      	bhi.n	800db12 <HOSTCOMMS_Task+0x62>
			{
				dataLen -= 1u; // first is command
 800daf2:	1d3b      	adds	r3, r7, #4
 800daf4:	881b      	ldrh	r3, [r3, #0]
 800daf6:	3b01      	subs	r3, #1
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	1d3b      	adds	r3, r7, #4
 800dafc:	801a      	strh	r2, [r3, #0]
				RtcDs1339ProcessRequest(I2C_DIRECTION_TRANSMIT, readCmdCode - 0x80u, &m_hostcommsBuffer[2u], &dataLen);
 800dafe:	1dfb      	adds	r3, r7, #7
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	3b80      	subs	r3, #128	; 0x80
 800db04:	b2d9      	uxtb	r1, r3
 800db06:	1d3b      	adds	r3, r7, #4
 800db08:	4a3c      	ldr	r2, [pc, #240]	; (800dbfc <HOSTCOMMS_Task+0x14c>)
 800db0a:	2000      	movs	r0, #0
 800db0c:	f004 ff08 	bl	8012920 <RtcDs1339ProcessRequest>
 800db10:	e005      	b.n	800db1e <HOSTCOMMS_Task+0x6e>
			}
			else
			{
				CmdServerProcessRequest(MASTER_CMD_DIR_WRITE, &m_hostcommsBuffer[1u], &dataLen);
 800db12:	1d3a      	adds	r2, r7, #4
 800db14:	4b3a      	ldr	r3, [pc, #232]	; (800dc00 <HOSTCOMMS_Task+0x150>)
 800db16:	0019      	movs	r1, r3
 800db18:	2000      	movs	r0, #0
 800db1a:	f7fc fcc3 	bl	800a4a4 <CmdServerProcessRequest>
			}
		}

		m_hostcommsMode = HOSTCOMMS_MODE_WAIT;
 800db1e:	4b33      	ldr	r3, [pc, #204]	; (800dbec <HOSTCOMMS_Task+0x13c>)
 800db20:	2200      	movs	r2, #0
 800db22:	701a      	strb	r2, [r3, #0]

		//I2C1->CR1 |= I2C_CR1_PE;
		I2C1->CR1 |= I2C_CR1_ADDRIE;
 800db24:	4b34      	ldr	r3, [pc, #208]	; (800dbf8 <HOSTCOMMS_Task+0x148>)
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	4b33      	ldr	r3, [pc, #204]	; (800dbf8 <HOSTCOMMS_Task+0x148>)
 800db2a:	2108      	movs	r1, #8
 800db2c:	430a      	orrs	r2, r1
 800db2e:	601a      	str	r2, [r3, #0]
	}

	// If the host isn't transferring RTC data, update the buffer here
	// TODO - Maybe double buffer to ensure no issues are caused by simultaneous access
	if (HOSTCOMMS_MODE_TX_CLOCK != m_hostcommsMode)
 800db30:	4b2e      	ldr	r3, [pc, #184]	; (800dbec <HOSTCOMMS_Task+0x13c>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b04      	cmp	r3, #4
 800db36:	d055      	beq.n	800dbe4 <HOSTCOMMS_Task+0x134>
	{
		if (0u != (m_rtcRegUpdate_bm & RTC_REG_TIME_Msk))
 800db38:	4b32      	ldr	r3, [pc, #200]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	227f      	movs	r2, #127	; 0x7f
 800db3e:	4013      	ands	r3, r2
 800db40:	d00b      	beq.n	800db5a <HOSTCOMMS_Task+0xaa>
		{
			m_rtcRegUpdate_bm &= ~(RTC_REG_TIME_Msk);
 800db42:	4b30      	ldr	r3, [pc, #192]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	227f      	movs	r2, #127	; 0x7f
 800db48:	4393      	bics	r3, r2
 800db4a:	001a      	movs	r2, r3
 800db4c:	4b2d      	ldr	r3, [pc, #180]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800db4e:	601a      	str	r2, [r3, #0]

			RtcWriteTime(&m_rtcBuffer[0u], false);
 800db50:	4b2d      	ldr	r3, [pc, #180]	; (800dc08 <HOSTCOMMS_Task+0x158>)
 800db52:	2100      	movs	r1, #0
 800db54:	0018      	movs	r0, r3
 800db56:	f005 f805 	bl	8012b64 <RtcWriteTime>
		}

		if (0u != (m_rtcRegUpdate_bm & RTC_REG_ALARM1_Msk))
 800db5a:	4b2a      	ldr	r3, [pc, #168]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	23f0      	movs	r3, #240	; 0xf0
 800db60:	00db      	lsls	r3, r3, #3
 800db62:	4013      	ands	r3, r2
 800db64:	d00a      	beq.n	800db7c <HOSTCOMMS_Task+0xcc>
		{
			m_rtcRegUpdate_bm &= ~(RTC_REG_ALARM1_Msk);
 800db66:	4b27      	ldr	r3, [pc, #156]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a28      	ldr	r2, [pc, #160]	; (800dc0c <HOSTCOMMS_Task+0x15c>)
 800db6c:	401a      	ands	r2, r3
 800db6e:	4b25      	ldr	r3, [pc, #148]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800db70:	601a      	str	r2, [r3, #0]

			RtcWriteAlarm1(&m_rtcBuffer[7u], false);
 800db72:	4b27      	ldr	r3, [pc, #156]	; (800dc10 <HOSTCOMMS_Task+0x160>)
 800db74:	2100      	movs	r1, #0
 800db76:	0018      	movs	r0, r3
 800db78:	f005 fa24 	bl	8012fc4 <RtcWriteAlarm1>
		}

		if (0u != (m_rtcRegUpdate_bm & (RTC_REG_CTRL_Msk | RTC_REG_STATUS_Msk)))
 800db7c:	4b21      	ldr	r3, [pc, #132]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	23c0      	movs	r3, #192	; 0xc0
 800db82:	021b      	lsls	r3, r3, #8
 800db84:	4013      	ands	r3, r2
 800db86:	d017      	beq.n	800dbb8 <HOSTCOMMS_Task+0x108>
		{
			dataLen = (0u == (m_rtcRegUpdate_bm & RTC_REG_STATUS_Msk)) ? 1u : 2u;
 800db88:	4b1e      	ldr	r3, [pc, #120]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	2380      	movs	r3, #128	; 0x80
 800db8e:	021b      	lsls	r3, r3, #8
 800db90:	4013      	ands	r3, r2
 800db92:	d101      	bne.n	800db98 <HOSTCOMMS_Task+0xe8>
 800db94:	2201      	movs	r2, #1
 800db96:	e000      	b.n	800db9a <HOSTCOMMS_Task+0xea>
 800db98:	2202      	movs	r2, #2
 800db9a:	1d3b      	adds	r3, r7, #4
 800db9c:	801a      	strh	r2, [r3, #0]
			m_rtcRegUpdate_bm &= ~(RTC_REG_CTRL_Msk | RTC_REG_STATUS_Msk);
 800db9e:	4b19      	ldr	r3, [pc, #100]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a1c      	ldr	r2, [pc, #112]	; (800dc14 <HOSTCOMMS_Task+0x164>)
 800dba4:	401a      	ands	r2, r3
 800dba6:	4b17      	ldr	r3, [pc, #92]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800dba8:	601a      	str	r2, [r3, #0]

			RtcWriteControlStatus(&m_rtcBuffer[0xEu], dataLen);
 800dbaa:	1d3b      	adds	r3, r7, #4
 800dbac:	881a      	ldrh	r2, [r3, #0]
 800dbae:	4b1a      	ldr	r3, [pc, #104]	; (800dc18 <HOSTCOMMS_Task+0x168>)
 800dbb0:	0011      	movs	r1, r2
 800dbb2:	0018      	movs	r0, r3
 800dbb4:	f005 fb68 	bl	8013288 <RtcWriteControlStatus>
		}

		m_rtcRegUpdate_bm &= ~(RTC_REG_ALARM2_Msk);
 800dbb8:	4b12      	ldr	r3, [pc, #72]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4a17      	ldr	r2, [pc, #92]	; (800dc1c <HOSTCOMMS_Task+0x16c>)
 800dbbe:	401a      	ands	r2, r3
 800dbc0:	4b10      	ldr	r3, [pc, #64]	; (800dc04 <HOSTCOMMS_Task+0x154>)
 800dbc2:	601a      	str	r2, [r3, #0]

		RtcReadTime(m_rtcBuffer, false);
 800dbc4:	4b10      	ldr	r3, [pc, #64]	; (800dc08 <HOSTCOMMS_Task+0x158>)
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	0018      	movs	r0, r3
 800dbca:	f005 f88b 	bl	8012ce4 <RtcReadTime>
		RtcReadAlarm1(&m_rtcBuffer[7u], false);
 800dbce:	4b10      	ldr	r3, [pc, #64]	; (800dc10 <HOSTCOMMS_Task+0x160>)
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	0018      	movs	r0, r3
 800dbd4:	f005 f930 	bl	8012e38 <RtcReadAlarm1>
		RtcReadControlStatus(&m_rtcBuffer[0xEu], &dataLen);
 800dbd8:	1d3a      	adds	r2, r7, #4
 800dbda:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <HOSTCOMMS_Task+0x168>)
 800dbdc:	0011      	movs	r1, r2
 800dbde:	0018      	movs	r0, r3
 800dbe0:	f005 fb74 	bl	80132cc <RtcReadControlStatus>
	}
}
 800dbe4:	46c0      	nop			; (mov r8, r8)
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	b002      	add	sp, #8
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	200014c0 	.word	0x200014c0
 800dbf0:	200014a8 	.word	0x200014a8
 800dbf4:	200013a8 	.word	0x200013a8
 800dbf8:	40005400 	.word	0x40005400
 800dbfc:	200013aa 	.word	0x200013aa
 800dc00:	200013a9 	.word	0x200013a9
 800dc04:	200014d8 	.word	0x200014d8
 800dc08:	200014c4 	.word	0x200014c4
 800dc0c:	fffff87f 	.word	0xfffff87f
 800dc10:	200014cb 	.word	0x200014cb
 800dc14:	ffff3fff 	.word	0xffff3fff
 800dc18:	200014d2 	.word	0x200014d2
 800dc1c:	ffffc7ff 	.word	0xffffc7ff

0800dc20 <HOSTCOMMS_GetLastCommandAgeMs>:
 * @param	sysTime		current value of the system tick timer
 * @retval	uint32_t	time elapsed in mS since the last host access
 */
// ****************************************************************************
uint32_t HOSTCOMMS_GetLastCommandAgeMs(const uint32_t sysTime)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
	return MS_TIMEREF_DIFF(m_lastHostCommandTimeMs, sysTime);
 800dc28:	4b03      	ldr	r3, [pc, #12]	; (800dc38 <HOSTCOMMS_GetLastCommandAgeMs+0x18>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	1ad3      	subs	r3, r2, r3
}
 800dc30:	0018      	movs	r0, r3
 800dc32:	46bd      	mov	sp, r7
 800dc34:	b002      	add	sp, #8
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	20000f08 	.word	0x20000f08

0800dc3c <HOSTCOMMS_SetInterrupt>:
 * @param	channel		channel to be accessed
 * @retval	uint16_t	averaged value of the analog channel
 */
// ****************************************************************************
void HOSTCOMMS_SetInterrupt(void)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	af00      	add	r7, sp, #0
	MS_TIME_COUNTER_INIT(m_lastHostCommandTimeMs);
 800dc40:	f7f5 fa46 	bl	80030d0 <HAL_GetTick>
 800dc44:	0002      	movs	r2, r0
 800dc46:	4b02      	ldr	r3, [pc, #8]	; (800dc50 <HOSTCOMMS_SetInterrupt+0x14>)
 800dc48:	601a      	str	r2, [r3, #0]
}
 800dc4a:	46c0      	nop			; (mov r8, r8)
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	20000f08 	.word	0x20000f08

0800dc54 <I2C1_IRQHandler>:
// INTERRUPT HANDLERS
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

void I2C1_IRQHandler(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
	const uint8_t addrMatch = (uint8_t)((I2C1->ISR >> 16u) & 0xFEu);
 800dc5a:	4bbb      	ldr	r3, [pc, #748]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	0c1b      	lsrs	r3, r3, #16
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	200b      	movs	r0, #11
 800dc64:	183b      	adds	r3, r7, r0
 800dc66:	2101      	movs	r1, #1
 800dc68:	438a      	bics	r2, r1
 800dc6a:	701a      	strb	r2, [r3, #0]
	uint32_t addrClear = I2C_ICR_ADDRCF;
 800dc6c:	2308      	movs	r3, #8
 800dc6e:	607b      	str	r3, [r7, #4]
	uint32_t rtcReg_bm;

	if (I2C_ISR_ADDR == (I2C1->ISR & I2C_ISR_ADDR))
 800dc70:	4bb5      	ldr	r3, [pc, #724]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800dc72:	699b      	ldr	r3, [r3, #24]
 800dc74:	2208      	movs	r2, #8
 800dc76:	4013      	ands	r3, r2
 800dc78:	2b08      	cmp	r3, #8
 800dc7a:	d000      	beq.n	800dc7e <I2C1_IRQHandler+0x2a>
 800dc7c:	e0b6      	b.n	800ddec <I2C1_IRQHandler+0x198>
	{
		// Check data direction
		if (I2C_ISR_DIR == (I2C1->ISR & I2C_ISR_DIR))
 800dc7e:	4bb2      	ldr	r3, [pc, #712]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800dc80:	699a      	ldr	r2, [r3, #24]
 800dc82:	2380      	movs	r3, #128	; 0x80
 800dc84:	025b      	lsls	r3, r3, #9
 800dc86:	401a      	ands	r2, r3
 800dc88:	2380      	movs	r3, #128	; 0x80
 800dc8a:	025b      	lsls	r3, r3, #9
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d166      	bne.n	800dd5e <I2C1_IRQHandler+0x10a>
		{
			// Host is attempting to read

			// Check to make sure the host has given a command
			if ( (HOSTCOMMS_MODE_RX == m_hostcommsMode) &&
 800dc90:	4bae      	ldr	r3, [pc, #696]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d15e      	bne.n	800dd56 <I2C1_IRQHandler+0x102>
					(1u == (m_rxLen = (HOSTCOMMS_I2C_BUFFER_LEN - hi2c1.hdmarx->Instance->CNDTR)))
 800dc98:	4bad      	ldr	r3, [pc, #692]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	2280      	movs	r2, #128	; 0x80
 800dca4:	0052      	lsls	r2, r2, #1
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	4baa      	ldr	r3, [pc, #680]	; (800df54 <I2C1_IRQHandler+0x300>)
 800dcac:	801a      	strh	r2, [r3, #0]
 800dcae:	4ba9      	ldr	r3, [pc, #676]	; (800df54 <I2C1_IRQHandler+0x300>)
 800dcb0:	881b      	ldrh	r3, [r3, #0]
			if ( (HOSTCOMMS_MODE_RX == m_hostcommsMode) &&
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d14f      	bne.n	800dd56 <I2C1_IRQHandler+0x102>
					)
			{
				// Disable rx dma
				hi2c1.hdmarx->Instance->CCR &= ~(DMA_CCR_EN);
 800dcb6:	4ba6      	ldr	r3, [pc, #664]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dcb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	4ba4      	ldr	r3, [pc, #656]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2101      	movs	r1, #1
 800dcc6:	438a      	bics	r2, r1
 800dcc8:	601a      	str	r2, [r3, #0]

				if (addrMatch == (I2C1->OAR1 & 0xFEu))
 800dcca:	183b      	adds	r3, r7, r0
 800dccc:	781a      	ldrb	r2, [r3, #0]
 800dcce:	4b9e      	ldr	r3, [pc, #632]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	21fe      	movs	r1, #254	; 0xfe
 800dcd4:	400b      	ands	r3, r1
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d107      	bne.n	800dcea <I2C1_IRQHandler+0x96>
				{
					// Is from pijuice, let the service routine handle it
					m_hostcommsMode = HOSTCOMMS_MODE_TX;
 800dcda:	4b9c      	ldr	r3, [pc, #624]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800dcdc:	2203      	movs	r2, #3
 800dcde:	701a      	strb	r2, [r3, #0]
					m_hostcommsBuffer[0u] = addrMatch;
 800dce0:	4b9d      	ldr	r3, [pc, #628]	; (800df58 <I2C1_IRQHandler+0x304>)
 800dce2:	183a      	adds	r2, r7, r0
 800dce4:	7812      	ldrb	r2, [r2, #0]
 800dce6:	701a      	strb	r2, [r3, #0]
				if (addrMatch == (I2C1->OAR1 & 0xFEu))
 800dce8:	e074      	b.n	800ddd4 <I2C1_IRQHandler+0x180>
				}
				else if (m_hostcommsBuffer[1u] < sizeof(m_rtcBuffer))
 800dcea:	4b9b      	ldr	r3, [pc, #620]	; (800df58 <I2C1_IRQHandler+0x304>)
 800dcec:	785b      	ldrb	r3, [r3, #1]
 800dcee:	2b10      	cmp	r3, #16
 800dcf0:	d82d      	bhi.n	800dd4e <I2C1_IRQHandler+0xfa>
				{
					// Is the RTC, can deal with this right now
					hi2c1.hdmatx->Instance->CMAR = (uint32_t)&m_rtcBuffer[m_hostcommsBuffer[1u]];
 800dcf2:	4b99      	ldr	r3, [pc, #612]	; (800df58 <I2C1_IRQHandler+0x304>)
 800dcf4:	785b      	ldrb	r3, [r3, #1]
 800dcf6:	001a      	movs	r2, r3
 800dcf8:	4b98      	ldr	r3, [pc, #608]	; (800df5c <I2C1_IRQHandler+0x308>)
 800dcfa:	18d2      	adds	r2, r2, r3
 800dcfc:	4b94      	ldr	r3, [pc, #592]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	60da      	str	r2, [r3, #12]
					hi2c1.hdmatx->DmaBaseAddress->IFCR |= (DMA_FLAG_GL1 << hi2c1.hdmatx->ChannelIndex);
 800dd04:	4b92      	ldr	r3, [pc, #584]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd0a:	6859      	ldr	r1, [r3, #4]
 800dd0c:	4b90      	ldr	r3, [pc, #576]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd12:	2201      	movs	r2, #1
 800dd14:	409a      	lsls	r2, r3
 800dd16:	4b8e      	ldr	r3, [pc, #568]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd1c:	430a      	orrs	r2, r1
 800dd1e:	605a      	str	r2, [r3, #4]
					hi2c1.hdmatx->Instance->CNDTR = sizeof(m_rtcBuffer) - m_hostcommsBuffer[1u];
 800dd20:	4b8d      	ldr	r3, [pc, #564]	; (800df58 <I2C1_IRQHandler+0x304>)
 800dd22:	785b      	ldrb	r3, [r3, #1]
 800dd24:	0019      	movs	r1, r3
 800dd26:	4b8a      	ldr	r3, [pc, #552]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2211      	movs	r2, #17
 800dd2e:	1a52      	subs	r2, r2, r1
 800dd30:	605a      	str	r2, [r3, #4]
					hi2c1.hdmatx->Instance->CCR |= DMA_CCR_EN;
 800dd32:	4b87      	ldr	r3, [pc, #540]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	4b85      	ldr	r3, [pc, #532]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2101      	movs	r1, #1
 800dd42:	430a      	orrs	r2, r1
 800dd44:	601a      	str	r2, [r3, #0]

					m_hostcommsMode = HOSTCOMMS_MODE_TX_CLOCK;
 800dd46:	4b81      	ldr	r3, [pc, #516]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800dd48:	2204      	movs	r2, #4
 800dd4a:	701a      	strb	r2, [r3, #0]
				if (addrMatch == (I2C1->OAR1 & 0xFEu))
 800dd4c:	e042      	b.n	800ddd4 <I2C1_IRQHandler+0x180>
				}
				else
				{
					m_hostcommsMode = HOSTCOMMS_MODE_FAULT;
 800dd4e:	4b7f      	ldr	r3, [pc, #508]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800dd50:	2205      	movs	r2, #5
 800dd52:	701a      	strb	r2, [r3, #0]
				if (addrMatch == (I2C1->OAR1 & 0xFEu))
 800dd54:	e03e      	b.n	800ddd4 <I2C1_IRQHandler+0x180>
				}
			}
			else
			{
				m_hostcommsMode = HOSTCOMMS_MODE_FAULT;
 800dd56:	4b7d      	ldr	r3, [pc, #500]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800dd58:	2205      	movs	r2, #5
 800dd5a:	701a      	strb	r2, [r3, #0]
 800dd5c:	e03a      	b.n	800ddd4 <I2C1_IRQHandler+0x180>
			}
		}
		else
		{
			// Host is sending something
			MS_TIME_COUNTER_INIT(m_lastHostCommandTimeMs);
 800dd5e:	f7f5 f9b7 	bl	80030d0 <HAL_GetTick>
 800dd62:	0002      	movs	r2, r0
 800dd64:	4b7e      	ldr	r3, [pc, #504]	; (800df60 <I2C1_IRQHandler+0x30c>)
 800dd66:	601a      	str	r2, [r3, #0]

			if (HOSTCOMMS_MODE_WAIT == m_hostcommsMode)
 800dd68:	4b78      	ldr	r3, [pc, #480]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d12e      	bne.n	800ddce <I2C1_IRQHandler+0x17a>
			{
				m_rxLen = 0u;
 800dd70:	4b78      	ldr	r3, [pc, #480]	; (800df54 <I2C1_IRQHandler+0x300>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	801a      	strh	r2, [r3, #0]

				// Data is for master to slave
				m_hostcommsMode = HOSTCOMMS_MODE_RX;
 800dd76:	4b75      	ldr	r3, [pc, #468]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800dd78:	2201      	movs	r2, #1
 800dd7a:	701a      	strb	r2, [r3, #0]

				// Disable rx dma
				hi2c1.hdmarx->Instance->CCR &= ~(DMA_CCR_EN);
 800dd7c:	4b74      	ldr	r3, [pc, #464]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	4b72      	ldr	r3, [pc, #456]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	438a      	bics	r2, r1
 800dd8e:	601a      	str	r2, [r3, #0]

				// Clear dma flags
				hi2c1.hdmarx->DmaBaseAddress->IFCR |= (DMA_FLAG_GL1 << hi2c1.hdmarx->ChannelIndex);
 800dd90:	4b6f      	ldr	r3, [pc, #444]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd96:	6859      	ldr	r1, [r3, #4]
 800dd98:	4b6d      	ldr	r3, [pc, #436]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dd9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9e:	2201      	movs	r2, #1
 800dda0:	409a      	lsls	r2, r3
 800dda2:	4b6b      	ldr	r3, [pc, #428]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800dda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dda6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dda8:	430a      	orrs	r2, r1
 800ddaa:	605a      	str	r2, [r3, #4]

				// Load in max data size
				hi2c1.hdmarx->Instance->CNDTR = HOSTCOMMS_I2C_BUFFER_LEN;
 800ddac:	4b68      	ldr	r3, [pc, #416]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800ddae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2280      	movs	r2, #128	; 0x80
 800ddb4:	0052      	lsls	r2, r2, #1
 800ddb6:	605a      	str	r2, [r3, #4]

				// Enable dma device
				hi2c1.hdmarx->Instance->CCR |= DMA_CCR_EN;
 800ddb8:	4b65      	ldr	r3, [pc, #404]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800ddba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	4b63      	ldr	r3, [pc, #396]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800ddc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2101      	movs	r1, #1
 800ddc8:	430a      	orrs	r2, r1
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	e002      	b.n	800ddd4 <I2C1_IRQHandler+0x180>
			}
			else
			{
				// Out of sync somehow
				m_hostcommsMode = HOSTCOMMS_MODE_FAULT;
 800ddce:	4b5f      	ldr	r3, [pc, #380]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800ddd0:	2205      	movs	r2, #5
 800ddd2:	701a      	strb	r2, [r3, #0]
			}
		}

		m_addrCount++;
 800ddd4:	4b63      	ldr	r3, [pc, #396]	; (800df64 <I2C1_IRQHandler+0x310>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	1c5a      	adds	r2, r3, #1
 800ddda:	4b62      	ldr	r3, [pc, #392]	; (800df64 <I2C1_IRQHandler+0x310>)
 800dddc:	601a      	str	r2, [r3, #0]

		// Clear the interrupt
		I2C1->ICR |= addrClear;
 800ddde:	4b5a      	ldr	r3, [pc, #360]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800dde0:	69d9      	ldr	r1, [r3, #28]
 800dde2:	4b59      	ldr	r3, [pc, #356]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	430a      	orrs	r2, r1
 800dde8:	61da      	str	r2, [r3, #28]
		}

		// Clear the interrupt
		I2C1->ICR |= I2C_ICR_STOPCF;
	}
}
 800ddea:	e0a8      	b.n	800df3e <I2C1_IRQHandler+0x2ea>
		if (HOSTCOMMS_MODE_RX == m_hostcommsMode)
 800ddec:	4b57      	ldr	r3, [pc, #348]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d000      	beq.n	800ddf6 <I2C1_IRQHandler+0x1a2>
 800ddf4:	e079      	b.n	800deea <I2C1_IRQHandler+0x296>
			m_rxLen = (HOSTCOMMS_I2C_BUFFER_LEN - hi2c1.hdmarx->Instance->CNDTR);
 800ddf6:	4b56      	ldr	r3, [pc, #344]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800ddf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	2280      	movs	r2, #128	; 0x80
 800de02:	0052      	lsls	r2, r2, #1
 800de04:	1ad3      	subs	r3, r2, r3
 800de06:	b29a      	uxth	r2, r3
 800de08:	4b52      	ldr	r3, [pc, #328]	; (800df54 <I2C1_IRQHandler+0x300>)
 800de0a:	801a      	strh	r2, [r3, #0]
			hi2c1.hdmarx->Instance->CCR &= ~(DMA_CCR_EN);
 800de0c:	4b50      	ldr	r3, [pc, #320]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800de0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	4b4e      	ldr	r3, [pc, #312]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800de16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2101      	movs	r1, #1
 800de1c:	438a      	bics	r2, r1
 800de1e:	601a      	str	r2, [r3, #0]
			if (m_rxLen > 1u)
 800de20:	4b4c      	ldr	r3, [pc, #304]	; (800df54 <I2C1_IRQHandler+0x300>)
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d95c      	bls.n	800dee2 <I2C1_IRQHandler+0x28e>
				if (addrMatch == (I2C1->OAR1 & 0xFEu))
 800de28:	200b      	movs	r0, #11
 800de2a:	183b      	adds	r3, r7, r0
 800de2c:	781a      	ldrb	r2, [r3, #0]
 800de2e:	4b46      	ldr	r3, [pc, #280]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	21fe      	movs	r1, #254	; 0xfe
 800de34:	400b      	ands	r3, r1
 800de36:	429a      	cmp	r2, r3
 800de38:	d10d      	bne.n	800de56 <I2C1_IRQHandler+0x202>
					m_hostcommsMode = HOSTCOMMS_MODE_RXC;
 800de3a:	4b44      	ldr	r3, [pc, #272]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800de3c:	2202      	movs	r2, #2
 800de3e:	701a      	strb	r2, [r3, #0]
					m_hostcommsBuffer[0u] = addrMatch;
 800de40:	4b45      	ldr	r3, [pc, #276]	; (800df58 <I2C1_IRQHandler+0x304>)
 800de42:	183a      	adds	r2, r7, r0
 800de44:	7812      	ldrb	r2, [r2, #0]
 800de46:	701a      	strb	r2, [r3, #0]
					I2C1->CR1 &= ~(I2C_CR1_ADDRIE);
 800de48:	4b3f      	ldr	r3, [pc, #252]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	4b3e      	ldr	r3, [pc, #248]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800de4e:	2108      	movs	r1, #8
 800de50:	438a      	bics	r2, r1
 800de52:	601a      	str	r2, [r3, #0]
 800de54:	e03f      	b.n	800ded6 <I2C1_IRQHandler+0x282>
				else if ( (m_hostcommsBuffer[1u] + m_rxLen) <= sizeof(m_rtcBuffer) )
 800de56:	4b40      	ldr	r3, [pc, #256]	; (800df58 <I2C1_IRQHandler+0x304>)
 800de58:	785b      	ldrb	r3, [r3, #1]
 800de5a:	001a      	movs	r2, r3
 800de5c:	4b3d      	ldr	r3, [pc, #244]	; (800df54 <I2C1_IRQHandler+0x300>)
 800de5e:	881b      	ldrh	r3, [r3, #0]
 800de60:	18d3      	adds	r3, r2, r3
 800de62:	2b11      	cmp	r3, #17
 800de64:	d834      	bhi.n	800ded0 <I2C1_IRQHandler+0x27c>
					m_rxLen--;
 800de66:	4b3b      	ldr	r3, [pc, #236]	; (800df54 <I2C1_IRQHandler+0x300>)
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	4b39      	ldr	r3, [pc, #228]	; (800df54 <I2C1_IRQHandler+0x300>)
 800de70:	801a      	strh	r2, [r3, #0]
					rtcReg_bm = (1u << (m_hostcommsBuffer[1u] + m_rxLen));
 800de72:	4b39      	ldr	r3, [pc, #228]	; (800df58 <I2C1_IRQHandler+0x304>)
 800de74:	785b      	ldrb	r3, [r3, #1]
 800de76:	001a      	movs	r2, r3
 800de78:	4b36      	ldr	r3, [pc, #216]	; (800df54 <I2C1_IRQHandler+0x300>)
 800de7a:	881b      	ldrh	r3, [r3, #0]
 800de7c:	18d3      	adds	r3, r2, r3
 800de7e:	2201      	movs	r2, #1
 800de80:	409a      	lsls	r2, r3
 800de82:	0013      	movs	r3, r2
 800de84:	60fb      	str	r3, [r7, #12]
					while (m_rxLen > 0u)
 800de86:	e01b      	b.n	800dec0 <I2C1_IRQHandler+0x26c>
						m_rxLen--;
 800de88:	4b32      	ldr	r3, [pc, #200]	; (800df54 <I2C1_IRQHandler+0x300>)
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	3b01      	subs	r3, #1
 800de8e:	b29a      	uxth	r2, r3
 800de90:	4b30      	ldr	r3, [pc, #192]	; (800df54 <I2C1_IRQHandler+0x300>)
 800de92:	801a      	strh	r2, [r3, #0]
						rtcReg_bm >>= 1u;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	085b      	lsrs	r3, r3, #1
 800de98:	60fb      	str	r3, [r7, #12]
						m_rtcBuffer[m_hostcommsBuffer[1u] + m_rxLen] = m_hostcommsBuffer[2u + m_rxLen];
 800de9a:	4b2e      	ldr	r3, [pc, #184]	; (800df54 <I2C1_IRQHandler+0x300>)
 800de9c:	881b      	ldrh	r3, [r3, #0]
 800de9e:	1c9a      	adds	r2, r3, #2
 800dea0:	4b2d      	ldr	r3, [pc, #180]	; (800df58 <I2C1_IRQHandler+0x304>)
 800dea2:	785b      	ldrb	r3, [r3, #1]
 800dea4:	0019      	movs	r1, r3
 800dea6:	4b2b      	ldr	r3, [pc, #172]	; (800df54 <I2C1_IRQHandler+0x300>)
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	18cb      	adds	r3, r1, r3
 800deac:	492a      	ldr	r1, [pc, #168]	; (800df58 <I2C1_IRQHandler+0x304>)
 800deae:	5c89      	ldrb	r1, [r1, r2]
 800deb0:	4a2a      	ldr	r2, [pc, #168]	; (800df5c <I2C1_IRQHandler+0x308>)
 800deb2:	54d1      	strb	r1, [r2, r3]
						m_rtcRegUpdate_bm |= rtcReg_bm;
 800deb4:	4b2c      	ldr	r3, [pc, #176]	; (800df68 <I2C1_IRQHandler+0x314>)
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	431a      	orrs	r2, r3
 800debc:	4b2a      	ldr	r3, [pc, #168]	; (800df68 <I2C1_IRQHandler+0x314>)
 800debe:	601a      	str	r2, [r3, #0]
					while (m_rxLen > 0u)
 800dec0:	4b24      	ldr	r3, [pc, #144]	; (800df54 <I2C1_IRQHandler+0x300>)
 800dec2:	881b      	ldrh	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1df      	bne.n	800de88 <I2C1_IRQHandler+0x234>
					m_hostcommsMode = HOSTCOMMS_MODE_WAIT;
 800dec8:	4b20      	ldr	r3, [pc, #128]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800deca:	2200      	movs	r2, #0
 800decc:	701a      	strb	r2, [r3, #0]
 800dece:	e002      	b.n	800ded6 <I2C1_IRQHandler+0x282>
					m_hostcommsMode = HOSTCOMMS_MODE_FAULT;
 800ded0:	4b1e      	ldr	r3, [pc, #120]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800ded2:	2205      	movs	r2, #5
 800ded4:	701a      	strb	r2, [r3, #0]
				m_rxCount++;
 800ded6:	4b25      	ldr	r3, [pc, #148]	; (800df6c <I2C1_IRQHandler+0x318>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	1c5a      	adds	r2, r3, #1
 800dedc:	4b23      	ldr	r3, [pc, #140]	; (800df6c <I2C1_IRQHandler+0x318>)
 800dede:	601a      	str	r2, [r3, #0]
 800dee0:	e027      	b.n	800df32 <I2C1_IRQHandler+0x2de>
				m_hostcommsMode = HOSTCOMMS_MODE_WAIT;
 800dee2:	4b1a      	ldr	r3, [pc, #104]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	701a      	strb	r2, [r3, #0]
 800dee8:	e023      	b.n	800df32 <I2C1_IRQHandler+0x2de>
		else if ( (HOSTCOMMS_MODE_TX == m_hostcommsMode) || (HOSTCOMMS_MODE_TX_CLOCK == m_hostcommsMode) )
 800deea:	4b18      	ldr	r3, [pc, #96]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b03      	cmp	r3, #3
 800def0:	d003      	beq.n	800defa <I2C1_IRQHandler+0x2a6>
 800def2:	4b16      	ldr	r3, [pc, #88]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	2b04      	cmp	r3, #4
 800def8:	d118      	bne.n	800df2c <I2C1_IRQHandler+0x2d8>
			hi2c1.hdmatx->Instance->CCR &= ~(DMA_CCR_EN);
 800defa:	4b15      	ldr	r3, [pc, #84]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	4b13      	ldr	r3, [pc, #76]	; (800df50 <I2C1_IRQHandler+0x2fc>)
 800df04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2101      	movs	r1, #1
 800df0a:	438a      	bics	r2, r1
 800df0c:	601a      	str	r2, [r3, #0]
			I2C1->ISR |= I2C_ISR_TXE;
 800df0e:	4b0e      	ldr	r3, [pc, #56]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800df10:	699a      	ldr	r2, [r3, #24]
 800df12:	4b0d      	ldr	r3, [pc, #52]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800df14:	2101      	movs	r1, #1
 800df16:	430a      	orrs	r2, r1
 800df18:	619a      	str	r2, [r3, #24]
			m_hostcommsMode = HOSTCOMMS_MODE_WAIT;
 800df1a:	4b0c      	ldr	r3, [pc, #48]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	701a      	strb	r2, [r3, #0]
			m_txCount++;
 800df20:	4b13      	ldr	r3, [pc, #76]	; (800df70 <I2C1_IRQHandler+0x31c>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	1c5a      	adds	r2, r3, #1
 800df26:	4b12      	ldr	r3, [pc, #72]	; (800df70 <I2C1_IRQHandler+0x31c>)
 800df28:	601a      	str	r2, [r3, #0]
 800df2a:	e002      	b.n	800df32 <I2C1_IRQHandler+0x2de>
			m_hostcommsMode = HOSTCOMMS_MODE_FAULT;
 800df2c:	4b07      	ldr	r3, [pc, #28]	; (800df4c <I2C1_IRQHandler+0x2f8>)
 800df2e:	2205      	movs	r2, #5
 800df30:	701a      	strb	r2, [r3, #0]
		I2C1->ICR |= I2C_ICR_STOPCF;
 800df32:	4b05      	ldr	r3, [pc, #20]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800df34:	69da      	ldr	r2, [r3, #28]
 800df36:	4b04      	ldr	r3, [pc, #16]	; (800df48 <I2C1_IRQHandler+0x2f4>)
 800df38:	2120      	movs	r1, #32
 800df3a:	430a      	orrs	r2, r1
 800df3c:	61da      	str	r2, [r3, #28]
}
 800df3e:	46c0      	nop			; (mov r8, r8)
 800df40:	46bd      	mov	sp, r7
 800df42:	b004      	add	sp, #16
 800df44:	bd80      	pop	{r7, pc}
 800df46:	46c0      	nop			; (mov r8, r8)
 800df48:	40005400 	.word	0x40005400
 800df4c:	200014c0 	.word	0x200014c0
 800df50:	20001634 	.word	0x20001634
 800df54:	200014a8 	.word	0x200014a8
 800df58:	200013a8 	.word	0x200013a8
 800df5c:	200014c4 	.word	0x200014c4
 800df60:	20000f08 	.word	0x20000f08
 800df64:	200014b4 	.word	0x200014b4
 800df68:	200014d8 	.word	0x200014d8
 800df6c:	200014b0 	.word	0x200014b0
 800df70:	200014ac 	.word	0x200014ac

0800df74 <I2C2_IRQHandler>:
// ----------------------------------------------------------------------------
// INTERRUPT HANDLERS
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
void I2C2_IRQHandler(void)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
	I2CDRV_Device_t * p_device = &m_devices[1u];
 800df7a:	4b29      	ldr	r3, [pc, #164]	; (800e020 <I2C2_IRQHandler+0xac>)
 800df7c:	607b      	str	r3, [r7, #4]

	if (0u != (I2C2->ISR & I2C_ISR_TXIS))
 800df7e:	4b29      	ldr	r3, [pc, #164]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800df80:	699b      	ldr	r3, [r3, #24]
 800df82:	2202      	movs	r2, #2
 800df84:	4013      	ands	r3, r2
 800df86:	d023      	beq.n	800dfd0 <I2C2_IRQHandler+0x5c>
	{
		// Transmit complete of address

		I2C2->CR1 &= ~I2C_CR1_TXIE;
 800df88:	4b26      	ldr	r3, [pc, #152]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	4b25      	ldr	r3, [pc, #148]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800df8e:	2102      	movs	r1, #2
 800df90:	438a      	bics	r2, r1
 800df92:	601a      	str	r2, [r3, #0]

		// Start transmitting data via dma
		if (p_device->status == I2CDRV_STATUS_BUSY_TX)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2224      	movs	r2, #36	; 0x24
 800df98:	5c9b      	ldrb	r3, [r3, r2]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d108      	bne.n	800dfb0 <I2C2_IRQHandler+0x3c>
		{
			p_device->p_dmaTXChannelInstance->CCR |= DMA_CCR_EN;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	430a      	orrs	r2, r1
 800dfac:	601a      	str	r2, [r3, #0]

		// Start the transfer!!
		// Start read is an extra bit from start write RD_WRN
		I2C2->CR2 |=  (p_device->datalen << I2C_CR2_NBYTES_Pos) | I2C_AUTOEND_MODE | (I2C_GENERATE_START_READ);
	}
}
 800dfae:	e033      	b.n	800e018 <I2C2_IRQHandler+0xa4>
		else if(p_device->status == I2CDRV_STATUS_BUSY_RX)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2224      	movs	r2, #36	; 0x24
 800dfb4:	5c9b      	ldrb	r3, [r3, r2]
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	d12e      	bne.n	800e018 <I2C2_IRQHandler+0xa4>
			I2C2->CR1 |= I2C_CR1_TCIE;
 800dfba:	4b1a      	ldr	r3, [pc, #104]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	4b19      	ldr	r3, [pc, #100]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800dfc0:	2140      	movs	r1, #64	; 0x40
 800dfc2:	430a      	orrs	r2, r1
 800dfc4:	601a      	str	r2, [r3, #0]
			I2C2->TXDR = p_device->data[0u];
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	7dda      	ldrb	r2, [r3, #23]
 800dfca:	4b16      	ldr	r3, [pc, #88]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800dfcc:	629a      	str	r2, [r3, #40]	; 0x28
}
 800dfce:	e023      	b.n	800e018 <I2C2_IRQHandler+0xa4>
	else if (0u != (I2C2->ISR & I2C_ISR_TC))
 800dfd0:	4b14      	ldr	r3, [pc, #80]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800dfd2:	699b      	ldr	r3, [r3, #24]
 800dfd4:	2240      	movs	r2, #64	; 0x40
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	d01e      	beq.n	800e018 <I2C2_IRQHandler+0xa4>
		I2C2->CR1 &= ~I2C_CR1_TCIE;
 800dfda:	4b12      	ldr	r3, [pc, #72]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	4b11      	ldr	r3, [pc, #68]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800dfe0:	2140      	movs	r1, #64	; 0x40
 800dfe2:	438a      	bics	r2, r1
 800dfe4:	601a      	str	r2, [r3, #0]
		p_device->p_dmaRXChannelInstance->CCR |= DMA_CCR_EN;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	691b      	ldr	r3, [r3, #16]
 800dff0:	2101      	movs	r1, #1
 800dff2:	430a      	orrs	r2, r1
 800dff4:	601a      	str	r2, [r3, #0]
		I2C2->CR2 &= ~I2C_CR2_NBYTES;
 800dff6:	4b0b      	ldr	r3, [pc, #44]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800dff8:	685a      	ldr	r2, [r3, #4]
 800dffa:	4b0a      	ldr	r3, [pc, #40]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800dffc:	490a      	ldr	r1, [pc, #40]	; (800e028 <I2C2_IRQHandler+0xb4>)
 800dffe:	400a      	ands	r2, r1
 800e000:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |=  (p_device->datalen << I2C_CR2_NBYTES_Pos) | I2C_AUTOEND_MODE | (I2C_GENERATE_START_READ);
 800e002:	4b08      	ldr	r3, [pc, #32]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	2123      	movs	r1, #35	; 0x23
 800e00a:	5c52      	ldrb	r2, [r2, r1]
 800e00c:	0412      	lsls	r2, r2, #16
 800e00e:	431a      	orrs	r2, r3
 800e010:	4b04      	ldr	r3, [pc, #16]	; (800e024 <I2C2_IRQHandler+0xb0>)
 800e012:	4906      	ldr	r1, [pc, #24]	; (800e02c <I2C2_IRQHandler+0xb8>)
 800e014:	430a      	orrs	r2, r1
 800e016:	605a      	str	r2, [r3, #4]
}
 800e018:	46c0      	nop			; (mov r8, r8)
 800e01a:	46bd      	mov	sp, r7
 800e01c:	b002      	add	sp, #8
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	200004fc 	.word	0x200004fc
 800e024:	40005800 	.word	0x40005800
 800e028:	ff00ffff 	.word	0xff00ffff
 800e02c:	82002400 	.word	0x82002400

0800e030 <I2CDRV_Init>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void I2CDRV_Init(const uint32_t sysTime)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
	// Tell the dma controllers about the data addresses
	// They'll have already been configured for operation by CubeMX in the msp module.
	// Steal all the useful values out of the info structs

	m_devices[1u].p_dmaTXInstance = hi2c2.hdmatx->DmaBaseAddress;
 800e038:	4b24      	ldr	r3, [pc, #144]	; (800e0cc <I2CDRV_Init+0x9c>)
 800e03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e03c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e03e:	4b24      	ldr	r3, [pc, #144]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e040:	635a      	str	r2, [r3, #52]	; 0x34
	m_devices[1u].p_dmaTXChannelInstance = hi2c2.hdmatx->Instance;
 800e042:	4b22      	ldr	r3, [pc, #136]	; (800e0cc <I2CDRV_Init+0x9c>)
 800e044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	4b21      	ldr	r3, [pc, #132]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e04a:	63da      	str	r2, [r3, #60]	; 0x3c

	// Sneaky stm actually makes the channel index the isr and icr pos
	m_devices[1u].txDmaChannelIndex = hi2c2.hdmatx->ChannelIndex;
 800e04c:	4b1f      	ldr	r3, [pc, #124]	; (800e0cc <I2CDRV_Init+0x9c>)
 800e04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e052:	b2d9      	uxtb	r1, r3
 800e054:	4b1e      	ldr	r3, [pc, #120]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e056:	2245      	movs	r2, #69	; 0x45
 800e058:	5499      	strb	r1, [r3, r2]

	m_devices[1u].p_dmaRXInstance = hi2c2.hdmarx->DmaBaseAddress;
 800e05a:	4b1c      	ldr	r3, [pc, #112]	; (800e0cc <I2CDRV_Init+0x9c>)
 800e05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e05e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e060:	4b1b      	ldr	r3, [pc, #108]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e062:	639a      	str	r2, [r3, #56]	; 0x38
	m_devices[1u].p_dmaRXChannelInstance = hi2c2.hdmarx->Instance;
 800e064:	4b19      	ldr	r3, [pc, #100]	; (800e0cc <I2CDRV_Init+0x9c>)
 800e066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	4b19      	ldr	r3, [pc, #100]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e06c:	641a      	str	r2, [r3, #64]	; 0x40

	// Sneaky stm actually makes the channel index the isr and icr pos
	m_devices[1u].rxDmaChannelIndex = hi2c2.hdmarx->ChannelIndex;
 800e06e:	4b17      	ldr	r3, [pc, #92]	; (800e0cc <I2CDRV_Init+0x9c>)
 800e070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e074:	b2d9      	uxtb	r1, r3
 800e076:	4b16      	ldr	r3, [pc, #88]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e078:	2244      	movs	r2, #68	; 0x44
 800e07a:	5499      	strb	r1, [r3, r2]

	m_devices[1u].p_dmaTXChannelInstance->CPAR = (uint32_t)&I2C2->TXDR;
 800e07c:	4b14      	ldr	r3, [pc, #80]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e07e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e080:	4a14      	ldr	r2, [pc, #80]	; (800e0d4 <I2CDRV_Init+0xa4>)
 800e082:	609a      	str	r2, [r3, #8]
	m_devices[1u].p_dmaTXChannelInstance->CMAR = (uint32_t)m_devices[1u].data;
 800e084:	4b12      	ldr	r3, [pc, #72]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e088:	4a13      	ldr	r2, [pc, #76]	; (800e0d8 <I2CDRV_Init+0xa8>)
 800e08a:	60da      	str	r2, [r3, #12]

	m_devices[1u].p_dmaRXChannelInstance->CPAR = (uint32_t)&I2C2->RXDR;
 800e08c:	4b10      	ldr	r3, [pc, #64]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e090:	4a12      	ldr	r2, [pc, #72]	; (800e0dc <I2CDRV_Init+0xac>)
 800e092:	609a      	str	r2, [r3, #8]
	// Point to the 3rd byte as the first will contain the address to read
	// The second will contain the device address with the read flag set (bit 0)
	m_devices[1u].p_dmaRXChannelInstance->CMAR = (uint32_t)&m_devices[1u].data[2u];
 800e094:	4b0e      	ldr	r3, [pc, #56]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e098:	4a11      	ldr	r2, [pc, #68]	; (800e0e0 <I2CDRV_Init+0xb0>)
 800e09a:	60da      	str	r2, [r3, #12]

	// Enable the DMA transfer mode
	I2C2->CR1 |= I2C_CR1_TXDMAEN | I2C_CR1_RXDMAEN;
 800e09c:	4b11      	ldr	r3, [pc, #68]	; (800e0e4 <I2CDRV_Init+0xb4>)
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	4b10      	ldr	r3, [pc, #64]	; (800e0e4 <I2CDRV_Init+0xb4>)
 800e0a2:	21c0      	movs	r1, #192	; 0xc0
 800e0a4:	0209      	lsls	r1, r1, #8
 800e0a6:	430a      	orrs	r2, r1
 800e0a8:	601a      	str	r2, [r3, #0]

	// Turn off device until we're ready to use it.
	I2C2->CR1 &= ~I2C_CR1_PE;
 800e0aa:	4b0e      	ldr	r3, [pc, #56]	; (800e0e4 <I2CDRV_Init+0xb4>)
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	4b0d      	ldr	r3, [pc, #52]	; (800e0e4 <I2CDRV_Init+0xb4>)
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	438a      	bics	r2, r1
 800e0b4:	601a      	str	r2, [r3, #0]

	// Disable own address
	I2C2->OAR1 = 0u;
 800e0b6:	4b0b      	ldr	r3, [pc, #44]	; (800e0e4 <I2CDRV_Init+0xb4>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	609a      	str	r2, [r3, #8]


	m_devices[1u].status = I2CDRV_STATUS_READY;
 800e0bc:	4b04      	ldr	r3, [pc, #16]	; (800e0d0 <I2CDRV_Init+0xa0>)
 800e0be:	2254      	movs	r2, #84	; 0x54
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	5499      	strb	r1, [r3, r2]
}
 800e0c4:	46c0      	nop			; (mov r8, r8)
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	b002      	add	sp, #8
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	200016d8 	.word	0x200016d8
 800e0d0:	200004cc 	.word	0x200004cc
 800e0d4:	40005828 	.word	0x40005828
 800e0d8:	20000513 	.word	0x20000513
 800e0dc:	40005824 	.word	0x40005824
 800e0e0:	20000515 	.word	0x20000515
 800e0e4:	40005800 	.word	0x40005800

0800e0e8 <I2CDRV_Shutdown>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void I2CDRV_Shutdown(void)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0
	I2C2->CR1 &= ~I2C_CR1_PE;
 800e0ec:	4b04      	ldr	r3, [pc, #16]	; (800e100 <I2CDRV_Shutdown+0x18>)
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	4b03      	ldr	r3, [pc, #12]	; (800e100 <I2CDRV_Shutdown+0x18>)
 800e0f2:	2101      	movs	r1, #1
 800e0f4:	438a      	bics	r2, r1
 800e0f6:	601a      	str	r2, [r3, #0]
}
 800e0f8:	46c0      	nop			; (mov r8, r8)
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	46c0      	nop			; (mov r8, r8)
 800e100:	40005800 	.word	0x40005800

0800e104 <I2CDRV_Service>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void I2CDRV_Service(const uint32_t sysTime)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
	I2CDRV_ProcessDevice(&m_devices[1u], sysTime);
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	4b04      	ldr	r3, [pc, #16]	; (800e120 <I2CDRV_Service+0x1c>)
 800e110:	0011      	movs	r1, r2
 800e112:	0018      	movs	r0, r3
 800e114:	f000 f8f6 	bl	800e304 <I2CDRV_ProcessDevice>
}
 800e118:	46c0      	nop			; (mov r8, r8)
 800e11a:	46bd      	mov	sp, r7
 800e11c:	b002      	add	sp, #8
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	200004fc 	.word	0x200004fc

0800e124 <I2CDRV_IsReady>:
 * @retval	bool		true = device is ready
 * 						false = device is busy or just not available
 */
// ****************************************************************************
bool I2CDRV_IsReady(uint8_t devIdx)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	0002      	movs	r2, r0
 800e12c:	1dfb      	adds	r3, r7, #7
 800e12e:	701a      	strb	r2, [r3, #0]
	if (devIdx < I2CDRV_MAX_DEVICES)
 800e130:	1dfb      	adds	r3, r7, #7
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	2b01      	cmp	r3, #1
 800e136:	d80e      	bhi.n	800e156 <I2CDRV_IsReady+0x32>
	{
		return m_devices[devIdx].status == I2CDRV_STATUS_READY;
 800e138:	1dfb      	adds	r3, r7, #7
 800e13a:	781a      	ldrb	r2, [r3, #0]
 800e13c:	4908      	ldr	r1, [pc, #32]	; (800e160 <I2CDRV_IsReady+0x3c>)
 800e13e:	2024      	movs	r0, #36	; 0x24
 800e140:	0013      	movs	r3, r2
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	189b      	adds	r3, r3, r2
 800e146:	011b      	lsls	r3, r3, #4
 800e148:	18cb      	adds	r3, r1, r3
 800e14a:	181b      	adds	r3, r3, r0
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	425a      	negs	r2, r3
 800e150:	4153      	adcs	r3, r2
 800e152:	b2db      	uxtb	r3, r3
 800e154:	e000      	b.n	800e158 <I2CDRV_IsReady+0x34>
	}

	return false;
 800e156:	2300      	movs	r3, #0
}
 800e158:	0018      	movs	r0, r3
 800e15a:	46bd      	mov	sp, r7
 800e15c:	b002      	add	sp, #8
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	200004cc 	.word	0x200004cc

0800e164 <I2CDRV_Transact>:
// ****************************************************************************
bool I2CDRV_Transact(const uint8_t deviceIdx, const uint8_t addr,
					const uint8_t * const data,	const uint8_t len,
					I2CDRV_TransactionType_t transactType, const I2CDRV_EventCb_t callback,
					const uint16_t timeout, const uint32_t sysTime)
{
 800e164:	b590      	push	{r4, r7, lr}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	0004      	movs	r4, r0
 800e16c:	0008      	movs	r0, r1
 800e16e:	603a      	str	r2, [r7, #0]
 800e170:	0019      	movs	r1, r3
 800e172:	1dfb      	adds	r3, r7, #7
 800e174:	1c22      	adds	r2, r4, #0
 800e176:	701a      	strb	r2, [r3, #0]
 800e178:	1dbb      	adds	r3, r7, #6
 800e17a:	1c02      	adds	r2, r0, #0
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	1d7b      	adds	r3, r7, #5
 800e180:	1c0a      	adds	r2, r1, #0
 800e182:	701a      	strb	r2, [r3, #0]

	if (deviceIdx >= I2CDRV_MAX_DEVICES)
 800e184:	1dfb      	adds	r3, r7, #7
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d901      	bls.n	800e190 <I2CDRV_Transact+0x2c>
	{
		return false;
 800e18c:	2300      	movs	r3, #0
 800e18e:	e0af      	b.n	800e2f0 <I2CDRV_Transact+0x18c>
	}

	I2CDRV_Device_t * const p_device = &m_devices[deviceIdx];
 800e190:	1dfb      	adds	r3, r7, #7
 800e192:	781a      	ldrb	r2, [r3, #0]
 800e194:	0013      	movs	r3, r2
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	189b      	adds	r3, r3, r2
 800e19a:	011b      	lsls	r3, r3, #4
 800e19c:	4a56      	ldr	r2, [pc, #344]	; (800e2f8 <I2CDRV_Transact+0x194>)
 800e19e:	189b      	adds	r3, r3, r2
 800e1a0:	60fb      	str	r3, [r7, #12]

	if (p_device->status != I2CDRV_STATUS_READY)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2224      	movs	r2, #36	; 0x24
 800e1a6:	5c9b      	ldrb	r3, [r3, r2]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d001      	beq.n	800e1b0 <I2CDRV_Transact+0x4c>
	{
		return false;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	e09f      	b.n	800e2f0 <I2CDRV_Transact+0x18c>
	}

	if ( (len > sizeof(p_device->data)) || (len == 0u) )
 800e1b0:	1d7b      	adds	r3, r7, #5
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	2b0c      	cmp	r3, #12
 800e1b6:	d803      	bhi.n	800e1c0 <I2CDRV_Transact+0x5c>
 800e1b8:	1d7b      	adds	r3, r7, #5
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d101      	bne.n	800e1c4 <I2CDRV_Transact+0x60>
	{
		return false;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	e095      	b.n	800e2f0 <I2CDRV_Transact+0x18c>
	}


	p_device->datalen = len;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	1d7a      	adds	r2, r7, #5
 800e1c8:	2123      	movs	r1, #35	; 0x23
 800e1ca:	7812      	ldrb	r2, [r2, #0]
 800e1cc:	545a      	strb	r2, [r3, r1]
	p_device->event = I2CDRV_EVENT_NONE;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	759a      	strb	r2, [r3, #22]


	m_deviceCallbacks[deviceIdx] = callback;
 800e1d4:	1dfb      	adds	r3, r7, #7
 800e1d6:	781a      	ldrb	r2, [r3, #0]
 800e1d8:	4b48      	ldr	r3, [pc, #288]	; (800e2fc <I2CDRV_Transact+0x198>)
 800e1da:	0092      	lsls	r2, r2, #2
 800e1dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1de:	50d1      	str	r1, [r2, r3]

	if (transactType == I2CDRV_TRANSACTION_TX)
 800e1e0:	2320      	movs	r3, #32
 800e1e2:	18fb      	adds	r3, r7, r3
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d12c      	bne.n	800e244 <I2CDRV_Transact+0xe0>
	{
		// Copy data to transmit
		memcpy(p_device->data, data, len);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	3317      	adds	r3, #23
 800e1ee:	0018      	movs	r0, r3
 800e1f0:	1d7b      	adds	r3, r7, #5
 800e1f2:	781a      	ldrb	r2, [r3, #0]
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	0019      	movs	r1, r3
 800e1f8:	f005 fb50 	bl	801389c <memcpy>

		// Transmit action is pretty straightforward.... Just spam out the data.
		p_device->p_i2cInstance->CR2 = I2C_AUTOEND_MODE | (len << I2C_CR2_NBYTES_Pos);
 800e1fc:	1d7b      	adds	r3, r7, #5
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	041b      	lsls	r3, r3, #16
 800e202:	0019      	movs	r1, r3
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2280      	movs	r2, #128	; 0x80
 800e20a:	0492      	lsls	r2, r2, #18
 800e20c:	430a      	orrs	r2, r1
 800e20e:	605a      	str	r2, [r3, #4]

		// Disable DMA channel for transmitter
		p_device->p_dmaTXChannelInstance->CCR &= ~DMA_CCR_EN;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	2101      	movs	r1, #1
 800e21c:	438a      	bics	r2, r1
 800e21e:	601a      	str	r2, [r3, #0]

		// Clear all flags
		p_device->p_dmaTXInstance->IFCR = (DMA_FLAG_GL1 << p_device->txDmaChannelIndex);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	7d5b      	ldrb	r3, [r3, #21]
 800e224:	0019      	movs	r1, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	408a      	lsls	r2, r1
 800e22e:	605a      	str	r2, [r3, #4]

		// Bung in the amount of data to send
		p_device->p_dmaTXChannelInstance->CNDTR = len;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	1d7a      	adds	r2, r7, #5
 800e236:	7812      	ldrb	r2, [r2, #0]
 800e238:	605a      	str	r2, [r3, #4]

		p_device->status = I2CDRV_STATUS_BUSY_TX;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2224      	movs	r2, #36	; 0x24
 800e23e:	2101      	movs	r1, #1
 800e240:	5499      	strb	r1, [r3, r2]
 800e242:	e039      	b.n	800e2b8 <I2CDRV_Transact+0x154>

	}
	else if (transactType == I2CDRV_TRANSACTION_RX)
 800e244:	2320      	movs	r3, #32
 800e246:	18fb      	adds	r3, r7, r3
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d132      	bne.n	800e2b4 <I2CDRV_Transact+0x150>

		// This implementation luckily only requires one byte so it'll just send out the address
		// in the first iteration of the interrupt routine.

		// Only need the first byte to read
		p_device->data[0u] = data[0u];
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	781a      	ldrb	r2, [r3, #0]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	75da      	strb	r2, [r3, #23]

		// Populate the address to send and the read flag
		p_device->data[1u] = (addr | 0x01u);
 800e256:	1dbb      	adds	r3, r7, #6
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	2201      	movs	r2, #1
 800e25c:	4313      	orrs	r3, r2
 800e25e:	b2da      	uxtb	r2, r3
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	761a      	strb	r2, [r3, #24]

		// Clear rest of the buffer
		memset(&p_device->data[2u], 0u, len);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	3319      	adds	r3, #25
 800e268:	0018      	movs	r0, r3
 800e26a:	1d7b      	adds	r3, r7, #5
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	001a      	movs	r2, r3
 800e270:	2100      	movs	r1, #0
 800e272:	f005 fb1c 	bl	80138ae <memset>

		// Make sure the stop bit doesn't get set, load in 1 byte for address
		p_device->p_i2cInstance->CR2 = (1u << I2C_CR2_NBYTES_Pos);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2280      	movs	r2, #128	; 0x80
 800e27c:	0252      	lsls	r2, r2, #9
 800e27e:	605a      	str	r2, [r3, #4]

		// Disable DMA channel for transmitter
		p_device->p_dmaRXChannelInstance->CCR &= ~DMA_CCR_EN;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	691b      	ldr	r3, [r3, #16]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	2101      	movs	r1, #1
 800e28c:	438a      	bics	r2, r1
 800e28e:	601a      	str	r2, [r3, #0]

		// Clear all flags
		p_device->p_dmaRXInstance->IFCR = (DMA_FLAG_GL1 << p_device->rxDmaChannelIndex);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	7d1b      	ldrb	r3, [r3, #20]
 800e294:	0019      	movs	r1, r3
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	689b      	ldr	r3, [r3, #8]
 800e29a:	2201      	movs	r2, #1
 800e29c:	408a      	lsls	r2, r1
 800e29e:	605a      	str	r2, [r3, #4]

		// Bung in the amount of data to expect
		p_device->p_dmaRXChannelInstance->CNDTR = len;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	1d7a      	adds	r2, r7, #5
 800e2a6:	7812      	ldrb	r2, [r2, #0]
 800e2a8:	605a      	str	r2, [r3, #4]

		// Notify what the device is busy doing
		p_device->status = I2CDRV_STATUS_BUSY_RX;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2224      	movs	r2, #36	; 0x24
 800e2ae:	2102      	movs	r1, #2
 800e2b0:	5499      	strb	r1, [r3, r2]
 800e2b2:	e001      	b.n	800e2b8 <I2CDRV_Transact+0x154>

	}
	else
	{
		return false;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	e01b      	b.n	800e2f0 <I2CDRV_Transact+0x18c>
	}

	// Note transaction start time
	MS_TIMEREF_INIT(p_device->transactTime, sysTime);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2bc:	629a      	str	r2, [r3, #40]	; 0x28

	// Load in the max time for the transaction
	p_device->timeout = timeout;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2228      	movs	r2, #40	; 0x28
 800e2c2:	18ba      	adds	r2, r7, r2
 800e2c4:	8812      	ldrh	r2, [r2, #0]
 800e2c6:	859a      	strh	r2, [r3, #44]	; 0x2c

	// Enable the transmit interrupt and turn on the peripheral
	p_device->p_i2cInstance->CR1 |= I2C_CR1_PE | I2C_CR1_TXIE;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2103      	movs	r1, #3
 800e2d4:	430a      	orrs	r2, r1
 800e2d6:	601a      	str	r2, [r3, #0]

	// Initiate the transaction
	p_device->p_i2cInstance->CR2 |= (addr | I2C_GENERATE_START_WRITE);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	685a      	ldr	r2, [r3, #4]
 800e2de:	1dbb      	adds	r3, r7, #6
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	431a      	orrs	r2, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4905      	ldr	r1, [pc, #20]	; (800e300 <I2CDRV_Transact+0x19c>)
 800e2ea:	430a      	orrs	r2, r1
 800e2ec:	605a      	str	r2, [r3, #4]

	return true;
 800e2ee:	2301      	movs	r3, #1
}
 800e2f0:	0018      	movs	r0, r3
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	b005      	add	sp, #20
 800e2f6:	bd90      	pop	{r4, r7, pc}
 800e2f8:	200004cc 	.word	0x200004cc
 800e2fc:	200014dc 	.word	0x200014dc
 800e300:	80002000 	.word	0x80002000

0800e304 <I2CDRV_ProcessDevice>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void I2CDRV_ProcessDevice(I2CDRV_Device_t * p_device, uint32_t sysTime)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
	DMA_TypeDef * p_dma;
	uint8_t dmaChannelPos;


	// If blocked or ready then alles gut
	if ( (I2CDRV_STATUS_BUSY_TX == p_device->status) || (I2CDRV_STATUS_BUSY_RX == p_device->status) )
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2224      	movs	r2, #36	; 0x24
 800e312:	5c9b      	ldrb	r3, [r3, r2]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d004      	beq.n	800e322 <I2CDRV_ProcessDevice+0x1e>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2224      	movs	r2, #36	; 0x24
 800e31c:	5c9b      	ldrb	r3, [r3, r2]
 800e31e:	2b02      	cmp	r3, #2
 800e320:	d155      	bne.n	800e3ce <I2CDRV_ProcessDevice+0xca>
	{
		p_dmaChannel = (I2CDRV_STATUS_BUSY_TX == p_device->status) ?
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2224      	movs	r2, #36	; 0x24
 800e326:	5c9b      	ldrb	r3, [r3, r2]
												p_device->p_dmaTXChannelInstance :
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d102      	bne.n	800e332 <I2CDRV_ProcessDevice+0x2e>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	e001      	b.n	800e336 <I2CDRV_ProcessDevice+0x32>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	691b      	ldr	r3, [r3, #16]
		p_dmaChannel = (I2CDRV_STATUS_BUSY_TX == p_device->status) ?
 800e336:	617b      	str	r3, [r7, #20]
												p_device->p_dmaRXChannelInstance;

		p_dma = (I2CDRV_STATUS_BUSY_TX == p_device->status) ?
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2224      	movs	r2, #36	; 0x24
 800e33c:	5c9b      	ldrb	r3, [r3, r2]
												p_device->p_dmaTXInstance :
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d102      	bne.n	800e348 <I2CDRV_ProcessDevice+0x44>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	e001      	b.n	800e34c <I2CDRV_ProcessDevice+0x48>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	689b      	ldr	r3, [r3, #8]
		p_dma = (I2CDRV_STATUS_BUSY_TX == p_device->status) ?
 800e34c:	613b      	str	r3, [r7, #16]
												p_device->p_dmaRXInstance;

		dmaChannelPos = (I2CDRV_STATUS_BUSY_TX == p_device->status) ?
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2224      	movs	r2, #36	; 0x24
 800e352:	5c9b      	ldrb	r3, [r3, r2]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d102      	bne.n	800e35e <I2CDRV_ProcessDevice+0x5a>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	7d5b      	ldrb	r3, [r3, #21]
 800e35c:	e001      	b.n	800e362 <I2CDRV_ProcessDevice+0x5e>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	7d1b      	ldrb	r3, [r3, #20]
 800e362:	210f      	movs	r1, #15
 800e364:	187a      	adds	r2, r7, r1
 800e366:	7013      	strb	r3, [r2, #0]
												p_device->txDmaChannelIndex :
												p_device->rxDmaChannelIndex;

		// Check for complete flag
		if ( 0u != (p_dma->ISR & (DMA_FLAG_TC1 << dmaChannelPos)) )
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	187a      	adds	r2, r7, r1
 800e36e:	7812      	ldrb	r2, [r2, #0]
 800e370:	2102      	movs	r1, #2
 800e372:	4091      	lsls	r1, r2
 800e374:	000a      	movs	r2, r1
 800e376:	4013      	ands	r3, r2
 800e378:	d00a      	beq.n	800e390 <I2CDRV_ProcessDevice+0x8c>
		{
			p_device->event = (I2CDRV_STATUS_BUSY_TX == p_device->status) ?
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2224      	movs	r2, #36	; 0x24
 800e37e:	5c9b      	ldrb	r3, [r3, r2]
												I2CDRV_EVENT_TX_COMPLETE :
 800e380:	2b01      	cmp	r3, #1
 800e382:	d101      	bne.n	800e388 <I2CDRV_ProcessDevice+0x84>
 800e384:	2201      	movs	r2, #1
 800e386:	e000      	b.n	800e38a <I2CDRV_ProcessDevice+0x86>
 800e388:	2202      	movs	r2, #2
			p_device->event = (I2CDRV_STATUS_BUSY_TX == p_device->status) ?
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	759a      	strb	r2, [r3, #22]
 800e38e:	e01e      	b.n	800e3ce <I2CDRV_ProcessDevice+0xca>
												I2CDRV_EVENT_RX_COMPLETE;
		}
		else
		{
			// Check for errors in data transfer or just a timeout because something else went wrong?
			if (MS_TIMEREF_TIMEOUT(p_device->transactTime, sysTime, p_device->timeout)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e394:	683a      	ldr	r2, [r7, #0]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d205      	bcs.n	800e3ac <I2CDRV_ProcessDevice+0xa8>
					|| (0u != (I2C2->ISR & (I2C_ISR_NACKF | I2C_ISR_BERR | I2C_ISR_ARLO)))
 800e3a0:	4b20      	ldr	r3, [pc, #128]	; (800e424 <I2CDRV_ProcessDevice+0x120>)
 800e3a2:	699a      	ldr	r2, [r3, #24]
 800e3a4:	23c4      	movs	r3, #196	; 0xc4
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	d010      	beq.n	800e3ce <I2CDRV_ProcessDevice+0xca>
					/*|| (0u != (p_dma->ISR & (DMA_FLAG_TE1 << dmaChannelPos)))*/
			)
			{
				// Disable DMA channel for transmitter
				p_dmaChannel->CCR &= ~DMA_CCR_EN;
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	4393      	bics	r3, r2
 800e3b4:	001a      	movs	r2, r3
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	601a      	str	r2, [r3, #0]

				// Notify event
				p_device->event = (I2CDRV_STATUS_BUSY_TX == p_device->status) ?
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2224      	movs	r2, #36	; 0x24
 800e3be:	5c9b      	ldrb	r3, [r3, r2]
												I2CDRV_EVENT_TX_FAILED :
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d101      	bne.n	800e3c8 <I2CDRV_ProcessDevice+0xc4>
 800e3c4:	2203      	movs	r2, #3
 800e3c6:	e000      	b.n	800e3ca <I2CDRV_ProcessDevice+0xc6>
 800e3c8:	2204      	movs	r2, #4
				p_device->event = (I2CDRV_STATUS_BUSY_TX == p_device->status) ?
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	// Raise on event
	if (p_device->event != I2CDRV_EVENT_NONE)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	7d9b      	ldrb	r3, [r3, #22]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d022      	beq.n	800e41c <I2CDRV_ProcessDevice+0x118>
	{
		if (m_deviceCallbacks[p_device->index] != NULL)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	222e      	movs	r2, #46	; 0x2e
 800e3da:	5c9b      	ldrb	r3, [r3, r2]
 800e3dc:	001a      	movs	r2, r3
 800e3de:	4b12      	ldr	r3, [pc, #72]	; (800e428 <I2CDRV_ProcessDevice+0x124>)
 800e3e0:	0092      	lsls	r2, r2, #2
 800e3e2:	58d3      	ldr	r3, [r2, r3]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d009      	beq.n	800e3fc <I2CDRV_ProcessDevice+0xf8>
		{
			m_deviceCallbacks[p_device->index](p_device);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	222e      	movs	r2, #46	; 0x2e
 800e3ec:	5c9b      	ldrb	r3, [r3, r2]
 800e3ee:	001a      	movs	r2, r3
 800e3f0:	4b0d      	ldr	r3, [pc, #52]	; (800e428 <I2CDRV_ProcessDevice+0x124>)
 800e3f2:	0092      	lsls	r2, r2, #2
 800e3f4:	58d3      	ldr	r3, [r2, r3]
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	0010      	movs	r0, r2
 800e3fa:	4798      	blx	r3
		}

		p_device->event = I2CDRV_EVENT_NONE;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2200      	movs	r2, #0
 800e400:	759a      	strb	r2, [r3, #22]
		p_device->status = I2CDRV_STATUS_READY;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2224      	movs	r2, #36	; 0x24
 800e406:	2100      	movs	r1, #0
 800e408:	5499      	strb	r1, [r3, r2]

		// Turn off the device, clears all isr flags but keeps the existing configuration
		p_device->p_i2cInstance->CR1 &= ~I2C_CR1_PE;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2101      	movs	r1, #1
 800e416:	438a      	bics	r2, r1
 800e418:	601a      	str	r2, [r3, #0]
	}

	return;
 800e41a:	46c0      	nop			; (mov r8, r8)
 800e41c:	46c0      	nop			; (mov r8, r8)
}
 800e41e:	46bd      	mov	sp, r7
 800e420:	b006      	add	sp, #24
 800e422:	bd80      	pop	{r7, pc}
 800e424:	40005800 	.word	0x40005800
 800e428:	200014dc 	.word	0x200014dc

0800e42c <MX_TIM1_Init>:
uint16_t pwmLevel[2] __attribute__((section("no_init")));


/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b08e      	sub	sp, #56	; 0x38
 800e430:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 800e432:	4b44      	ldr	r3, [pc, #272]	; (800e544 <MX_TIM1_Init+0x118>)
 800e434:	4a44      	ldr	r2, [pc, #272]	; (800e548 <MX_TIM1_Init+0x11c>)
 800e436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800e438:	4b42      	ldr	r3, [pc, #264]	; (800e544 <MX_TIM1_Init+0x118>)
 800e43a:	2207      	movs	r2, #7
 800e43c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e43e:	4b41      	ldr	r3, [pc, #260]	; (800e544 <MX_TIM1_Init+0x118>)
 800e440:	2200      	movs	r2, #0
 800e442:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 665;
 800e444:	4b3f      	ldr	r3, [pc, #252]	; (800e544 <MX_TIM1_Init+0x118>)
 800e446:	4a41      	ldr	r2, [pc, #260]	; (800e54c <MX_TIM1_Init+0x120>)
 800e448:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e44a:	4b3e      	ldr	r3, [pc, #248]	; (800e544 <MX_TIM1_Init+0x118>)
 800e44c:	2200      	movs	r2, #0
 800e44e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800e450:	4b3c      	ldr	r3, [pc, #240]	; (800e544 <MX_TIM1_Init+0x118>)
 800e452:	2200      	movs	r2, #0
 800e454:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800e456:	4b3b      	ldr	r3, [pc, #236]	; (800e544 <MX_TIM1_Init+0x118>)
 800e458:	0018      	movs	r0, r3
 800e45a:	f7f8 f85d 	bl	8006518 <HAL_TIM_Base_Init>
 800e45e:	1e03      	subs	r3, r0, #0
 800e460:	d001      	beq.n	800e466 <MX_TIM1_Init+0x3a>
  {
    Error_Handler();
 800e462:	f7f4 f907 	bl	8002674 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e466:	2128      	movs	r1, #40	; 0x28
 800e468:	187b      	adds	r3, r7, r1
 800e46a:	2280      	movs	r2, #128	; 0x80
 800e46c:	0152      	lsls	r2, r2, #5
 800e46e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800e470:	187a      	adds	r2, r7, r1
 800e472:	4b34      	ldr	r3, [pc, #208]	; (800e544 <MX_TIM1_Init+0x118>)
 800e474:	0011      	movs	r1, r2
 800e476:	0018      	movs	r0, r3
 800e478:	f7f8 fad8 	bl	8006a2c <HAL_TIM_ConfigClockSource>
 800e47c:	1e03      	subs	r3, r0, #0
 800e47e:	d001      	beq.n	800e484 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800e480:	f7f4 f8f8 	bl	8002674 <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800e484:	4b2f      	ldr	r3, [pc, #188]	; (800e544 <MX_TIM1_Init+0x118>)
 800e486:	0018      	movs	r0, r3
 800e488:	f7f8 f896 	bl	80065b8 <HAL_TIM_PWM_Init>
 800e48c:	1e03      	subs	r3, r0, #0
 800e48e:	d001      	beq.n	800e494 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800e490:	f7f4 f8f0 	bl	8002674 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e494:	2120      	movs	r1, #32
 800e496:	187b      	adds	r3, r7, r1
 800e498:	2200      	movs	r2, #0
 800e49a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e49c:	187b      	adds	r3, r7, r1
 800e49e:	2200      	movs	r2, #0
 800e4a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800e4a2:	187a      	adds	r2, r7, r1
 800e4a4:	4b27      	ldr	r3, [pc, #156]	; (800e544 <MX_TIM1_Init+0x118>)
 800e4a6:	0011      	movs	r1, r2
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	f7f8 feb9 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 800e4ae:	1e03      	subs	r3, r0, #0
 800e4b0:	d001      	beq.n	800e4b6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800e4b2:	f7f4 f8df 	bl	8002674 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e4b6:	4b26      	ldr	r3, [pc, #152]	; (800e550 <MX_TIM1_Init+0x124>)
 800e4b8:	2260      	movs	r2, #96	; 0x60
 800e4ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 100;
 800e4bc:	4b24      	ldr	r3, [pc, #144]	; (800e550 <MX_TIM1_Init+0x124>)
 800e4be:	2264      	movs	r2, #100	; 0x64
 800e4c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e4c2:	4b23      	ldr	r3, [pc, #140]	; (800e550 <MX_TIM1_Init+0x124>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e4c8:	4b21      	ldr	r3, [pc, #132]	; (800e550 <MX_TIM1_Init+0x124>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e4ce:	4b20      	ldr	r3, [pc, #128]	; (800e550 <MX_TIM1_Init+0x124>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e4d4:	4b1e      	ldr	r3, [pc, #120]	; (800e550 <MX_TIM1_Init+0x124>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e4da:	4b1d      	ldr	r3, [pc, #116]	; (800e550 <MX_TIM1_Init+0x124>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e4e0:	491b      	ldr	r1, [pc, #108]	; (800e550 <MX_TIM1_Init+0x124>)
 800e4e2:	4b18      	ldr	r3, [pc, #96]	; (800e544 <MX_TIM1_Init+0x118>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	0018      	movs	r0, r3
 800e4e8:	f7f8 f9e4 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 800e4ec:	1e03      	subs	r3, r0, #0
 800e4ee:	d001      	beq.n	800e4f4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800e4f0:	f7f4 f8c0 	bl	8002674 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e4f4:	003b      	movs	r3, r7
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e4fa:	003b      	movs	r3, r7
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e500:	003b      	movs	r3, r7
 800e502:	2200      	movs	r2, #0
 800e504:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e506:	003b      	movs	r3, r7
 800e508:	2200      	movs	r2, #0
 800e50a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e50c:	003b      	movs	r3, r7
 800e50e:	2200      	movs	r2, #0
 800e510:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e512:	003b      	movs	r3, r7
 800e514:	2280      	movs	r2, #128	; 0x80
 800e516:	0192      	lsls	r2, r2, #6
 800e518:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e51a:	003b      	movs	r3, r7
 800e51c:	2200      	movs	r2, #0
 800e51e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800e520:	003a      	movs	r2, r7
 800e522:	4b08      	ldr	r3, [pc, #32]	; (800e544 <MX_TIM1_Init+0x118>)
 800e524:	0011      	movs	r1, r2
 800e526:	0018      	movs	r0, r3
 800e528:	f7f8 fed2 	bl	80072d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800e52c:	1e03      	subs	r3, r0, #0
 800e52e:	d001      	beq.n	800e534 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800e530:	f7f4 f8a0 	bl	8002674 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 800e534:	4b03      	ldr	r3, [pc, #12]	; (800e544 <MX_TIM1_Init+0x118>)
 800e536:	0018      	movs	r0, r3
 800e538:	f7f4 fc06 	bl	8002d48 <HAL_TIM_MspPostInit>
}
 800e53c:	46c0      	nop			; (mov r8, r8)
 800e53e:	46bd      	mov	sp, r7
 800e540:	b00e      	add	sp, #56	; 0x38
 800e542:	bd80      	pop	{r7, pc}
 800e544:	200019cc 	.word	0x200019cc
 800e548:	40012c00 	.word	0x40012c00
 800e54c:	00000299 	.word	0x00000299
 800e550:	200019b0 	.word	0x200019b0

0800e554 <MX_TIM14_Init>:

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC;

  htim14.Instance = TIM14;
 800e55a:	4b1e      	ldr	r3, [pc, #120]	; (800e5d4 <MX_TIM14_Init+0x80>)
 800e55c:	4a1e      	ldr	r2, [pc, #120]	; (800e5d8 <MX_TIM14_Init+0x84>)
 800e55e:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7;
 800e560:	4b1c      	ldr	r3, [pc, #112]	; (800e5d4 <MX_TIM14_Init+0x80>)
 800e562:	2207      	movs	r2, #7
 800e564:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e566:	4b1b      	ldr	r3, [pc, #108]	; (800e5d4 <MX_TIM14_Init+0x80>)
 800e568:	2200      	movs	r2, #0
 800e56a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 800e56c:	4b19      	ldr	r3, [pc, #100]	; (800e5d4 <MX_TIM14_Init+0x80>)
 800e56e:	2264      	movs	r2, #100	; 0x64
 800e570:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e572:	4b18      	ldr	r3, [pc, #96]	; (800e5d4 <MX_TIM14_Init+0x80>)
 800e574:	2200      	movs	r2, #0
 800e576:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800e578:	4b16      	ldr	r3, [pc, #88]	; (800e5d4 <MX_TIM14_Init+0x80>)
 800e57a:	0018      	movs	r0, r3
 800e57c:	f7f7 ffcc 	bl	8006518 <HAL_TIM_Base_Init>
 800e580:	1e03      	subs	r3, r0, #0
 800e582:	d001      	beq.n	800e588 <MX_TIM14_Init+0x34>
  {
    Error_Handler();
 800e584:	f7f4 f876 	bl	8002674 <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800e588:	4b12      	ldr	r3, [pc, #72]	; (800e5d4 <MX_TIM14_Init+0x80>)
 800e58a:	0018      	movs	r0, r3
 800e58c:	f7f8 f814 	bl	80065b8 <HAL_TIM_PWM_Init>
 800e590:	1e03      	subs	r3, r0, #0
 800e592:	d001      	beq.n	800e598 <MX_TIM14_Init+0x44>
  {
    Error_Handler();
 800e594:	f7f4 f86e 	bl	8002674 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e598:	1d3b      	adds	r3, r7, #4
 800e59a:	2260      	movs	r2, #96	; 0x60
 800e59c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 800e59e:	1d3b      	adds	r3, r7, #4
 800e5a0:	2232      	movs	r2, #50	; 0x32
 800e5a2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e5a4:	1d3b      	adds	r3, r7, #4
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e5aa:	1d3b      	adds	r3, r7, #4
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e5b0:	1d39      	adds	r1, r7, #4
 800e5b2:	4b08      	ldr	r3, [pc, #32]	; (800e5d4 <MX_TIM14_Init+0x80>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	0018      	movs	r0, r3
 800e5b8:	f7f8 f97c 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 800e5bc:	1e03      	subs	r3, r0, #0
 800e5be:	d001      	beq.n	800e5c4 <MX_TIM14_Init+0x70>
  {
    Error_Handler();
 800e5c0:	f7f4 f858 	bl	8002674 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim14);
 800e5c4:	4b03      	ldr	r3, [pc, #12]	; (800e5d4 <MX_TIM14_Init+0x80>)
 800e5c6:	0018      	movs	r0, r3
 800e5c8:	f7f4 fbbe 	bl	8002d48 <HAL_TIM_MspPostInit>
}
 800e5cc:	46c0      	nop			; (mov r8, r8)
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	b008      	add	sp, #32
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	20001a14 	.word	0x20001a14
 800e5d8:	40002000 	.word	0x40002000

0800e5dc <IoConfigure>:

void IoConfigure(uint8_t extIOPinIdx)
{
 800e5dc:	b5b0      	push	{r4, r5, r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	0002      	movs	r2, r0
 800e5e4:	1dfb      	adds	r3, r7, #7
 800e5e6:	701a      	strb	r2, [r3, #0]
	uint8_t iodrvPinIdx;
	const uint8_t ioPinIdx = extIOPinIdx - 1u;
 800e5e8:	230f      	movs	r3, #15
 800e5ea:	18fb      	adds	r3, r7, r3
 800e5ec:	1dfa      	adds	r2, r7, #7
 800e5ee:	7812      	ldrb	r2, [r2, #0]
 800e5f0:	3a01      	subs	r2, #1
 800e5f2:	701a      	strb	r2, [r3, #0]
	TIM_HandleTypeDef *htim;

	if (extIOPinIdx == 1u)
 800e5f4:	1dfb      	adds	r3, r7, #7
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d106      	bne.n	800e60a <IoConfigure+0x2e>
	{
		iodrvPinIdx = IODRV_PIN_IO1;
 800e5fc:	2317      	movs	r3, #23
 800e5fe:	18fb      	adds	r3, r7, r3
 800e600:	2200      	movs	r2, #0
 800e602:	701a      	strb	r2, [r3, #0]
		htim = &htim14;
 800e604:	4b5c      	ldr	r3, [pc, #368]	; (800e778 <IoConfigure+0x19c>)
 800e606:	613b      	str	r3, [r7, #16]
 800e608:	e00a      	b.n	800e620 <IoConfigure+0x44>
	}
	else if (extIOPinIdx == 2u)
 800e60a:	1dfb      	adds	r3, r7, #7
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d000      	beq.n	800e614 <IoConfigure+0x38>
 800e612:	e0ac      	b.n	800e76e <IoConfigure+0x192>
	{
		iodrvPinIdx = IODRV_PIN_IO2;
 800e614:	2317      	movs	r3, #23
 800e616:	18fb      	adds	r3, r7, r3
 800e618:	2201      	movs	r2, #1
 800e61a:	701a      	strb	r2, [r3, #0]
		htim = &htim1;
 800e61c:	4b57      	ldr	r3, [pc, #348]	; (800e77c <IoConfigure+0x1a0>)
 800e61e:	613b      	str	r3, [r7, #16]
	{
		return;
	}


	const uint8_t newPinType = (ioConfig[ioPinIdx] & 0x0Fu);
 800e620:	200f      	movs	r0, #15
 800e622:	183b      	adds	r3, r7, r0
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	4a56      	ldr	r2, [pc, #344]	; (800e780 <IoConfigure+0x1a4>)
 800e628:	5cd2      	ldrb	r2, [r2, r3]
 800e62a:	230e      	movs	r3, #14
 800e62c:	18fb      	adds	r3, r7, r3
 800e62e:	210f      	movs	r1, #15
 800e630:	400a      	ands	r2, r1
 800e632:	701a      	strb	r2, [r3, #0]
	uint8_t pulldir = (ioConfig[ioPinIdx] >> 4u) & 0x3u;
 800e634:	183b      	adds	r3, r7, r0
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	4a51      	ldr	r2, [pc, #324]	; (800e780 <IoConfigure+0x1a4>)
 800e63a:	5cd3      	ldrb	r3, [r2, r3]
 800e63c:	091b      	lsrs	r3, r3, #4
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	200d      	movs	r0, #13
 800e642:	183b      	adds	r3, r7, r0
 800e644:	2103      	movs	r1, #3
 800e646:	400a      	ands	r2, r1
 800e648:	701a      	strb	r2, [r3, #0]

	pulldir = (pulldir > 0u) ? pulldir ^ 0x03u : pulldir;
 800e64a:	0002      	movs	r2, r0
 800e64c:	18bb      	adds	r3, r7, r2
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d005      	beq.n	800e660 <IoConfigure+0x84>
 800e654:	18bb      	adds	r3, r7, r2
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	2203      	movs	r2, #3
 800e65a:	4053      	eors	r3, r2
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	e002      	b.n	800e666 <IoConfigure+0x8a>
 800e660:	230d      	movs	r3, #13
 800e662:	18fb      	adds	r3, r7, r3
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	220d      	movs	r2, #13
 800e668:	18ba      	adds	r2, r7, r2
 800e66a:	7013      	strb	r3, [r2, #0]

	if (0u != (htim->Instance->BDTR & TIM_BDTR_MOE))
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e672:	2380      	movs	r3, #128	; 0x80
 800e674:	021b      	lsls	r3, r3, #8
 800e676:	4013      	ands	r3, r2
 800e678:	d004      	beq.n	800e684 <IoConfigure+0xa8>
	{
		HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	2100      	movs	r1, #0
 800e67e:	0018      	movs	r0, r3
 800e680:	f7f8 f89c 	bl	80067bc <HAL_TIM_PWM_Stop>
	}

	IODRV_SetPinType(iodrvPinIdx, newPinType);
 800e684:	240e      	movs	r4, #14
 800e686:	193b      	adds	r3, r7, r4
 800e688:	781a      	ldrb	r2, [r3, #0]
 800e68a:	2517      	movs	r5, #23
 800e68c:	197b      	adds	r3, r7, r5
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	0011      	movs	r1, r2
 800e692:	0018      	movs	r0, r3
 800e694:	f000 fc22 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinPullDir(iodrvPinIdx, pulldir);
 800e698:	230d      	movs	r3, #13
 800e69a:	18fb      	adds	r3, r7, r3
 800e69c:	781a      	ldrb	r2, [r3, #0]
 800e69e:	197b      	adds	r3, r7, r5
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	0011      	movs	r1, r2
 800e6a4:	0018      	movs	r0, r3
 800e6a6:	f000 fd69 	bl	800f17c <IODRV_SetPinPullDir>

	if ( (newPinType == IOTYPE_PWM_PUSHPULL) || (newPinType == IOTYPE_PWM_OPENDRAIN) )
 800e6aa:	193b      	adds	r3, r7, r4
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	2b05      	cmp	r3, #5
 800e6b0:	d003      	beq.n	800e6ba <IoConfigure+0xde>
 800e6b2:	193b      	adds	r3, r7, r4
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	2b06      	cmp	r3, #6
 800e6b8:	d15a      	bne.n	800e770 <IoConfigure+0x194>
	{
		// Setup pwm timer.
		htim->Instance->PSC = ioParam1[ioPinIdx] < 4096u ? 0u : (((uint32_t)ioParam1[ioPinIdx]) / 4096u);
 800e6ba:	210f      	movs	r1, #15
 800e6bc:	187b      	adds	r3, r7, r1
 800e6be:	781a      	ldrb	r2, [r3, #0]
 800e6c0:	4b30      	ldr	r3, [pc, #192]	; (800e784 <IoConfigure+0x1a8>)
 800e6c2:	0052      	lsls	r2, r2, #1
 800e6c4:	5ad2      	ldrh	r2, [r2, r3]
 800e6c6:	2380      	movs	r3, #128	; 0x80
 800e6c8:	015b      	lsls	r3, r3, #5
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d308      	bcc.n	800e6e0 <IoConfigure+0x104>
 800e6ce:	187b      	adds	r3, r7, r1
 800e6d0:	781a      	ldrb	r2, [r3, #0]
 800e6d2:	4b2c      	ldr	r3, [pc, #176]	; (800e784 <IoConfigure+0x1a8>)
 800e6d4:	0052      	lsls	r2, r2, #1
 800e6d6:	5ad3      	ldrh	r3, [r2, r3]
 800e6d8:	0b1b      	lsrs	r3, r3, #12
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	001a      	movs	r2, r3
 800e6de:	e000      	b.n	800e6e2 <IoConfigure+0x106>
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	629a      	str	r2, [r3, #40]	; 0x28
		htim->Instance->ARR = ((uint32_t)ioParam1[ioPinIdx] + 1u) * 16u / (htim->Instance->PSC + 1u) - 1u;
 800e6e8:	240f      	movs	r4, #15
 800e6ea:	193b      	adds	r3, r7, r4
 800e6ec:	781a      	ldrb	r2, [r3, #0]
 800e6ee:	4b25      	ldr	r3, [pc, #148]	; (800e784 <IoConfigure+0x1a8>)
 800e6f0:	0052      	lsls	r2, r2, #1
 800e6f2:	5ad3      	ldrh	r3, [r2, r3]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	011a      	lsls	r2, r3, #4
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6fe:	3301      	adds	r3, #1
 800e700:	0019      	movs	r1, r3
 800e702:	0010      	movs	r0, r2
 800e704:	f7f1 fcfe 	bl	8000104 <__udivsi3>
 800e708:	0003      	movs	r3, r0
 800e70a:	001a      	movs	r2, r3
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3a01      	subs	r2, #1
 800e712:	62da      	str	r2, [r3, #44]	; 0x2c
		htim->Instance->CCR1 = ioParam2[ioPinIdx] == 65535u ? 65535u : (uint32_t)htim->Instance->ARR * ioParam2[ioPinIdx] / 65534u;
 800e714:	193b      	adds	r3, r7, r4
 800e716:	781a      	ldrb	r2, [r3, #0]
 800e718:	4b1b      	ldr	r3, [pc, #108]	; (800e788 <IoConfigure+0x1ac>)
 800e71a:	0052      	lsls	r2, r2, #1
 800e71c:	5ad3      	ldrh	r3, [r2, r3]
 800e71e:	4a1b      	ldr	r2, [pc, #108]	; (800e78c <IoConfigure+0x1b0>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d00f      	beq.n	800e744 <IoConfigure+0x168>
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72a:	193a      	adds	r2, r7, r4
 800e72c:	7811      	ldrb	r1, [r2, #0]
 800e72e:	4a16      	ldr	r2, [pc, #88]	; (800e788 <IoConfigure+0x1ac>)
 800e730:	0049      	lsls	r1, r1, #1
 800e732:	5a8a      	ldrh	r2, [r1, r2]
 800e734:	4353      	muls	r3, r2
 800e736:	4916      	ldr	r1, [pc, #88]	; (800e790 <IoConfigure+0x1b4>)
 800e738:	0018      	movs	r0, r3
 800e73a:	f7f1 fce3 	bl	8000104 <__udivsi3>
 800e73e:	0003      	movs	r3, r0
 800e740:	001a      	movs	r2, r3
 800e742:	e000      	b.n	800e746 <IoConfigure+0x16a>
 800e744:	4a11      	ldr	r2, [pc, #68]	; (800e78c <IoConfigure+0x1b0>)
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	635a      	str	r2, [r3, #52]	; 0x34

		pwmLevel[ioPinIdx] = ioParam2[ioPinIdx];
 800e74c:	220f      	movs	r2, #15
 800e74e:	18bb      	adds	r3, r7, r2
 800e750:	7819      	ldrb	r1, [r3, #0]
 800e752:	18bb      	adds	r3, r7, r2
 800e754:	781a      	ldrb	r2, [r3, #0]
 800e756:	4b0c      	ldr	r3, [pc, #48]	; (800e788 <IoConfigure+0x1ac>)
 800e758:	0049      	lsls	r1, r1, #1
 800e75a:	5ac9      	ldrh	r1, [r1, r3]
 800e75c:	4b0d      	ldr	r3, [pc, #52]	; (800e794 <IoConfigure+0x1b8>)
 800e75e:	0052      	lsls	r2, r2, #1
 800e760:	52d1      	strh	r1, [r2, r3]

		HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1); // Start channel 1
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	2100      	movs	r1, #0
 800e766:	0018      	movs	r0, r3
 800e768:	f7f7 ff76 	bl	8006658 <HAL_TIM_PWM_Start>
 800e76c:	e000      	b.n	800e770 <IoConfigure+0x194>
		return;
 800e76e:	46c0      	nop			; (mov r8, r8)
	}
}
 800e770:	46bd      	mov	sp, r7
 800e772:	b006      	add	sp, #24
 800e774:	bdb0      	pop	{r4, r5, r7, pc}
 800e776:	46c0      	nop			; (mov r8, r8)
 800e778:	20001a14 	.word	0x20001a14
 800e77c:	200019cc 	.word	0x200019cc
 800e780:	20000f0c 	.word	0x20000f0c
 800e784:	20000f10 	.word	0x20000f10
 800e788:	20000f14 	.word	0x20000f14
 800e78c:	0000ffff 	.word	0x0000ffff
 800e790:	0000fffe 	.word	0x0000fffe
 800e794:	20000f18 	.word	0x20000f18

0800e798 <IoNvReadConfig>:

void IoNvReadConfig(uint8_t pin)
{
 800e798:	b590      	push	{r4, r7, lr}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	0002      	movs	r2, r0
 800e7a0:	1dfb      	adds	r3, r7, #7
 800e7a2:	701a      	strb	r2, [r3, #0]
	uint16_t var;
	EE_ReadVariable(IO_CONFIG1_NV_ADDR+(pin-1)*3, &var);
 800e7a4:	1dfb      	adds	r3, r7, #7
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	1c1a      	adds	r2, r3, #0
 800e7ae:	1c13      	adds	r3, r2, #0
 800e7b0:	18db      	adds	r3, r3, r3
 800e7b2:	189b      	adds	r3, r3, r2
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	335d      	adds	r3, #93	; 0x5d
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	240e      	movs	r4, #14
 800e7bc:	193a      	adds	r2, r7, r4
 800e7be:	0011      	movs	r1, r2
 800e7c0:	0018      	movs	r0, r3
 800e7c2:	f7fd fd45 	bl	800c250 <EE_ReadVariable>

	if (((~var)&0xFF) != (var>>8))
 800e7c6:	0021      	movs	r1, r4
 800e7c8:	187b      	adds	r3, r7, r1
 800e7ca:	881b      	ldrh	r3, [r3, #0]
 800e7cc:	43db      	mvns	r3, r3
 800e7ce:	22ff      	movs	r2, #255	; 0xff
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	187a      	adds	r2, r7, r1
 800e7d4:	8812      	ldrh	r2, [r2, #0]
 800e7d6:	0a12      	lsrs	r2, r2, #8
 800e7d8:	b292      	uxth	r2, r2
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d006      	beq.n	800e7ec <IoNvReadConfig+0x54>
	{
		ioConfig[pin-1] = 0x80; // in case of nv write error, set to non configured
 800e7de:	1dfb      	adds	r3, r7, #7
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	3b01      	subs	r3, #1
 800e7e4:	4a1b      	ldr	r2, [pc, #108]	; (800e854 <IoNvReadConfig+0xbc>)
 800e7e6:	2180      	movs	r1, #128	; 0x80
 800e7e8:	54d1      	strb	r1, [r2, r3]
 800e7ea:	e030      	b.n	800e84e <IoNvReadConfig+0xb6>
		return;
	}
	else
	{
		ioConfig[pin-1] = var & 0xFF;
 800e7ec:	230e      	movs	r3, #14
 800e7ee:	18fb      	adds	r3, r7, r3
 800e7f0:	881a      	ldrh	r2, [r3, #0]
 800e7f2:	1dfb      	adds	r3, r7, #7
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	b2d1      	uxtb	r1, r2
 800e7fa:	4a16      	ldr	r2, [pc, #88]	; (800e854 <IoNvReadConfig+0xbc>)
 800e7fc:	54d1      	strb	r1, [r2, r3]
	}

	EE_ReadVariable(IO_CONFIG1_PARAM1_NV_ADDR+(pin-1)*3, &ioParam1[pin-1]);
 800e7fe:	1dfb      	adds	r3, r7, #7
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	3b01      	subs	r3, #1
 800e804:	b29b      	uxth	r3, r3
 800e806:	1c1a      	adds	r2, r3, #0
 800e808:	1c13      	adds	r3, r2, #0
 800e80a:	18db      	adds	r3, r3, r3
 800e80c:	189b      	adds	r3, r3, r2
 800e80e:	b29b      	uxth	r3, r3
 800e810:	335e      	adds	r3, #94	; 0x5e
 800e812:	b298      	uxth	r0, r3
 800e814:	1dfb      	adds	r3, r7, #7
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	3b01      	subs	r3, #1
 800e81a:	005a      	lsls	r2, r3, #1
 800e81c:	4b0e      	ldr	r3, [pc, #56]	; (800e858 <IoNvReadConfig+0xc0>)
 800e81e:	18d3      	adds	r3, r2, r3
 800e820:	0019      	movs	r1, r3
 800e822:	f7fd fd15 	bl	800c250 <EE_ReadVariable>
	EE_ReadVariable(IO_CONFIG1_PARAM2_NV_ADDR+(pin-1)*3, &ioParam2[pin-1]);
 800e826:	1dfb      	adds	r3, r7, #7
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	1c1a      	adds	r2, r3, #0
 800e830:	1c13      	adds	r3, r2, #0
 800e832:	18db      	adds	r3, r3, r3
 800e834:	189b      	adds	r3, r3, r2
 800e836:	b29b      	uxth	r3, r3
 800e838:	335f      	adds	r3, #95	; 0x5f
 800e83a:	b298      	uxth	r0, r3
 800e83c:	1dfb      	adds	r3, r7, #7
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	3b01      	subs	r3, #1
 800e842:	005a      	lsls	r2, r3, #1
 800e844:	4b05      	ldr	r3, [pc, #20]	; (800e85c <IoNvReadConfig+0xc4>)
 800e846:	18d3      	adds	r3, r2, r3
 800e848:	0019      	movs	r1, r3
 800e84a:	f7fd fd01 	bl	800c250 <EE_ReadVariable>
}
 800e84e:	46bd      	mov	sp, r7
 800e850:	b005      	add	sp, #20
 800e852:	bd90      	pop	{r4, r7, pc}
 800e854:	20000f0c 	.word	0x20000f0c
 800e858:	20000f10 	.word	0x20000f10
 800e85c:	20000f14 	.word	0x20000f14

0800e860 <IoControlInit>:

void IoControlInit()
{
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
	// TODO - Move these!
	MX_TIM1_Init();
 800e864:	f7ff fde2 	bl	800e42c <MX_TIM1_Init>
	MX_TIM14_Init();
 800e868:	f7ff fe74 	bl	800e554 <MX_TIM14_Init>

	if (EXECUTION_STATE_NORMAL != executionState)
 800e86c:	4b09      	ldr	r3, [pc, #36]	; (800e894 <IoControlInit+0x34>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a09      	ldr	r2, [pc, #36]	; (800e898 <IoControlInit+0x38>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d005      	beq.n	800e882 <IoControlInit+0x22>
	{
		IoNvReadConfig(1);
 800e876:	2001      	movs	r0, #1
 800e878:	f7ff ff8e 	bl	800e798 <IoNvReadConfig>
		IoNvReadConfig(2);
 800e87c:	2002      	movs	r0, #2
 800e87e:	f7ff ff8b 	bl	800e798 <IoNvReadConfig>
	}

	IoConfigure(1);
 800e882:	2001      	movs	r0, #1
 800e884:	f7ff feaa 	bl	800e5dc <IoConfigure>
	IoConfigure(2);
 800e888:	2002      	movs	r0, #2
 800e88a:	f7ff fea7 	bl	800e5dc <IoConfigure>
}
 800e88e:	46c0      	nop			; (mov r8, r8)
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	2000185c 	.word	0x2000185c
 800e898:	aaaaaaaa 	.word	0xaaaaaaaa

0800e89c <IoSetConfiguarion>:

void IoSetConfiguarion(uint8_t pin, uint8_t data[], uint8_t len)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6039      	str	r1, [r7, #0]
 800e8a4:	0011      	movs	r1, r2
 800e8a6:	1dfb      	adds	r3, r7, #7
 800e8a8:	1c02      	adds	r2, r0, #0
 800e8aa:	701a      	strb	r2, [r3, #0]
 800e8ac:	1dbb      	adds	r3, r7, #6
 800e8ae:	1c0a      	adds	r2, r1, #0
 800e8b0:	701a      	strb	r2, [r3, #0]

	ioConfig[pin-1] = data[0];
 800e8b2:	1dfb      	adds	r3, r7, #7
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	683a      	ldr	r2, [r7, #0]
 800e8ba:	7811      	ldrb	r1, [r2, #0]
 800e8bc:	4a50      	ldr	r2, [pc, #320]	; (800ea00 <IoSetConfiguarion+0x164>)
 800e8be:	54d1      	strb	r1, [r2, r3]
	ioParam1[pin-1] = data[2];
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	3302      	adds	r3, #2
 800e8c4:	7819      	ldrb	r1, [r3, #0]
 800e8c6:	1dfb      	adds	r3, r7, #7
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	1e5a      	subs	r2, r3, #1
 800e8cc:	b289      	uxth	r1, r1
 800e8ce:	4b4d      	ldr	r3, [pc, #308]	; (800ea04 <IoSetConfiguarion+0x168>)
 800e8d0:	0052      	lsls	r2, r2, #1
 800e8d2:	52d1      	strh	r1, [r2, r3]
	ioParam1[pin-1] <<= 8;
 800e8d4:	1dfb      	adds	r3, r7, #7
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	1e5a      	subs	r2, r3, #1
 800e8da:	4b4a      	ldr	r3, [pc, #296]	; (800ea04 <IoSetConfiguarion+0x168>)
 800e8dc:	0052      	lsls	r2, r2, #1
 800e8de:	5ad3      	ldrh	r3, [r2, r3]
 800e8e0:	1dfa      	adds	r2, r7, #7
 800e8e2:	7812      	ldrb	r2, [r2, #0]
 800e8e4:	3a01      	subs	r2, #1
 800e8e6:	021b      	lsls	r3, r3, #8
 800e8e8:	b299      	uxth	r1, r3
 800e8ea:	4b46      	ldr	r3, [pc, #280]	; (800ea04 <IoSetConfiguarion+0x168>)
 800e8ec:	0052      	lsls	r2, r2, #1
 800e8ee:	52d1      	strh	r1, [r2, r3]
	ioParam1[pin-1] |= data[1];
 800e8f0:	1dfb      	adds	r3, r7, #7
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	1e5a      	subs	r2, r3, #1
 800e8f6:	4b43      	ldr	r3, [pc, #268]	; (800ea04 <IoSetConfiguarion+0x168>)
 800e8f8:	0052      	lsls	r2, r2, #1
 800e8fa:	5ad1      	ldrh	r1, [r2, r3]
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	3301      	adds	r3, #1
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	b29b      	uxth	r3, r3
 800e904:	1dfa      	adds	r2, r7, #7
 800e906:	7812      	ldrb	r2, [r2, #0]
 800e908:	3a01      	subs	r2, #1
 800e90a:	430b      	orrs	r3, r1
 800e90c:	b299      	uxth	r1, r3
 800e90e:	4b3d      	ldr	r3, [pc, #244]	; (800ea04 <IoSetConfiguarion+0x168>)
 800e910:	0052      	lsls	r2, r2, #1
 800e912:	52d1      	strh	r1, [r2, r3]
	ioParam2[pin-1] = data[4];
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	3304      	adds	r3, #4
 800e918:	7819      	ldrb	r1, [r3, #0]
 800e91a:	1dfb      	adds	r3, r7, #7
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	1e5a      	subs	r2, r3, #1
 800e920:	b289      	uxth	r1, r1
 800e922:	4b39      	ldr	r3, [pc, #228]	; (800ea08 <IoSetConfiguarion+0x16c>)
 800e924:	0052      	lsls	r2, r2, #1
 800e926:	52d1      	strh	r1, [r2, r3]
	ioParam2[pin-1] <<= 8;
 800e928:	1dfb      	adds	r3, r7, #7
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	1e5a      	subs	r2, r3, #1
 800e92e:	4b36      	ldr	r3, [pc, #216]	; (800ea08 <IoSetConfiguarion+0x16c>)
 800e930:	0052      	lsls	r2, r2, #1
 800e932:	5ad3      	ldrh	r3, [r2, r3]
 800e934:	1dfa      	adds	r2, r7, #7
 800e936:	7812      	ldrb	r2, [r2, #0]
 800e938:	3a01      	subs	r2, #1
 800e93a:	021b      	lsls	r3, r3, #8
 800e93c:	b299      	uxth	r1, r3
 800e93e:	4b32      	ldr	r3, [pc, #200]	; (800ea08 <IoSetConfiguarion+0x16c>)
 800e940:	0052      	lsls	r2, r2, #1
 800e942:	52d1      	strh	r1, [r2, r3]
	ioParam2[pin-1] |= data[3];
 800e944:	1dfb      	adds	r3, r7, #7
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	1e5a      	subs	r2, r3, #1
 800e94a:	4b2f      	ldr	r3, [pc, #188]	; (800ea08 <IoSetConfiguarion+0x16c>)
 800e94c:	0052      	lsls	r2, r2, #1
 800e94e:	5ad1      	ldrh	r1, [r2, r3]
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	3303      	adds	r3, #3
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	b29b      	uxth	r3, r3
 800e958:	1dfa      	adds	r2, r7, #7
 800e95a:	7812      	ldrb	r2, [r2, #0]
 800e95c:	3a01      	subs	r2, #1
 800e95e:	430b      	orrs	r3, r1
 800e960:	b299      	uxth	r1, r3
 800e962:	4b29      	ldr	r3, [pc, #164]	; (800ea08 <IoSetConfiguarion+0x16c>)
 800e964:	0052      	lsls	r2, r2, #1
 800e966:	52d1      	strh	r1, [r2, r3]

	if (data[0]&0x80)
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	b25b      	sxtb	r3, r3
 800e96e:	2b00      	cmp	r3, #0
 800e970:	da3d      	bge.n	800e9ee <IoSetConfiguarion+0x152>
	{
		NV_WriteVariable_U8(IO_CONFIG1_NV_ADDR+(pin-1)*3, data[0]);
 800e972:	1dfb      	adds	r3, r7, #7
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	3b01      	subs	r3, #1
 800e978:	b29b      	uxth	r3, r3
 800e97a:	1c1a      	adds	r2, r3, #0
 800e97c:	1c13      	adds	r3, r2, #0
 800e97e:	18db      	adds	r3, r3, r3
 800e980:	189b      	adds	r3, r3, r2
 800e982:	b29b      	uxth	r3, r3
 800e984:	335d      	adds	r3, #93	; 0x5d
 800e986:	b29a      	uxth	r2, r3
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	0019      	movs	r1, r3
 800e98e:	0010      	movs	r0, r2
 800e990:	f002 f8b0 	bl	8010af4 <NV_WriteVariable_U8>
		EE_WriteVariable(IO_CONFIG1_PARAM1_NV_ADDR+(pin-1)*3, ioParam1[pin-1]);
 800e994:	1dfb      	adds	r3, r7, #7
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	3b01      	subs	r3, #1
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	1c1a      	adds	r2, r3, #0
 800e99e:	1c13      	adds	r3, r2, #0
 800e9a0:	18db      	adds	r3, r3, r3
 800e9a2:	189b      	adds	r3, r3, r2
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	335e      	adds	r3, #94	; 0x5e
 800e9a8:	b298      	uxth	r0, r3
 800e9aa:	1dfb      	adds	r3, r7, #7
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	1e5a      	subs	r2, r3, #1
 800e9b0:	4b14      	ldr	r3, [pc, #80]	; (800ea04 <IoSetConfiguarion+0x168>)
 800e9b2:	0052      	lsls	r2, r2, #1
 800e9b4:	5ad3      	ldrh	r3, [r2, r3]
 800e9b6:	0019      	movs	r1, r3
 800e9b8:	f7fd fcac 	bl	800c314 <EE_WriteVariable>
		EE_WriteVariable(IO_CONFIG1_PARAM2_NV_ADDR+(pin-1)*3, ioParam2[pin-1]);
 800e9bc:	1dfb      	adds	r3, r7, #7
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	1c1a      	adds	r2, r3, #0
 800e9c6:	1c13      	adds	r3, r2, #0
 800e9c8:	18db      	adds	r3, r3, r3
 800e9ca:	189b      	adds	r3, r3, r2
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	335f      	adds	r3, #95	; 0x5f
 800e9d0:	b298      	uxth	r0, r3
 800e9d2:	1dfb      	adds	r3, r7, #7
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	1e5a      	subs	r2, r3, #1
 800e9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ea08 <IoSetConfiguarion+0x16c>)
 800e9da:	0052      	lsls	r2, r2, #1
 800e9dc:	5ad3      	ldrh	r3, [r2, r3]
 800e9de:	0019      	movs	r1, r3
 800e9e0:	f7fd fc98 	bl	800c314 <EE_WriteVariable>

		IoNvReadConfig(pin);
 800e9e4:	1dfb      	adds	r3, r7, #7
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	f7ff fed5 	bl	800e798 <IoNvReadConfig>
	}

	IoConfigure(pin);
 800e9ee:	1dfb      	adds	r3, r7, #7
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	0018      	movs	r0, r3
 800e9f4:	f7ff fdf2 	bl	800e5dc <IoConfigure>
}
 800e9f8:	46c0      	nop			; (mov r8, r8)
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	b002      	add	sp, #8
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	20000f0c 	.word	0x20000f0c
 800ea04:	20000f10 	.word	0x20000f10
 800ea08:	20000f14 	.word	0x20000f14

0800ea0c <IoGetConfiguarion>:

void IoGetConfiguarion(uint8_t pin, uint8_t data[], uint16_t *len)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60b9      	str	r1, [r7, #8]
 800ea14:	607a      	str	r2, [r7, #4]
 800ea16:	210f      	movs	r1, #15
 800ea18:	187b      	adds	r3, r7, r1
 800ea1a:	1c02      	adds	r2, r0, #0
 800ea1c:	701a      	strb	r2, [r3, #0]
	data[0] = ioConfig[pin-1];
 800ea1e:	187b      	adds	r3, r7, r1
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	3b01      	subs	r3, #1
 800ea24:	4a1b      	ldr	r2, [pc, #108]	; (800ea94 <IoGetConfiguarion+0x88>)
 800ea26:	5cd2      	ldrb	r2, [r2, r3]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	701a      	strb	r2, [r3, #0]
	data[1] = ioParam1[pin-1] & 0xFF;
 800ea2c:	187b      	adds	r3, r7, r1
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	1e5a      	subs	r2, r3, #1
 800ea32:	4b19      	ldr	r3, [pc, #100]	; (800ea98 <IoGetConfiguarion+0x8c>)
 800ea34:	0052      	lsls	r2, r2, #1
 800ea36:	5ad2      	ldrh	r2, [r2, r3]
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	b2d2      	uxtb	r2, r2
 800ea3e:	701a      	strb	r2, [r3, #0]
	data[2] = (ioParam1[pin-1] >> 8) & 0xFF;
 800ea40:	187b      	adds	r3, r7, r1
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	1e5a      	subs	r2, r3, #1
 800ea46:	4b14      	ldr	r3, [pc, #80]	; (800ea98 <IoGetConfiguarion+0x8c>)
 800ea48:	0052      	lsls	r2, r2, #1
 800ea4a:	5ad3      	ldrh	r3, [r2, r3]
 800ea4c:	0a1b      	lsrs	r3, r3, #8
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	3302      	adds	r3, #2
 800ea54:	b2d2      	uxtb	r2, r2
 800ea56:	701a      	strb	r2, [r3, #0]
	data[3] = ioParam2[pin-1] & 0xFF;
 800ea58:	187b      	adds	r3, r7, r1
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	1e5a      	subs	r2, r3, #1
 800ea5e:	4b0f      	ldr	r3, [pc, #60]	; (800ea9c <IoGetConfiguarion+0x90>)
 800ea60:	0052      	lsls	r2, r2, #1
 800ea62:	5ad2      	ldrh	r2, [r2, r3]
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	3303      	adds	r3, #3
 800ea68:	b2d2      	uxtb	r2, r2
 800ea6a:	701a      	strb	r2, [r3, #0]
	data[4] = (ioParam2[pin-1] >> 8) & 0xFF;
 800ea6c:	187b      	adds	r3, r7, r1
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	1e5a      	subs	r2, r3, #1
 800ea72:	4b0a      	ldr	r3, [pc, #40]	; (800ea9c <IoGetConfiguarion+0x90>)
 800ea74:	0052      	lsls	r2, r2, #1
 800ea76:	5ad3      	ldrh	r3, [r2, r3]
 800ea78:	0a1b      	lsrs	r3, r3, #8
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	3304      	adds	r3, #4
 800ea80:	b2d2      	uxtb	r2, r2
 800ea82:	701a      	strb	r2, [r3, #0]
	*len = 5;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2205      	movs	r2, #5
 800ea88:	801a      	strh	r2, [r3, #0]
}
 800ea8a:	46c0      	nop			; (mov r8, r8)
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	b004      	add	sp, #16
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	46c0      	nop			; (mov r8, r8)
 800ea94:	20000f0c 	.word	0x20000f0c
 800ea98:	20000f10 	.word	0x20000f10
 800ea9c:	20000f14 	.word	0x20000f14

0800eaa0 <IoWrite>:


void IoWrite(const uint8_t extIOPinIdx, const uint8_t * const data, const uint16_t len)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b086      	sub	sp, #24
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6039      	str	r1, [r7, #0]
 800eaa8:	0011      	movs	r1, r2
 800eaaa:	1dfb      	adds	r3, r7, #7
 800eaac:	1c02      	adds	r2, r0, #0
 800eaae:	701a      	strb	r2, [r3, #0]
 800eab0:	1d3b      	adds	r3, r7, #4
 800eab2:	1c0a      	adds	r2, r1, #0
 800eab4:	801a      	strh	r2, [r3, #0]
	uint8_t iodrvPinIdx;
	const uint8_t ioPinIdx = extIOPinIdx - 1u;
 800eab6:	210f      	movs	r1, #15
 800eab8:	187b      	adds	r3, r7, r1
 800eaba:	1dfa      	adds	r2, r7, #7
 800eabc:	7812      	ldrb	r2, [r2, #0]
 800eabe:	3a01      	subs	r2, #1
 800eac0:	701a      	strb	r2, [r3, #0]
	const uint8_t pinType = (ioConfig[ioPinIdx] & 0x0Fu);
 800eac2:	187b      	adds	r3, r7, r1
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	4a39      	ldr	r2, [pc, #228]	; (800ebac <IoWrite+0x10c>)
 800eac8:	5cd2      	ldrb	r2, [r2, r3]
 800eaca:	230e      	movs	r3, #14
 800eacc:	18fb      	adds	r3, r7, r3
 800eace:	210f      	movs	r1, #15
 800ead0:	400a      	ands	r2, r1
 800ead2:	701a      	strb	r2, [r3, #0]
	const uint16_t outVal = (uint16_t)data[0u] | (data[1] << 8u);
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	b21a      	sxth	r2, r3
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	3301      	adds	r3, #1
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	021b      	lsls	r3, r3, #8
 800eae2:	b21b      	sxth	r3, r3
 800eae4:	4313      	orrs	r3, r2
 800eae6:	b21a      	sxth	r2, r3
 800eae8:	230c      	movs	r3, #12
 800eaea:	18fb      	adds	r3, r7, r3
 800eaec:	801a      	strh	r2, [r3, #0]

	TIM_HandleTypeDef *htim;

	if (len != 2u)
 800eaee:	1d3b      	adds	r3, r7, #4
 800eaf0:	881b      	ldrh	r3, [r3, #0]
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d152      	bne.n	800eb9c <IoWrite+0xfc>
	{
		return;
	}

	if (extIOPinIdx == 1u)
 800eaf6:	1dfb      	adds	r3, r7, #7
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d106      	bne.n	800eb0c <IoWrite+0x6c>
	{
		iodrvPinIdx = IODRV_PIN_IO1;
 800eafe:	2317      	movs	r3, #23
 800eb00:	18fb      	adds	r3, r7, r3
 800eb02:	2200      	movs	r2, #0
 800eb04:	701a      	strb	r2, [r3, #0]
		htim = &htim14;
 800eb06:	4b2a      	ldr	r3, [pc, #168]	; (800ebb0 <IoWrite+0x110>)
 800eb08:	613b      	str	r3, [r7, #16]
 800eb0a:	e009      	b.n	800eb20 <IoWrite+0x80>
	}
	else if (extIOPinIdx == 2u)
 800eb0c:	1dfb      	adds	r3, r7, #7
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	2b02      	cmp	r3, #2
 800eb12:	d145      	bne.n	800eba0 <IoWrite+0x100>
	{
		iodrvPinIdx = IODRV_PIN_IO2;
 800eb14:	2317      	movs	r3, #23
 800eb16:	18fb      	adds	r3, r7, r3
 800eb18:	2201      	movs	r2, #1
 800eb1a:	701a      	strb	r2, [r3, #0]
		htim = &htim1;
 800eb1c:	4b25      	ldr	r3, [pc, #148]	; (800ebb4 <IoWrite+0x114>)
 800eb1e:	613b      	str	r3, [r7, #16]
	else
	{
		return;
	}

	switch (pinType)
 800eb20:	230e      	movs	r3, #14
 800eb22:	18fb      	adds	r3, r7, r3
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	2b04      	cmp	r3, #4
 800eb28:	dc02      	bgt.n	800eb30 <IoWrite+0x90>
 800eb2a:	2b03      	cmp	r3, #3
 800eb2c:	da04      	bge.n	800eb38 <IoWrite+0x98>
	case 6:
		htim->Instance->CCR1 = (outVal == 65535) ? 65535 : (uint32_t)htim->Instance->ARR * outVal / 65534u;
		pwmLevel[ioPinIdx] = outVal;

	default:
		break;
 800eb2e:	e039      	b.n	800eba4 <IoWrite+0x104>
 800eb30:	3b05      	subs	r3, #5
	switch (pinType)
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d836      	bhi.n	800eba4 <IoWrite+0x104>
 800eb36:	e010      	b.n	800eb5a <IoWrite+0xba>
		IODRV_WritePin(iodrvPinIdx, (0u != (data[1u] & 0x01u)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	001a      	movs	r2, r3
 800eb40:	2301      	movs	r3, #1
 800eb42:	4013      	ands	r3, r2
 800eb44:	1e5a      	subs	r2, r3, #1
 800eb46:	4193      	sbcs	r3, r2
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	2317      	movs	r3, #23
 800eb4c:	18fb      	adds	r3, r7, r3
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	0011      	movs	r1, r2
 800eb52:	0018      	movs	r0, r3
 800eb54:	f000 f94e 	bl	800edf4 <IODRV_WritePin>
		break;
 800eb58:	e025      	b.n	800eba6 <IoWrite+0x106>
		htim->Instance->CCR1 = (outVal == 65535) ? 65535 : (uint32_t)htim->Instance->ARR * outVal / 65534u;
 800eb5a:	210c      	movs	r1, #12
 800eb5c:	187b      	adds	r3, r7, r1
 800eb5e:	881b      	ldrh	r3, [r3, #0]
 800eb60:	4a15      	ldr	r2, [pc, #84]	; (800ebb8 <IoWrite+0x118>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d00c      	beq.n	800eb80 <IoWrite+0xe0>
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6c:	187a      	adds	r2, r7, r1
 800eb6e:	8812      	ldrh	r2, [r2, #0]
 800eb70:	4353      	muls	r3, r2
 800eb72:	4912      	ldr	r1, [pc, #72]	; (800ebbc <IoWrite+0x11c>)
 800eb74:	0018      	movs	r0, r3
 800eb76:	f7f1 fac5 	bl	8000104 <__udivsi3>
 800eb7a:	0003      	movs	r3, r0
 800eb7c:	001a      	movs	r2, r3
 800eb7e:	e000      	b.n	800eb82 <IoWrite+0xe2>
 800eb80:	4a0d      	ldr	r2, [pc, #52]	; (800ebb8 <IoWrite+0x118>)
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	635a      	str	r2, [r3, #52]	; 0x34
		pwmLevel[ioPinIdx] = outVal;
 800eb88:	230f      	movs	r3, #15
 800eb8a:	18fb      	adds	r3, r7, r3
 800eb8c:	781a      	ldrb	r2, [r3, #0]
 800eb8e:	4b0c      	ldr	r3, [pc, #48]	; (800ebc0 <IoWrite+0x120>)
 800eb90:	0052      	lsls	r2, r2, #1
 800eb92:	210c      	movs	r1, #12
 800eb94:	1879      	adds	r1, r7, r1
 800eb96:	8809      	ldrh	r1, [r1, #0]
 800eb98:	52d1      	strh	r1, [r2, r3]
		break;
 800eb9a:	e003      	b.n	800eba4 <IoWrite+0x104>
		return;
 800eb9c:	46c0      	nop			; (mov r8, r8)
 800eb9e:	e002      	b.n	800eba6 <IoWrite+0x106>
		return;
 800eba0:	46c0      	nop			; (mov r8, r8)
 800eba2:	e000      	b.n	800eba6 <IoWrite+0x106>
		break;
 800eba4:	46c0      	nop			; (mov r8, r8)
	}
}
 800eba6:	46bd      	mov	sp, r7
 800eba8:	b006      	add	sp, #24
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	20000f0c 	.word	0x20000f0c
 800ebb0:	20001a14 	.word	0x20001a14
 800ebb4:	200019cc 	.word	0x200019cc
 800ebb8:	0000ffff 	.word	0x0000ffff
 800ebbc:	0000fffe 	.word	0x0000fffe
 800ebc0:	20000f18 	.word	0x20000f18

0800ebc4 <IoRead>:

void IoRead(const uint8_t extIOPinIdx, uint8_t * const data, uint16_t * const len)
{
 800ebc4:	b590      	push	{r4, r7, lr}
 800ebc6:	b087      	sub	sp, #28
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	60b9      	str	r1, [r7, #8]
 800ebcc:	607a      	str	r2, [r7, #4]
 800ebce:	210f      	movs	r1, #15
 800ebd0:	187b      	adds	r3, r7, r1
 800ebd2:	1c02      	adds	r2, r0, #0
 800ebd4:	701a      	strb	r2, [r3, #0]
	const uint8_t ioPinIdx = extIOPinIdx - 1u;
 800ebd6:	2416      	movs	r4, #22
 800ebd8:	193b      	adds	r3, r7, r4
 800ebda:	0008      	movs	r0, r1
 800ebdc:	187a      	adds	r2, r7, r1
 800ebde:	7812      	ldrb	r2, [r2, #0]
 800ebe0:	3a01      	subs	r2, #1
 800ebe2:	701a      	strb	r2, [r3, #0]
	const uint8_t pinType = (ioConfig[ioPinIdx] & 0x0Fu);
 800ebe4:	193b      	adds	r3, r7, r4
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	4a3c      	ldr	r2, [pc, #240]	; (800ecdc <IoRead+0x118>)
 800ebea:	5cd2      	ldrb	r2, [r2, r3]
 800ebec:	2315      	movs	r3, #21
 800ebee:	18fb      	adds	r3, r7, r3
 800ebf0:	210f      	movs	r1, #15
 800ebf2:	400a      	ands	r2, r1
 800ebf4:	701a      	strb	r2, [r3, #0]
	uint8_t iodrvPinIdx;

	if (extIOPinIdx == 1u)
 800ebf6:	183b      	adds	r3, r7, r0
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d104      	bne.n	800ec08 <IoRead+0x44>
	{
		iodrvPinIdx = IODRV_PIN_IO1;
 800ebfe:	2317      	movs	r3, #23
 800ec00:	18fb      	adds	r3, r7, r3
 800ec02:	2200      	movs	r2, #0
 800ec04:	701a      	strb	r2, [r3, #0]
 800ec06:	e008      	b.n	800ec1a <IoRead+0x56>
	}
	else if (extIOPinIdx == 2u)
 800ec08:	230f      	movs	r3, #15
 800ec0a:	18fb      	adds	r3, r7, r3
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d15f      	bne.n	800ecd2 <IoRead+0x10e>
	{
		iodrvPinIdx = IODRV_PIN_IO2;
 800ec12:	2317      	movs	r3, #23
 800ec14:	18fb      	adds	r3, r7, r3
 800ec16:	2201      	movs	r2, #1
 800ec18:	701a      	strb	r2, [r3, #0]
	else
	{
		return;
	}

	const uint16_t pinValue = IODRV_ReadPinValue(iodrvPinIdx);
 800ec1a:	2312      	movs	r3, #18
 800ec1c:	18fc      	adds	r4, r7, r3
 800ec1e:	2317      	movs	r3, #23
 800ec20:	18fb      	adds	r3, r7, r3
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	0018      	movs	r0, r3
 800ec26:	f000 f89f 	bl	800ed68 <IODRV_ReadPinValue>
 800ec2a:	0003      	movs	r3, r0
 800ec2c:	8023      	strh	r3, [r4, #0]

	switch (pinType)
 800ec2e:	2315      	movs	r3, #21
 800ec30:	18fb      	adds	r3, r7, r3
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	2b06      	cmp	r3, #6
 800ec36:	dc47      	bgt.n	800ecc8 <IoRead+0x104>
 800ec38:	2b05      	cmp	r3, #5
 800ec3a:	da30      	bge.n	800ec9e <IoRead+0xda>
 800ec3c:	2b04      	cmp	r3, #4
 800ec3e:	dc43      	bgt.n	800ecc8 <IoRead+0x104>
 800ec40:	2b03      	cmp	r3, #3
 800ec42:	da1a      	bge.n	800ec7a <IoRead+0xb6>
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d002      	beq.n	800ec4e <IoRead+0x8a>
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	d00f      	beq.n	800ec6c <IoRead+0xa8>
		data[0u] = (uint8_t)(pwmLevel[ioPinIdx] & 0xFFu);
		data[1u] = (uint8_t)((pwmLevel[ioPinIdx] >> 8u) & 0xFFu);
		break;

	default:
		break;
 800ec4c:	e03c      	b.n	800ecc8 <IoRead+0x104>
		data[0u] = (uint8_t)(pinValue & 0xFFu);
 800ec4e:	2112      	movs	r1, #18
 800ec50:	187b      	adds	r3, r7, r1
 800ec52:	881b      	ldrh	r3, [r3, #0]
 800ec54:	b2da      	uxtb	r2, r3
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	701a      	strb	r2, [r3, #0]
		data[1u] = (uint8_t)((pinValue >> 8u) & 0xFFu);
 800ec5a:	187b      	adds	r3, r7, r1
 800ec5c:	881b      	ldrh	r3, [r3, #0]
 800ec5e:	0a1b      	lsrs	r3, r3, #8
 800ec60:	b29a      	uxth	r2, r3
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	3301      	adds	r3, #1
 800ec66:	b2d2      	uxtb	r2, r2
 800ec68:	701a      	strb	r2, [r3, #0]
		break;
 800ec6a:	e02e      	b.n	800ecca <IoRead+0x106>
		data[0u] = (uint8_t)pinValue;
 800ec6c:	2312      	movs	r3, #18
 800ec6e:	18fb      	adds	r3, r7, r3
 800ec70:	881b      	ldrh	r3, [r3, #0]
 800ec72:	b2da      	uxtb	r2, r3
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	701a      	strb	r2, [r3, #0]
		break;
 800ec78:	e027      	b.n	800ecca <IoRead+0x106>
		data[0u] = (uint8_t)pinValue;
 800ec7a:	2312      	movs	r3, #18
 800ec7c:	18fb      	adds	r3, r7, r3
 800ec7e:	881b      	ldrh	r3, [r3, #0]
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	701a      	strb	r2, [r3, #0]
		data[1u] = IODRV_ReadPinOutputState(iodrvPinIdx);
 800ec86:	2317      	movs	r3, #23
 800ec88:	18fb      	adds	r3, r7, r3
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	0018      	movs	r0, r3
 800ec8e:	f000 f885 	bl	800ed9c <IODRV_ReadPinOutputState>
 800ec92:	0003      	movs	r3, r0
 800ec94:	001a      	movs	r2, r3
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	701a      	strb	r2, [r3, #0]
		break;
 800ec9c:	e015      	b.n	800ecca <IoRead+0x106>
		data[0u] = (uint8_t)(pwmLevel[ioPinIdx] & 0xFFu);
 800ec9e:	2116      	movs	r1, #22
 800eca0:	187b      	adds	r3, r7, r1
 800eca2:	781a      	ldrb	r2, [r3, #0]
 800eca4:	4b0e      	ldr	r3, [pc, #56]	; (800ece0 <IoRead+0x11c>)
 800eca6:	0052      	lsls	r2, r2, #1
 800eca8:	5ad3      	ldrh	r3, [r2, r3]
 800ecaa:	b2da      	uxtb	r2, r3
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	701a      	strb	r2, [r3, #0]
		data[1u] = (uint8_t)((pwmLevel[ioPinIdx] >> 8u) & 0xFFu);
 800ecb0:	187b      	adds	r3, r7, r1
 800ecb2:	781a      	ldrb	r2, [r3, #0]
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <IoRead+0x11c>)
 800ecb6:	0052      	lsls	r2, r2, #1
 800ecb8:	5ad3      	ldrh	r3, [r2, r3]
 800ecba:	0a1b      	lsrs	r3, r3, #8
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	b2d2      	uxtb	r2, r2
 800ecc4:	701a      	strb	r2, [r3, #0]
		break;
 800ecc6:	e000      	b.n	800ecca <IoRead+0x106>
		break;
 800ecc8:	46c0      	nop			; (mov r8, r8)
	}

	*len = 2u;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2202      	movs	r2, #2
 800ecce:	801a      	strh	r2, [r3, #0]
 800ecd0:	e000      	b.n	800ecd4 <IoRead+0x110>
		return;
 800ecd2:	46c0      	nop			; (mov r8, r8)
}
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	b007      	add	sp, #28
 800ecd8:	bd90      	pop	{r4, r7, pc}
 800ecda:	46c0      	nop			; (mov r8, r8)
 800ecdc:	20000f0c 	.word	0x20000f0c
 800ece0:	20000f18 	.word	0x20000f18

0800ece4 <IODRV_Init>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void IODRV_Init(uint32_t sysTime)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0u; i < IODRV_MAX_IO_PINS; i++)
 800ecec:	230f      	movs	r3, #15
 800ecee:	18fb      	adds	r3, r7, r3
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	701a      	strb	r2, [r3, #0]
 800ecf4:	e00e      	b.n	800ed14 <IODRV_Init+0x30>
	{
		m_pins[i].value = 0u;
 800ecf6:	200f      	movs	r0, #15
 800ecf8:	183b      	adds	r3, r7, r0
 800ecfa:	781a      	ldrb	r2, [r3, #0]
 800ecfc:	490b      	ldr	r1, [pc, #44]	; (800ed2c <IODRV_Init+0x48>)
 800ecfe:	0013      	movs	r3, r2
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	189b      	adds	r3, r3, r2
 800ed04:	00db      	lsls	r3, r3, #3
 800ed06:	2200      	movs	r2, #0
 800ed08:	525a      	strh	r2, [r3, r1]
	for (i = 0u; i < IODRV_MAX_IO_PINS; i++)
 800ed0a:	183b      	adds	r3, r7, r0
 800ed0c:	781a      	ldrb	r2, [r3, #0]
 800ed0e:	183b      	adds	r3, r7, r0
 800ed10:	3201      	adds	r2, #1
 800ed12:	701a      	strb	r2, [r3, #0]
 800ed14:	230f      	movs	r3, #15
 800ed16:	18fb      	adds	r3, r7, r3
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	2b16      	cmp	r3, #22
 800ed1c:	d9eb      	bls.n	800ecf6 <IODRV_Init+0x12>
	}

	MS_TIMEREF_INIT(m_lastPinUpdateTime, sysTime);
 800ed1e:	4b04      	ldr	r3, [pc, #16]	; (800ed30 <IODRV_Init+0x4c>)
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	601a      	str	r2, [r3, #0]
}
 800ed24:	46c0      	nop			; (mov r8, r8)
 800ed26:	46bd      	mov	sp, r7
 800ed28:	b004      	add	sp, #16
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	2000052c 	.word	0x2000052c
 800ed30:	200014e4 	.word	0x200014e4

0800ed34 <IODRV_Shutdown>:


void IODRV_Shutdown(void)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	af00      	add	r7, sp, #0

}
 800ed38:	46c0      	nop			; (mov r8, r8)
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
	...

0800ed40 <IODRV_Service>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void IODRV_Service(uint32_t sysTime)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
	if (MS_TIMEREF_TIMEOUT(m_lastPinUpdateTime, sysTime, IODRV_PIN_UPDATE_PERIOD_MS))
 800ed48:	4b06      	ldr	r3, [pc, #24]	; (800ed64 <IODRV_Service+0x24>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	2b09      	cmp	r3, #9
 800ed52:	d903      	bls.n	800ed5c <IODRV_Service+0x1c>
	{
		IODRV_UpdatePins(sysTime);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	0018      	movs	r0, r3
 800ed58:	f000 fab8 	bl	800f2cc <IODRV_UpdatePins>
	}
}
 800ed5c:	46c0      	nop			; (mov r8, r8)
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	b002      	add	sp, #8
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	200014e4 	.word	0x200014e4

0800ed68 <IODRV_ReadPinValue>:
 * @param	pin			index of the pin that is required
 * @retval	uint16_t	value of the pin that is required
 */
// ****************************************************************************
uint16_t IODRV_ReadPinValue(uint8_t pin)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	0002      	movs	r2, r0
 800ed70:	1dfb      	adds	r3, r7, #7
 800ed72:	701a      	strb	r2, [r3, #0]
	if ( pin >= IODRV_MAX_IO_PINS )
 800ed74:	1dfb      	adds	r3, r7, #7
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	2b16      	cmp	r3, #22
 800ed7a:	d901      	bls.n	800ed80 <IODRV_ReadPinValue+0x18>
	{
		return 0u;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	e007      	b.n	800ed90 <IODRV_ReadPinValue+0x28>
	}

	return m_pins[pin].value;
 800ed80:	1dfb      	adds	r3, r7, #7
 800ed82:	781a      	ldrb	r2, [r3, #0]
 800ed84:	4904      	ldr	r1, [pc, #16]	; (800ed98 <IODRV_ReadPinValue+0x30>)
 800ed86:	0013      	movs	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	189b      	adds	r3, r3, r2
 800ed8c:	00db      	lsls	r3, r3, #3
 800ed8e:	5a5b      	ldrh	r3, [r3, r1]
}
 800ed90:	0018      	movs	r0, r3
 800ed92:	46bd      	mov	sp, r7
 800ed94:	b002      	add	sp, #8
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	2000052c 	.word	0x2000052c

0800ed9c <IODRV_ReadPinOutputState>:
 * @param	pin			index of the pin that is required
 * @retval	uint8_t		value of the pin that is required
 */
// ****************************************************************************
bool IODRV_ReadPinOutputState(uint8_t pin)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	0002      	movs	r2, r0
 800eda4:	1dfb      	adds	r3, r7, #7
 800eda6:	701a      	strb	r2, [r3, #0]
	if ( pin >= IODRV_MAX_IO_PINS )
 800eda8:	1dfb      	adds	r3, r7, #7
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	2b16      	cmp	r3, #22
 800edae:	d901      	bls.n	800edb4 <IODRV_ReadPinOutputState+0x18>
	{
		return 0u;
 800edb0:	2300      	movs	r3, #0
 800edb2:	e018      	b.n	800ede6 <IODRV_ReadPinOutputState+0x4a>
	}

	return (m_pins[pin].gpioPort->ODR & m_pins[pin].gpioPin_bm) != 0u;
 800edb4:	1dfb      	adds	r3, r7, #7
 800edb6:	781a      	ldrb	r2, [r3, #0]
 800edb8:	490d      	ldr	r1, [pc, #52]	; (800edf0 <IODRV_ReadPinOutputState+0x54>)
 800edba:	0013      	movs	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	189b      	adds	r3, r3, r2
 800edc0:	00db      	lsls	r3, r3, #3
 800edc2:	18cb      	adds	r3, r1, r3
 800edc4:	3320      	adds	r3, #32
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6959      	ldr	r1, [r3, #20]
 800edca:	1dfb      	adds	r3, r7, #7
 800edcc:	781a      	ldrb	r2, [r3, #0]
 800edce:	4808      	ldr	r0, [pc, #32]	; (800edf0 <IODRV_ReadPinOutputState+0x54>)
 800edd0:	0013      	movs	r3, r2
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	189b      	adds	r3, r3, r2
 800edd6:	00db      	lsls	r3, r3, #3
 800edd8:	18c3      	adds	r3, r0, r3
 800edda:	331a      	adds	r3, #26
 800eddc:	881b      	ldrh	r3, [r3, #0]
 800edde:	400b      	ands	r3, r1
 800ede0:	1e5a      	subs	r2, r3, #1
 800ede2:	4193      	sbcs	r3, r2
 800ede4:	b2db      	uxtb	r3, r3
}
 800ede6:	0018      	movs	r0, r3
 800ede8:	46bd      	mov	sp, r7
 800edea:	b002      	add	sp, #8
 800edec:	bd80      	pop	{r7, pc}
 800edee:	46c0      	nop			; (mov r8, r8)
 800edf0:	2000052c 	.word	0x2000052c

0800edf4 <IODRV_WritePin>:
 * @param	newValue	value to be set, maps to GPIO_PIN_SET and GPIO_RESET
 * @retval	bool		returns true is the pin is an output, false if an input
 */
// ****************************************************************************
bool IODRV_WritePin(uint8_t pin, bool newValue)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	0002      	movs	r2, r0
 800edfc:	1dfb      	adds	r3, r7, #7
 800edfe:	701a      	strb	r2, [r3, #0]
 800ee00:	1dbb      	adds	r3, r7, #6
 800ee02:	1c0a      	adds	r2, r1, #0
 800ee04:	701a      	strb	r2, [r3, #0]
	if ( (m_pins[pin].pinType == IOTYPE_DIGOUT_PUSHPULL) || (m_pins[pin].pinType <= IOTYPE_DIGOUT_OPENDRAIN) )
 800ee06:	1dfb      	adds	r3, r7, #7
 800ee08:	781a      	ldrb	r2, [r3, #0]
 800ee0a:	4912      	ldr	r1, [pc, #72]	; (800ee54 <IODRV_WritePin+0x60>)
 800ee0c:	0013      	movs	r3, r2
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	189b      	adds	r3, r3, r2
 800ee12:	00db      	lsls	r3, r3, #3
 800ee14:	18cb      	adds	r3, r1, r3
 800ee16:	3318      	adds	r3, #24
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	d00b      	beq.n	800ee36 <IODRV_WritePin+0x42>
 800ee1e:	1dfb      	adds	r3, r7, #7
 800ee20:	781a      	ldrb	r2, [r3, #0]
 800ee22:	490c      	ldr	r1, [pc, #48]	; (800ee54 <IODRV_WritePin+0x60>)
 800ee24:	0013      	movs	r3, r2
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	189b      	adds	r3, r3, r2
 800ee2a:	00db      	lsls	r3, r3, #3
 800ee2c:	18cb      	adds	r3, r1, r3
 800ee2e:	3318      	adds	r3, #24
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	2b04      	cmp	r3, #4
 800ee34:	d809      	bhi.n	800ee4a <IODRV_WritePin+0x56>
	{
		return IODRV_SetPin(pin, newValue);
 800ee36:	1dbb      	adds	r3, r7, #6
 800ee38:	781a      	ldrb	r2, [r3, #0]
 800ee3a:	1dfb      	adds	r3, r7, #7
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	0011      	movs	r1, r2
 800ee40:	0018      	movs	r0, r3
 800ee42:	f000 f809 	bl	800ee58 <IODRV_SetPin>
 800ee46:	0003      	movs	r3, r0
 800ee48:	e000      	b.n	800ee4c <IODRV_WritePin+0x58>
	}

	return false;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	0018      	movs	r0, r3
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	b002      	add	sp, #8
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	2000052c 	.word	0x2000052c

0800ee58 <IODRV_SetPin>:
 * @param	newValue	value to be set, maps to GPIO_PIN_SET and GPIO_RESET
 * @retval	bool		returns true if the arguments are correct
 */
// ****************************************************************************
bool IODRV_SetPin(uint8_t pin, bool newValue)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	0002      	movs	r2, r0
 800ee60:	1dfb      	adds	r3, r7, #7
 800ee62:	701a      	strb	r2, [r3, #0]
 800ee64:	1dbb      	adds	r3, r7, #6
 800ee66:	1c0a      	adds	r2, r1, #0
 800ee68:	701a      	strb	r2, [r3, #0]
	const GPIO_PinState outVal = (newValue ^ m_pins[pin].invert_bm);
 800ee6a:	1dbb      	adds	r3, r7, #6
 800ee6c:	7819      	ldrb	r1, [r3, #0]
 800ee6e:	1dfb      	adds	r3, r7, #7
 800ee70:	781a      	ldrb	r2, [r3, #0]
 800ee72:	4819      	ldr	r0, [pc, #100]	; (800eed8 <IODRV_SetPin+0x80>)
 800ee74:	0013      	movs	r3, r2
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	189b      	adds	r3, r3, r2
 800ee7a:	00db      	lsls	r3, r3, #3
 800ee7c:	18c3      	adds	r3, r0, r3
 800ee7e:	3324      	adds	r3, #36	; 0x24
 800ee80:	881b      	ldrh	r3, [r3, #0]
 800ee82:	b2da      	uxtb	r2, r3
 800ee84:	230f      	movs	r3, #15
 800ee86:	18fb      	adds	r3, r7, r3
 800ee88:	404a      	eors	r2, r1
 800ee8a:	701a      	strb	r2, [r3, #0]

	if ( (pin >= IODRV_MAX_IO_PINS) )
 800ee8c:	1dfb      	adds	r3, r7, #7
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	2b16      	cmp	r3, #22
 800ee92:	d901      	bls.n	800ee98 <IODRV_SetPin+0x40>
	{
		return false;
 800ee94:	2300      	movs	r3, #0
 800ee96:	e01a      	b.n	800eece <IODRV_SetPin+0x76>
	}

	HAL_GPIO_WritePin(m_pins[pin].gpioPort, m_pins[pin].gpioPin_bm, outVal);
 800ee98:	1dfb      	adds	r3, r7, #7
 800ee9a:	781a      	ldrb	r2, [r3, #0]
 800ee9c:	490e      	ldr	r1, [pc, #56]	; (800eed8 <IODRV_SetPin+0x80>)
 800ee9e:	0013      	movs	r3, r2
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	189b      	adds	r3, r3, r2
 800eea4:	00db      	lsls	r3, r3, #3
 800eea6:	18cb      	adds	r3, r1, r3
 800eea8:	3320      	adds	r3, #32
 800eeaa:	6818      	ldr	r0, [r3, #0]
 800eeac:	1dfb      	adds	r3, r7, #7
 800eeae:	781a      	ldrb	r2, [r3, #0]
 800eeb0:	4909      	ldr	r1, [pc, #36]	; (800eed8 <IODRV_SetPin+0x80>)
 800eeb2:	0013      	movs	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	189b      	adds	r3, r3, r2
 800eeb8:	00db      	lsls	r3, r3, #3
 800eeba:	18cb      	adds	r3, r1, r3
 800eebc:	331a      	adds	r3, #26
 800eebe:	8819      	ldrh	r1, [r3, #0]
 800eec0:	230f      	movs	r3, #15
 800eec2:	18fb      	adds	r3, r7, r3
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	001a      	movs	r2, r3
 800eec8:	f7f5 fcef 	bl	80048aa <HAL_GPIO_WritePin>

	return true;
 800eecc:	2301      	movs	r3, #1
}
 800eece:	0018      	movs	r0, r3
 800eed0:	46bd      	mov	sp, r7
 800eed2:	b004      	add	sp, #16
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	46c0      	nop			; (mov r8, r8)
 800eed8:	2000052c 	.word	0x2000052c

0800eedc <IODRV_SetPinType>:
 * @param	newType		type of io to be configured
 * @retval	bool		true if the pin has been set
 */
// ****************************************************************************
bool IODRV_SetPinType(uint8_t pin, IODRV_PinType_t newType)
{
 800eedc:	b590      	push	{r4, r7, lr}
 800eede:	b087      	sub	sp, #28
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	0002      	movs	r2, r0
 800eee4:	1dfb      	adds	r3, r7, #7
 800eee6:	701a      	strb	r2, [r3, #0]
 800eee8:	1dbb      	adds	r3, r7, #6
 800eeea:	1c0a      	adds	r2, r1, #0
 800eeec:	701a      	strb	r2, [r3, #0]
	const uint32_t otyper_bm = (1u << m_pins[pin].gpioPin_pos);
 800eeee:	1dfb      	adds	r3, r7, #7
 800eef0:	781a      	ldrb	r2, [r3, #0]
 800eef2:	49a0      	ldr	r1, [pc, #640]	; (800f174 <IODRV_SetPinType+0x298>)
 800eef4:	0013      	movs	r3, r2
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	189b      	adds	r3, r3, r2
 800eefa:	00db      	lsls	r3, r3, #3
 800eefc:	18cb      	adds	r3, r1, r3
 800eefe:	331c      	adds	r3, #28
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	001a      	movs	r2, r3
 800ef04:	2301      	movs	r3, #1
 800ef06:	4093      	lsls	r3, r2
 800ef08:	617b      	str	r3, [r7, #20]
	const uint32_t moder_pos = (m_pins[pin].gpioPin_pos * 2u);
 800ef0a:	1dfb      	adds	r3, r7, #7
 800ef0c:	781a      	ldrb	r2, [r3, #0]
 800ef0e:	4999      	ldr	r1, [pc, #612]	; (800f174 <IODRV_SetPinType+0x298>)
 800ef10:	0013      	movs	r3, r2
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	189b      	adds	r3, r3, r2
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	18cb      	adds	r3, r1, r3
 800ef1a:	331c      	adds	r3, #28
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	005b      	lsls	r3, r3, #1
 800ef20:	613b      	str	r3, [r7, #16]
	const uint32_t ospeed_pos = (m_pins[pin].gpioPin_pos * 2u);
 800ef22:	1dfb      	adds	r3, r7, #7
 800ef24:	781a      	ldrb	r2, [r3, #0]
 800ef26:	4993      	ldr	r1, [pc, #588]	; (800f174 <IODRV_SetPinType+0x298>)
 800ef28:	0013      	movs	r3, r2
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	189b      	adds	r3, r3, r2
 800ef2e:	00db      	lsls	r3, r3, #3
 800ef30:	18cb      	adds	r3, r1, r3
 800ef32:	331c      	adds	r3, #28
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	005b      	lsls	r3, r3, #1
 800ef38:	60fb      	str	r3, [r7, #12]

	if ( (pin >= IODRV_MAX_IO_PINS) || (false == m_pins[pin].canConfigure) )
 800ef3a:	1dfb      	adds	r3, r7, #7
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	2b16      	cmp	r3, #22
 800ef40:	d80f      	bhi.n	800ef62 <IODRV_SetPinType+0x86>
 800ef42:	1dfb      	adds	r3, r7, #7
 800ef44:	781a      	ldrb	r2, [r3, #0]
 800ef46:	498b      	ldr	r1, [pc, #556]	; (800f174 <IODRV_SetPinType+0x298>)
 800ef48:	2026      	movs	r0, #38	; 0x26
 800ef4a:	0013      	movs	r3, r2
 800ef4c:	009b      	lsls	r3, r3, #2
 800ef4e:	189b      	adds	r3, r3, r2
 800ef50:	00db      	lsls	r3, r3, #3
 800ef52:	18cb      	adds	r3, r1, r3
 800ef54:	181b      	adds	r3, r3, r0
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	4053      	eors	r3, r2
 800ef5c:	b2db      	uxtb	r3, r3
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d001      	beq.n	800ef66 <IODRV_SetPinType+0x8a>
	{
		return false;
 800ef62:	2300      	movs	r3, #0
 800ef64:	e102      	b.n	800f16c <IODRV_SetPinType+0x290>
	}

	m_pins[pin].gpioPort->MODER &= ~(3u << moder_pos);
 800ef66:	1dfb      	adds	r3, r7, #7
 800ef68:	781a      	ldrb	r2, [r3, #0]
 800ef6a:	4982      	ldr	r1, [pc, #520]	; (800f174 <IODRV_SetPinType+0x298>)
 800ef6c:	0013      	movs	r3, r2
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	189b      	adds	r3, r3, r2
 800ef72:	00db      	lsls	r3, r3, #3
 800ef74:	18cb      	adds	r3, r1, r3
 800ef76:	3320      	adds	r3, #32
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	6819      	ldr	r1, [r3, #0]
 800ef7c:	2203      	movs	r2, #3
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	409a      	lsls	r2, r3
 800ef82:	0013      	movs	r3, r2
 800ef84:	43d8      	mvns	r0, r3
 800ef86:	1dfb      	adds	r3, r7, #7
 800ef88:	781a      	ldrb	r2, [r3, #0]
 800ef8a:	4c7a      	ldr	r4, [pc, #488]	; (800f174 <IODRV_SetPinType+0x298>)
 800ef8c:	0013      	movs	r3, r2
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	189b      	adds	r3, r3, r2
 800ef92:	00db      	lsls	r3, r3, #3
 800ef94:	18e3      	adds	r3, r4, r3
 800ef96:	3320      	adds	r3, #32
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	0002      	movs	r2, r0
 800ef9c:	400a      	ands	r2, r1
 800ef9e:	601a      	str	r2, [r3, #0]
	m_pins[pin].gpioPort->OTYPER &= ~(otyper_bm);
 800efa0:	1dfb      	adds	r3, r7, #7
 800efa2:	781a      	ldrb	r2, [r3, #0]
 800efa4:	4973      	ldr	r1, [pc, #460]	; (800f174 <IODRV_SetPinType+0x298>)
 800efa6:	0013      	movs	r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	189b      	adds	r3, r3, r2
 800efac:	00db      	lsls	r3, r3, #3
 800efae:	18cb      	adds	r3, r1, r3
 800efb0:	3320      	adds	r3, #32
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6859      	ldr	r1, [r3, #4]
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	43d8      	mvns	r0, r3
 800efba:	1dfb      	adds	r3, r7, #7
 800efbc:	781a      	ldrb	r2, [r3, #0]
 800efbe:	4c6d      	ldr	r4, [pc, #436]	; (800f174 <IODRV_SetPinType+0x298>)
 800efc0:	0013      	movs	r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	189b      	adds	r3, r3, r2
 800efc6:	00db      	lsls	r3, r3, #3
 800efc8:	18e3      	adds	r3, r4, r3
 800efca:	3320      	adds	r3, #32
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	0002      	movs	r2, r0
 800efd0:	400a      	ands	r2, r1
 800efd2:	605a      	str	r2, [r3, #4]
	m_pins[pin].gpioPort->OSPEEDR &= ~(3u << ospeed_pos);
 800efd4:	1dfb      	adds	r3, r7, #7
 800efd6:	781a      	ldrb	r2, [r3, #0]
 800efd8:	4966      	ldr	r1, [pc, #408]	; (800f174 <IODRV_SetPinType+0x298>)
 800efda:	0013      	movs	r3, r2
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	189b      	adds	r3, r3, r2
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	18cb      	adds	r3, r1, r3
 800efe4:	3320      	adds	r3, #32
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	6899      	ldr	r1, [r3, #8]
 800efea:	2203      	movs	r2, #3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	409a      	lsls	r2, r3
 800eff0:	0013      	movs	r3, r2
 800eff2:	43d8      	mvns	r0, r3
 800eff4:	1dfb      	adds	r3, r7, #7
 800eff6:	781a      	ldrb	r2, [r3, #0]
 800eff8:	4c5e      	ldr	r4, [pc, #376]	; (800f174 <IODRV_SetPinType+0x298>)
 800effa:	0013      	movs	r3, r2
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	189b      	adds	r3, r3, r2
 800f000:	00db      	lsls	r3, r3, #3
 800f002:	18e3      	adds	r3, r4, r3
 800f004:	3320      	adds	r3, #32
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	0002      	movs	r2, r0
 800f00a:	400a      	ands	r2, r1
 800f00c:	609a      	str	r2, [r3, #8]

	switch (newType)
 800f00e:	1dbb      	adds	r3, r7, #6
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	2b06      	cmp	r3, #6
 800f014:	d900      	bls.n	800f018 <IODRV_SetPinType+0x13c>
 800f016:	e0a7      	b.n	800f168 <IODRV_SetPinType+0x28c>
 800f018:	009a      	lsls	r2, r3, #2
 800f01a:	4b57      	ldr	r3, [pc, #348]	; (800f178 <IODRV_SetPinType+0x29c>)
 800f01c:	18d3      	adds	r3, r2, r3
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	469f      	mov	pc, r3
	{
	case IOTYPE_DIGOUT_OPENDRAIN:
		m_pins[pin].gpioPort->OTYPER |= otyper_bm;
 800f022:	1dfb      	adds	r3, r7, #7
 800f024:	781a      	ldrb	r2, [r3, #0]
 800f026:	4953      	ldr	r1, [pc, #332]	; (800f174 <IODRV_SetPinType+0x298>)
 800f028:	0013      	movs	r3, r2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	189b      	adds	r3, r3, r2
 800f02e:	00db      	lsls	r3, r3, #3
 800f030:	18cb      	adds	r3, r1, r3
 800f032:	3320      	adds	r3, #32
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	6859      	ldr	r1, [r3, #4]
 800f038:	1dfb      	adds	r3, r7, #7
 800f03a:	781a      	ldrb	r2, [r3, #0]
 800f03c:	484d      	ldr	r0, [pc, #308]	; (800f174 <IODRV_SetPinType+0x298>)
 800f03e:	0013      	movs	r3, r2
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	189b      	adds	r3, r3, r2
 800f044:	00db      	lsls	r3, r3, #3
 800f046:	18c3      	adds	r3, r0, r3
 800f048:	3320      	adds	r3, #32
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	430a      	orrs	r2, r1
 800f050:	605a      	str	r2, [r3, #4]
	case IOTYPE_DIGOUT_PUSHPULL:
		m_pins[pin].gpioPort->MODER |= (PINMODE_OUTPUT << moder_pos);
 800f052:	1dfb      	adds	r3, r7, #7
 800f054:	781a      	ldrb	r2, [r3, #0]
 800f056:	4947      	ldr	r1, [pc, #284]	; (800f174 <IODRV_SetPinType+0x298>)
 800f058:	0013      	movs	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	189b      	adds	r3, r3, r2
 800f05e:	00db      	lsls	r3, r3, #3
 800f060:	18cb      	adds	r3, r1, r3
 800f062:	3320      	adds	r3, #32
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	6818      	ldr	r0, [r3, #0]
 800f068:	2201      	movs	r2, #1
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	409a      	lsls	r2, r3
 800f06e:	0011      	movs	r1, r2
 800f070:	1dfb      	adds	r3, r7, #7
 800f072:	781a      	ldrb	r2, [r3, #0]
 800f074:	4c3f      	ldr	r4, [pc, #252]	; (800f174 <IODRV_SetPinType+0x298>)
 800f076:	0013      	movs	r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	189b      	adds	r3, r3, r2
 800f07c:	00db      	lsls	r3, r3, #3
 800f07e:	18e3      	adds	r3, r4, r3
 800f080:	3320      	adds	r3, #32
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	0002      	movs	r2, r0
 800f086:	430a      	orrs	r2, r1
 800f088:	601a      	str	r2, [r3, #0]
		break;
 800f08a:	e06e      	b.n	800f16a <IODRV_SetPinType+0x28e>

	case IOTYPE_PWM_OPENDRAIN:
		m_pins[pin].gpioPort->OTYPER |= otyper_bm;
 800f08c:	1dfb      	adds	r3, r7, #7
 800f08e:	781a      	ldrb	r2, [r3, #0]
 800f090:	4938      	ldr	r1, [pc, #224]	; (800f174 <IODRV_SetPinType+0x298>)
 800f092:	0013      	movs	r3, r2
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	189b      	adds	r3, r3, r2
 800f098:	00db      	lsls	r3, r3, #3
 800f09a:	18cb      	adds	r3, r1, r3
 800f09c:	3320      	adds	r3, #32
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6859      	ldr	r1, [r3, #4]
 800f0a2:	1dfb      	adds	r3, r7, #7
 800f0a4:	781a      	ldrb	r2, [r3, #0]
 800f0a6:	4833      	ldr	r0, [pc, #204]	; (800f174 <IODRV_SetPinType+0x298>)
 800f0a8:	0013      	movs	r3, r2
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	189b      	adds	r3, r3, r2
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	18c3      	adds	r3, r0, r3
 800f0b2:	3320      	adds	r3, #32
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	697a      	ldr	r2, [r7, #20]
 800f0b8:	430a      	orrs	r2, r1
 800f0ba:	605a      	str	r2, [r3, #4]
	case IOTYPE_PWM_PUSHPULL:
		// Set output pin to be high speed
		m_pins[pin].gpioPort->OSPEEDR |= (3u << ospeed_pos);
 800f0bc:	1dfb      	adds	r3, r7, #7
 800f0be:	781a      	ldrb	r2, [r3, #0]
 800f0c0:	492c      	ldr	r1, [pc, #176]	; (800f174 <IODRV_SetPinType+0x298>)
 800f0c2:	0013      	movs	r3, r2
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	189b      	adds	r3, r3, r2
 800f0c8:	00db      	lsls	r3, r3, #3
 800f0ca:	18cb      	adds	r3, r1, r3
 800f0cc:	3320      	adds	r3, #32
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6898      	ldr	r0, [r3, #8]
 800f0d2:	2203      	movs	r2, #3
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	409a      	lsls	r2, r3
 800f0d8:	0011      	movs	r1, r2
 800f0da:	1dfb      	adds	r3, r7, #7
 800f0dc:	781a      	ldrb	r2, [r3, #0]
 800f0de:	4c25      	ldr	r4, [pc, #148]	; (800f174 <IODRV_SetPinType+0x298>)
 800f0e0:	0013      	movs	r3, r2
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	189b      	adds	r3, r3, r2
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	18e3      	adds	r3, r4, r3
 800f0ea:	3320      	adds	r3, #32
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	0002      	movs	r2, r0
 800f0f0:	430a      	orrs	r2, r1
 800f0f2:	609a      	str	r2, [r3, #8]
		m_pins[pin].gpioPort->MODER |= (PINMODE_ALTERNATE << moder_pos);
 800f0f4:	1dfb      	adds	r3, r7, #7
 800f0f6:	781a      	ldrb	r2, [r3, #0]
 800f0f8:	491e      	ldr	r1, [pc, #120]	; (800f174 <IODRV_SetPinType+0x298>)
 800f0fa:	0013      	movs	r3, r2
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	189b      	adds	r3, r3, r2
 800f100:	00db      	lsls	r3, r3, #3
 800f102:	18cb      	adds	r3, r1, r3
 800f104:	3320      	adds	r3, #32
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	6818      	ldr	r0, [r3, #0]
 800f10a:	2202      	movs	r2, #2
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	409a      	lsls	r2, r3
 800f110:	0011      	movs	r1, r2
 800f112:	1dfb      	adds	r3, r7, #7
 800f114:	781a      	ldrb	r2, [r3, #0]
 800f116:	4c17      	ldr	r4, [pc, #92]	; (800f174 <IODRV_SetPinType+0x298>)
 800f118:	0013      	movs	r3, r2
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	189b      	adds	r3, r3, r2
 800f11e:	00db      	lsls	r3, r3, #3
 800f120:	18e3      	adds	r3, r4, r3
 800f122:	3320      	adds	r3, #32
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	0002      	movs	r2, r0
 800f128:	430a      	orrs	r2, r1
 800f12a:	601a      	str	r2, [r3, #0]
		break;
 800f12c:	e01d      	b.n	800f16a <IODRV_SetPinType+0x28e>

	case IOTYPE_ANALOG:
		m_pins[pin].gpioPort->MODER |= (PINMODE_ANALOG << moder_pos);
 800f12e:	1dfb      	adds	r3, r7, #7
 800f130:	781a      	ldrb	r2, [r3, #0]
 800f132:	4910      	ldr	r1, [pc, #64]	; (800f174 <IODRV_SetPinType+0x298>)
 800f134:	0013      	movs	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	189b      	adds	r3, r3, r2
 800f13a:	00db      	lsls	r3, r3, #3
 800f13c:	18cb      	adds	r3, r1, r3
 800f13e:	3320      	adds	r3, #32
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	6818      	ldr	r0, [r3, #0]
 800f144:	2203      	movs	r2, #3
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	409a      	lsls	r2, r3
 800f14a:	0011      	movs	r1, r2
 800f14c:	1dfb      	adds	r3, r7, #7
 800f14e:	781a      	ldrb	r2, [r3, #0]
 800f150:	4c08      	ldr	r4, [pc, #32]	; (800f174 <IODRV_SetPinType+0x298>)
 800f152:	0013      	movs	r3, r2
 800f154:	009b      	lsls	r3, r3, #2
 800f156:	189b      	adds	r3, r3, r2
 800f158:	00db      	lsls	r3, r3, #3
 800f15a:	18e3      	adds	r3, r4, r3
 800f15c:	3320      	adds	r3, #32
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	0002      	movs	r2, r0
 800f162:	430a      	orrs	r2, r1
 800f164:	601a      	str	r2, [r3, #0]
		break;
 800f166:	e000      	b.n	800f16a <IODRV_SetPinType+0x28e>

	default:
		break;
 800f168:	46c0      	nop			; (mov r8, r8)
	}

	return true;
 800f16a:	2301      	movs	r3, #1

}
 800f16c:	0018      	movs	r0, r3
 800f16e:	46bd      	mov	sp, r7
 800f170:	b007      	add	sp, #28
 800f172:	bd90      	pop	{r4, r7, pc}
 800f174:	2000052c 	.word	0x2000052c
 800f178:	08014364 	.word	0x08014364

0800f17c <IODRV_SetPinPullDir>:
 * 							GPIO_NOPULL, GPIO_PULLUP, GPIO_PULLDOWN
 * @retval	bool			true if the pin has been set
 */
// ****************************************************************************
bool IODRV_SetPinPullDir(uint8_t pin, uint32_t pullDirection)
{
 800f17c:	b590      	push	{r4, r7, lr}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	0002      	movs	r2, r0
 800f184:	6039      	str	r1, [r7, #0]
 800f186:	1dfb      	adds	r3, r7, #7
 800f188:	701a      	strb	r2, [r3, #0]
	const uint32_t pupdr_pos = (m_pins[pin].gpioPin_pos * 2u);
 800f18a:	1dfb      	adds	r3, r7, #7
 800f18c:	781a      	ldrb	r2, [r3, #0]
 800f18e:	4930      	ldr	r1, [pc, #192]	; (800f250 <IODRV_SetPinPullDir+0xd4>)
 800f190:	0013      	movs	r3, r2
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	189b      	adds	r3, r3, r2
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	18cb      	adds	r3, r1, r3
 800f19a:	331c      	adds	r3, #28
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	005b      	lsls	r3, r3, #1
 800f1a0:	60fb      	str	r3, [r7, #12]

	if ( (pin >= IODRV_MAX_IO_PINS) || (false == m_pins[pin].canConfigure) || (pullDirection > 2u))
 800f1a2:	1dfb      	adds	r3, r7, #7
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	2b16      	cmp	r3, #22
 800f1a8:	d812      	bhi.n	800f1d0 <IODRV_SetPinPullDir+0x54>
 800f1aa:	1dfb      	adds	r3, r7, #7
 800f1ac:	781a      	ldrb	r2, [r3, #0]
 800f1ae:	4928      	ldr	r1, [pc, #160]	; (800f250 <IODRV_SetPinPullDir+0xd4>)
 800f1b0:	2026      	movs	r0, #38	; 0x26
 800f1b2:	0013      	movs	r3, r2
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	189b      	adds	r3, r3, r2
 800f1b8:	00db      	lsls	r3, r3, #3
 800f1ba:	18cb      	adds	r3, r1, r3
 800f1bc:	181b      	adds	r3, r3, r0
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	4053      	eors	r3, r2
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d102      	bne.n	800f1d0 <IODRV_SetPinPullDir+0x54>
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d901      	bls.n	800f1d4 <IODRV_SetPinPullDir+0x58>
	{
		return false;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	e039      	b.n	800f248 <IODRV_SetPinPullDir+0xcc>
	}

	m_pins[pin].gpioPort->PUPDR &= ~(3u << pupdr_pos);
 800f1d4:	1dfb      	adds	r3, r7, #7
 800f1d6:	781a      	ldrb	r2, [r3, #0]
 800f1d8:	491d      	ldr	r1, [pc, #116]	; (800f250 <IODRV_SetPinPullDir+0xd4>)
 800f1da:	0013      	movs	r3, r2
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	189b      	adds	r3, r3, r2
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	18cb      	adds	r3, r1, r3
 800f1e4:	3320      	adds	r3, #32
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	68d9      	ldr	r1, [r3, #12]
 800f1ea:	2203      	movs	r2, #3
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	409a      	lsls	r2, r3
 800f1f0:	0013      	movs	r3, r2
 800f1f2:	43d8      	mvns	r0, r3
 800f1f4:	1dfb      	adds	r3, r7, #7
 800f1f6:	781a      	ldrb	r2, [r3, #0]
 800f1f8:	4c15      	ldr	r4, [pc, #84]	; (800f250 <IODRV_SetPinPullDir+0xd4>)
 800f1fa:	0013      	movs	r3, r2
 800f1fc:	009b      	lsls	r3, r3, #2
 800f1fe:	189b      	adds	r3, r3, r2
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	18e3      	adds	r3, r4, r3
 800f204:	3320      	adds	r3, #32
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	0002      	movs	r2, r0
 800f20a:	400a      	ands	r2, r1
 800f20c:	60da      	str	r2, [r3, #12]
	m_pins[pin].gpioPort->PUPDR |= (pullDirection << pupdr_pos);
 800f20e:	1dfb      	adds	r3, r7, #7
 800f210:	781a      	ldrb	r2, [r3, #0]
 800f212:	490f      	ldr	r1, [pc, #60]	; (800f250 <IODRV_SetPinPullDir+0xd4>)
 800f214:	0013      	movs	r3, r2
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	189b      	adds	r3, r3, r2
 800f21a:	00db      	lsls	r3, r3, #3
 800f21c:	18cb      	adds	r3, r1, r3
 800f21e:	3320      	adds	r3, #32
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	68d8      	ldr	r0, [r3, #12]
 800f224:	683a      	ldr	r2, [r7, #0]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	409a      	lsls	r2, r3
 800f22a:	0011      	movs	r1, r2
 800f22c:	1dfb      	adds	r3, r7, #7
 800f22e:	781a      	ldrb	r2, [r3, #0]
 800f230:	4c07      	ldr	r4, [pc, #28]	; (800f250 <IODRV_SetPinPullDir+0xd4>)
 800f232:	0013      	movs	r3, r2
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	189b      	adds	r3, r3, r2
 800f238:	00db      	lsls	r3, r3, #3
 800f23a:	18e3      	adds	r3, r4, r3
 800f23c:	3320      	adds	r3, #32
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	0002      	movs	r2, r0
 800f242:	430a      	orrs	r2, r1
 800f244:	60da      	str	r2, [r3, #12]

	return true;
 800f246:	2301      	movs	r3, #1
}
 800f248:	0018      	movs	r0, r3
 800f24a:	46bd      	mov	sp, r7
 800f24c:	b005      	add	sp, #20
 800f24e:	bd90      	pop	{r4, r7, pc}
 800f250:	2000052c 	.word	0x2000052c

0800f254 <IODRV_GetPinInfo>:
 * @param	pin				index of the pin that is required to be set
 * @retval	IODRV_Pin_t*	const pointer to the pin data, NULL if pin not valid
 */
// ****************************************************************************
const IODRV_Pin_t * IODRV_GetPinInfo(uint8_t pin)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	0002      	movs	r2, r0
 800f25c:	1dfb      	adds	r3, r7, #7
 800f25e:	701a      	strb	r2, [r3, #0]
	if ( (pin >= IODRV_MAX_IO_PINS) )
 800f260:	1dfb      	adds	r3, r7, #7
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b16      	cmp	r3, #22
 800f266:	d901      	bls.n	800f26c <IODRV_GetPinInfo+0x18>
	{
		return NULL;
 800f268:	2300      	movs	r3, #0
 800f26a:	e007      	b.n	800f27c <IODRV_GetPinInfo+0x28>
	}

	return &m_pins[pin];
 800f26c:	1dfb      	adds	r3, r7, #7
 800f26e:	781a      	ldrb	r2, [r3, #0]
 800f270:	0013      	movs	r3, r2
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	189b      	adds	r3, r3, r2
 800f276:	00db      	lsls	r3, r3, #3
 800f278:	4a02      	ldr	r2, [pc, #8]	; (800f284 <IODRV_GetPinInfo+0x30>)
 800f27a:	189b      	adds	r3, r3, r2
}
 800f27c:	0018      	movs	r0, r3
 800f27e:	46bd      	mov	sp, r7
 800f280:	b002      	add	sp, #8
 800f282:	bd80      	pop	{r7, pc}
 800f284:	2000052c 	.word	0x2000052c

0800f288 <IORDV_ClearPinEdges>:


void IORDV_ClearPinEdges(const uint8_t pinIdx)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	0002      	movs	r2, r0
 800f290:	1dfb      	adds	r3, r7, #7
 800f292:	701a      	strb	r2, [r3, #0]
	m_pins[pinIdx].lastNegPulseWidthTimeMs = 0u;
 800f294:	1dfb      	adds	r3, r7, #7
 800f296:	781a      	ldrb	r2, [r3, #0]
 800f298:	490b      	ldr	r1, [pc, #44]	; (800f2c8 <IORDV_ClearPinEdges+0x40>)
 800f29a:	0013      	movs	r3, r2
 800f29c:	009b      	lsls	r3, r3, #2
 800f29e:	189b      	adds	r3, r3, r2
 800f2a0:	00db      	lsls	r3, r3, #3
 800f2a2:	18cb      	adds	r3, r1, r3
 800f2a4:	330c      	adds	r3, #12
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	601a      	str	r2, [r3, #0]
	m_pins[pinIdx].lastPosPulseWidthTimeMs = 0u;
 800f2aa:	1dfb      	adds	r3, r7, #7
 800f2ac:	781a      	ldrb	r2, [r3, #0]
 800f2ae:	4906      	ldr	r1, [pc, #24]	; (800f2c8 <IORDV_ClearPinEdges+0x40>)
 800f2b0:	0013      	movs	r3, r2
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	189b      	adds	r3, r3, r2
 800f2b6:	00db      	lsls	r3, r3, #3
 800f2b8:	18cb      	adds	r3, r1, r3
 800f2ba:	3308      	adds	r3, #8
 800f2bc:	2200      	movs	r2, #0
 800f2be:	601a      	str	r2, [r3, #0]
}
 800f2c0:	46c0      	nop			; (mov r8, r8)
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	b002      	add	sp, #8
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	2000052c 	.word	0x2000052c

0800f2cc <IODRV_UpdatePins>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void IODRV_UpdatePins(const uint32_t sysTime)
{
 800f2cc:	b5b0      	push	{r4, r5, r7, lr}
 800f2ce:	b086      	sub	sp, #24
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
	uint8_t pin;
	uint16_t value = 0u;
 800f2d4:	2314      	movs	r3, #20
 800f2d6:	18fb      	adds	r3, r7, r3
 800f2d8:	2200      	movs	r2, #0
 800f2da:	801a      	strh	r2, [r3, #0]
	uint8_t pinType;
	uint32_t moder_pos;

	for (pin = 0u; pin < IODRV_MAX_IO_PINS; pin++)
 800f2dc:	2317      	movs	r3, #23
 800f2de:	18fb      	adds	r3, r7, r3
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	701a      	strb	r2, [r3, #0]
 800f2e4:	e163      	b.n	800f5ae <IODRV_UpdatePins+0x2e2>
	{
		moder_pos = (m_pins[pin].gpioPin_pos * 2u);
 800f2e6:	2017      	movs	r0, #23
 800f2e8:	183b      	adds	r3, r7, r0
 800f2ea:	781a      	ldrb	r2, [r3, #0]
 800f2ec:	49b5      	ldr	r1, [pc, #724]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f2ee:	0013      	movs	r3, r2
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	189b      	adds	r3, r3, r2
 800f2f4:	00db      	lsls	r3, r3, #3
 800f2f6:	18cb      	adds	r3, r1, r3
 800f2f8:	331c      	adds	r3, #28
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	005b      	lsls	r3, r3, #1
 800f2fe:	613b      	str	r3, [r7, #16]
		pinType = (m_pins[pin].gpioPort->MODER >> moder_pos) & 0x03u;
 800f300:	183b      	adds	r3, r7, r0
 800f302:	781a      	ldrb	r2, [r3, #0]
 800f304:	49af      	ldr	r1, [pc, #700]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f306:	0013      	movs	r3, r2
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	189b      	adds	r3, r3, r2
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	18cb      	adds	r3, r1, r3
 800f310:	3320      	adds	r3, #32
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	40da      	lsrs	r2, r3
 800f31a:	0013      	movs	r3, r2
 800f31c:	b2da      	uxtb	r2, r3
 800f31e:	240f      	movs	r4, #15
 800f320:	193b      	adds	r3, r7, r4
 800f322:	2103      	movs	r1, #3
 800f324:	400a      	ands	r2, r1
 800f326:	701a      	strb	r2, [r3, #0]

		if (pinType == PINMODE_ANALOG)
 800f328:	193b      	adds	r3, r7, r4
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	2b03      	cmp	r3, #3
 800f32e:	d124      	bne.n	800f37a <IODRV_UpdatePins+0xae>
		{
			// Read analog pin value, will be 0 if not connected to the ADC
			value = UTIL_FixMul_U32_U16(
 800f330:	183b      	adds	r3, r7, r0
 800f332:	781a      	ldrb	r2, [r3, #0]
 800f334:	49a3      	ldr	r1, [pc, #652]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f336:	0013      	movs	r3, r2
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	189b      	adds	r3, r3, r2
 800f33c:	00db      	lsls	r3, r3, #3
 800f33e:	18cb      	adds	r3, r1, r3
 800f340:	3314      	adds	r3, #20
 800f342:	681d      	ldr	r5, [r3, #0]
 800f344:	183b      	adds	r3, r7, r0
 800f346:	781a      	ldrb	r2, [r3, #0]
 800f348:	499e      	ldr	r1, [pc, #632]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f34a:	0013      	movs	r3, r2
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	189b      	adds	r3, r3, r2
 800f350:	00db      	lsls	r3, r3, #3
 800f352:	18cb      	adds	r3, r1, r3
 800f354:	3310      	adds	r3, #16
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	0018      	movs	r0, r3
 800f35a:	f7f8 f939 	bl	80075d0 <ADC_GetAverageValue>
 800f35e:	0003      	movs	r3, r0
 800f360:	0018      	movs	r0, r3
 800f362:	f7f8 f957 	bl	8007614 <ADC_CalibrateValue>
 800f366:	0003      	movs	r3, r0
 800f368:	2214      	movs	r2, #20
 800f36a:	18bc      	adds	r4, r7, r2
 800f36c:	0019      	movs	r1, r3
 800f36e:	0028      	movs	r0, r5
 800f370:	f004 f9d9 	bl	8013726 <UTIL_FixMul_U32_U16>
 800f374:	0003      	movs	r3, r0
 800f376:	8023      	strh	r3, [r4, #0]
 800f378:	e0fb      	b.n	800f572 <IODRV_UpdatePins+0x2a6>
					m_pins[pin].analogConversionFactor,
					ADC_CalibrateValue(ADC_GetAverageValue(m_pins[pin].adcChannel))
					);
		}
		else if (pinType == PINMODE_ALTERNATE)
 800f37a:	230f      	movs	r3, #15
 800f37c:	18fb      	adds	r3, r7, r3
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	2b02      	cmp	r3, #2
 800f382:	d104      	bne.n	800f38e <IODRV_UpdatePins+0xc2>
		{
			value = 0u;
 800f384:	2314      	movs	r3, #20
 800f386:	18fb      	adds	r3, r7, r3
 800f388:	2200      	movs	r2, #0
 800f38a:	801a      	strh	r2, [r3, #0]
 800f38c:	e0f1      	b.n	800f572 <IODRV_UpdatePins+0x2a6>
		}
		else // Must be digital then
		{
			value = m_pins[pin].value;
 800f38e:	2417      	movs	r4, #23
 800f390:	193b      	adds	r3, r7, r4
 800f392:	781a      	ldrb	r2, [r3, #0]
 800f394:	2314      	movs	r3, #20
 800f396:	18f9      	adds	r1, r7, r3
 800f398:	488a      	ldr	r0, [pc, #552]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f39a:	0013      	movs	r3, r2
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	189b      	adds	r3, r3, r2
 800f3a0:	00db      	lsls	r3, r3, #3
 800f3a2:	5a1b      	ldrh	r3, [r3, r0]
 800f3a4:	800b      	strh	r3, [r1, #0]

			if (GPIO_PIN_SET == HAL_GPIO_ReadPin(m_pins[pin].gpioPort, m_pins[pin].gpioPin_bm))
 800f3a6:	193b      	adds	r3, r7, r4
 800f3a8:	781a      	ldrb	r2, [r3, #0]
 800f3aa:	4986      	ldr	r1, [pc, #536]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f3ac:	0013      	movs	r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	189b      	adds	r3, r3, r2
 800f3b2:	00db      	lsls	r3, r3, #3
 800f3b4:	18cb      	adds	r3, r1, r3
 800f3b6:	3320      	adds	r3, #32
 800f3b8:	6818      	ldr	r0, [r3, #0]
 800f3ba:	193b      	adds	r3, r7, r4
 800f3bc:	781a      	ldrb	r2, [r3, #0]
 800f3be:	4981      	ldr	r1, [pc, #516]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f3c0:	0013      	movs	r3, r2
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	189b      	adds	r3, r3, r2
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	18cb      	adds	r3, r1, r3
 800f3ca:	331a      	adds	r3, #26
 800f3cc:	881b      	ldrh	r3, [r3, #0]
 800f3ce:	0019      	movs	r1, r3
 800f3d0:	f7f5 fa4e 	bl	8004870 <HAL_GPIO_ReadPin>
 800f3d4:	0003      	movs	r3, r0
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d152      	bne.n	800f480 <IODRV_UpdatePins+0x1b4>
			{
				if (m_pins[pin].debounceCounter < IODRV_PIN_DEBOUNCE_COUNT)
 800f3da:	193b      	adds	r3, r7, r4
 800f3dc:	781a      	ldrb	r2, [r3, #0]
 800f3de:	4979      	ldr	r1, [pc, #484]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f3e0:	0013      	movs	r3, r2
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	189b      	adds	r3, r3, r2
 800f3e6:	00db      	lsls	r3, r3, #3
 800f3e8:	18cb      	adds	r3, r1, r3
 800f3ea:	3302      	adds	r3, #2
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	2b04      	cmp	r3, #4
 800f3f0:	d815      	bhi.n	800f41e <IODRV_UpdatePins+0x152>
				{
					m_pins[pin].debounceCounter++;
 800f3f2:	193b      	adds	r3, r7, r4
 800f3f4:	781a      	ldrb	r2, [r3, #0]
 800f3f6:	4973      	ldr	r1, [pc, #460]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f3f8:	0013      	movs	r3, r2
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	189b      	adds	r3, r3, r2
 800f3fe:	00db      	lsls	r3, r3, #3
 800f400:	18cb      	adds	r3, r1, r3
 800f402:	3302      	adds	r3, #2
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	3301      	adds	r3, #1
 800f408:	b2d8      	uxtb	r0, r3
 800f40a:	496e      	ldr	r1, [pc, #440]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f40c:	0013      	movs	r3, r2
 800f40e:	009b      	lsls	r3, r3, #2
 800f410:	189b      	adds	r3, r3, r2
 800f412:	00db      	lsls	r3, r3, #3
 800f414:	18cb      	adds	r3, r1, r3
 800f416:	3302      	adds	r3, #2
 800f418:	1c02      	adds	r2, r0, #0
 800f41a:	701a      	strb	r2, [r3, #0]
 800f41c:	e083      	b.n	800f526 <IODRV_UpdatePins+0x25a>
				}
				else if (m_pins[pin].value != GPIO_PIN_SET)
 800f41e:	2417      	movs	r4, #23
 800f420:	193b      	adds	r3, r7, r4
 800f422:	781a      	ldrb	r2, [r3, #0]
 800f424:	4967      	ldr	r1, [pc, #412]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f426:	0013      	movs	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	189b      	adds	r3, r3, r2
 800f42c:	00db      	lsls	r3, r3, #3
 800f42e:	5a5b      	ldrh	r3, [r3, r1]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d078      	beq.n	800f526 <IODRV_UpdatePins+0x25a>
				{
					/* log positive pulse width */
					m_pins[pin].lastNegPulseWidthTimeMs = MS_TIMEREF_DIFF(m_pins[pin].lastDigitalChangeTime, sysTime);
 800f434:	193b      	adds	r3, r7, r4
 800f436:	781a      	ldrb	r2, [r3, #0]
 800f438:	4962      	ldr	r1, [pc, #392]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f43a:	0013      	movs	r3, r2
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	189b      	adds	r3, r3, r2
 800f440:	00db      	lsls	r3, r3, #3
 800f442:	18cb      	adds	r3, r1, r3
 800f444:	3304      	adds	r3, #4
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	193a      	adds	r2, r7, r4
 800f44a:	7812      	ldrb	r2, [r2, #0]
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	1ac9      	subs	r1, r1, r3
 800f450:	485c      	ldr	r0, [pc, #368]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f452:	0013      	movs	r3, r2
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	189b      	adds	r3, r3, r2
 800f458:	00db      	lsls	r3, r3, #3
 800f45a:	18c3      	adds	r3, r0, r3
 800f45c:	330c      	adds	r3, #12
 800f45e:	6019      	str	r1, [r3, #0]

					/* log the change time */
					MS_TIMEREF_INIT(m_pins[pin].lastDigitalChangeTime, sysTime);
 800f460:	193b      	adds	r3, r7, r4
 800f462:	781a      	ldrb	r2, [r3, #0]
 800f464:	4957      	ldr	r1, [pc, #348]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f466:	0013      	movs	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	189b      	adds	r3, r3, r2
 800f46c:	00db      	lsls	r3, r3, #3
 800f46e:	18cb      	adds	r3, r1, r3
 800f470:	3304      	adds	r3, #4
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	601a      	str	r2, [r3, #0]

					value = GPIO_PIN_SET;
 800f476:	2314      	movs	r3, #20
 800f478:	18fb      	adds	r3, r7, r3
 800f47a:	2201      	movs	r2, #1
 800f47c:	801a      	strh	r2, [r3, #0]
 800f47e:	e052      	b.n	800f526 <IODRV_UpdatePins+0x25a>
					// Value already set
				}
			}
			else
			{
				if (m_pins[pin].debounceCounter > 0u)
 800f480:	2017      	movs	r0, #23
 800f482:	183b      	adds	r3, r7, r0
 800f484:	781a      	ldrb	r2, [r3, #0]
 800f486:	494f      	ldr	r1, [pc, #316]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f488:	0013      	movs	r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	189b      	adds	r3, r3, r2
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	18cb      	adds	r3, r1, r3
 800f492:	3302      	adds	r3, #2
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d015      	beq.n	800f4c6 <IODRV_UpdatePins+0x1fa>
				{
					m_pins[pin].debounceCounter--;
 800f49a:	183b      	adds	r3, r7, r0
 800f49c:	781a      	ldrb	r2, [r3, #0]
 800f49e:	4949      	ldr	r1, [pc, #292]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f4a0:	0013      	movs	r3, r2
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	189b      	adds	r3, r3, r2
 800f4a6:	00db      	lsls	r3, r3, #3
 800f4a8:	18cb      	adds	r3, r1, r3
 800f4aa:	3302      	adds	r3, #2
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	b2d8      	uxtb	r0, r3
 800f4b2:	4944      	ldr	r1, [pc, #272]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f4b4:	0013      	movs	r3, r2
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	189b      	adds	r3, r3, r2
 800f4ba:	00db      	lsls	r3, r3, #3
 800f4bc:	18cb      	adds	r3, r1, r3
 800f4be:	3302      	adds	r3, #2
 800f4c0:	1c02      	adds	r2, r0, #0
 800f4c2:	701a      	strb	r2, [r3, #0]
 800f4c4:	e02f      	b.n	800f526 <IODRV_UpdatePins+0x25a>
				}
				else if (m_pins[pin].value != GPIO_PIN_RESET)
 800f4c6:	2417      	movs	r4, #23
 800f4c8:	193b      	adds	r3, r7, r4
 800f4ca:	781a      	ldrb	r2, [r3, #0]
 800f4cc:	493d      	ldr	r1, [pc, #244]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f4ce:	0013      	movs	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	189b      	adds	r3, r3, r2
 800f4d4:	00db      	lsls	r3, r3, #3
 800f4d6:	5a5b      	ldrh	r3, [r3, r1]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d024      	beq.n	800f526 <IODRV_UpdatePins+0x25a>
				{
					/* log negative pulse width */
					m_pins[pin].lastPosPulseWidthTimeMs = MS_TIMEREF_DIFF(m_pins[pin].lastDigitalChangeTime, sysTime);
 800f4dc:	193b      	adds	r3, r7, r4
 800f4de:	781a      	ldrb	r2, [r3, #0]
 800f4e0:	4938      	ldr	r1, [pc, #224]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f4e2:	0013      	movs	r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	189b      	adds	r3, r3, r2
 800f4e8:	00db      	lsls	r3, r3, #3
 800f4ea:	18cb      	adds	r3, r1, r3
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	193a      	adds	r2, r7, r4
 800f4f2:	7812      	ldrb	r2, [r2, #0]
 800f4f4:	6879      	ldr	r1, [r7, #4]
 800f4f6:	1ac9      	subs	r1, r1, r3
 800f4f8:	4832      	ldr	r0, [pc, #200]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f4fa:	0013      	movs	r3, r2
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	189b      	adds	r3, r3, r2
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	18c3      	adds	r3, r0, r3
 800f504:	3308      	adds	r3, #8
 800f506:	6019      	str	r1, [r3, #0]

					/* log the change time */
					MS_TIMEREF_INIT(m_pins[pin].lastDigitalChangeTime, sysTime);
 800f508:	193b      	adds	r3, r7, r4
 800f50a:	781a      	ldrb	r2, [r3, #0]
 800f50c:	492d      	ldr	r1, [pc, #180]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f50e:	0013      	movs	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	189b      	adds	r3, r3, r2
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	18cb      	adds	r3, r1, r3
 800f518:	3304      	adds	r3, #4
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	601a      	str	r2, [r3, #0]

					value = GPIO_PIN_RESET;
 800f51e:	2314      	movs	r3, #20
 800f520:	18fb      	adds	r3, r7, r3
 800f522:	2200      	movs	r2, #0
 800f524:	801a      	strh	r2, [r3, #0]
					// Value already set
				}
			}

			// Clear pulse widths after one day, button routine might catch uint32_t timeref roll over and cause havok!
			if (MS_TIMEREF_TIMEOUT(m_pins[pin].lastDigitalChangeTime, sysTime, MS_ONE_DAY))
 800f526:	2017      	movs	r0, #23
 800f528:	183b      	adds	r3, r7, r0
 800f52a:	781a      	ldrb	r2, [r3, #0]
 800f52c:	4925      	ldr	r1, [pc, #148]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f52e:	0013      	movs	r3, r2
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	189b      	adds	r3, r3, r2
 800f534:	00db      	lsls	r3, r3, #3
 800f536:	18cb      	adds	r3, r1, r3
 800f538:	3304      	adds	r3, #4
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	1ad3      	subs	r3, r2, r3
 800f540:	4a21      	ldr	r2, [pc, #132]	; (800f5c8 <IODRV_UpdatePins+0x2fc>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d915      	bls.n	800f572 <IODRV_UpdatePins+0x2a6>
			{
				m_pins[pin].lastNegPulseWidthTimeMs = 0u;
 800f546:	183b      	adds	r3, r7, r0
 800f548:	781a      	ldrb	r2, [r3, #0]
 800f54a:	491e      	ldr	r1, [pc, #120]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f54c:	0013      	movs	r3, r2
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	189b      	adds	r3, r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	18cb      	adds	r3, r1, r3
 800f556:	330c      	adds	r3, #12
 800f558:	2200      	movs	r2, #0
 800f55a:	601a      	str	r2, [r3, #0]
				m_pins[pin].lastPosPulseWidthTimeMs = 0u;
 800f55c:	183b      	adds	r3, r7, r0
 800f55e:	781a      	ldrb	r2, [r3, #0]
 800f560:	4918      	ldr	r1, [pc, #96]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f562:	0013      	movs	r3, r2
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	189b      	adds	r3, r3, r2
 800f568:	00db      	lsls	r3, r3, #3
 800f56a:	18cb      	adds	r3, r1, r3
 800f56c:	3308      	adds	r3, #8
 800f56e:	2200      	movs	r2, #0
 800f570:	601a      	str	r2, [r3, #0]
			}
		}

		m_pins[pin].value = (value ^ m_pins[pin].invert_bm);
 800f572:	2417      	movs	r4, #23
 800f574:	193b      	adds	r3, r7, r4
 800f576:	781a      	ldrb	r2, [r3, #0]
 800f578:	4912      	ldr	r1, [pc, #72]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f57a:	0013      	movs	r3, r2
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	189b      	adds	r3, r3, r2
 800f580:	00db      	lsls	r3, r3, #3
 800f582:	18cb      	adds	r3, r1, r3
 800f584:	3324      	adds	r3, #36	; 0x24
 800f586:	8819      	ldrh	r1, [r3, #0]
 800f588:	193b      	adds	r3, r7, r4
 800f58a:	781a      	ldrb	r2, [r3, #0]
 800f58c:	2314      	movs	r3, #20
 800f58e:	18fb      	adds	r3, r7, r3
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	404b      	eors	r3, r1
 800f594:	b298      	uxth	r0, r3
 800f596:	490b      	ldr	r1, [pc, #44]	; (800f5c4 <IODRV_UpdatePins+0x2f8>)
 800f598:	0013      	movs	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	189b      	adds	r3, r3, r2
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	1c02      	adds	r2, r0, #0
 800f5a2:	525a      	strh	r2, [r3, r1]
	for (pin = 0u; pin < IODRV_MAX_IO_PINS; pin++)
 800f5a4:	193b      	adds	r3, r7, r4
 800f5a6:	781a      	ldrb	r2, [r3, #0]
 800f5a8:	193b      	adds	r3, r7, r4
 800f5aa:	3201      	adds	r2, #1
 800f5ac:	701a      	strb	r2, [r3, #0]
 800f5ae:	2317      	movs	r3, #23
 800f5b0:	18fb      	adds	r3, r7, r3
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	2b16      	cmp	r3, #22
 800f5b6:	d800      	bhi.n	800f5ba <IODRV_UpdatePins+0x2ee>
 800f5b8:	e695      	b.n	800f2e6 <IODRV_UpdatePins+0x1a>
	}
}
 800f5ba:	46c0      	nop			; (mov r8, r8)
 800f5bc:	46c0      	nop			; (mov r8, r8)
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	b006      	add	sp, #24
 800f5c2:	bdb0      	pop	{r4, r5, r7, pc}
 800f5c4:	2000052c 	.word	0x2000052c
 800f5c8:	05265bff 	.word	0x05265bff

0800f5cc <LED_Init>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void LED_Init(const uint32_t sysTime)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
	// Start pwm timer channels, also starts the timers
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800f5d4:	4b2b      	ldr	r3, [pc, #172]	; (800f684 <LED_Init+0xb8>)
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	0018      	movs	r0, r3
 800f5da:	f7f7 f83d 	bl	8006658 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800f5de:	4b29      	ldr	r3, [pc, #164]	; (800f684 <LED_Init+0xb8>)
 800f5e0:	2104      	movs	r1, #4
 800f5e2:	0018      	movs	r0, r3
 800f5e4:	f7f7 f838 	bl	8006658 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800f5e8:	4b26      	ldr	r3, [pc, #152]	; (800f684 <LED_Init+0xb8>)
 800f5ea:	2108      	movs	r1, #8
 800f5ec:	0018      	movs	r0, r3
 800f5ee:	f7f7 f833 	bl	8006658 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800f5f2:	4b25      	ldr	r3, [pc, #148]	; (800f688 <LED_Init+0xbc>)
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	0018      	movs	r0, r3
 800f5f8:	f7f7 f82e 	bl	8006658 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800f5fc:	4b22      	ldr	r3, [pc, #136]	; (800f688 <LED_Init+0xbc>)
 800f5fe:	2104      	movs	r1, #4
 800f600:	0018      	movs	r0, r3
 800f602:	f7f7 f829 	bl	8006658 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800f606:	4b21      	ldr	r3, [pc, #132]	; (800f68c <LED_Init+0xc0>)
 800f608:	2100      	movs	r1, #0
 800f60a:	0018      	movs	r0, r3
 800f60c:	f7f7 f824 	bl	8006658 <HAL_TIM_PWM_Start>

	// Set all pins to drive push pull
	IODRV_SetPinType(IODRV_PIN_LED1_R, IOTYPE_PWM_PUSHPULL);
 800f610:	2105      	movs	r1, #5
 800f612:	2010      	movs	r0, #16
 800f614:	f7ff fc62 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED1_G, IOTYPE_PWM_PUSHPULL);
 800f618:	2105      	movs	r1, #5
 800f61a:	2011      	movs	r0, #17
 800f61c:	f7ff fc5e 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED1_B, IOTYPE_PWM_PUSHPULL);
 800f620:	2105      	movs	r1, #5
 800f622:	2012      	movs	r0, #18
 800f624:	f7ff fc5a 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED2_R, IOTYPE_PWM_PUSHPULL);
 800f628:	2105      	movs	r1, #5
 800f62a:	2013      	movs	r0, #19
 800f62c:	f7ff fc56 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED2_G, IOTYPE_PWM_PUSHPULL);
 800f630:	2105      	movs	r1, #5
 800f632:	2014      	movs	r0, #20
 800f634:	f7ff fc52 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED2_B, IOTYPE_PWM_PUSHPULL);
 800f638:	2105      	movs	r1, #5
 800f63a:	2015      	movs	r0, #21
 800f63c:	f7ff fc4e 	bl	800eedc <IODRV_SetPinType>

	// Set pull down for when in input mode
	IODRV_SetPinPullDir(IODRV_PIN_LED1_R, GPIO_PULLDOWN);
 800f640:	2102      	movs	r1, #2
 800f642:	2010      	movs	r0, #16
 800f644:	f7ff fd9a 	bl	800f17c <IODRV_SetPinPullDir>
	IODRV_SetPinPullDir(IODRV_PIN_LED1_G, GPIO_PULLDOWN);
 800f648:	2102      	movs	r1, #2
 800f64a:	2011      	movs	r0, #17
 800f64c:	f7ff fd96 	bl	800f17c <IODRV_SetPinPullDir>
	IODRV_SetPinPullDir(IODRV_PIN_LED1_B, GPIO_PULLDOWN);
 800f650:	2102      	movs	r1, #2
 800f652:	2012      	movs	r0, #18
 800f654:	f7ff fd92 	bl	800f17c <IODRV_SetPinPullDir>
	IODRV_SetPinPullDir(IODRV_PIN_LED2_R, GPIO_PULLDOWN);
 800f658:	2102      	movs	r1, #2
 800f65a:	2013      	movs	r0, #19
 800f65c:	f7ff fd8e 	bl	800f17c <IODRV_SetPinPullDir>
	IODRV_SetPinPullDir(IODRV_PIN_LED2_G, GPIO_PULLDOWN);
 800f660:	2102      	movs	r1, #2
 800f662:	2014      	movs	r0, #20
 800f664:	f7ff fd8a 	bl	800f17c <IODRV_SetPinPullDir>
	IODRV_SetPinPullDir(IODRV_PIN_LED2_B, GPIO_PULLDOWN);
 800f668:	2102      	movs	r1, #2
 800f66a:	2015      	movs	r0, #21
 800f66c:	f7ff fd86 	bl	800f17c <IODRV_SetPinPullDir>

	// Initialise the led functions from NV memory
	LED_InitFunction(LED_LED1_IDX);
 800f670:	2000      	movs	r0, #0
 800f672:	f000 fcd7 	bl	8010024 <LED_InitFunction>
	LED_InitFunction(LED_LED2_IDX);
 800f676:	2001      	movs	r0, #1
 800f678:	f000 fcd4 	bl	8010024 <LED_InitFunction>
}
 800f67c:	46c0      	nop			; (mov r8, r8)
 800f67e:	46bd      	mov	sp, r7
 800f680:	b002      	add	sp, #8
 800f682:	bd80      	pop	{r7, pc}
 800f684:	2000176c 	.word	0x2000176c
 800f688:	20001680 	.word	0x20001680
 800f68c:	20001724 	.word	0x20001724

0800f690 <LED_Shutdown>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void LED_Shutdown(void)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800f694:	4b1c      	ldr	r3, [pc, #112]	; (800f708 <LED_Shutdown+0x78>)
 800f696:	2100      	movs	r1, #0
 800f698:	0018      	movs	r0, r3
 800f69a:	f7f7 f88f 	bl	80067bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800f69e:	4b1a      	ldr	r3, [pc, #104]	; (800f708 <LED_Shutdown+0x78>)
 800f6a0:	2104      	movs	r1, #4
 800f6a2:	0018      	movs	r0, r3
 800f6a4:	f7f7 f88a 	bl	80067bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800f6a8:	4b17      	ldr	r3, [pc, #92]	; (800f708 <LED_Shutdown+0x78>)
 800f6aa:	2108      	movs	r1, #8
 800f6ac:	0018      	movs	r0, r3
 800f6ae:	f7f7 f885 	bl	80067bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800f6b2:	4b16      	ldr	r3, [pc, #88]	; (800f70c <LED_Shutdown+0x7c>)
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	0018      	movs	r0, r3
 800f6b8:	f7f7 f880 	bl	80067bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 800f6bc:	4b13      	ldr	r3, [pc, #76]	; (800f70c <LED_Shutdown+0x7c>)
 800f6be:	2104      	movs	r1, #4
 800f6c0:	0018      	movs	r0, r3
 800f6c2:	f7f7 f87b 	bl	80067bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 800f6c6:	4b12      	ldr	r3, [pc, #72]	; (800f710 <LED_Shutdown+0x80>)
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	0018      	movs	r0, r3
 800f6cc:	f7f7 f876 	bl	80067bc <HAL_TIM_PWM_Stop>

	// Make all pins pull down
	IODRV_SetPinType(IODRV_PIN_LED1_R, IOTYPE_DIGIN);
 800f6d0:	2102      	movs	r1, #2
 800f6d2:	2010      	movs	r0, #16
 800f6d4:	f7ff fc02 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED1_G, IOTYPE_DIGIN);
 800f6d8:	2102      	movs	r1, #2
 800f6da:	2011      	movs	r0, #17
 800f6dc:	f7ff fbfe 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED1_B, IOTYPE_DIGIN);
 800f6e0:	2102      	movs	r1, #2
 800f6e2:	2012      	movs	r0, #18
 800f6e4:	f7ff fbfa 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED2_R, IOTYPE_DIGIN);
 800f6e8:	2102      	movs	r1, #2
 800f6ea:	2013      	movs	r0, #19
 800f6ec:	f7ff fbf6 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED2_G, IOTYPE_DIGIN);
 800f6f0:	2102      	movs	r1, #2
 800f6f2:	2014      	movs	r0, #20
 800f6f4:	f7ff fbf2 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_LED2_B, IOTYPE_DIGIN);
 800f6f8:	2102      	movs	r1, #2
 800f6fa:	2015      	movs	r0, #21
 800f6fc:	f7ff fbee 	bl	800eedc <IODRV_SetPinType>
}
 800f700:	46c0      	nop			; (mov r8, r8)
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	46c0      	nop			; (mov r8, r8)
 800f708:	2000176c 	.word	0x2000176c
 800f70c:	20001680 	.word	0x20001680
 800f710:	20001724 	.word	0x20001724

0800f714 <LED_Service>:
 * @param	sysTime		current value of the ms tick timer
 * @retval	none
 */
// ****************************************************************************
void LED_Service(const uint32_t sysTime)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
	LED_ProcessBlink(&m_leds[LED_LED1_IDX], sysTime);
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	4b07      	ldr	r3, [pc, #28]	; (800f73c <LED_Service+0x28>)
 800f720:	0011      	movs	r1, r2
 800f722:	0018      	movs	r0, r3
 800f724:	f000 fbe4 	bl	800fef0 <LED_ProcessBlink>
	LED_ProcessBlink(&m_leds[LED_LED2_IDX], sysTime);
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	4b05      	ldr	r3, [pc, #20]	; (800f740 <LED_Service+0x2c>)
 800f72c:	0011      	movs	r1, r2
 800f72e:	0018      	movs	r0, r3
 800f730:	f000 fbde 	bl	800fef0 <LED_ProcessBlink>
}
 800f734:	46c0      	nop			; (mov r8, r8)
 800f736:	46bd      	mov	sp, r7
 800f738:	b002      	add	sp, #8
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	200008c4 	.word	0x200008c4
 800f740:	200008ec 	.word	0x200008ec

0800f744 <LED_SetRGB>:
 * @param	b			blue set point for addressed led
 * @retval	none
 */
// ****************************************************************************
void LED_SetRGB(const uint8_t ledIdx, const uint8_t r, const uint8_t g, const uint8_t b)
{
 800f744:	b5b0      	push	{r4, r5, r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	0005      	movs	r5, r0
 800f74c:	000c      	movs	r4, r1
 800f74e:	0010      	movs	r0, r2
 800f750:	0019      	movs	r1, r3
 800f752:	1dfb      	adds	r3, r7, #7
 800f754:	1c2a      	adds	r2, r5, #0
 800f756:	701a      	strb	r2, [r3, #0]
 800f758:	1dbb      	adds	r3, r7, #6
 800f75a:	1c22      	adds	r2, r4, #0
 800f75c:	701a      	strb	r2, [r3, #0]
 800f75e:	1d7b      	adds	r3, r7, #5
 800f760:	1c02      	adds	r2, r0, #0
 800f762:	701a      	strb	r2, [r3, #0]
 800f764:	1d3b      	adds	r3, r7, #4
 800f766:	1c0a      	adds	r2, r1, #0
 800f768:	701a      	strb	r2, [r3, #0]
	if (ledIdx > LED_LAST_LED_IDX)
 800f76a:	1dfb      	adds	r3, r7, #7
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d811      	bhi.n	800f796 <LED_SetRGB+0x52>
	{
		return;
	}

	LED_SetRGBLedPtr(&m_leds[ledIdx], r, g, b);
 800f772:	1dfb      	adds	r3, r7, #7
 800f774:	781a      	ldrb	r2, [r3, #0]
 800f776:	0013      	movs	r3, r2
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	189b      	adds	r3, r3, r2
 800f77c:	00db      	lsls	r3, r3, #3
 800f77e:	4a08      	ldr	r2, [pc, #32]	; (800f7a0 <LED_SetRGB+0x5c>)
 800f780:	1898      	adds	r0, r3, r2
 800f782:	1d3b      	adds	r3, r7, #4
 800f784:	781c      	ldrb	r4, [r3, #0]
 800f786:	1d7b      	adds	r3, r7, #5
 800f788:	781a      	ldrb	r2, [r3, #0]
 800f78a:	1dbb      	adds	r3, r7, #6
 800f78c:	7819      	ldrb	r1, [r3, #0]
 800f78e:	0023      	movs	r3, r4
 800f790:	f000 fc0e 	bl	800ffb0 <LED_SetRGBLedPtr>
 800f794:	e000      	b.n	800f798 <LED_SetRGB+0x54>
		return;
 800f796:	46c0      	nop			; (mov r8, r8)
}
 800f798:	46bd      	mov	sp, r7
 800f79a:	b002      	add	sp, #8
 800f79c:	bdb0      	pop	{r4, r5, r7, pc}
 800f79e:	46c0      	nop			; (mov r8, r8)
 800f7a0:	200008c4 	.word	0x200008c4

0800f7a4 <LED_FunctionSetRGB>:
 * @param	b			blue set point for led
 * @retval	none
 */
// ****************************************************************************
void LED_FunctionSetRGB(LedFunction_T func, uint8_t r, uint8_t g, uint8_t b)
{
 800f7a4:	b5b0      	push	{r4, r5, r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	0005      	movs	r5, r0
 800f7ac:	000c      	movs	r4, r1
 800f7ae:	0010      	movs	r0, r2
 800f7b0:	0019      	movs	r1, r3
 800f7b2:	1dfb      	adds	r3, r7, #7
 800f7b4:	1c2a      	adds	r2, r5, #0
 800f7b6:	701a      	strb	r2, [r3, #0]
 800f7b8:	1dbb      	adds	r3, r7, #6
 800f7ba:	1c22      	adds	r2, r4, #0
 800f7bc:	701a      	strb	r2, [r3, #0]
 800f7be:	1d7b      	adds	r3, r7, #5
 800f7c0:	1c02      	adds	r2, r0, #0
 800f7c2:	701a      	strb	r2, [r3, #0]
 800f7c4:	1d3b      	adds	r3, r7, #4
 800f7c6:	1c0a      	adds	r2, r1, #0
 800f7c8:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0u;
 800f7ca:	230f      	movs	r3, #15
 800f7cc:	18fb      	adds	r3, r7, r3
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	701a      	strb	r2, [r3, #0]

	while( (i < LED_COUNT) && (m_leds[i].func != func) )
 800f7d2:	e005      	b.n	800f7e0 <LED_FunctionSetRGB+0x3c>
	{
		i++;
 800f7d4:	210f      	movs	r1, #15
 800f7d6:	187b      	adds	r3, r7, r1
 800f7d8:	781a      	ldrb	r2, [r3, #0]
 800f7da:	187b      	adds	r3, r7, r1
 800f7dc:	3201      	adds	r2, #1
 800f7de:	701a      	strb	r2, [r3, #0]
	while( (i < LED_COUNT) && (m_leds[i].func != func) )
 800f7e0:	220f      	movs	r2, #15
 800f7e2:	18bb      	adds	r3, r7, r2
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d80b      	bhi.n	800f802 <LED_FunctionSetRGB+0x5e>
 800f7ea:	18bb      	adds	r3, r7, r2
 800f7ec:	781a      	ldrb	r2, [r3, #0]
 800f7ee:	491c      	ldr	r1, [pc, #112]	; (800f860 <LED_FunctionSetRGB+0xbc>)
 800f7f0:	0013      	movs	r3, r2
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	189b      	adds	r3, r3, r2
 800f7f6:	00db      	lsls	r3, r3, #3
 800f7f8:	5c5b      	ldrb	r3, [r3, r1]
 800f7fa:	1dfa      	adds	r2, r7, #7
 800f7fc:	7812      	ldrb	r2, [r2, #0]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d1e8      	bne.n	800f7d4 <LED_FunctionSetRGB+0x30>
	}

	if (i > LED_LAST_LED_IDX)
 800f802:	220f      	movs	r2, #15
 800f804:	18bb      	adds	r3, r7, r2
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d825      	bhi.n	800f858 <LED_FunctionSetRGB+0xb4>
	{
		return;
	}

	Led_T * p_led = &m_leds[i];
 800f80c:	18bb      	adds	r3, r7, r2
 800f80e:	781a      	ldrb	r2, [r3, #0]
 800f810:	0013      	movs	r3, r2
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	189b      	adds	r3, r3, r2
 800f816:	00db      	lsls	r3, r3, #3
 800f818:	4a11      	ldr	r2, [pc, #68]	; (800f860 <LED_FunctionSetRGB+0xbc>)
 800f81a:	189b      	adds	r3, r3, r2
 800f81c:	60bb      	str	r3, [r7, #8]

	p_led->r = r;
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	1dba      	adds	r2, r7, #6
 800f822:	7812      	ldrb	r2, [r2, #0]
 800f824:	711a      	strb	r2, [r3, #4]
	p_led->g = g;
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	1d7a      	adds	r2, r7, #5
 800f82a:	7812      	ldrb	r2, [r2, #0]
 800f82c:	715a      	strb	r2, [r3, #5]
	p_led->b = b;
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	1d3a      	adds	r2, r7, #4
 800f832:	7812      	ldrb	r2, [r2, #0]
 800f834:	719a      	strb	r2, [r3, #6]
	p_led->blinkCount = 0u;
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	2200      	movs	r2, #0
 800f83a:	829a      	strh	r2, [r3, #20]
	p_led->blinkRepeat = 0u;
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2200      	movs	r2, #0
 800f840:	71da      	strb	r2, [r3, #7]

	LED_SetRGBLedPtr(p_led, r, g, b);
 800f842:	1d3b      	adds	r3, r7, #4
 800f844:	781c      	ldrb	r4, [r3, #0]
 800f846:	1d7b      	adds	r3, r7, #5
 800f848:	781a      	ldrb	r2, [r3, #0]
 800f84a:	1dbb      	adds	r3, r7, #6
 800f84c:	7819      	ldrb	r1, [r3, #0]
 800f84e:	68b8      	ldr	r0, [r7, #8]
 800f850:	0023      	movs	r3, r4
 800f852:	f000 fbad 	bl	800ffb0 <LED_SetRGBLedPtr>
 800f856:	e000      	b.n	800f85a <LED_FunctionSetRGB+0xb6>
		return;
 800f858:	46c0      	nop			; (mov r8, r8)
}
 800f85a:	46bd      	mov	sp, r7
 800f85c:	b004      	add	sp, #16
 800f85e:	bdb0      	pop	{r4, r5, r7, pc}
 800f860:	200008c4 	.word	0x200008c4

0800f864 <LED_FindHandleByFunction>:
 * @param	func		function type to match led with
 * @retval	none
 *  */
// ****************************************************************************
const Led_T * LED_FindHandleByFunction(const LedFunction_T func)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	0002      	movs	r2, r0
 800f86c:	1dfb      	adds	r3, r7, #7
 800f86e:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0u;
 800f870:	230f      	movs	r3, #15
 800f872:	18fb      	adds	r3, r7, r3
 800f874:	2200      	movs	r2, #0
 800f876:	701a      	strb	r2, [r3, #0]

	while( (i < LED_COUNT) && (m_leds[i].func != func) )
 800f878:	e005      	b.n	800f886 <LED_FindHandleByFunction+0x22>
	{
		i++;
 800f87a:	210f      	movs	r1, #15
 800f87c:	187b      	adds	r3, r7, r1
 800f87e:	781a      	ldrb	r2, [r3, #0]
 800f880:	187b      	adds	r3, r7, r1
 800f882:	3201      	adds	r2, #1
 800f884:	701a      	strb	r2, [r3, #0]
	while( (i < LED_COUNT) && (m_leds[i].func != func) )
 800f886:	220f      	movs	r2, #15
 800f888:	18bb      	adds	r3, r7, r2
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d80b      	bhi.n	800f8a8 <LED_FindHandleByFunction+0x44>
 800f890:	18bb      	adds	r3, r7, r2
 800f892:	781a      	ldrb	r2, [r3, #0]
 800f894:	490e      	ldr	r1, [pc, #56]	; (800f8d0 <LED_FindHandleByFunction+0x6c>)
 800f896:	0013      	movs	r3, r2
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	189b      	adds	r3, r3, r2
 800f89c:	00db      	lsls	r3, r3, #3
 800f89e:	5c5b      	ldrb	r3, [r3, r1]
 800f8a0:	1dfa      	adds	r2, r7, #7
 800f8a2:	7812      	ldrb	r2, [r2, #0]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d1e8      	bne.n	800f87a <LED_FindHandleByFunction+0x16>
	}

	if (i < LED_COUNT)
 800f8a8:	220f      	movs	r2, #15
 800f8aa:	18bb      	adds	r3, r7, r2
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d808      	bhi.n	800f8c4 <LED_FindHandleByFunction+0x60>
	{
		return &m_leds[i];
 800f8b2:	18bb      	adds	r3, r7, r2
 800f8b4:	781a      	ldrb	r2, [r3, #0]
 800f8b6:	0013      	movs	r3, r2
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	189b      	adds	r3, r3, r2
 800f8bc:	00db      	lsls	r3, r3, #3
 800f8be:	4a04      	ldr	r2, [pc, #16]	; (800f8d0 <LED_FindHandleByFunction+0x6c>)
 800f8c0:	189b      	adds	r3, r3, r2
 800f8c2:	e000      	b.n	800f8c6 <LED_FindHandleByFunction+0x62>
	}

	return NULL;
 800f8c4:	2300      	movs	r3, #0
}
 800f8c6:	0018      	movs	r0, r3
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	b004      	add	sp, #16
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	46c0      	nop			; (mov r8, r8)
 800f8d0:	200008c4 	.word	0x200008c4

0800f8d4 <LED_SetConfigurationData>:
 * @retval	none
 *
 */
// ****************************************************************************
void LED_SetConfigurationData(const uint8_t ledIdx, const uint8_t * const p_data, const uint8_t len)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6039      	str	r1, [r7, #0]
 800f8dc:	0011      	movs	r1, r2
 800f8de:	1dfb      	adds	r3, r7, #7
 800f8e0:	1c02      	adds	r2, r0, #0
 800f8e2:	701a      	strb	r2, [r3, #0]
 800f8e4:	1dbb      	adds	r3, r7, #6
 800f8e6:	1c0a      	adds	r2, r1, #0
 800f8e8:	701a      	strb	r2, [r3, #0]
	if (ledIdx > LED_LAST_LED_IDX)
 800f8ea:	1dfb      	adds	r3, r7, #7
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d83e      	bhi.n	800f970 <LED_SetConfigurationData+0x9c>
	{
		return;
	}

	NV_WriteVariable_U8(m_ledFunctionParams[ledIdx][LED_PARAM_IDX_FNCT_TYPE], p_data[0u]);
 800f8f2:	1dfb      	adds	r3, r7, #7
 800f8f4:	781a      	ldrb	r2, [r3, #0]
 800f8f6:	4b20      	ldr	r3, [pc, #128]	; (800f978 <LED_SetConfigurationData+0xa4>)
 800f8f8:	0092      	lsls	r2, r2, #2
 800f8fa:	5cd3      	ldrb	r3, [r2, r3]
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	0019      	movs	r1, r3
 800f904:	0010      	movs	r0, r2
 800f906:	f001 f8f5 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(m_ledFunctionParams[ledIdx][LED_PARAM_IDX_FNCT_RED_VALUE], p_data[1u]);
 800f90a:	1dfb      	adds	r3, r7, #7
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	4a1a      	ldr	r2, [pc, #104]	; (800f978 <LED_SetConfigurationData+0xa4>)
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	18d3      	adds	r3, r2, r3
 800f914:	3301      	adds	r3, #1
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	b29a      	uxth	r2, r3
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	3301      	adds	r3, #1
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	0019      	movs	r1, r3
 800f922:	0010      	movs	r0, r2
 800f924:	f001 f8e6 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(m_ledFunctionParams[ledIdx][LED_PARAM_IDX_FNCT_GREEN_VALUE], p_data[2u]);
 800f928:	1dfb      	adds	r3, r7, #7
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	4a12      	ldr	r2, [pc, #72]	; (800f978 <LED_SetConfigurationData+0xa4>)
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	18d3      	adds	r3, r2, r3
 800f932:	3302      	adds	r3, #2
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	b29a      	uxth	r2, r3
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	3302      	adds	r3, #2
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	0019      	movs	r1, r3
 800f940:	0010      	movs	r0, r2
 800f942:	f001 f8d7 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(m_ledFunctionParams[ledIdx][LED_PARAM_IDX_FNCT_BLUE_VALUE], p_data[3u]);
 800f946:	1dfb      	adds	r3, r7, #7
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	4a0b      	ldr	r2, [pc, #44]	; (800f978 <LED_SetConfigurationData+0xa4>)
 800f94c:	009b      	lsls	r3, r3, #2
 800f94e:	18d3      	adds	r3, r2, r3
 800f950:	3303      	adds	r3, #3
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	b29a      	uxth	r2, r3
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	3303      	adds	r3, #3
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	0019      	movs	r1, r3
 800f95e:	0010      	movs	r0, r2
 800f960:	f001 f8c8 	bl	8010af4 <NV_WriteVariable_U8>

	LED_InitFunction(ledIdx);
 800f964:	1dfb      	adds	r3, r7, #7
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	0018      	movs	r0, r3
 800f96a:	f000 fb5b 	bl	8010024 <LED_InitFunction>
 800f96e:	e000      	b.n	800f972 <LED_SetConfigurationData+0x9e>
		return;
 800f970:	46c0      	nop			; (mov r8, r8)
}
 800f972:	46bd      	mov	sp, r7
 800f974:	b002      	add	sp, #8
 800f976:	bd80      	pop	{r7, pc}
 800f978:	08014580 	.word	0x08014580

0800f97c <LED_GetConfigurationData>:
 * @retval	none
 *
 */
// ****************************************************************************
void LED_GetConfigurationData(const uint8_t ledIdx, uint8_t * const p_data, uint16_t * const p_len)
{
 800f97c:	b590      	push	{r4, r7, lr}
 800f97e:	b085      	sub	sp, #20
 800f980:	af00      	add	r7, sp, #0
 800f982:	60b9      	str	r1, [r7, #8]
 800f984:	607a      	str	r2, [r7, #4]
 800f986:	210f      	movs	r1, #15
 800f988:	187b      	adds	r3, r7, r1
 800f98a:	1c02      	adds	r2, r0, #0
 800f98c:	701a      	strb	r2, [r3, #0]
	if (ledIdx > LED_LAST_LED_IDX)
 800f98e:	187b      	adds	r3, r7, r1
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	2b01      	cmp	r3, #1
 800f994:	d903      	bls.n	800f99e <LED_GetConfigurationData+0x22>
	{
		*p_len = 0u;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	801a      	strh	r2, [r3, #0]
		return;
 800f99c:	e034      	b.n	800fa08 <LED_GetConfigurationData+0x8c>
	}

	p_data[0u] = m_leds[ledIdx].func;
 800f99e:	240f      	movs	r4, #15
 800f9a0:	193b      	adds	r3, r7, r4
 800f9a2:	781a      	ldrb	r2, [r3, #0]
 800f9a4:	491a      	ldr	r1, [pc, #104]	; (800fa10 <LED_GetConfigurationData+0x94>)
 800f9a6:	0013      	movs	r3, r2
 800f9a8:	009b      	lsls	r3, r3, #2
 800f9aa:	189b      	adds	r3, r3, r2
 800f9ac:	00db      	lsls	r3, r3, #3
 800f9ae:	5c5a      	ldrb	r2, [r3, r1]
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	701a      	strb	r2, [r3, #0]
	p_data[1u] = m_leds[ledIdx].paramR;
 800f9b4:	193b      	adds	r3, r7, r4
 800f9b6:	781a      	ldrb	r2, [r3, #0]
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	1c59      	adds	r1, r3, #1
 800f9bc:	4814      	ldr	r0, [pc, #80]	; (800fa10 <LED_GetConfigurationData+0x94>)
 800f9be:	0013      	movs	r3, r2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	189b      	adds	r3, r3, r2
 800f9c4:	00db      	lsls	r3, r3, #3
 800f9c6:	18c3      	adds	r3, r0, r3
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	700b      	strb	r3, [r1, #0]
	p_data[2u] = m_leds[ledIdx].paramG;
 800f9ce:	193b      	adds	r3, r7, r4
 800f9d0:	781a      	ldrb	r2, [r3, #0]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	1c99      	adds	r1, r3, #2
 800f9d6:	480e      	ldr	r0, [pc, #56]	; (800fa10 <LED_GetConfigurationData+0x94>)
 800f9d8:	0013      	movs	r3, r2
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	189b      	adds	r3, r3, r2
 800f9de:	00db      	lsls	r3, r3, #3
 800f9e0:	18c3      	adds	r3, r0, r3
 800f9e2:	3302      	adds	r3, #2
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	700b      	strb	r3, [r1, #0]
	p_data[3u] = m_leds[ledIdx].paramB;
 800f9e8:	193b      	adds	r3, r7, r4
 800f9ea:	781a      	ldrb	r2, [r3, #0]
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	1cd9      	adds	r1, r3, #3
 800f9f0:	4807      	ldr	r0, [pc, #28]	; (800fa10 <LED_GetConfigurationData+0x94>)
 800f9f2:	0013      	movs	r3, r2
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	189b      	adds	r3, r3, r2
 800f9f8:	00db      	lsls	r3, r3, #3
 800f9fa:	18c3      	adds	r3, r0, r3
 800f9fc:	3303      	adds	r3, #3
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	700b      	strb	r3, [r1, #0]

	*p_len = 4u;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2204      	movs	r2, #4
 800fa06:	801a      	strh	r2, [r3, #0]
}
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	b005      	add	sp, #20
 800fa0c:	bd90      	pop	{r4, r7, pc}
 800fa0e:	46c0      	nop			; (mov r8, r8)
 800fa10:	200008c4 	.word	0x200008c4

0800fa14 <LED_SetStateData>:
 * @retval	none
 *
 */
// ****************************************************************************
void LED_SetStateData(const uint8_t ledIdx, const uint8_t * const p_data, const uint8_t len)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6039      	str	r1, [r7, #0]
 800fa1c:	0011      	movs	r1, r2
 800fa1e:	1dfb      	adds	r3, r7, #7
 800fa20:	1c02      	adds	r2, r0, #0
 800fa22:	701a      	strb	r2, [r3, #0]
 800fa24:	1dbb      	adds	r3, r7, #6
 800fa26:	1c0a      	adds	r2, r1, #0
 800fa28:	701a      	strb	r2, [r3, #0]
	if ( (ledIdx > LED_LAST_LED_IDX) || (m_leds[ledIdx].func != LED_USER_LED) )
 800fa2a:	1dfb      	adds	r3, r7, #7
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	2b01      	cmp	r3, #1
 800fa30:	d843      	bhi.n	800faba <LED_SetStateData+0xa6>
 800fa32:	1dfb      	adds	r3, r7, #7
 800fa34:	781a      	ldrb	r2, [r3, #0]
 800fa36:	4923      	ldr	r1, [pc, #140]	; (800fac4 <LED_SetStateData+0xb0>)
 800fa38:	0013      	movs	r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	189b      	adds	r3, r3, r2
 800fa3e:	00db      	lsls	r3, r3, #3
 800fa40:	5c5b      	ldrb	r3, [r3, r1]
 800fa42:	2b03      	cmp	r3, #3
 800fa44:	d139      	bne.n	800faba <LED_SetStateData+0xa6>
	{
		return;
	}

	m_leds[ledIdx].r = p_data[0u];
 800fa46:	1dfb      	adds	r3, r7, #7
 800fa48:	781a      	ldrb	r2, [r3, #0]
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	7818      	ldrb	r0, [r3, #0]
 800fa4e:	491d      	ldr	r1, [pc, #116]	; (800fac4 <LED_SetStateData+0xb0>)
 800fa50:	0013      	movs	r3, r2
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	189b      	adds	r3, r3, r2
 800fa56:	00db      	lsls	r3, r3, #3
 800fa58:	18cb      	adds	r3, r1, r3
 800fa5a:	3304      	adds	r3, #4
 800fa5c:	1c02      	adds	r2, r0, #0
 800fa5e:	701a      	strb	r2, [r3, #0]
	m_leds[ledIdx].g = p_data[1u];
 800fa60:	1dfb      	adds	r3, r7, #7
 800fa62:	781a      	ldrb	r2, [r3, #0]
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	7858      	ldrb	r0, [r3, #1]
 800fa68:	4916      	ldr	r1, [pc, #88]	; (800fac4 <LED_SetStateData+0xb0>)
 800fa6a:	0013      	movs	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	189b      	adds	r3, r3, r2
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	18cb      	adds	r3, r1, r3
 800fa74:	3305      	adds	r3, #5
 800fa76:	1c02      	adds	r2, r0, #0
 800fa78:	701a      	strb	r2, [r3, #0]
	m_leds[ledIdx].b = p_data[2u];
 800fa7a:	1dfb      	adds	r3, r7, #7
 800fa7c:	781a      	ldrb	r2, [r3, #0]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	7898      	ldrb	r0, [r3, #2]
 800fa82:	4910      	ldr	r1, [pc, #64]	; (800fac4 <LED_SetStateData+0xb0>)
 800fa84:	0013      	movs	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	189b      	adds	r3, r3, r2
 800fa8a:	00db      	lsls	r3, r3, #3
 800fa8c:	18cb      	adds	r3, r1, r3
 800fa8e:	3306      	adds	r3, #6
 800fa90:	1c02      	adds	r2, r0, #0
 800fa92:	701a      	strb	r2, [r3, #0]

	LED_SetRGBLedPtr(&m_leds[ledIdx], p_data[0u], p_data[1u], p_data[2u]);
 800fa94:	1dfb      	adds	r3, r7, #7
 800fa96:	781a      	ldrb	r2, [r3, #0]
 800fa98:	0013      	movs	r3, r2
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	189b      	adds	r3, r3, r2
 800fa9e:	00db      	lsls	r3, r3, #3
 800faa0:	4a08      	ldr	r2, [pc, #32]	; (800fac4 <LED_SetStateData+0xb0>)
 800faa2:	1898      	adds	r0, r3, r2
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	7819      	ldrb	r1, [r3, #0]
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	3301      	adds	r3, #1
 800faac:	781a      	ldrb	r2, [r3, #0]
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	3302      	adds	r3, #2
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	f000 fa7c 	bl	800ffb0 <LED_SetRGBLedPtr>
 800fab8:	e000      	b.n	800fabc <LED_SetStateData+0xa8>
		return;
 800faba:	46c0      	nop			; (mov r8, r8)
}
 800fabc:	46bd      	mov	sp, r7
 800fabe:	b002      	add	sp, #8
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	46c0      	nop			; (mov r8, r8)
 800fac4:	200008c4 	.word	0x200008c4

0800fac8 <LED_GetStateData>:
 * @retval	none
 *
 */
// ****************************************************************************
void LED_GetStateData(const uint8_t ledIdx, uint8_t * const p_data, uint16_t * const p_len)
{
 800fac8:	b590      	push	{r4, r7, lr}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	60b9      	str	r1, [r7, #8]
 800fad0:	607a      	str	r2, [r7, #4]
 800fad2:	210f      	movs	r1, #15
 800fad4:	187b      	adds	r3, r7, r1
 800fad6:	1c02      	adds	r2, r0, #0
 800fad8:	701a      	strb	r2, [r3, #0]
	if (ledIdx > LED_LAST_LED_IDX)
 800fada:	187b      	adds	r3, r7, r1
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d903      	bls.n	800faea <LED_GetStateData+0x22>
	{
		*p_len = 0u;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	801a      	strh	r2, [r3, #0]
		return;
 800fae8:	e029      	b.n	800fb3e <LED_GetStateData+0x76>
	}

	p_data[0u] = m_leds[ledIdx].r;
 800faea:	240f      	movs	r4, #15
 800faec:	193b      	adds	r3, r7, r4
 800faee:	781a      	ldrb	r2, [r3, #0]
 800faf0:	4914      	ldr	r1, [pc, #80]	; (800fb44 <LED_GetStateData+0x7c>)
 800faf2:	0013      	movs	r3, r2
 800faf4:	009b      	lsls	r3, r3, #2
 800faf6:	189b      	adds	r3, r3, r2
 800faf8:	00db      	lsls	r3, r3, #3
 800fafa:	18cb      	adds	r3, r1, r3
 800fafc:	3304      	adds	r3, #4
 800fafe:	781a      	ldrb	r2, [r3, #0]
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	701a      	strb	r2, [r3, #0]
	p_data[1u] = m_leds[ledIdx].g;
 800fb04:	193b      	adds	r3, r7, r4
 800fb06:	781a      	ldrb	r2, [r3, #0]
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	1c59      	adds	r1, r3, #1
 800fb0c:	480d      	ldr	r0, [pc, #52]	; (800fb44 <LED_GetStateData+0x7c>)
 800fb0e:	0013      	movs	r3, r2
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	189b      	adds	r3, r3, r2
 800fb14:	00db      	lsls	r3, r3, #3
 800fb16:	18c3      	adds	r3, r0, r3
 800fb18:	3305      	adds	r3, #5
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	700b      	strb	r3, [r1, #0]
	p_data[2u] = m_leds[ledIdx].b;
 800fb1e:	193b      	adds	r3, r7, r4
 800fb20:	781a      	ldrb	r2, [r3, #0]
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	1c99      	adds	r1, r3, #2
 800fb26:	4807      	ldr	r0, [pc, #28]	; (800fb44 <LED_GetStateData+0x7c>)
 800fb28:	0013      	movs	r3, r2
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	189b      	adds	r3, r3, r2
 800fb2e:	00db      	lsls	r3, r3, #3
 800fb30:	18c3      	adds	r3, r0, r3
 800fb32:	3306      	adds	r3, #6
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	700b      	strb	r3, [r1, #0]

	*p_len = 3u;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2203      	movs	r2, #3
 800fb3c:	801a      	strh	r2, [r3, #0]
}
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	b005      	add	sp, #20
 800fb42:	bd90      	pop	{r4, r7, pc}
 800fb44:	200008c4 	.word	0x200008c4

0800fb48 <LED_SetBlinkData>:
 * @retval	none
 *
 */
// ****************************************************************************
void LED_SetBlinkData(const uint8_t ledIdx, const uint8_t * const p_data, const uint8_t len)
{
 800fb48:	b5b0      	push	{r4, r5, r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6039      	str	r1, [r7, #0]
 800fb50:	0011      	movs	r1, r2
 800fb52:	1dfb      	adds	r3, r7, #7
 800fb54:	1c02      	adds	r2, r0, #0
 800fb56:	701a      	strb	r2, [r3, #0]
 800fb58:	1dbb      	adds	r3, r7, #6
 800fb5a:	1c0a      	adds	r2, r1, #0
 800fb5c:	701a      	strb	r2, [r3, #0]
	if ( (ledIdx > LED_LAST_LED_IDX) || (m_leds[ledIdx].func == LED_NOT_USED) )
 800fb5e:	1dfb      	adds	r3, r7, #7
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d900      	bls.n	800fb68 <LED_SetBlinkData+0x20>
 800fb66:	e10f      	b.n	800fd88 <LED_SetBlinkData+0x240>
 800fb68:	1dfb      	adds	r3, r7, #7
 800fb6a:	781a      	ldrb	r2, [r3, #0]
 800fb6c:	4988      	ldr	r1, [pc, #544]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fb6e:	0013      	movs	r3, r2
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	189b      	adds	r3, r3, r2
 800fb74:	00db      	lsls	r3, r3, #3
 800fb76:	5c5b      	ldrb	r3, [r3, r1]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d100      	bne.n	800fb7e <LED_SetBlinkData+0x36>
 800fb7c:	e104      	b.n	800fd88 <LED_SetBlinkData+0x240>
	{
		return;
	}

	m_leds[ledIdx].blinkRepeat = p_data[0u];
 800fb7e:	1dfb      	adds	r3, r7, #7
 800fb80:	781a      	ldrb	r2, [r3, #0]
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	7818      	ldrb	r0, [r3, #0]
 800fb86:	4982      	ldr	r1, [pc, #520]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fb88:	0013      	movs	r3, r2
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	189b      	adds	r3, r3, r2
 800fb8e:	00db      	lsls	r3, r3, #3
 800fb90:	18cb      	adds	r3, r1, r3
 800fb92:	3307      	adds	r3, #7
 800fb94:	1c02      	adds	r2, r0, #0
 800fb96:	701a      	strb	r2, [r3, #0]
	m_leds[ledIdx].blinkCount = (uint16_t)(p_data[0u] * 2u);
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	b299      	uxth	r1, r3
 800fb9e:	1dfb      	adds	r3, r7, #7
 800fba0:	781a      	ldrb	r2, [r3, #0]
 800fba2:	1c0b      	adds	r3, r1, #0
 800fba4:	18db      	adds	r3, r3, r3
 800fba6:	b298      	uxth	r0, r3
 800fba8:	4979      	ldr	r1, [pc, #484]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fbaa:	0013      	movs	r3, r2
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	189b      	adds	r3, r3, r2
 800fbb0:	00db      	lsls	r3, r3, #3
 800fbb2:	18cb      	adds	r3, r1, r3
 800fbb4:	3314      	adds	r3, #20
 800fbb6:	1c02      	adds	r2, r0, #0
 800fbb8:	801a      	strh	r2, [r3, #0]
	m_leds[ledIdx].blinkR1 = p_data[1u];
 800fbba:	1dfb      	adds	r3, r7, #7
 800fbbc:	781a      	ldrb	r2, [r3, #0]
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	7858      	ldrb	r0, [r3, #1]
 800fbc2:	4973      	ldr	r1, [pc, #460]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fbc4:	0013      	movs	r3, r2
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	189b      	adds	r3, r3, r2
 800fbca:	00db      	lsls	r3, r3, #3
 800fbcc:	18cb      	adds	r3, r1, r3
 800fbce:	3308      	adds	r3, #8
 800fbd0:	1c02      	adds	r2, r0, #0
 800fbd2:	701a      	strb	r2, [r3, #0]
	m_leds[ledIdx].blinkG1 = p_data[2u];
 800fbd4:	1dfb      	adds	r3, r7, #7
 800fbd6:	781a      	ldrb	r2, [r3, #0]
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	7898      	ldrb	r0, [r3, #2]
 800fbdc:	496c      	ldr	r1, [pc, #432]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fbde:	0013      	movs	r3, r2
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	189b      	adds	r3, r3, r2
 800fbe4:	00db      	lsls	r3, r3, #3
 800fbe6:	18cb      	adds	r3, r1, r3
 800fbe8:	3309      	adds	r3, #9
 800fbea:	1c02      	adds	r2, r0, #0
 800fbec:	701a      	strb	r2, [r3, #0]
	m_leds[ledIdx].blinkB1 = p_data[3u];
 800fbee:	1dfb      	adds	r3, r7, #7
 800fbf0:	781a      	ldrb	r2, [r3, #0]
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	78d8      	ldrb	r0, [r3, #3]
 800fbf6:	4966      	ldr	r1, [pc, #408]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fbf8:	0013      	movs	r3, r2
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	189b      	adds	r3, r3, r2
 800fbfe:	00db      	lsls	r3, r3, #3
 800fc00:	18cb      	adds	r3, r1, r3
 800fc02:	330a      	adds	r3, #10
 800fc04:	1c02      	adds	r2, r0, #0
 800fc06:	701a      	strb	r2, [r3, #0]
	m_leds[ledIdx].blinkPeriod1 = (uint16_t)(p_data[4u] * 10u);
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	b299      	uxth	r1, r3
 800fc10:	1dfb      	adds	r3, r7, #7
 800fc12:	781a      	ldrb	r2, [r3, #0]
 800fc14:	1c0b      	adds	r3, r1, #0
 800fc16:	1c19      	adds	r1, r3, #0
 800fc18:	0089      	lsls	r1, r1, #2
 800fc1a:	18cb      	adds	r3, r1, r3
 800fc1c:	18db      	adds	r3, r3, r3
 800fc1e:	b298      	uxth	r0, r3
 800fc20:	495b      	ldr	r1, [pc, #364]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fc22:	0013      	movs	r3, r2
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	189b      	adds	r3, r3, r2
 800fc28:	00db      	lsls	r3, r3, #3
 800fc2a:	18cb      	adds	r3, r1, r3
 800fc2c:	330c      	adds	r3, #12
 800fc2e:	1c02      	adds	r2, r0, #0
 800fc30:	801a      	strh	r2, [r3, #0]
	m_leds[ledIdx].blinkR2 = p_data[5u];
 800fc32:	1dfb      	adds	r3, r7, #7
 800fc34:	781a      	ldrb	r2, [r3, #0]
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	7958      	ldrb	r0, [r3, #5]
 800fc3a:	4955      	ldr	r1, [pc, #340]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fc3c:	0013      	movs	r3, r2
 800fc3e:	009b      	lsls	r3, r3, #2
 800fc40:	189b      	adds	r3, r3, r2
 800fc42:	00db      	lsls	r3, r3, #3
 800fc44:	18cb      	adds	r3, r1, r3
 800fc46:	330e      	adds	r3, #14
 800fc48:	1c02      	adds	r2, r0, #0
 800fc4a:	701a      	strb	r2, [r3, #0]
	m_leds[ledIdx].blinkG2 = p_data[6u];
 800fc4c:	1dfb      	adds	r3, r7, #7
 800fc4e:	781a      	ldrb	r2, [r3, #0]
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	7998      	ldrb	r0, [r3, #6]
 800fc54:	494e      	ldr	r1, [pc, #312]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fc56:	0013      	movs	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	189b      	adds	r3, r3, r2
 800fc5c:	00db      	lsls	r3, r3, #3
 800fc5e:	18cb      	adds	r3, r1, r3
 800fc60:	330f      	adds	r3, #15
 800fc62:	1c02      	adds	r2, r0, #0
 800fc64:	701a      	strb	r2, [r3, #0]
	m_leds[ledIdx].blinkB2 = p_data[7u];
 800fc66:	1dfb      	adds	r3, r7, #7
 800fc68:	781a      	ldrb	r2, [r3, #0]
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	79d8      	ldrb	r0, [r3, #7]
 800fc6e:	4948      	ldr	r1, [pc, #288]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fc70:	0013      	movs	r3, r2
 800fc72:	009b      	lsls	r3, r3, #2
 800fc74:	189b      	adds	r3, r3, r2
 800fc76:	00db      	lsls	r3, r3, #3
 800fc78:	18cb      	adds	r3, r1, r3
 800fc7a:	3310      	adds	r3, #16
 800fc7c:	1c02      	adds	r2, r0, #0
 800fc7e:	701a      	strb	r2, [r3, #0]
	m_leds[ledIdx].blinkPeriod2 = (uint16_t)(p_data[8u] * 10u);
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	3308      	adds	r3, #8
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	b299      	uxth	r1, r3
 800fc88:	1dfb      	adds	r3, r7, #7
 800fc8a:	781a      	ldrb	r2, [r3, #0]
 800fc8c:	1c0b      	adds	r3, r1, #0
 800fc8e:	1c19      	adds	r1, r3, #0
 800fc90:	0089      	lsls	r1, r1, #2
 800fc92:	18cb      	adds	r3, r1, r3
 800fc94:	18db      	adds	r3, r3, r3
 800fc96:	b298      	uxth	r0, r3
 800fc98:	493d      	ldr	r1, [pc, #244]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fc9a:	0013      	movs	r3, r2
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	189b      	adds	r3, r3, r2
 800fca0:	00db      	lsls	r3, r3, #3
 800fca2:	18cb      	adds	r3, r1, r3
 800fca4:	3312      	adds	r3, #18
 800fca6:	1c02      	adds	r2, r0, #0
 800fca8:	801a      	strh	r2, [r3, #0]

	if (0u != m_leds[ledIdx].blinkRepeat)
 800fcaa:	1dfb      	adds	r3, r7, #7
 800fcac:	781a      	ldrb	r2, [r3, #0]
 800fcae:	4938      	ldr	r1, [pc, #224]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fcb0:	0013      	movs	r3, r2
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	189b      	adds	r3, r3, r2
 800fcb6:	00db      	lsls	r3, r3, #3
 800fcb8:	18cb      	adds	r3, r1, r3
 800fcba:	3307      	adds	r3, #7
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d037      	beq.n	800fd32 <LED_SetBlinkData+0x1ea>
	{
		LED_SetRGBLedPtr(&m_leds[ledIdx], m_leds[ledIdx].blinkR1, m_leds[ledIdx].blinkG1, m_leds[ledIdx].blinkB1);
 800fcc2:	1dfb      	adds	r3, r7, #7
 800fcc4:	781a      	ldrb	r2, [r3, #0]
 800fcc6:	0013      	movs	r3, r2
 800fcc8:	009b      	lsls	r3, r3, #2
 800fcca:	189b      	adds	r3, r3, r2
 800fccc:	00db      	lsls	r3, r3, #3
 800fcce:	4a30      	ldr	r2, [pc, #192]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fcd0:	1898      	adds	r0, r3, r2
 800fcd2:	1dfb      	adds	r3, r7, #7
 800fcd4:	781a      	ldrb	r2, [r3, #0]
 800fcd6:	492e      	ldr	r1, [pc, #184]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fcd8:	0013      	movs	r3, r2
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	189b      	adds	r3, r3, r2
 800fcde:	00db      	lsls	r3, r3, #3
 800fce0:	18cb      	adds	r3, r1, r3
 800fce2:	3308      	adds	r3, #8
 800fce4:	781c      	ldrb	r4, [r3, #0]
 800fce6:	1dfb      	adds	r3, r7, #7
 800fce8:	781a      	ldrb	r2, [r3, #0]
 800fcea:	4929      	ldr	r1, [pc, #164]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fcec:	0013      	movs	r3, r2
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	189b      	adds	r3, r3, r2
 800fcf2:	00db      	lsls	r3, r3, #3
 800fcf4:	18cb      	adds	r3, r1, r3
 800fcf6:	3309      	adds	r3, #9
 800fcf8:	781d      	ldrb	r5, [r3, #0]
 800fcfa:	1dfb      	adds	r3, r7, #7
 800fcfc:	781a      	ldrb	r2, [r3, #0]
 800fcfe:	4924      	ldr	r1, [pc, #144]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fd00:	0013      	movs	r3, r2
 800fd02:	009b      	lsls	r3, r3, #2
 800fd04:	189b      	adds	r3, r3, r2
 800fd06:	00db      	lsls	r3, r3, #3
 800fd08:	18cb      	adds	r3, r1, r3
 800fd0a:	330a      	adds	r3, #10
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	002a      	movs	r2, r5
 800fd10:	0021      	movs	r1, r4
 800fd12:	f000 f94d 	bl	800ffb0 <LED_SetRGBLedPtr>
		MS_TIME_COUNTER_INIT(m_leds[ledIdx].blinkTimer);
 800fd16:	1dfb      	adds	r3, r7, #7
 800fd18:	781c      	ldrb	r4, [r3, #0]
 800fd1a:	f7f3 f9d9 	bl	80030d0 <HAL_GetTick>
 800fd1e:	0001      	movs	r1, r0
 800fd20:	4a1b      	ldr	r2, [pc, #108]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fd22:	0023      	movs	r3, r4
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	191b      	adds	r3, r3, r4
 800fd28:	00db      	lsls	r3, r3, #3
 800fd2a:	18d3      	adds	r3, r2, r3
 800fd2c:	3318      	adds	r3, #24
 800fd2e:	6019      	str	r1, [r3, #0]
 800fd30:	e02b      	b.n	800fd8a <LED_SetBlinkData+0x242>
	}
	else
	{
		LED_SetRGBLedPtr(&m_leds[ledIdx], m_leds[ledIdx].r, m_leds[ledIdx].g, m_leds[ledIdx].b);
 800fd32:	1dfb      	adds	r3, r7, #7
 800fd34:	781a      	ldrb	r2, [r3, #0]
 800fd36:	0013      	movs	r3, r2
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	189b      	adds	r3, r3, r2
 800fd3c:	00db      	lsls	r3, r3, #3
 800fd3e:	4a14      	ldr	r2, [pc, #80]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fd40:	1898      	adds	r0, r3, r2
 800fd42:	1dfb      	adds	r3, r7, #7
 800fd44:	781a      	ldrb	r2, [r3, #0]
 800fd46:	4912      	ldr	r1, [pc, #72]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fd48:	0013      	movs	r3, r2
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	189b      	adds	r3, r3, r2
 800fd4e:	00db      	lsls	r3, r3, #3
 800fd50:	18cb      	adds	r3, r1, r3
 800fd52:	3304      	adds	r3, #4
 800fd54:	781c      	ldrb	r4, [r3, #0]
 800fd56:	1dfb      	adds	r3, r7, #7
 800fd58:	781a      	ldrb	r2, [r3, #0]
 800fd5a:	490d      	ldr	r1, [pc, #52]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fd5c:	0013      	movs	r3, r2
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	189b      	adds	r3, r3, r2
 800fd62:	00db      	lsls	r3, r3, #3
 800fd64:	18cb      	adds	r3, r1, r3
 800fd66:	3305      	adds	r3, #5
 800fd68:	781d      	ldrb	r5, [r3, #0]
 800fd6a:	1dfb      	adds	r3, r7, #7
 800fd6c:	781a      	ldrb	r2, [r3, #0]
 800fd6e:	4908      	ldr	r1, [pc, #32]	; (800fd90 <LED_SetBlinkData+0x248>)
 800fd70:	0013      	movs	r3, r2
 800fd72:	009b      	lsls	r3, r3, #2
 800fd74:	189b      	adds	r3, r3, r2
 800fd76:	00db      	lsls	r3, r3, #3
 800fd78:	18cb      	adds	r3, r1, r3
 800fd7a:	3306      	adds	r3, #6
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	002a      	movs	r2, r5
 800fd80:	0021      	movs	r1, r4
 800fd82:	f000 f915 	bl	800ffb0 <LED_SetRGBLedPtr>
 800fd86:	e000      	b.n	800fd8a <LED_SetBlinkData+0x242>
		return;
 800fd88:	46c0      	nop			; (mov r8, r8)
	}

}
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	b002      	add	sp, #8
 800fd8e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd90:	200008c4 	.word	0x200008c4

0800fd94 <LED_GetBlinkData>:
 * @retval	none
 *
 */
// ****************************************************************************
void LED_GetBlinkData(const uint8_t ledIdx, uint8_t * const p_data, uint16_t * const p_len)
{
 800fd94:	b590      	push	{r4, r7, lr}
 800fd96:	b085      	sub	sp, #20
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60b9      	str	r1, [r7, #8]
 800fd9c:	607a      	str	r2, [r7, #4]
 800fd9e:	210f      	movs	r1, #15
 800fda0:	187b      	adds	r3, r7, r1
 800fda2:	1c02      	adds	r2, r0, #0
 800fda4:	701a      	strb	r2, [r3, #0]
	if (ledIdx > LED_LAST_LED_IDX)
 800fda6:	187b      	adds	r3, r7, r1
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	d903      	bls.n	800fdb6 <LED_GetBlinkData+0x22>
	{
		*p_len = 0u;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	801a      	strh	r2, [r3, #0]
		return;
 800fdb4:	e097      	b.n	800fee6 <LED_GetBlinkData+0x152>
	}

	p_data[0u] = (m_leds[ledIdx].blinkRepeat < 255u) ? (m_leds[ledIdx].blinkCount / 2u) : 255u;
 800fdb6:	200f      	movs	r0, #15
 800fdb8:	183b      	adds	r3, r7, r0
 800fdba:	781a      	ldrb	r2, [r3, #0]
 800fdbc:	494b      	ldr	r1, [pc, #300]	; (800feec <LED_GetBlinkData+0x158>)
 800fdbe:	0013      	movs	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	189b      	adds	r3, r3, r2
 800fdc4:	00db      	lsls	r3, r3, #3
 800fdc6:	18cb      	adds	r3, r1, r3
 800fdc8:	3307      	adds	r3, #7
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	2bff      	cmp	r3, #255	; 0xff
 800fdce:	d00d      	beq.n	800fdec <LED_GetBlinkData+0x58>
 800fdd0:	183b      	adds	r3, r7, r0
 800fdd2:	781a      	ldrb	r2, [r3, #0]
 800fdd4:	4945      	ldr	r1, [pc, #276]	; (800feec <LED_GetBlinkData+0x158>)
 800fdd6:	0013      	movs	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	189b      	adds	r3, r3, r2
 800fddc:	00db      	lsls	r3, r3, #3
 800fdde:	18cb      	adds	r3, r1, r3
 800fde0:	3314      	adds	r3, #20
 800fde2:	881b      	ldrh	r3, [r3, #0]
 800fde4:	085b      	lsrs	r3, r3, #1
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	b2da      	uxtb	r2, r3
 800fdea:	e000      	b.n	800fdee <LED_GetBlinkData+0x5a>
 800fdec:	22ff      	movs	r2, #255	; 0xff
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	701a      	strb	r2, [r3, #0]
	p_data[1u] = m_leds[ledIdx].blinkR1;
 800fdf2:	240f      	movs	r4, #15
 800fdf4:	193b      	adds	r3, r7, r4
 800fdf6:	781a      	ldrb	r2, [r3, #0]
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	1c59      	adds	r1, r3, #1
 800fdfc:	483b      	ldr	r0, [pc, #236]	; (800feec <LED_GetBlinkData+0x158>)
 800fdfe:	0013      	movs	r3, r2
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	189b      	adds	r3, r3, r2
 800fe04:	00db      	lsls	r3, r3, #3
 800fe06:	18c3      	adds	r3, r0, r3
 800fe08:	3308      	adds	r3, #8
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	700b      	strb	r3, [r1, #0]
	p_data[2u] = m_leds[ledIdx].blinkG1;
 800fe0e:	193b      	adds	r3, r7, r4
 800fe10:	781a      	ldrb	r2, [r3, #0]
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	1c99      	adds	r1, r3, #2
 800fe16:	4835      	ldr	r0, [pc, #212]	; (800feec <LED_GetBlinkData+0x158>)
 800fe18:	0013      	movs	r3, r2
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	189b      	adds	r3, r3, r2
 800fe1e:	00db      	lsls	r3, r3, #3
 800fe20:	18c3      	adds	r3, r0, r3
 800fe22:	3309      	adds	r3, #9
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	700b      	strb	r3, [r1, #0]
	p_data[3u] = m_leds[ledIdx].blinkB1;
 800fe28:	193b      	adds	r3, r7, r4
 800fe2a:	781a      	ldrb	r2, [r3, #0]
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	1cd9      	adds	r1, r3, #3
 800fe30:	482e      	ldr	r0, [pc, #184]	; (800feec <LED_GetBlinkData+0x158>)
 800fe32:	0013      	movs	r3, r2
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	189b      	adds	r3, r3, r2
 800fe38:	00db      	lsls	r3, r3, #3
 800fe3a:	18c3      	adds	r3, r0, r3
 800fe3c:	330a      	adds	r3, #10
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	700b      	strb	r3, [r1, #0]
	p_data[4u] = (uint8_t)(m_leds[ledIdx].blinkPeriod1 / 10u);
 800fe42:	193b      	adds	r3, r7, r4
 800fe44:	781a      	ldrb	r2, [r3, #0]
 800fe46:	4929      	ldr	r1, [pc, #164]	; (800feec <LED_GetBlinkData+0x158>)
 800fe48:	0013      	movs	r3, r2
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	189b      	adds	r3, r3, r2
 800fe4e:	00db      	lsls	r3, r3, #3
 800fe50:	18cb      	adds	r3, r1, r3
 800fe52:	330c      	adds	r3, #12
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	210a      	movs	r1, #10
 800fe58:	0018      	movs	r0, r3
 800fe5a:	f7f0 f953 	bl	8000104 <__udivsi3>
 800fe5e:	0003      	movs	r3, r0
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	3304      	adds	r3, #4
 800fe66:	b2d2      	uxtb	r2, r2
 800fe68:	701a      	strb	r2, [r3, #0]
	p_data[5u] = m_leds[ledIdx].blinkR2;
 800fe6a:	193b      	adds	r3, r7, r4
 800fe6c:	781a      	ldrb	r2, [r3, #0]
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	1d59      	adds	r1, r3, #5
 800fe72:	481e      	ldr	r0, [pc, #120]	; (800feec <LED_GetBlinkData+0x158>)
 800fe74:	0013      	movs	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	189b      	adds	r3, r3, r2
 800fe7a:	00db      	lsls	r3, r3, #3
 800fe7c:	18c3      	adds	r3, r0, r3
 800fe7e:	330e      	adds	r3, #14
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	700b      	strb	r3, [r1, #0]
	p_data[6u] = m_leds[ledIdx].blinkG2;
 800fe84:	193b      	adds	r3, r7, r4
 800fe86:	781a      	ldrb	r2, [r3, #0]
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	1d99      	adds	r1, r3, #6
 800fe8c:	4817      	ldr	r0, [pc, #92]	; (800feec <LED_GetBlinkData+0x158>)
 800fe8e:	0013      	movs	r3, r2
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	189b      	adds	r3, r3, r2
 800fe94:	00db      	lsls	r3, r3, #3
 800fe96:	18c3      	adds	r3, r0, r3
 800fe98:	330f      	adds	r3, #15
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	700b      	strb	r3, [r1, #0]
	p_data[7u] = m_leds[ledIdx].blinkB2;
 800fe9e:	193b      	adds	r3, r7, r4
 800fea0:	781a      	ldrb	r2, [r3, #0]
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	1dd9      	adds	r1, r3, #7
 800fea6:	4811      	ldr	r0, [pc, #68]	; (800feec <LED_GetBlinkData+0x158>)
 800fea8:	0013      	movs	r3, r2
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	189b      	adds	r3, r3, r2
 800feae:	00db      	lsls	r3, r3, #3
 800feb0:	18c3      	adds	r3, r0, r3
 800feb2:	3310      	adds	r3, #16
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	700b      	strb	r3, [r1, #0]
	p_data[8u] = (uint8_t)(m_leds[ledIdx].blinkPeriod2 / 10u);
 800feb8:	193b      	adds	r3, r7, r4
 800feba:	781a      	ldrb	r2, [r3, #0]
 800febc:	490b      	ldr	r1, [pc, #44]	; (800feec <LED_GetBlinkData+0x158>)
 800febe:	0013      	movs	r3, r2
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	189b      	adds	r3, r3, r2
 800fec4:	00db      	lsls	r3, r3, #3
 800fec6:	18cb      	adds	r3, r1, r3
 800fec8:	3312      	adds	r3, #18
 800feca:	881b      	ldrh	r3, [r3, #0]
 800fecc:	210a      	movs	r1, #10
 800fece:	0018      	movs	r0, r3
 800fed0:	f7f0 f918 	bl	8000104 <__udivsi3>
 800fed4:	0003      	movs	r3, r0
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	3308      	adds	r3, #8
 800fedc:	b2d2      	uxtb	r2, r2
 800fede:	701a      	strb	r2, [r3, #0]

	*p_len = 9u;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2209      	movs	r2, #9
 800fee4:	801a      	strh	r2, [r3, #0]
}
 800fee6:	46bd      	mov	sp, r7
 800fee8:	b005      	add	sp, #20
 800feea:	bd90      	pop	{r4, r7, pc}
 800feec:	200008c4 	.word	0x200008c4

0800fef0 <LED_ProcessBlink>:
 * @retval	none
 *
 */
// ****************************************************************************
void LED_ProcessBlink(Led_T * const p_led, const uint32_t sysTime)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
	if (p_led->blinkCount)
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	8a9b      	ldrh	r3, [r3, #20]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d051      	beq.n	800ffa6 <LED_ProcessBlink+0xb6>
	{
		if (p_led->blinkCount & 0x1u)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	8a9b      	ldrh	r3, [r3, #20]
 800ff06:	001a      	movs	r2, r3
 800ff08:	2301      	movs	r3, #1
 800ff0a:	4013      	ands	r3, r2
 800ff0c:	d031      	beq.n	800ff72 <LED_ProcessBlink+0x82>
		{
			// odd count for off colour
			if (MS_TIMEREF_TIMEOUT(p_led->blinkTimer, sysTime, p_led->blinkPeriod2))
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	699b      	ldr	r3, [r3, #24]
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	1ad3      	subs	r3, r2, r3
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	8a52      	ldrh	r2, [r2, #18]
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d343      	bcc.n	800ffa6 <LED_ProcessBlink+0xb6>
			{
				MS_TIMEREF_INIT(p_led->blinkTimer, sysTime);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	619a      	str	r2, [r3, #24]
				p_led->blinkCount --;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	8a9b      	ldrh	r3, [r3, #20]
 800ff28:	3b01      	subs	r3, #1
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	829a      	strh	r2, [r3, #20]

				if (p_led->blinkCount == 0u)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	8a9b      	ldrh	r3, [r3, #20]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d112      	bne.n	800ff5e <LED_ProcessBlink+0x6e>
				{
					if (p_led->blinkRepeat == 0xFFu)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	79db      	ldrb	r3, [r3, #7]
 800ff3c:	2bff      	cmp	r3, #255	; 0xff
 800ff3e:	d104      	bne.n	800ff4a <LED_ProcessBlink+0x5a>
					{
						p_led->blinkCount = 256u;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2280      	movs	r2, #128	; 0x80
 800ff44:	0052      	lsls	r2, r2, #1
 800ff46:	829a      	strh	r2, [r3, #20]
				MS_TIMEREF_INIT(p_led->blinkTimer, sysTime);
				p_led->blinkCount--;
			}
		}
	}
}
 800ff48:	e02d      	b.n	800ffa6 <LED_ProcessBlink+0xb6>
						LED_SetRGBLedPtr(p_led, p_led->r, p_led->g, p_led->b);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	7919      	ldrb	r1, [r3, #4]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	795a      	ldrb	r2, [r3, #5]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	799b      	ldrb	r3, [r3, #6]
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f000 f82a 	bl	800ffb0 <LED_SetRGBLedPtr>
}
 800ff5c:	e023      	b.n	800ffa6 <LED_ProcessBlink+0xb6>
					LED_SetRGBLedPtr(p_led, p_led->blinkR1, p_led->blinkG1, p_led->blinkB1);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	7a19      	ldrb	r1, [r3, #8]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	7a5a      	ldrb	r2, [r3, #9]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	7a9b      	ldrb	r3, [r3, #10]
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f820 	bl	800ffb0 <LED_SetRGBLedPtr>
}
 800ff70:	e019      	b.n	800ffa6 <LED_ProcessBlink+0xb6>
			if (MS_TIMEREF_TIMEOUT(p_led->blinkTimer, sysTime, p_led->blinkPeriod1))
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	699b      	ldr	r3, [r3, #24]
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	1ad3      	subs	r3, r2, r3
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	8992      	ldrh	r2, [r2, #12]
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d311      	bcc.n	800ffa6 <LED_ProcessBlink+0xb6>
				LED_SetRGBLedPtr(p_led, p_led->blinkR2, p_led->blinkG2, p_led->blinkB2);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	7b99      	ldrb	r1, [r3, #14]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	7bda      	ldrb	r2, [r3, #15]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	7c1b      	ldrb	r3, [r3, #16]
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 f80e 	bl	800ffb0 <LED_SetRGBLedPtr>
				MS_TIMEREF_INIT(p_led->blinkTimer, sysTime);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	683a      	ldr	r2, [r7, #0]
 800ff98:	619a      	str	r2, [r3, #24]
				p_led->blinkCount--;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	8a9b      	ldrh	r3, [r3, #20]
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	b29a      	uxth	r2, r3
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	829a      	strh	r2, [r3, #20]
}
 800ffa6:	46c0      	nop			; (mov r8, r8)
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	b002      	add	sp, #8
 800ffac:	bd80      	pop	{r7, pc}
	...

0800ffb0 <LED_SetRGBLedPtr>:
 * @param	b			blue set point for led
 * @retval	none
 */
// ****************************************************************************
void LED_SetRGBLedPtr(Led_T * const p_led, const uint8_t r, const uint8_t g, const uint8_t b)
{
 800ffb0:	b590      	push	{r4, r7, lr}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	000c      	movs	r4, r1
 800ffba:	0010      	movs	r0, r2
 800ffbc:	0019      	movs	r1, r3
 800ffbe:	1cfb      	adds	r3, r7, #3
 800ffc0:	1c22      	adds	r2, r4, #0
 800ffc2:	701a      	strb	r2, [r3, #0]
 800ffc4:	1cbb      	adds	r3, r7, #2
 800ffc6:	1c02      	adds	r2, r0, #0
 800ffc8:	701a      	strb	r2, [r3, #0]
 800ffca:	1c7b      	adds	r3, r7, #1
 800ffcc:	1c0a      	adds	r2, r1, #0
 800ffce:	701a      	strb	r2, [r3, #0]
	*p_led->pwmDrv_r = (UINT16_MAX - pwm_table[r]);
 800ffd0:	1cfb      	adds	r3, r7, #3
 800ffd2:	781a      	ldrb	r2, [r3, #0]
 800ffd4:	4b11      	ldr	r3, [pc, #68]	; (801001c <LED_SetRGBLedPtr+0x6c>)
 800ffd6:	0052      	lsls	r2, r2, #1
 800ffd8:	5ad3      	ldrh	r3, [r2, r3]
 800ffda:	001a      	movs	r2, r3
 800ffdc:	4b10      	ldr	r3, [pc, #64]	; (8010020 <LED_SetRGBLedPtr+0x70>)
 800ffde:	1a9a      	subs	r2, r3, r2
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	69db      	ldr	r3, [r3, #28]
 800ffe4:	601a      	str	r2, [r3, #0]
	*p_led->pwmDrv_g = (UINT16_MAX - pwm_table[g]);
 800ffe6:	1cbb      	adds	r3, r7, #2
 800ffe8:	781a      	ldrb	r2, [r3, #0]
 800ffea:	4b0c      	ldr	r3, [pc, #48]	; (801001c <LED_SetRGBLedPtr+0x6c>)
 800ffec:	0052      	lsls	r2, r2, #1
 800ffee:	5ad3      	ldrh	r3, [r2, r3]
 800fff0:	001a      	movs	r2, r3
 800fff2:	4b0b      	ldr	r3, [pc, #44]	; (8010020 <LED_SetRGBLedPtr+0x70>)
 800fff4:	1a9a      	subs	r2, r3, r2
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a1b      	ldr	r3, [r3, #32]
 800fffa:	601a      	str	r2, [r3, #0]
	*p_led->pwmDrv_b = (UINT16_MAX - pwm_table[b]);
 800fffc:	1c7b      	adds	r3, r7, #1
 800fffe:	781a      	ldrb	r2, [r3, #0]
 8010000:	4b06      	ldr	r3, [pc, #24]	; (801001c <LED_SetRGBLedPtr+0x6c>)
 8010002:	0052      	lsls	r2, r2, #1
 8010004:	5ad3      	ldrh	r3, [r2, r3]
 8010006:	001a      	movs	r2, r3
 8010008:	4b05      	ldr	r3, [pc, #20]	; (8010020 <LED_SetRGBLedPtr+0x70>)
 801000a:	1a9a      	subs	r2, r3, r2
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010010:	601a      	str	r2, [r3, #0]
}
 8010012:	46c0      	nop			; (mov r8, r8)
 8010014:	46bd      	mov	sp, r7
 8010016:	b003      	add	sp, #12
 8010018:	bd90      	pop	{r4, r7, pc}
 801001a:	46c0      	nop			; (mov r8, r8)
 801001c:	08014380 	.word	0x08014380
 8010020:	0000ffff 	.word	0x0000ffff

08010024 <LED_InitFunction>:
 * @param	ledIdx		addressed led
 * @retval	none
 */
// ****************************************************************************
void LED_InitFunction(const uint8_t ledIdx)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	0002      	movs	r2, r0
 801002c:	1dfb      	adds	r3, r7, #7
 801002e:	701a      	strb	r2, [r3, #0]
	Led_T * const p_led = &m_leds[ledIdx];
 8010030:	1dfb      	adds	r3, r7, #7
 8010032:	781a      	ldrb	r2, [r3, #0]
 8010034:	0013      	movs	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	189b      	adds	r3, r3, r2
 801003a:	00db      	lsls	r3, r3, #3
 801003c:	4a27      	ldr	r2, [pc, #156]	; (80100dc <LED_InitFunction+0xb8>)
 801003e:	189b      	adds	r3, r3, r2
 8010040:	60fb      	str	r3, [r7, #12]

	NV_ReadVariable_U8(m_ledFunctionParams[ledIdx][LED_PARAM_IDX_FNCT_TYPE], (uint8_t*)&p_led->func);
 8010042:	1dfb      	adds	r3, r7, #7
 8010044:	781a      	ldrb	r2, [r3, #0]
 8010046:	4b26      	ldr	r3, [pc, #152]	; (80100e0 <LED_InitFunction+0xbc>)
 8010048:	0092      	lsls	r2, r2, #2
 801004a:	5cd3      	ldrb	r3, [r2, r3]
 801004c:	b29b      	uxth	r3, r3
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	0011      	movs	r1, r2
 8010052:	0018      	movs	r0, r3
 8010054:	f000 fd72 	bl	8010b3c <NV_ReadVariable_U8>
	NV_ReadVariable_U8(m_ledFunctionParams[ledIdx][LED_PARAM_IDX_FNCT_RED_VALUE], &p_led->paramR);
 8010058:	1dfb      	adds	r3, r7, #7
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	4a20      	ldr	r2, [pc, #128]	; (80100e0 <LED_InitFunction+0xbc>)
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	18d3      	adds	r3, r2, r3
 8010062:	3301      	adds	r3, #1
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	b29a      	uxth	r2, r3
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	3301      	adds	r3, #1
 801006c:	0019      	movs	r1, r3
 801006e:	0010      	movs	r0, r2
 8010070:	f000 fd64 	bl	8010b3c <NV_ReadVariable_U8>
	NV_ReadVariable_U8(m_ledFunctionParams[ledIdx][LED_PARAM_IDX_FNCT_GREEN_VALUE], &p_led->paramG);
 8010074:	1dfb      	adds	r3, r7, #7
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	4a19      	ldr	r2, [pc, #100]	; (80100e0 <LED_InitFunction+0xbc>)
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	18d3      	adds	r3, r2, r3
 801007e:	3302      	adds	r3, #2
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	b29a      	uxth	r2, r3
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	3302      	adds	r3, #2
 8010088:	0019      	movs	r1, r3
 801008a:	0010      	movs	r0, r2
 801008c:	f000 fd56 	bl	8010b3c <NV_ReadVariable_U8>
	NV_ReadVariable_U8(m_ledFunctionParams[ledIdx][LED_PARAM_IDX_FNCT_BLUE_VALUE], &p_led->paramB);
 8010090:	1dfb      	adds	r3, r7, #7
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	4a12      	ldr	r2, [pc, #72]	; (80100e0 <LED_InitFunction+0xbc>)
 8010096:	009b      	lsls	r3, r3, #2
 8010098:	18d3      	adds	r3, r2, r3
 801009a:	3303      	adds	r3, #3
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	b29a      	uxth	r2, r3
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	3303      	adds	r3, #3
 80100a4:	0019      	movs	r1, r3
 80100a6:	0010      	movs	r0, r2
 80100a8:	f000 fd48 	bl	8010b3c <NV_ReadVariable_U8>

	if (p_led->func == LED_USER_LED)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	2b03      	cmp	r3, #3
 80100b2:	d109      	bne.n	80100c8 <LED_InitFunction+0xa4>
	{
		LED_SetRGBLedPtr(p_led, p_led->paramR, p_led->paramG, p_led->paramB);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	7859      	ldrb	r1, [r3, #1]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	789a      	ldrb	r2, [r3, #2]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	78db      	ldrb	r3, [r3, #3]
 80100c0:	68f8      	ldr	r0, [r7, #12]
 80100c2:	f7ff ff75 	bl	800ffb0 <LED_SetRGBLedPtr>
	}
	else
	{
		LED_SetRGBLedPtr(p_led, 0u, 0u, 0u);
	}
}
 80100c6:	e005      	b.n	80100d4 <LED_InitFunction+0xb0>
		LED_SetRGBLedPtr(p_led, 0u, 0u, 0u);
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	2300      	movs	r3, #0
 80100cc:	2200      	movs	r2, #0
 80100ce:	2100      	movs	r1, #0
 80100d0:	f7ff ff6e 	bl	800ffb0 <LED_SetRGBLedPtr>
}
 80100d4:	46c0      	nop			; (mov r8, r8)
 80100d6:	46bd      	mov	sp, r7
 80100d8:	b004      	add	sp, #16
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	200008c4 	.word	0x200008c4
 80100e0:	08014580 	.word	0x08014580

080100e4 <ISENSE_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void ISENSE_Init(void)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80100ea:	1dfb      	adds	r3, r7, #7
 80100ec:	2200      	movs	r2, #0
 80100ee:	701a      	strb	r2, [r3, #0]

	while(i < ISENSE_CAL_POINTS)
 80100f0:	e00d      	b.n	801010e <ISENSE_Init+0x2a>
	{
		m_calPoints[i].iActual = 0u;
 80100f2:	1dfb      	adds	r3, r7, #7
 80100f4:	781a      	ldrb	r2, [r3, #0]
 80100f6:	490f      	ldr	r1, [pc, #60]	; (8010134 <ISENSE_Init+0x50>)
 80100f8:	0013      	movs	r3, r2
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	189b      	adds	r3, r3, r2
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	2200      	movs	r2, #0
 8010102:	525a      	strh	r2, [r3, r1]
		i++;
 8010104:	1dfb      	adds	r3, r7, #7
 8010106:	781a      	ldrb	r2, [r3, #0]
 8010108:	1dfb      	adds	r3, r7, #7
 801010a:	3201      	adds	r2, #1
 801010c:	701a      	strb	r2, [r3, #0]
	while(i < ISENSE_CAL_POINTS)
 801010e:	1dfb      	adds	r3, r7, #7
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	2b02      	cmp	r3, #2
 8010114:	d9ed      	bls.n	80100f2 <ISENSE_Init+0xe>
	}

	m_loadCurrentMa = 0;
 8010116:	4b08      	ldr	r3, [pc, #32]	; (8010138 <ISENSE_Init+0x54>)
 8010118:	2200      	movs	r2, #0
 801011a:	801a      	strh	r2, [r3, #0]

	// Load calibration values from NV
	ISENSE_ReadNVCalibration();
 801011c:	f000 fa60 	bl	80105e0 <ISENSE_ReadNVCalibration>

	MS_TIME_COUNTER_INIT(m_lastCurrentUpdateTimeMs);
 8010120:	f7f2 ffd6 	bl	80030d0 <HAL_GetTick>
 8010124:	0002      	movs	r2, r0
 8010126:	4b05      	ldr	r3, [pc, #20]	; (801013c <ISENSE_Init+0x58>)
 8010128:	601a      	str	r2, [r3, #0]
}
 801012a:	46c0      	nop			; (mov r8, r8)
 801012c:	46bd      	mov	sp, r7
 801012e:	b002      	add	sp, #8
 8010130:	bd80      	pop	{r7, pc}
 8010132:	46c0      	nop			; (mov r8, r8)
 8010134:	200014f0 	.word	0x200014f0
 8010138:	20001514 	.word	0x20001514
 801013c:	20001510 	.word	0x20001510

08010140 <ISENSE_Task>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void ISENSE_Task(void)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 8010146:	f7f2 ffc3 	bl	80030d0 <HAL_GetTick>
 801014a:	0003      	movs	r3, r0
 801014c:	607b      	str	r3, [r7, #4]
	// do something?
	if (MS_TIMEREF_TIMEOUT(m_lastCurrentUpdateTimeMs, sysTime, ISENSE_UPDATE_PERIOD))
 801014e:	4b07      	ldr	r3, [pc, #28]	; (801016c <ISENSE_Task+0x2c>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	1ad3      	subs	r3, r2, r3
 8010156:	2b7c      	cmp	r3, #124	; 0x7c
 8010158:	d904      	bls.n	8010164 <ISENSE_Task+0x24>
	{
		MS_TIMEREF_INIT(m_lastCurrentUpdateTimeMs, sysTime);
 801015a:	4b04      	ldr	r3, [pc, #16]	; (801016c <ISENSE_Task+0x2c>)
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	601a      	str	r2, [r3, #0]

		ISENSE_CalculateLoadCurrentMa();
 8010160:	f000 f9ba 	bl	80104d8 <ISENSE_CalculateLoadCurrentMa>
	}
}
 8010164:	46c0      	nop			; (mov r8, r8)
 8010166:	46bd      	mov	sp, r7
 8010168:	b002      	add	sp, #8
 801016a:	bd80      	pop	{r7, pc}
 801016c:	20001510 	.word	0x20001510

08010170 <ISENSE_GetLoadCurrentMa>:
 * @param	none
 * @retval	int16_t
 */
// ****************************************************************************
int16_t ISENSE_GetLoadCurrentMa(void)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	af00      	add	r7, sp, #0
	return m_loadCurrentMa;
 8010174:	4b02      	ldr	r3, [pc, #8]	; (8010180 <ISENSE_GetLoadCurrentMa+0x10>)
 8010176:	2200      	movs	r2, #0
 8010178:	5e9b      	ldrsh	r3, [r3, r2]
}
 801017a:	0018      	movs	r0, r3
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	20001514 	.word	0x20001514

08010184 <ISENSE_CalibrateLoadCurrent>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void ISENSE_CalibrateLoadCurrent(void)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
	ISENSE_CalibrateCurrent(ISENSE_CAL_POINT_MID, 50u);
 801018a:	2132      	movs	r1, #50	; 0x32
 801018c:	2001      	movs	r0, #1
 801018e:	f000 fb9d 	bl	80108cc <ISENSE_CalibrateCurrent>

	float k12;
	float ktNorm;

	m_resLoadCurrCalibOffset = m_calPoints[ISENSE_CAL_POINT_MID].iRes - 51u;
 8010192:	4b40      	ldr	r3, [pc, #256]	; (8010294 <ISENSE_CalibrateLoadCurrent+0x110>)
 8010194:	220e      	movs	r2, #14
 8010196:	5e9b      	ldrsh	r3, [r3, r2]
 8010198:	b29b      	uxth	r3, r3
 801019a:	3b33      	subs	r3, #51	; 0x33
 801019c:	b29b      	uxth	r3, r3
 801019e:	b21a      	sxth	r2, r3
 80101a0:	4b3d      	ldr	r3, [pc, #244]	; (8010298 <ISENSE_CalibrateLoadCurrent+0x114>)
 80101a2:	801a      	strh	r2, [r3, #0]
	m_resLoadCurrCalibScale_K = 0x10000u;
 80101a4:	4b3d      	ldr	r3, [pc, #244]	; (801029c <ISENSE_CalibrateLoadCurrent+0x118>)
 80101a6:	2280      	movs	r2, #128	; 0x80
 80101a8:	0252      	lsls	r2, r2, #9
 80101aa:	601a      	str	r2, [r3, #0]

	NV_WriteVariable_S8(RES_ILOAD_CALIB_ZERO_NV_ADDR, m_resLoadCurrCalibOffset / 10u);
 80101ac:	4b3a      	ldr	r3, [pc, #232]	; (8010298 <ISENSE_CalibrateLoadCurrent+0x114>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	5e9b      	ldrsh	r3, [r3, r2]
 80101b2:	210a      	movs	r1, #10
 80101b4:	0018      	movs	r0, r3
 80101b6:	f7ef ffa5 	bl	8000104 <__udivsi3>
 80101ba:	0003      	movs	r3, r0
 80101bc:	b25b      	sxtb	r3, r3
 80101be:	0019      	movs	r1, r3
 80101c0:	2004      	movs	r0, #4
 80101c2:	f000 fc81 	bl	8010ac8 <NV_WriteVariable_S8>

	NV_WipeVariable(ISENSE_RES_SPAN_L);
 80101c6:	2072      	movs	r0, #114	; 0x72
 80101c8:	f000 fcf2 	bl	8010bb0 <NV_WipeVariable>
	NV_WipeVariable(ISENSE_RES_SPAN_H);
 80101cc:	2073      	movs	r0, #115	; 0x73
 80101ce:	f000 fcef 	bl	8010bb0 <NV_WipeVariable>

	ktNorm = 0.0052f * m_calPoints[ISENSE_CAL_POINT_MID].temperature + 0.9376f;
 80101d2:	4b30      	ldr	r3, [pc, #192]	; (8010294 <ISENSE_CalibrateLoadCurrent+0x110>)
 80101d4:	7c9b      	ldrb	r3, [r3, #18]
 80101d6:	0018      	movs	r0, r3
 80101d8:	f7f0 ffc4 	bl	8001164 <__aeabi_i2f>
 80101dc:	1c03      	adds	r3, r0, #0
 80101de:	4930      	ldr	r1, [pc, #192]	; (80102a0 <ISENSE_CalibrateLoadCurrent+0x11c>)
 80101e0:	1c18      	adds	r0, r3, #0
 80101e2:	f7f0 fcbd 	bl	8000b60 <__aeabi_fmul>
 80101e6:	1c03      	adds	r3, r0, #0
 80101e8:	492e      	ldr	r1, [pc, #184]	; (80102a4 <ISENSE_CalibrateLoadCurrent+0x120>)
 80101ea:	1c18      	adds	r0, r3, #0
 80101ec:	f7f0 f952 	bl	8000494 <__aeabi_fadd>
 80101f0:	1c03      	adds	r3, r0, #0
 80101f2:	607b      	str	r3, [r7, #4]

	k12 = 52.0f / (ISENSE_ConvertFETDrvToX(m_calPoints[ISENSE_CAL_POINT_MID].iFet, m_calPoints[ISENSE_CAL_POINT_MID].temperature) * ktNorm);
 80101f4:	4b27      	ldr	r3, [pc, #156]	; (8010294 <ISENSE_CalibrateLoadCurrent+0x110>)
 80101f6:	899a      	ldrh	r2, [r3, #12]
 80101f8:	4b26      	ldr	r3, [pc, #152]	; (8010294 <ISENSE_CalibrateLoadCurrent+0x110>)
 80101fa:	7c9b      	ldrb	r3, [r3, #18]
 80101fc:	b25b      	sxtb	r3, r3
 80101fe:	0019      	movs	r1, r3
 8010200:	0010      	movs	r0, r2
 8010202:	f000 faa7 	bl	8010754 <ISENSE_ConvertFETDrvToX>
 8010206:	1c03      	adds	r3, r0, #0
 8010208:	6879      	ldr	r1, [r7, #4]
 801020a:	1c18      	adds	r0, r3, #0
 801020c:	f7f0 fca8 	bl	8000b60 <__aeabi_fmul>
 8010210:	1c03      	adds	r3, r0, #0
 8010212:	1c19      	adds	r1, r3, #0
 8010214:	4824      	ldr	r0, [pc, #144]	; (80102a8 <ISENSE_CalibrateLoadCurrent+0x124>)
 8010216:	f7f0 fad9 	bl	80007cc <__aeabi_fdiv>
 801021a:	1c03      	adds	r3, r0, #0
 801021c:	603b      	str	r3, [r7, #0]

	m_kta = 0.0052f * k12 * 1024u * 8u;
 801021e:	4920      	ldr	r1, [pc, #128]	; (80102a0 <ISENSE_CalibrateLoadCurrent+0x11c>)
 8010220:	6838      	ldr	r0, [r7, #0]
 8010222:	f7f0 fc9d 	bl	8000b60 <__aeabi_fmul>
 8010226:	1c03      	adds	r3, r0, #0
 8010228:	2189      	movs	r1, #137	; 0x89
 801022a:	05c9      	lsls	r1, r1, #23
 801022c:	1c18      	adds	r0, r3, #0
 801022e:	f7f0 fc97 	bl	8000b60 <__aeabi_fmul>
 8010232:	1c03      	adds	r3, r0, #0
 8010234:	2182      	movs	r1, #130	; 0x82
 8010236:	05c9      	lsls	r1, r1, #23
 8010238:	1c18      	adds	r0, r3, #0
 801023a:	f7f0 fc91 	bl	8000b60 <__aeabi_fmul>
 801023e:	1c03      	adds	r3, r0, #0
 8010240:	1c18      	adds	r0, r3, #0
 8010242:	f7f0 f90f 	bl	8000464 <__aeabi_f2uiz>
 8010246:	0003      	movs	r3, r0
 8010248:	b2da      	uxtb	r2, r3
 801024a:	4b18      	ldr	r3, [pc, #96]	; (80102ac <ISENSE_CalibrateLoadCurrent+0x128>)
 801024c:	701a      	strb	r2, [r3, #0]
	m_ktb = 0.9376f * k12 * 32u;
 801024e:	4915      	ldr	r1, [pc, #84]	; (80102a4 <ISENSE_CalibrateLoadCurrent+0x120>)
 8010250:	6838      	ldr	r0, [r7, #0]
 8010252:	f7f0 fc85 	bl	8000b60 <__aeabi_fmul>
 8010256:	1c03      	adds	r3, r0, #0
 8010258:	2184      	movs	r1, #132	; 0x84
 801025a:	05c9      	lsls	r1, r1, #23
 801025c:	1c18      	adds	r0, r3, #0
 801025e:	f7f0 fc7f 	bl	8000b60 <__aeabi_fmul>
 8010262:	1c03      	adds	r3, r0, #0
 8010264:	1c18      	adds	r0, r3, #0
 8010266:	f7f0 f8fd 	bl	8000464 <__aeabi_f2uiz>
 801026a:	0003      	movs	r3, r0
 801026c:	b2da      	uxtb	r2, r3
 801026e:	4b10      	ldr	r3, [pc, #64]	; (80102b0 <ISENSE_CalibrateLoadCurrent+0x12c>)
 8010270:	701a      	strb	r2, [r3, #0]

	NV_WriteVariable_U8(VDG_ILOAD_CALIB_KTA_NV_ADDR, m_kta);
 8010272:	4b0e      	ldr	r3, [pc, #56]	; (80102ac <ISENSE_CalibrateLoadCurrent+0x128>)
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	0019      	movs	r1, r3
 8010278:	2002      	movs	r0, #2
 801027a:	f000 fc3b 	bl	8010af4 <NV_WriteVariable_U8>
	NV_WriteVariable_U8(VDG_ILOAD_CALIB_KTB_NV_ADDR, m_ktb);
 801027e:	4b0c      	ldr	r3, [pc, #48]	; (80102b0 <ISENSE_CalibrateLoadCurrent+0x12c>)
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	0019      	movs	r1, r3
 8010284:	2003      	movs	r0, #3
 8010286:	f000 fc35 	bl	8010af4 <NV_WriteVariable_U8>
}
 801028a:	46c0      	nop			; (mov r8, r8)
 801028c:	46bd      	mov	sp, r7
 801028e:	b002      	add	sp, #8
 8010290:	bd80      	pop	{r7, pc}
 8010292:	46c0      	nop			; (mov r8, r8)
 8010294:	200014f0 	.word	0x200014f0
 8010298:	200014ea 	.word	0x200014ea
 801029c:	200014ec 	.word	0x200014ec
 80102a0:	3baa64c3 	.word	0x3baa64c3
 80102a4:	3f70068e 	.word	0x3f70068e
 80102a8:	42500000 	.word	0x42500000
 80102ac:	200014e8 	.word	0x200014e8
 80102b0:	200014e9 	.word	0x200014e9

080102b4 <ISENSE_CalibrateZeroCurrent>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void ISENSE_CalibrateZeroCurrent(void)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	af00      	add	r7, sp, #0
	ISENSE_CalibrateCurrent(ISENSE_CAL_POINT_LOW, 0u);
 80102b8:	2100      	movs	r1, #0
 80102ba:	2000      	movs	r0, #0
 80102bc:	f000 fb06 	bl	80108cc <ISENSE_CalibrateCurrent>
}
 80102c0:	46c0      	nop			; (mov r8, r8)
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <ISENSE_Calibrate51mACurrent>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void ISENSE_Calibrate51mACurrent(void)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	af00      	add	r7, sp, #0
	ISENSE_CalibrateCurrent(ISENSE_CAL_POINT_MID, 51u);
 80102ca:	2133      	movs	r1, #51	; 0x33
 80102cc:	2001      	movs	r0, #1
 80102ce:	f000 fafd 	bl	80108cc <ISENSE_CalibrateCurrent>
}
 80102d2:	46c0      	nop			; (mov r8, r8)
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <ISENSE_Calibrate510mACurrent>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void ISENSE_Calibrate510mACurrent(void)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	af00      	add	r7, sp, #0
	ISENSE_CalibrateCurrent(ISENSE_CAL_POINT_HIGH, 510u);
 80102dc:	23ff      	movs	r3, #255	; 0xff
 80102de:	005b      	lsls	r3, r3, #1
 80102e0:	0019      	movs	r1, r3
 80102e2:	2002      	movs	r0, #2
 80102e4:	f000 faf2 	bl	80108cc <ISENSE_CalibrateCurrent>
}
 80102e8:	46c0      	nop			; (mov r8, r8)
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
	...

080102f0 <ISENSE_WriteNVCalibration>:
 * @retval	bool		false = calibration not performed
 * 						true = calibration performed and values updated
 */
// ****************************************************************************
bool ISENSE_WriteNVCalibration(void)
{
 80102f0:	b590      	push	{r4, r7, lr}
 80102f2:	b087      	sub	sp, #28
 80102f4:	af00      	add	r7, sp, #0
	uint8_t i = 0u;
 80102f6:	2317      	movs	r3, #23
 80102f8:	18fb      	adds	r3, r7, r3
 80102fa:	2200      	movs	r2, #0
 80102fc:	701a      	strb	r2, [r3, #0]
	uint32_t spanK = 0u;
 80102fe:	2300      	movs	r3, #0
 8010300:	607b      	str	r3, [r7, #4]
	int16_t spanIAct = m_calPoints[ISENSE_CAL_POINT_HIGH].iActual - m_calPoints[ISENSE_CAL_POINT_MID].iActual;
 8010302:	4b70      	ldr	r3, [pc, #448]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 8010304:	8a9a      	ldrh	r2, [r3, #20]
 8010306:	4b6f      	ldr	r3, [pc, #444]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 8010308:	895b      	ldrh	r3, [r3, #10]
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	b29a      	uxth	r2, r3
 801030e:	2114      	movs	r1, #20
 8010310:	187b      	adds	r3, r7, r1
 8010312:	801a      	strh	r2, [r3, #0]
	int16_t spanIMeas = m_calPoints[ISENSE_CAL_POINT_HIGH].iRes - m_calPoints[ISENSE_CAL_POINT_MID].iRes;
 8010314:	4b6b      	ldr	r3, [pc, #428]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 8010316:	2218      	movs	r2, #24
 8010318:	5e9b      	ldrsh	r3, [r3, r2]
 801031a:	b29a      	uxth	r2, r3
 801031c:	4b69      	ldr	r3, [pc, #420]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 801031e:	200e      	movs	r0, #14
 8010320:	5e1b      	ldrsh	r3, [r3, r0]
 8010322:	b29b      	uxth	r3, r3
 8010324:	1ad3      	subs	r3, r2, r3
 8010326:	b29a      	uxth	r2, r3
 8010328:	2012      	movs	r0, #18
 801032a:	183b      	adds	r3, r7, r0
 801032c:	801a      	strh	r2, [r3, #0]
	float k12;
	float ktNorm;

	// Spans must be positive and not 0.
	if ( (spanIAct <= 0) || (spanIMeas <= 0) )
 801032e:	187b      	adds	r3, r7, r1
 8010330:	2200      	movs	r2, #0
 8010332:	5e9b      	ldrsh	r3, [r3, r2]
 8010334:	2b00      	cmp	r3, #0
 8010336:	dd04      	ble.n	8010342 <ISENSE_WriteNVCalibration+0x52>
 8010338:	183b      	adds	r3, r7, r0
 801033a:	2200      	movs	r2, #0
 801033c:	5e9b      	ldrsh	r3, [r3, r2]
 801033e:	2b00      	cmp	r3, #0
 8010340:	dc01      	bgt.n	8010346 <ISENSE_WriteNVCalibration+0x56>
	{
		return false;
 8010342:	2300      	movs	r3, #0
 8010344:	e0ba      	b.n	80104bc <ISENSE_WriteNVCalibration+0x1cc>
	}

	// Find the span correction value
	if (false == UTIL_FixMulInverse_U16_U16(spanIAct, spanIMeas, &spanK))
 8010346:	2314      	movs	r3, #20
 8010348:	18fb      	adds	r3, r7, r3
 801034a:	8818      	ldrh	r0, [r3, #0]
 801034c:	2312      	movs	r3, #18
 801034e:	18fb      	adds	r3, r7, r3
 8010350:	881b      	ldrh	r3, [r3, #0]
 8010352:	1d3a      	adds	r2, r7, #4
 8010354:	0019      	movs	r1, r3
 8010356:	f003 fa2f 	bl	80137b8 <UTIL_FixMulInverse_U16_U16>
 801035a:	0003      	movs	r3, r0
 801035c:	001a      	movs	r2, r3
 801035e:	2301      	movs	r3, #1
 8010360:	4053      	eors	r3, r2
 8010362:	b2db      	uxtb	r3, r3
 8010364:	2b00      	cmp	r3, #0
 8010366:	d001      	beq.n	801036c <ISENSE_WriteNVCalibration+0x7c>
	{
		return false;
 8010368:	2300      	movs	r3, #0
 801036a:	e0a7      	b.n	80104bc <ISENSE_WriteNVCalibration+0x1cc>
	}

	// Span can only be 0 to 1.99999999999
	if (spanK >= 0x20000u)
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	2380      	movs	r3, #128	; 0x80
 8010370:	029b      	lsls	r3, r3, #10
 8010372:	429a      	cmp	r2, r3
 8010374:	d301      	bcc.n	801037a <ISENSE_WriteNVCalibration+0x8a>
	{
		return false;
 8010376:	2300      	movs	r3, #0
 8010378:	e0a0      	b.n	80104bc <ISENSE_WriteNVCalibration+0x1cc>
	}

	// Lose a bit of resolution to fit in a uint16 slot in NV and store.
	spanK >>= 1u;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	085b      	lsrs	r3, r3, #1
 801037e:	607b      	str	r3, [r7, #4]

	NV_WriteVariable_U8(ISENSE_RES_SPAN_L, (uint8_t)(spanK & 0xFFu));
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	b2db      	uxtb	r3, r3
 8010384:	0019      	movs	r1, r3
 8010386:	2072      	movs	r0, #114	; 0x72
 8010388:	f000 fbb4 	bl	8010af4 <NV_WriteVariable_U8>

	spanK >>= 8u;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	0a1b      	lsrs	r3, r3, #8
 8010390:	607b      	str	r3, [r7, #4]

	NV_WriteVariable_U8(ISENSE_RES_SPAN_H, (uint8_t)(spanK & 0xFFu));
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	b2db      	uxtb	r3, r3
 8010396:	0019      	movs	r1, r3
 8010398:	2073      	movs	r0, #115	; 0x73
 801039a:	f000 fbab 	bl	8010af4 <NV_WriteVariable_U8>

	NV_WriteVariable_S8(RES_ILOAD_CALIB_ZERO_NV_ADDR, (m_calPoints[ISENSE_CAL_POINT_MID].iRes - m_calPoints[ISENSE_CAL_POINT_MID].iActual) / 10u);
 801039e:	4b49      	ldr	r3, [pc, #292]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 80103a0:	220e      	movs	r2, #14
 80103a2:	5e9b      	ldrsh	r3, [r3, r2]
 80103a4:	001a      	movs	r2, r3
 80103a6:	4b47      	ldr	r3, [pc, #284]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 80103a8:	895b      	ldrh	r3, [r3, #10]
 80103aa:	1ad3      	subs	r3, r2, r3
 80103ac:	210a      	movs	r1, #10
 80103ae:	0018      	movs	r0, r3
 80103b0:	f7ef fea8 	bl	8000104 <__udivsi3>
 80103b4:	0003      	movs	r3, r0
 80103b6:	b25b      	sxtb	r3, r3
 80103b8:	0019      	movs	r1, r3
 80103ba:	2004      	movs	r0, #4
 80103bc:	f000 fb84 	bl	8010ac8 <NV_WriteVariable_S8>

	if (0u != m_calPoints[ISENSE_CAL_POINT_MID].iActual)
 80103c0:	4b40      	ldr	r3, [pc, #256]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 80103c2:	895b      	ldrh	r3, [r3, #10]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d071      	beq.n	80104ac <ISENSE_WriteNVCalibration+0x1bc>
	{
		ktNorm = 0.0052f * m_calPoints[ISENSE_CAL_POINT_MID].temperature + 0.9376f;
 80103c8:	4b3e      	ldr	r3, [pc, #248]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 80103ca:	7c9b      	ldrb	r3, [r3, #18]
 80103cc:	0018      	movs	r0, r3
 80103ce:	f7f0 fec9 	bl	8001164 <__aeabi_i2f>
 80103d2:	1c03      	adds	r3, r0, #0
 80103d4:	493c      	ldr	r1, [pc, #240]	; (80104c8 <ISENSE_WriteNVCalibration+0x1d8>)
 80103d6:	1c18      	adds	r0, r3, #0
 80103d8:	f7f0 fbc2 	bl	8000b60 <__aeabi_fmul>
 80103dc:	1c03      	adds	r3, r0, #0
 80103de:	493b      	ldr	r1, [pc, #236]	; (80104cc <ISENSE_WriteNVCalibration+0x1dc>)
 80103e0:	1c18      	adds	r0, r3, #0
 80103e2:	f7f0 f857 	bl	8000494 <__aeabi_fadd>
 80103e6:	1c03      	adds	r3, r0, #0
 80103e8:	60fb      	str	r3, [r7, #12]

		k12 = (float)m_calPoints[ISENSE_CAL_POINT_MID].iActual / (ISENSE_ConvertFETDrvToX(m_calPoints[ISENSE_CAL_POINT_MID].iFet, m_calPoints[ISENSE_CAL_POINT_MID].temperature) * ktNorm);
 80103ea:	4b36      	ldr	r3, [pc, #216]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 80103ec:	895b      	ldrh	r3, [r3, #10]
 80103ee:	0018      	movs	r0, r3
 80103f0:	f7f0 fefe 	bl	80011f0 <__aeabi_ui2f>
 80103f4:	1c04      	adds	r4, r0, #0
 80103f6:	4b33      	ldr	r3, [pc, #204]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 80103f8:	899a      	ldrh	r2, [r3, #12]
 80103fa:	4b32      	ldr	r3, [pc, #200]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 80103fc:	7c9b      	ldrb	r3, [r3, #18]
 80103fe:	b25b      	sxtb	r3, r3
 8010400:	0019      	movs	r1, r3
 8010402:	0010      	movs	r0, r2
 8010404:	f000 f9a6 	bl	8010754 <ISENSE_ConvertFETDrvToX>
 8010408:	1c03      	adds	r3, r0, #0
 801040a:	68f9      	ldr	r1, [r7, #12]
 801040c:	1c18      	adds	r0, r3, #0
 801040e:	f7f0 fba7 	bl	8000b60 <__aeabi_fmul>
 8010412:	1c03      	adds	r3, r0, #0
 8010414:	1c19      	adds	r1, r3, #0
 8010416:	1c20      	adds	r0, r4, #0
 8010418:	f7f0 f9d8 	bl	80007cc <__aeabi_fdiv>
 801041c:	1c03      	adds	r3, r0, #0
 801041e:	60bb      	str	r3, [r7, #8]

		m_kta = 0.0052f * k12 * 1024u * 8u;
 8010420:	4929      	ldr	r1, [pc, #164]	; (80104c8 <ISENSE_WriteNVCalibration+0x1d8>)
 8010422:	68b8      	ldr	r0, [r7, #8]
 8010424:	f7f0 fb9c 	bl	8000b60 <__aeabi_fmul>
 8010428:	1c03      	adds	r3, r0, #0
 801042a:	2189      	movs	r1, #137	; 0x89
 801042c:	05c9      	lsls	r1, r1, #23
 801042e:	1c18      	adds	r0, r3, #0
 8010430:	f7f0 fb96 	bl	8000b60 <__aeabi_fmul>
 8010434:	1c03      	adds	r3, r0, #0
 8010436:	2182      	movs	r1, #130	; 0x82
 8010438:	05c9      	lsls	r1, r1, #23
 801043a:	1c18      	adds	r0, r3, #0
 801043c:	f7f0 fb90 	bl	8000b60 <__aeabi_fmul>
 8010440:	1c03      	adds	r3, r0, #0
 8010442:	1c18      	adds	r0, r3, #0
 8010444:	f7f0 f80e 	bl	8000464 <__aeabi_f2uiz>
 8010448:	0003      	movs	r3, r0
 801044a:	b2da      	uxtb	r2, r3
 801044c:	4b20      	ldr	r3, [pc, #128]	; (80104d0 <ISENSE_WriteNVCalibration+0x1e0>)
 801044e:	701a      	strb	r2, [r3, #0]
		m_ktb = 0.9376f * k12 * 32u;
 8010450:	491e      	ldr	r1, [pc, #120]	; (80104cc <ISENSE_WriteNVCalibration+0x1dc>)
 8010452:	68b8      	ldr	r0, [r7, #8]
 8010454:	f7f0 fb84 	bl	8000b60 <__aeabi_fmul>
 8010458:	1c03      	adds	r3, r0, #0
 801045a:	2184      	movs	r1, #132	; 0x84
 801045c:	05c9      	lsls	r1, r1, #23
 801045e:	1c18      	adds	r0, r3, #0
 8010460:	f7f0 fb7e 	bl	8000b60 <__aeabi_fmul>
 8010464:	1c03      	adds	r3, r0, #0
 8010466:	1c18      	adds	r0, r3, #0
 8010468:	f7ef fffc 	bl	8000464 <__aeabi_f2uiz>
 801046c:	0003      	movs	r3, r0
 801046e:	b2da      	uxtb	r2, r3
 8010470:	4b18      	ldr	r3, [pc, #96]	; (80104d4 <ISENSE_WriteNVCalibration+0x1e4>)
 8010472:	701a      	strb	r2, [r3, #0]

		NV_WriteVariable_U8(VDG_ILOAD_CALIB_KTA_NV_ADDR, m_kta);
 8010474:	4b16      	ldr	r3, [pc, #88]	; (80104d0 <ISENSE_WriteNVCalibration+0x1e0>)
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	0019      	movs	r1, r3
 801047a:	2002      	movs	r0, #2
 801047c:	f000 fb3a 	bl	8010af4 <NV_WriteVariable_U8>
		NV_WriteVariable_U8(VDG_ILOAD_CALIB_KTB_NV_ADDR, m_ktb);
 8010480:	4b14      	ldr	r3, [pc, #80]	; (80104d4 <ISENSE_WriteNVCalibration+0x1e4>)
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	0019      	movs	r1, r3
 8010486:	2003      	movs	r0, #3
 8010488:	f000 fb34 	bl	8010af4 <NV_WriteVariable_U8>
	}

	// Reset cal points
	while(i < ISENSE_CAL_POINTS)
 801048c:	e00e      	b.n	80104ac <ISENSE_WriteNVCalibration+0x1bc>
	{
		m_calPoints[i].iActual = 0u;
 801048e:	2017      	movs	r0, #23
 8010490:	183b      	adds	r3, r7, r0
 8010492:	781a      	ldrb	r2, [r3, #0]
 8010494:	490b      	ldr	r1, [pc, #44]	; (80104c4 <ISENSE_WriteNVCalibration+0x1d4>)
 8010496:	0013      	movs	r3, r2
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	189b      	adds	r3, r3, r2
 801049c:	005b      	lsls	r3, r3, #1
 801049e:	2200      	movs	r2, #0
 80104a0:	525a      	strh	r2, [r3, r1]
		i++;
 80104a2:	183b      	adds	r3, r7, r0
 80104a4:	781a      	ldrb	r2, [r3, #0]
 80104a6:	183b      	adds	r3, r7, r0
 80104a8:	3201      	adds	r2, #1
 80104aa:	701a      	strb	r2, [r3, #0]
	while(i < ISENSE_CAL_POINTS)
 80104ac:	2317      	movs	r3, #23
 80104ae:	18fb      	adds	r3, r7, r3
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	2b02      	cmp	r3, #2
 80104b4:	d9eb      	bls.n	801048e <ISENSE_WriteNVCalibration+0x19e>
	}

	return ISENSE_ReadNVCalibration();
 80104b6:	f000 f893 	bl	80105e0 <ISENSE_ReadNVCalibration>
 80104ba:	0003      	movs	r3, r0
}
 80104bc:	0018      	movs	r0, r3
 80104be:	46bd      	mov	sp, r7
 80104c0:	b007      	add	sp, #28
 80104c2:	bd90      	pop	{r4, r7, pc}
 80104c4:	200014f0 	.word	0x200014f0
 80104c8:	3baa64c3 	.word	0x3baa64c3
 80104cc:	3f70068e 	.word	0x3f70068e
 80104d0:	200014e8 	.word	0x200014e8
 80104d4:	200014e9 	.word	0x200014e9

080104d8 <ISENSE_CalculateLoadCurrentMa>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void ISENSE_CalculateLoadCurrentMa(void)
{
 80104d8:	b590      	push	{r4, r7, lr}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
	const bool boostConverterEnabled = POWERSOURCE_IsBoostConverterEnabled();
 80104de:	1dfc      	adds	r4, r7, #7
 80104e0:	f001 fd44 	bl	8011f6c <POWERSOURCE_IsBoostConverterEnabled>
 80104e4:	0003      	movs	r3, r0
 80104e6:	7023      	strb	r3, [r4, #0]
	const bool ldoEnabled = POWERSOURCE_IsLDOEnabled();
 80104e8:	1dbc      	adds	r4, r7, #6
 80104ea:	f001 fd49 	bl	8011f80 <POWERSOURCE_IsLDOEnabled>
 80104ee:	0003      	movs	r3, r0
 80104f0:	7023      	strb	r3, [r4, #0]
	const POWERSOURCE_RPi5VStatus_t pow5vInDetStatus = POWERSOURCE_GetRPi5VPowerStatus();
 80104f2:	1d7c      	adds	r4, r7, #5
 80104f4:	f001 fd62 	bl	8011fbc <POWERSOURCE_GetRPi5VPowerStatus>
 80104f8:	0003      	movs	r3, r0
 80104fa:	7023      	strb	r3, [r4, #0]
	const BatteryStatus_T batteryStatus = BATTERY_GetStatus();
 80104fc:	1d3c      	adds	r4, r7, #4
 80104fe:	f7f7 fdd7 	bl	80080b0 <BATTERY_GetStatus>
 8010502:	0003      	movs	r3, r0
 8010504:	7023      	strb	r3, [r4, #0]
	const bool vSysEnabled = POWERSOURCE_IsVsysEnabled();
 8010506:	1cfc      	adds	r4, r7, #3
 8010508:	f001 fd26 	bl	8011f58 <POWERSOURCE_IsVsysEnabled>
 801050c:	0003      	movs	r3, r0
 801050e:	7023      	strb	r3, [r4, #0]
	const bool chargerRPiInEnabled = CHARGER_GetRPi5vInputEnable();
 8010510:	f7f9 fa28 	bl	8009964 <CHARGER_GetRPi5vInputEnable>
 8010514:	0002      	movs	r2, r0
 8010516:	1cbb      	adds	r3, r7, #2
 8010518:	1e51      	subs	r1, r2, #1
 801051a:	418a      	sbcs	r2, r1
 801051c:	701a      	strb	r2, [r3, #0]

	m_loadFetMa = ISENSE_CalculatePMOSLoadCurrentMa();
 801051e:	f000 f8cd 	bl	80106bc <ISENSE_CalculatePMOSLoadCurrentMa>
 8010522:	0003      	movs	r3, r0
 8010524:	b21a      	sxth	r2, r3
 8010526:	4b2a      	ldr	r3, [pc, #168]	; (80105d0 <ISENSE_CalculateLoadCurrentMa+0xf8>)
 8010528:	801a      	strh	r2, [r3, #0]
	m_loadResMa = ISENSE_CalculateResSenseCurrentMa();
 801052a:	f000 f9a9 	bl	8010880 <ISENSE_CalculateResSenseCurrentMa>
 801052e:	0003      	movs	r3, r0
 8010530:	001a      	movs	r2, r3
 8010532:	4b28      	ldr	r3, [pc, #160]	; (80105d4 <ISENSE_CalculateLoadCurrentMa+0xfc>)
 8010534:	801a      	strh	r2, [r3, #0]

	if (pow5vInDetStatus == RPI5V_DETECTION_STATUS_UNPOWERED)
 8010536:	1d7b      	adds	r3, r7, #5
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	2b01      	cmp	r3, #1
 801053c:	d124      	bne.n	8010588 <ISENSE_CalculateLoadCurrentMa+0xb0>
	{
		if (true == boostConverterEnabled)
 801053e:	1dfb      	adds	r3, r7, #7
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d01c      	beq.n	8010580 <ISENSE_CalculateLoadCurrentMa+0xa8>
		{
			// TODO - Work out why these values
			if ( (m_loadResMa > -300) && (m_loadResMa < 800) && (true == ldoEnabled) )
 8010546:	4b23      	ldr	r3, [pc, #140]	; (80105d4 <ISENSE_CalculateLoadCurrentMa+0xfc>)
 8010548:	2200      	movs	r2, #0
 801054a:	5e9b      	ldrsh	r3, [r3, r2]
 801054c:	4a22      	ldr	r2, [pc, #136]	; (80105d8 <ISENSE_CalculateLoadCurrentMa+0x100>)
 801054e:	4293      	cmp	r3, r2
 8010550:	db10      	blt.n	8010574 <ISENSE_CalculateLoadCurrentMa+0x9c>
 8010552:	4b20      	ldr	r3, [pc, #128]	; (80105d4 <ISENSE_CalculateLoadCurrentMa+0xfc>)
 8010554:	2200      	movs	r2, #0
 8010556:	5e9a      	ldrsh	r2, [r3, r2]
 8010558:	23c8      	movs	r3, #200	; 0xc8
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	429a      	cmp	r2, r3
 801055e:	da09      	bge.n	8010574 <ISENSE_CalculateLoadCurrentMa+0x9c>
 8010560:	1dbb      	adds	r3, r7, #6
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d005      	beq.n	8010574 <ISENSE_CalculateLoadCurrentMa+0x9c>
			{
				m_loadCurrentMa = m_loadFetMa;
 8010568:	4b19      	ldr	r3, [pc, #100]	; (80105d0 <ISENSE_CalculateLoadCurrentMa+0xf8>)
 801056a:	2200      	movs	r2, #0
 801056c:	5e9a      	ldrsh	r2, [r3, r2]
 801056e:	4b1b      	ldr	r3, [pc, #108]	; (80105dc <ISENSE_CalculateLoadCurrentMa+0x104>)
 8010570:	801a      	strh	r2, [r3, #0]
 8010572:	e029      	b.n	80105c8 <ISENSE_CalculateLoadCurrentMa+0xf0>
			}
			else
			{
				m_loadCurrentMa = m_loadResMa;
 8010574:	4b17      	ldr	r3, [pc, #92]	; (80105d4 <ISENSE_CalculateLoadCurrentMa+0xfc>)
 8010576:	2200      	movs	r2, #0
 8010578:	5e9a      	ldrsh	r2, [r3, r2]
 801057a:	4b18      	ldr	r3, [pc, #96]	; (80105dc <ISENSE_CalculateLoadCurrentMa+0x104>)
 801057c:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		m_loadCurrentMa = m_loadResMa;
	}
}
 801057e:	e023      	b.n	80105c8 <ISENSE_CalculateLoadCurrentMa+0xf0>
			m_loadCurrentMa = 0;
 8010580:	4b16      	ldr	r3, [pc, #88]	; (80105dc <ISENSE_CalculateLoadCurrentMa+0x104>)
 8010582:	2200      	movs	r2, #0
 8010584:	801a      	strh	r2, [r3, #0]
}
 8010586:	e01f      	b.n	80105c8 <ISENSE_CalculateLoadCurrentMa+0xf0>
	else if (pow5vInDetStatus == RPI5V_DETECTION_STATUS_POWERED)
 8010588:	1d7b      	adds	r3, r7, #5
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	2b02      	cmp	r3, #2
 801058e:	d115      	bne.n	80105bc <ISENSE_CalculateLoadCurrentMa+0xe4>
		if ( (BAT_STATUS_CHARGING_FROM_5V_IO == batteryStatus) || ((true == chargerRPiInEnabled) && (true == vSysEnabled)) )
 8010590:	1d3b      	adds	r3, r7, #4
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	2b02      	cmp	r3, #2
 8010596:	d007      	beq.n	80105a8 <ISENSE_CalculateLoadCurrentMa+0xd0>
 8010598:	1cbb      	adds	r3, r7, #2
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d009      	beq.n	80105b4 <ISENSE_CalculateLoadCurrentMa+0xdc>
 80105a0:	1cfb      	adds	r3, r7, #3
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d005      	beq.n	80105b4 <ISENSE_CalculateLoadCurrentMa+0xdc>
			m_loadCurrentMa = m_loadResMa;
 80105a8:	4b0a      	ldr	r3, [pc, #40]	; (80105d4 <ISENSE_CalculateLoadCurrentMa+0xfc>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	5e9a      	ldrsh	r2, [r3, r2]
 80105ae:	4b0b      	ldr	r3, [pc, #44]	; (80105dc <ISENSE_CalculateLoadCurrentMa+0x104>)
 80105b0:	801a      	strh	r2, [r3, #0]
 80105b2:	e009      	b.n	80105c8 <ISENSE_CalculateLoadCurrentMa+0xf0>
			m_loadCurrentMa = 0;
 80105b4:	4b09      	ldr	r3, [pc, #36]	; (80105dc <ISENSE_CalculateLoadCurrentMa+0x104>)
 80105b6:	2200      	movs	r2, #0
 80105b8:	801a      	strh	r2, [r3, #0]
}
 80105ba:	e005      	b.n	80105c8 <ISENSE_CalculateLoadCurrentMa+0xf0>
		m_loadCurrentMa = m_loadResMa;
 80105bc:	4b05      	ldr	r3, [pc, #20]	; (80105d4 <ISENSE_CalculateLoadCurrentMa+0xfc>)
 80105be:	2200      	movs	r2, #0
 80105c0:	5e9a      	ldrsh	r2, [r3, r2]
 80105c2:	4b06      	ldr	r3, [pc, #24]	; (80105dc <ISENSE_CalculateLoadCurrentMa+0x104>)
 80105c4:	801a      	strh	r2, [r3, #0]
}
 80105c6:	e7ff      	b.n	80105c8 <ISENSE_CalculateLoadCurrentMa+0xf0>
 80105c8:	46c0      	nop			; (mov r8, r8)
 80105ca:	46bd      	mov	sp, r7
 80105cc:	b003      	add	sp, #12
 80105ce:	bd90      	pop	{r4, r7, pc}
 80105d0:	20001518 	.word	0x20001518
 80105d4:	20001516 	.word	0x20001516
 80105d8:	fffffed5 	.word	0xfffffed5
 80105dc:	20001514 	.word	0x20001514

080105e0 <ISENSE_ReadNVCalibration>:
 * @param	none
 * @retval	bool
 */
// ****************************************************************************
static bool ISENSE_ReadNVCalibration(void)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
	m_kta = 0u; // invalid value
 80105e6:	4b31      	ldr	r3, [pc, #196]	; (80106ac <ISENSE_ReadNVCalibration+0xcc>)
 80105e8:	2200      	movs	r2, #0
 80105ea:	701a      	strb	r2, [r3, #0]
	m_ktb = 0u; // invalid value
 80105ec:	4b30      	ldr	r3, [pc, #192]	; (80106b0 <ISENSE_ReadNVCalibration+0xd0>)
 80105ee:	2200      	movs	r2, #0
 80105f0:	701a      	strb	r2, [r3, #0]
	m_resLoadCurrCalibOffset = 0;
 80105f2:	4b30      	ldr	r3, [pc, #192]	; (80106b4 <ISENSE_ReadNVCalibration+0xd4>)
 80105f4:	2200      	movs	r2, #0
 80105f6:	801a      	strh	r2, [r3, #0]

	uint8_t tempU8;
	bool readResult = true;
 80105f8:	1dfb      	adds	r3, r7, #7
 80105fa:	2201      	movs	r2, #1
 80105fc:	701a      	strb	r2, [r3, #0]

	NV_ReadVariable_U8(VDG_ILOAD_CALIB_KTA_NV_ADDR, &m_kta);
 80105fe:	4b2b      	ldr	r3, [pc, #172]	; (80106ac <ISENSE_ReadNVCalibration+0xcc>)
 8010600:	0019      	movs	r1, r3
 8010602:	2002      	movs	r0, #2
 8010604:	f000 fa9a 	bl	8010b3c <NV_ReadVariable_U8>
	NV_ReadVariable_U8(VDG_ILOAD_CALIB_KTB_NV_ADDR, &m_ktb);
 8010608:	4b29      	ldr	r3, [pc, #164]	; (80106b0 <ISENSE_ReadNVCalibration+0xd0>)
 801060a:	0019      	movs	r1, r3
 801060c:	2003      	movs	r0, #3
 801060e:	f000 fa95 	bl	8010b3c <NV_ReadVariable_U8>
	NV_ReadVariable_U8(RES_ILOAD_CALIB_ZERO_NV_ADDR, &tempU8);
 8010612:	1dbb      	adds	r3, r7, #6
 8010614:	0019      	movs	r1, r3
 8010616:	2004      	movs	r0, #4
 8010618:	f000 fa90 	bl	8010b3c <NV_ReadVariable_U8>
	m_resLoadCurrCalibOffset = ((int8_t)tempU8 * 10u);
 801061c:	1dbb      	adds	r3, r7, #6
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	b25b      	sxtb	r3, r3
 8010622:	b29b      	uxth	r3, r3
 8010624:	1c1a      	adds	r2, r3, #0
 8010626:	0092      	lsls	r2, r2, #2
 8010628:	18d3      	adds	r3, r2, r3
 801062a:	18db      	adds	r3, r3, r3
 801062c:	b29b      	uxth	r3, r3
 801062e:	b21a      	sxth	r2, r3
 8010630:	4b20      	ldr	r3, [pc, #128]	; (80106b4 <ISENSE_ReadNVCalibration+0xd4>)
 8010632:	801a      	strh	r2, [r3, #0]

	if (false == NV_ReadVariable_U8(ISENSE_RES_SPAN_L, &tempU8))
 8010634:	1dbb      	adds	r3, r7, #6
 8010636:	0019      	movs	r1, r3
 8010638:	2072      	movs	r0, #114	; 0x72
 801063a:	f000 fa7f 	bl	8010b3c <NV_ReadVariable_U8>
 801063e:	0003      	movs	r3, r0
 8010640:	001a      	movs	r2, r3
 8010642:	2301      	movs	r3, #1
 8010644:	4053      	eors	r3, r2
 8010646:	b2db      	uxtb	r3, r3
 8010648:	2b00      	cmp	r3, #0
 801064a:	d002      	beq.n	8010652 <ISENSE_ReadNVCalibration+0x72>
	{
		readResult = false;
 801064c:	1dfb      	adds	r3, r7, #7
 801064e:	2200      	movs	r2, #0
 8010650:	701a      	strb	r2, [r3, #0]
	}

	m_resLoadCurrCalibScale_K = (tempU8 << 1u);
 8010652:	1dbb      	adds	r3, r7, #6
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	005b      	lsls	r3, r3, #1
 8010658:	001a      	movs	r2, r3
 801065a:	4b17      	ldr	r3, [pc, #92]	; (80106b8 <ISENSE_ReadNVCalibration+0xd8>)
 801065c:	601a      	str	r2, [r3, #0]

	if (false == NV_ReadVariable_U8(ISENSE_RES_SPAN_H, &tempU8))
 801065e:	1dbb      	adds	r3, r7, #6
 8010660:	0019      	movs	r1, r3
 8010662:	2073      	movs	r0, #115	; 0x73
 8010664:	f000 fa6a 	bl	8010b3c <NV_ReadVariable_U8>
 8010668:	0003      	movs	r3, r0
 801066a:	001a      	movs	r2, r3
 801066c:	2301      	movs	r3, #1
 801066e:	4053      	eors	r3, r2
 8010670:	b2db      	uxtb	r3, r3
 8010672:	2b00      	cmp	r3, #0
 8010674:	d002      	beq.n	801067c <ISENSE_ReadNVCalibration+0x9c>
	{
		readResult = false;
 8010676:	1dfb      	adds	r3, r7, #7
 8010678:	2200      	movs	r2, #0
 801067a:	701a      	strb	r2, [r3, #0]
	}

	// Check for valid value
	if (true == readResult)
 801067c:	1dfb      	adds	r3, r7, #7
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d009      	beq.n	8010698 <ISENSE_ReadNVCalibration+0xb8>
	{
		m_resLoadCurrCalibScale_K |= (tempU8 << 9u);
 8010684:	1dbb      	adds	r3, r7, #6
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	025b      	lsls	r3, r3, #9
 801068a:	001a      	movs	r2, r3
 801068c:	4b0a      	ldr	r3, [pc, #40]	; (80106b8 <ISENSE_ReadNVCalibration+0xd8>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	431a      	orrs	r2, r3
 8010692:	4b09      	ldr	r3, [pc, #36]	; (80106b8 <ISENSE_ReadNVCalibration+0xd8>)
 8010694:	601a      	str	r2, [r3, #0]
 8010696:	e003      	b.n	80106a0 <ISENSE_ReadNVCalibration+0xc0>
	}
	else
	{
		// Use default adjustment value if bad
		m_resLoadCurrCalibScale_K = 0x10000u;
 8010698:	4b07      	ldr	r3, [pc, #28]	; (80106b8 <ISENSE_ReadNVCalibration+0xd8>)
 801069a:	2280      	movs	r2, #128	; 0x80
 801069c:	0252      	lsls	r2, r2, #9
 801069e:	601a      	str	r2, [r3, #0]
	}

	return readResult;
 80106a0:	1dfb      	adds	r3, r7, #7
 80106a2:	781b      	ldrb	r3, [r3, #0]
}
 80106a4:	0018      	movs	r0, r3
 80106a6:	46bd      	mov	sp, r7
 80106a8:	b002      	add	sp, #8
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	200014e8 	.word	0x200014e8
 80106b0:	200014e9 	.word	0x200014e9
 80106b4:	200014ea 	.word	0x200014ea
 80106b8:	200014ec 	.word	0x200014ec

080106bc <ISENSE_CalculatePMOSLoadCurrentMa>:
 * @param	none
 * @retval	uint16_t		current being drawn from the LDO in mA
 */
// ****************************************************************************
static uint16_t ISENSE_CalculatePMOSLoadCurrentMa(void)
{
 80106bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106be:	b085      	sub	sp, #20
 80106c0:	af00      	add	r7, sp, #0
	const int16_t mcuTemperature = ANALOG_GetMCUTemp();
 80106c2:	250e      	movs	r5, #14
 80106c4:	197c      	adds	r4, r7, r5
 80106c6:	f7f7 f8a1 	bl	800780c <ANALOG_GetMCUTemp>
 80106ca:	0003      	movs	r3, r0
 80106cc:	8023      	strh	r3, [r4, #0]
	const uint16_t powDet = ADC_CalibrateValue(ADC_GetAverageValue(ANALOG_CHANNEL_POW_DET));
 80106ce:	2004      	movs	r0, #4
 80106d0:	f7f6 ff7e 	bl	80075d0 <ADC_GetAverageValue>
 80106d4:	0003      	movs	r3, r0
 80106d6:	260c      	movs	r6, #12
 80106d8:	19bc      	adds	r4, r7, r6
 80106da:	0018      	movs	r0, r3
 80106dc:	f7f6 ff9a 	bl	8007614 <ADC_CalibrateValue>
 80106e0:	0003      	movs	r3, r0
 80106e2:	8023      	strh	r3, [r4, #0]
	const float iNorm = ISENSE_ConvertFETDrvToX(powDet, mcuTemperature);
 80106e4:	002c      	movs	r4, r5
 80106e6:	193b      	adds	r3, r7, r4
 80106e8:	881b      	ldrh	r3, [r3, #0]
 80106ea:	b25a      	sxtb	r2, r3
 80106ec:	19bb      	adds	r3, r7, r6
 80106ee:	881b      	ldrh	r3, [r3, #0]
 80106f0:	0011      	movs	r1, r2
 80106f2:	0018      	movs	r0, r3
 80106f4:	f000 f82e 	bl	8010754 <ISENSE_ConvertFETDrvToX>
 80106f8:	1c03      	adds	r3, r0, #0
 80106fa:	60bb      	str	r3, [r7, #8]

	int32_t result = ((m_kta * mcuTemperature + (((uint16_t)m_ktb) << 8) ) * ((int32_t)(iNorm + 0.5))) >> 13;
 80106fc:	4b12      	ldr	r3, [pc, #72]	; (8010748 <ISENSE_CalculatePMOSLoadCurrentMa+0x8c>)
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	001a      	movs	r2, r3
 8010702:	193b      	adds	r3, r7, r4
 8010704:	2100      	movs	r1, #0
 8010706:	5e5b      	ldrsh	r3, [r3, r1]
 8010708:	435a      	muls	r2, r3
 801070a:	4b10      	ldr	r3, [pc, #64]	; (801074c <ISENSE_CalculatePMOSLoadCurrentMa+0x90>)
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	021b      	lsls	r3, r3, #8
 8010710:	18d4      	adds	r4, r2, r3
 8010712:	68b8      	ldr	r0, [r7, #8]
 8010714:	f7f1 f948 	bl	80019a8 <__aeabi_f2d>
 8010718:	2200      	movs	r2, #0
 801071a:	4b0d      	ldr	r3, [pc, #52]	; (8010750 <ISENSE_CalculatePMOSLoadCurrentMa+0x94>)
 801071c:	f7f0 fda4 	bl	8001268 <__aeabi_dadd>
 8010720:	0002      	movs	r2, r0
 8010722:	000b      	movs	r3, r1
 8010724:	0010      	movs	r0, r2
 8010726:	0019      	movs	r1, r3
 8010728:	f7f1 f908 	bl	800193c <__aeabi_d2iz>
 801072c:	0003      	movs	r3, r0
 801072e:	4363      	muls	r3, r4
 8010730:	135b      	asrs	r3, r3, #13
 8010732:	607b      	str	r3, [r7, #4]

	// Current can't go backwards here!
	return (result > 0) ? result : 0u;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	da00      	bge.n	801073c <ISENSE_CalculatePMOSLoadCurrentMa+0x80>
 801073a:	2300      	movs	r3, #0
 801073c:	b29b      	uxth	r3, r3
}
 801073e:	0018      	movs	r0, r3
 8010740:	46bd      	mov	sp, r7
 8010742:	b005      	add	sp, #20
 8010744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010746:	46c0      	nop			; (mov r8, r8)
 8010748:	200014e8 	.word	0x200014e8
 801074c:	200014e9 	.word	0x200014e9
 8010750:	3fe00000 	.word	0x3fe00000

08010754 <ISENSE_ConvertFETDrvToX>:
 * @param	temperature			temperature in degrees
 * @retval	float				converted value
 */
// ****************************************************************************
static float ISENSE_ConvertFETDrvToX(const uint16_t fetDrvAdc, const int8_t temperature)
{
 8010754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010756:	b087      	sub	sp, #28
 8010758:	af00      	add	r7, sp, #0
 801075a:	0002      	movs	r2, r0
 801075c:	1dbb      	adds	r3, r7, #6
 801075e:	801a      	strh	r2, [r3, #0]
 8010760:	1d7b      	adds	r3, r7, #5
 8010762:	1c0a      	adds	r2, r1, #0
 8010764:	701a      	strb	r2, [r3, #0]
	const uint16_t fetDrvConv = UTIL_FixMul_U32_U16(ISENSE_POWDET_K, fetDrvAdc);
 8010766:	2514      	movs	r5, #20
 8010768:	197c      	adds	r4, r7, r5
 801076a:	1dbb      	adds	r3, r7, #6
 801076c:	881b      	ldrh	r3, [r3, #0]
 801076e:	4a3f      	ldr	r2, [pc, #252]	; (801086c <ISENSE_ConvertFETDrvToX+0x118>)
 8010770:	0019      	movs	r1, r3
 8010772:	0010      	movs	r0, r2
 8010774:	f002 ffd7 	bl	8013726 <UTIL_FixMul_U32_U16>
 8010778:	0003      	movs	r3, r0
 801077a:	8023      	strh	r3, [r4, #0]
	const uint16_t vdg = (fetDrvConv > 4790u) ? 0u : 4790u - fetDrvConv;
 801077c:	197b      	adds	r3, r7, r5
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	4a3b      	ldr	r2, [pc, #236]	; (8010870 <ISENSE_ConvertFETDrvToX+0x11c>)
 8010782:	4293      	cmp	r3, r2
 8010784:	d805      	bhi.n	8010792 <ISENSE_ConvertFETDrvToX+0x3e>
 8010786:	197b      	adds	r3, r7, r5
 8010788:	881b      	ldrh	r3, [r3, #0]
 801078a:	4a39      	ldr	r2, [pc, #228]	; (8010870 <ISENSE_ConvertFETDrvToX+0x11c>)
 801078c:	1ad3      	subs	r3, r2, r3
 801078e:	b29a      	uxth	r2, r3
 8010790:	e000      	b.n	8010794 <ISENSE_ConvertFETDrvToX+0x40>
 8010792:	2200      	movs	r2, #0
 8010794:	2112      	movs	r1, #18
 8010796:	187b      	adds	r3, r7, r1
 8010798:	801a      	strh	r2, [r3, #0]

	uint16_t coeffIdx;
	float result;

	// Check index isn't minimum
	coeffIdx = (vdg >= ID_T_POLY_COEFF_VDG_START) ?
 801079a:	000a      	movs	r2, r1
 801079c:	18bb      	adds	r3, r7, r2
 801079e:	881b      	ldrh	r3, [r3, #0]
 80107a0:	2bef      	cmp	r3, #239	; 0xef
 80107a2:	d909      	bls.n	80107b8 <ISENSE_ConvertFETDrvToX+0x64>
					( (vdg - ID_T_POLY_COEFF_VDG_START) + (ID_T_POLY_COEFF_VDG_INC / 2u) ) / ID_T_POLY_COEFF_VDG_INC :
 80107a4:	18bb      	adds	r3, r7, r2
 80107a6:	881b      	ldrh	r3, [r3, #0]
 80107a8:	3beb      	subs	r3, #235	; 0xeb
 80107aa:	210a      	movs	r1, #10
 80107ac:	0018      	movs	r0, r3
 80107ae:	f7ef fca9 	bl	8000104 <__udivsi3>
 80107b2:	0003      	movs	r3, r0
	coeffIdx = (vdg >= ID_T_POLY_COEFF_VDG_START) ?
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	e000      	b.n	80107ba <ISENSE_ConvertFETDrvToX+0x66>
 80107b8:	2200      	movs	r2, #0
 80107ba:	2116      	movs	r1, #22
 80107bc:	187b      	adds	r3, r7, r1
 80107be:	801a      	strh	r2, [r3, #0]
					0u;

	// Check index hasn't maxed out
	if (coeffIdx > ID_T_POLY_LAST_COEFF_IDX)
 80107c0:	000a      	movs	r2, r1
 80107c2:	18bb      	adds	r3, r7, r2
 80107c4:	881b      	ldrh	r3, [r3, #0]
 80107c6:	2b38      	cmp	r3, #56	; 0x38
 80107c8:	d902      	bls.n	80107d0 <ISENSE_ConvertFETDrvToX+0x7c>
	{
		coeffIdx = ID_T_POLY_LAST_COEFF_IDX;
 80107ca:	18bb      	adds	r3, r7, r2
 80107cc:	2238      	movs	r2, #56	; 0x38
 80107ce:	801a      	strh	r2, [r3, #0]
	}

	// Should be some brackets here somewhere!
	result = a[coeffIdx] * temperature * temperature + b[coeffIdx] * temperature + c[coeffIdx];
 80107d0:	2616      	movs	r6, #22
 80107d2:	19bb      	adds	r3, r7, r6
 80107d4:	881a      	ldrh	r2, [r3, #0]
 80107d6:	4b27      	ldr	r3, [pc, #156]	; (8010874 <ISENSE_ConvertFETDrvToX+0x120>)
 80107d8:	0092      	lsls	r2, r2, #2
 80107da:	58d4      	ldr	r4, [r2, r3]
 80107dc:	1d7b      	adds	r3, r7, #5
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	b25b      	sxtb	r3, r3
 80107e2:	0018      	movs	r0, r3
 80107e4:	f7f0 fcbe 	bl	8001164 <__aeabi_i2f>
 80107e8:	1c03      	adds	r3, r0, #0
 80107ea:	1c19      	adds	r1, r3, #0
 80107ec:	1c20      	adds	r0, r4, #0
 80107ee:	f7f0 f9b7 	bl	8000b60 <__aeabi_fmul>
 80107f2:	1c03      	adds	r3, r0, #0
 80107f4:	1c1c      	adds	r4, r3, #0
 80107f6:	1d7b      	adds	r3, r7, #5
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	b25b      	sxtb	r3, r3
 80107fc:	0018      	movs	r0, r3
 80107fe:	f7f0 fcb1 	bl	8001164 <__aeabi_i2f>
 8010802:	1c03      	adds	r3, r0, #0
 8010804:	1c19      	adds	r1, r3, #0
 8010806:	1c20      	adds	r0, r4, #0
 8010808:	f7f0 f9aa 	bl	8000b60 <__aeabi_fmul>
 801080c:	1c03      	adds	r3, r0, #0
 801080e:	1c1d      	adds	r5, r3, #0
 8010810:	19bb      	adds	r3, r7, r6
 8010812:	881a      	ldrh	r2, [r3, #0]
 8010814:	4b18      	ldr	r3, [pc, #96]	; (8010878 <ISENSE_ConvertFETDrvToX+0x124>)
 8010816:	0092      	lsls	r2, r2, #2
 8010818:	58d4      	ldr	r4, [r2, r3]
 801081a:	1d7b      	adds	r3, r7, #5
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	b25b      	sxtb	r3, r3
 8010820:	0018      	movs	r0, r3
 8010822:	f7f0 fc9f 	bl	8001164 <__aeabi_i2f>
 8010826:	1c03      	adds	r3, r0, #0
 8010828:	1c19      	adds	r1, r3, #0
 801082a:	1c20      	adds	r0, r4, #0
 801082c:	f7f0 f998 	bl	8000b60 <__aeabi_fmul>
 8010830:	1c03      	adds	r3, r0, #0
 8010832:	1c19      	adds	r1, r3, #0
 8010834:	1c28      	adds	r0, r5, #0
 8010836:	f7ef fe2d 	bl	8000494 <__aeabi_fadd>
 801083a:	1c03      	adds	r3, r0, #0
 801083c:	1c18      	adds	r0, r3, #0
 801083e:	19bb      	adds	r3, r7, r6
 8010840:	881a      	ldrh	r2, [r3, #0]
 8010842:	4b0e      	ldr	r3, [pc, #56]	; (801087c <ISENSE_ConvertFETDrvToX+0x128>)
 8010844:	0092      	lsls	r2, r2, #2
 8010846:	58d3      	ldr	r3, [r2, r3]
 8010848:	1c19      	adds	r1, r3, #0
 801084a:	f7ef fe23 	bl	8000494 <__aeabi_fadd>
 801084e:	1c03      	adds	r3, r0, #0
 8010850:	60fb      	str	r3, [r7, #12]

	// Make sure its positive
	return (result > 0.0f) ? result : 0.0f;
 8010852:	2100      	movs	r1, #0
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f7ef fdf1 	bl	800043c <__aeabi_fcmpgt>
 801085a:	1e03      	subs	r3, r0, #0
 801085c:	d001      	beq.n	8010862 <ISENSE_ConvertFETDrvToX+0x10e>
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	e000      	b.n	8010864 <ISENSE_ConvertFETDrvToX+0x110>
 8010862:	2300      	movs	r3, #0
}
 8010864:	1c18      	adds	r0, r3, #0
 8010866:	46bd      	mov	sp, r7
 8010868:	b007      	add	sp, #28
 801086a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801086c:	00019c80 	.word	0x00019c80
 8010870:	000012b6 	.word	0x000012b6
 8010874:	08014588 	.word	0x08014588
 8010878:	0801466c 	.word	0x0801466c
 801087c:	08014750 	.word	0x08014750

08010880 <ISENSE_CalculateResSenseCurrentMa>:
 * @param	none
 * @retval	int16_t
 */
// ****************************************************************************
static int16_t ISENSE_CalculateResSenseCurrentMa(void)
{
 8010880:	b590      	push	{r4, r7, lr}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
	int16_t result = ADC_GetCurrentSenseAverage();
 8010886:	1dbc      	adds	r4, r7, #6
 8010888:	f7f6 fee4 	bl	8007654 <ADC_GetCurrentSenseAverage>
 801088c:	0003      	movs	r3, r0
 801088e:	8023      	strh	r3, [r4, #0]

	result = UTIL_FixMul_U32_S16(m_resLoadCurrCalibScale_K, result);
 8010890:	4b0c      	ldr	r3, [pc, #48]	; (80108c4 <ISENSE_CalculateResSenseCurrentMa+0x44>)
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	1dbc      	adds	r4, r7, #6
 8010896:	1dbb      	adds	r3, r7, #6
 8010898:	2100      	movs	r1, #0
 801089a:	5e5b      	ldrsh	r3, [r3, r1]
 801089c:	0019      	movs	r1, r3
 801089e:	0010      	movs	r0, r2
 80108a0:	f002 ff5f 	bl	8013762 <UTIL_FixMul_U32_S16>
 80108a4:	0003      	movs	r3, r0
 80108a6:	8023      	strh	r3, [r4, #0]

	return result - m_resLoadCurrCalibOffset;
 80108a8:	1dbb      	adds	r3, r7, #6
 80108aa:	881a      	ldrh	r2, [r3, #0]
 80108ac:	4b06      	ldr	r3, [pc, #24]	; (80108c8 <ISENSE_CalculateResSenseCurrentMa+0x48>)
 80108ae:	2100      	movs	r1, #0
 80108b0:	5e5b      	ldrsh	r3, [r3, r1]
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	1ad3      	subs	r3, r2, r3
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	b21b      	sxth	r3, r3
}
 80108ba:	0018      	movs	r0, r3
 80108bc:	46bd      	mov	sp, r7
 80108be:	b003      	add	sp, #12
 80108c0:	bd90      	pop	{r4, r7, pc}
 80108c2:	46c0      	nop			; (mov r8, r8)
 80108c4:	200014ec 	.word	0x200014ec
 80108c8:	200014ea 	.word	0x200014ea

080108cc <ISENSE_CalibrateCurrent>:
 * @param	currentMa		actual current applied to the 5v rail
 * @retval	none
 */
// ****************************************************************************
static void ISENSE_CalibrateCurrent(const uint8_t pointIdx, const uint16_t currentMa)
{
 80108cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ce:	b085      	sub	sp, #20
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	0002      	movs	r2, r0
 80108d4:	1dfb      	adds	r3, r7, #7
 80108d6:	701a      	strb	r2, [r3, #0]
 80108d8:	1d3b      	adds	r3, r7, #4
 80108da:	1c0a      	adds	r2, r1, #0
 80108dc:	801a      	strh	r2, [r3, #0]
	const bool boostEnabled = POWERSOURCE_IsBoostConverterEnabled();
 80108de:	250f      	movs	r5, #15
 80108e0:	197c      	adds	r4, r7, r5
 80108e2:	f001 fb43 	bl	8011f6c <POWERSOURCE_IsBoostConverterEnabled>
 80108e6:	0003      	movs	r3, r0
 80108e8:	7023      	strb	r3, [r4, #0]
	const bool ldoEnabled = POWERSOURCE_IsLDOEnabled();
 80108ea:	260e      	movs	r6, #14
 80108ec:	19bc      	adds	r4, r7, r6
 80108ee:	f001 fb47 	bl	8011f80 <POWERSOURCE_IsLDOEnabled>
 80108f2:	0003      	movs	r3, r0
 80108f4:	7023      	strb	r3, [r4, #0]

	if (pointIdx >= 3u)
 80108f6:	1dfb      	adds	r3, r7, #7
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	2b02      	cmp	r3, #2
 80108fc:	d873      	bhi.n	80109e6 <ISENSE_CalibrateCurrent+0x11a>
	{
		return;
	}

	// Adjust filter period to try and stabilise the sense resistor.
	ADC_SetIFilterPeriod(1000u);
 80108fe:	23fa      	movs	r3, #250	; 0xfa
 8010900:	009b      	lsls	r3, r3, #2
 8010902:	0018      	movs	r0, r3
 8010904:	f7f6 fed0 	bl	80076a8 <ADC_SetIFilterPeriod>

	m_calPoints[pointIdx].iActual = currentMa;
 8010908:	1dfb      	adds	r3, r7, #7
 801090a:	781a      	ldrb	r2, [r3, #0]
 801090c:	4938      	ldr	r1, [pc, #224]	; (80109f0 <ISENSE_CalibrateCurrent+0x124>)
 801090e:	0013      	movs	r3, r2
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	189b      	adds	r3, r3, r2
 8010914:	005b      	lsls	r3, r3, #1
 8010916:	1d3a      	adds	r2, r7, #4
 8010918:	8812      	ldrh	r2, [r2, #0]
 801091a:	525a      	strh	r2, [r3, r1]

	// Override any config settings
	IODRV_SetPin(IODRV_PIN_POWDET_EN, false);
 801091c:	2100      	movs	r1, #0
 801091e:	2005      	movs	r0, #5
 8010920:	f7fe fa9a 	bl	800ee58 <IODRV_SetPin>
	IODRV_SetPin(IODRV_PIN_POW_EN, true);
 8010924:	2101      	movs	r1, #1
 8010926:	2006      	movs	r0, #6
 8010928:	f7fe fa96 	bl	800ee58 <IODRV_SetPin>

	HAL_Delay(FILTER_PERIOD_MS_CS1 * AVE_FILTER_ELEMENT_COUNT);
 801092c:	20a0      	movs	r0, #160	; 0xa0
 801092e:	f7f2 fbd9 	bl	80030e4 <HAL_Delay>

	// Get boost converter voltage
	m_calPoints[pointIdx].vBoost = ANALOG_Get5VRailMv();
 8010932:	1dfb      	adds	r3, r7, #7
 8010934:	781c      	ldrb	r4, [r3, #0]
 8010936:	f7f6 ff4d 	bl	80077d4 <ANALOG_Get5VRailMv>
 801093a:	0003      	movs	r3, r0
 801093c:	0019      	movs	r1, r3
 801093e:	4a2c      	ldr	r2, [pc, #176]	; (80109f0 <ISENSE_CalibrateCurrent+0x124>)
 8010940:	0023      	movs	r3, r4
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	191b      	adds	r3, r3, r4
 8010946:	005b      	lsls	r3, r3, #1
 8010948:	18d3      	adds	r3, r2, r3
 801094a:	3306      	adds	r3, #6
 801094c:	1c0a      	adds	r2, r1, #0
 801094e:	801a      	strh	r2, [r3, #0]

	// Enable LDO
	IODRV_SetPin(IODRV_PIN_POWDET_EN, true);
 8010950:	2101      	movs	r1, #1
 8010952:	2005      	movs	r0, #5
 8010954:	f7fe fa80 	bl	800ee58 <IODRV_SetPin>

	// Wait for the filter to work.
	HAL_Delay(1000u * AVE_FILTER_ELEMENT_COUNT);
 8010958:	23fa      	movs	r3, #250	; 0xfa
 801095a:	019b      	lsls	r3, r3, #6
 801095c:	0018      	movs	r0, r3
 801095e:	f7f2 fbc1 	bl	80030e4 <HAL_Delay>

	// Log current sense value
	m_calPoints[pointIdx].iRes = ADC_GetCurrentSenseAverage();
 8010962:	1dfb      	adds	r3, r7, #7
 8010964:	781c      	ldrb	r4, [r3, #0]
 8010966:	f7f6 fe75 	bl	8007654 <ADC_GetCurrentSenseAverage>
 801096a:	0003      	movs	r3, r0
 801096c:	0019      	movs	r1, r3
 801096e:	4a20      	ldr	r2, [pc, #128]	; (80109f0 <ISENSE_CalibrateCurrent+0x124>)
 8010970:	0023      	movs	r3, r4
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	191b      	adds	r3, r3, r4
 8010976:	005b      	lsls	r3, r3, #1
 8010978:	18d3      	adds	r3, r2, r3
 801097a:	3304      	adds	r3, #4
 801097c:	1c0a      	adds	r2, r1, #0
 801097e:	801a      	strh	r2, [r3, #0]

	// Log LDO drive value
	m_calPoints[pointIdx].iFet = ADC_CalibrateValue(
 8010980:	2004      	movs	r0, #4
 8010982:	f7f6 fe25 	bl	80075d0 <ADC_GetAverageValue>
 8010986:	0003      	movs	r3, r0
 8010988:	001a      	movs	r2, r3
 801098a:	1dfb      	adds	r3, r7, #7
 801098c:	781c      	ldrb	r4, [r3, #0]
 801098e:	0010      	movs	r0, r2
 8010990:	f7f6 fe40 	bl	8007614 <ADC_CalibrateValue>
 8010994:	0003      	movs	r3, r0
 8010996:	0019      	movs	r1, r3
 8010998:	4a15      	ldr	r2, [pc, #84]	; (80109f0 <ISENSE_CalibrateCurrent+0x124>)
 801099a:	0023      	movs	r3, r4
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	191b      	adds	r3, r3, r4
 80109a0:	005b      	lsls	r3, r3, #1
 80109a2:	18d3      	adds	r3, r2, r3
 80109a4:	3302      	adds	r3, #2
 80109a6:	1c0a      	adds	r2, r1, #0
 80109a8:	801a      	strh	r2, [r3, #0]
									ADC_GetAverageValue(ANALOG_CHANNEL_POW_DET)
									);

	// Log temperature
	m_calPoints[pointIdx].temperature = ANALOG_GetMCUTemp();
 80109aa:	f7f6 ff2f 	bl	800780c <ANALOG_GetMCUTemp>
 80109ae:	0003      	movs	r3, r0
 80109b0:	0019      	movs	r1, r3
 80109b2:	1dfb      	adds	r3, r7, #7
 80109b4:	781a      	ldrb	r2, [r3, #0]
 80109b6:	b2c8      	uxtb	r0, r1
 80109b8:	490d      	ldr	r1, [pc, #52]	; (80109f0 <ISENSE_CalibrateCurrent+0x124>)
 80109ba:	0013      	movs	r3, r2
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	189b      	adds	r3, r3, r2
 80109c0:	005b      	lsls	r3, r3, #1
 80109c2:	18cb      	adds	r3, r1, r3
 80109c4:	3308      	adds	r3, #8
 80109c6:	1c02      	adds	r2, r0, #0
 80109c8:	701a      	strb	r2, [r3, #0]

	// Restore normal I sense filter period
	ADC_SetIFilterPeriod(FILTER_PERIOD_MS_ISENSE);
 80109ca:	203e      	movs	r0, #62	; 0x3e
 80109cc:	f7f6 fe6c 	bl	80076a8 <ADC_SetIFilterPeriod>

	// Restore power regulation
	POWERSOURCE_SetLDOEnable(ldoEnabled);
 80109d0:	19bb      	adds	r3, r7, r6
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	0018      	movs	r0, r3
 80109d6:	f001 fa93 	bl	8011f00 <POWERSOURCE_SetLDOEnable>
	POWERSOURCE_Set5vBoostEnable(boostEnabled);
 80109da:	197b      	adds	r3, r7, r5
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	0018      	movs	r0, r3
 80109e0:	f001 f9dc 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>
 80109e4:	e000      	b.n	80109e8 <ISENSE_CalibrateCurrent+0x11c>
		return;
 80109e6:	46c0      	nop			; (mov r8, r8)
}
 80109e8:	46bd      	mov	sp, r7
 80109ea:	b005      	add	sp, #20
 80109ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ee:	46c0      	nop			; (mov r8, r8)
 80109f0:	200014f0 	.word	0x200014f0

080109f4 <NV_Init>:
	NV_VAR_LIST
};


void NV_Init(void)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	af00      	add	r7, sp, #0
	/* Unlock the Flash Program Erase controller */
	FLASH_Unlock();
 80109f8:	f7fb f9b4 	bl	800bd64 <FLASH_Unlock>

	/* EEPROM Init */
	EE_Init();
 80109fc:	f7fb fa3e 	bl	800be7c <EE_Init>

	EE_ReadVariable(NV_START_ID, &nvInitFlag);
 8010a00:	4b03      	ldr	r3, [pc, #12]	; (8010a10 <NV_Init+0x1c>)
 8010a02:	0019      	movs	r1, r3
 8010a04:	2011      	movs	r0, #17
 8010a06:	f7fb fc23 	bl	800c250 <EE_ReadVariable>
}
 8010a0a:	46c0      	nop			; (mov r8, r8)
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	20000914 	.word	0x20000914

08010a14 <NV_FactoryReset>:


void NV_FactoryReset(void)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	af00      	add	r7, sp, #0
	// Reset to default
	NV_EraseAllVariables();
 8010a18:	f000 f82a 	bl	8010a70 <NV_EraseAllVariables>

	executionState = EXECUTION_STATE_CONFIG_RESET;
 8010a1c:	4b12      	ldr	r3, [pc, #72]	; (8010a68 <NV_FactoryReset+0x54>)
 8010a1e:	4a13      	ldr	r2, [pc, #76]	; (8010a6c <NV_FactoryReset+0x58>)
 8010a20:	601a      	str	r2, [r3, #0]

	while(true)
	{
		LED_SetRGB(LED_LED1_IDX, 150u, 0u, 0u);
 8010a22:	2300      	movs	r3, #0
 8010a24:	2200      	movs	r2, #0
 8010a26:	2196      	movs	r1, #150	; 0x96
 8010a28:	2000      	movs	r0, #0
 8010a2a:	f7fe fe8b 	bl	800f744 <LED_SetRGB>
		LED_SetRGB(LED_LED2_IDX, 150u, 0u, 0u);
 8010a2e:	2300      	movs	r3, #0
 8010a30:	2200      	movs	r2, #0
 8010a32:	2196      	movs	r1, #150	; 0x96
 8010a34:	2001      	movs	r0, #1
 8010a36:	f7fe fe85 	bl	800f744 <LED_SetRGB>

		HAL_Delay(500u);
 8010a3a:	23fa      	movs	r3, #250	; 0xfa
 8010a3c:	005b      	lsls	r3, r3, #1
 8010a3e:	0018      	movs	r0, r3
 8010a40:	f7f2 fb50 	bl	80030e4 <HAL_Delay>

		LED_SetRGB(LED_LED1_IDX, 0u, 0u, 150u);
 8010a44:	2396      	movs	r3, #150	; 0x96
 8010a46:	2200      	movs	r2, #0
 8010a48:	2100      	movs	r1, #0
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f7fe fe7a 	bl	800f744 <LED_SetRGB>
		LED_SetRGB(LED_LED2_IDX, 0u, 0u, 150u);
 8010a50:	2396      	movs	r3, #150	; 0x96
 8010a52:	2200      	movs	r2, #0
 8010a54:	2100      	movs	r1, #0
 8010a56:	2001      	movs	r0, #1
 8010a58:	f7fe fe74 	bl	800f744 <LED_SetRGB>

		HAL_Delay(500u);
 8010a5c:	23fa      	movs	r3, #250	; 0xfa
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	0018      	movs	r0, r3
 8010a62:	f7f2 fb3f 	bl	80030e4 <HAL_Delay>
		LED_SetRGB(LED_LED1_IDX, 150u, 0u, 0u);
 8010a66:	e7dc      	b.n	8010a22 <NV_FactoryReset+0xe>
 8010a68:	2000185c 	.word	0x2000185c
 8010a6c:	a5a5a5a5 	.word	0xa5a5a5a5

08010a70 <NV_EraseAllVariables>:
	}
}


void NV_EraseAllVariables(void)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
	int32_t i;

	for (i = NV_START_ID; i < NV_VAR_NUM; i++)
 8010a76:	2311      	movs	r3, #17
 8010a78:	607b      	str	r3, [r7, #4]
 8010a7a:	e009      	b.n	8010a90 <NV_EraseAllVariables+0x20>
	{
		EE_WriteVariable(i, 0xFFFFu);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	4a07      	ldr	r2, [pc, #28]	; (8010aa0 <NV_EraseAllVariables+0x30>)
 8010a82:	0011      	movs	r1, r2
 8010a84:	0018      	movs	r0, r3
 8010a86:	f7fb fc45 	bl	800c314 <EE_WriteVariable>
	for (i = NV_START_ID; i < NV_VAR_NUM; i++)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	607b      	str	r3, [r7, #4]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2b73      	cmp	r3, #115	; 0x73
 8010a94:	ddf2      	ble.n	8010a7c <NV_EraseAllVariables+0xc>
	}
}
 8010a96:	46c0      	nop			; (mov r8, r8)
 8010a98:	46c0      	nop			; (mov r8, r8)
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	b002      	add	sp, #8
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	0000ffff 	.word	0x0000ffff

08010aa4 <NvSetDataInitialized>:


void NvSetDataInitialized(void) {
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	af00      	add	r7, sp, #0
	if (!NV_IS_DATA_INITIALIZED) {
 8010aa8:	4b05      	ldr	r3, [pc, #20]	; (8010ac0 <NvSetDataInitialized+0x1c>)
 8010aaa:	881b      	ldrh	r3, [r3, #0]
 8010aac:	4a05      	ldr	r2, [pc, #20]	; (8010ac4 <NvSetDataInitialized+0x20>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d103      	bne.n	8010aba <NvSetDataInitialized+0x16>
		EE_WriteVariable(NV_START_ID, 0);
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	2011      	movs	r0, #17
 8010ab6:	f7fb fc2d 	bl	800c314 <EE_WriteVariable>
	}
}
 8010aba:	46c0      	nop			; (mov r8, r8)
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	20000914 	.word	0x20000914
 8010ac4:	0000ffff 	.word	0x0000ffff

08010ac8 <NV_WriteVariable_S8>:
	nvSaveParmeterValue = value;
}


bool NV_WriteVariable_S8(const uint16_t address, const int8_t var)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	0002      	movs	r2, r0
 8010ad0:	1dbb      	adds	r3, r7, #6
 8010ad2:	801a      	strh	r2, [r3, #0]
 8010ad4:	1d7b      	adds	r3, r7, #5
 8010ad6:	1c0a      	adds	r2, r1, #0
 8010ad8:	701a      	strb	r2, [r3, #0]
	return NV_WriteVariable_U8(address, (uint8_t)var);
 8010ada:	1d7b      	adds	r3, r7, #5
 8010adc:	781a      	ldrb	r2, [r3, #0]
 8010ade:	1dbb      	adds	r3, r7, #6
 8010ae0:	881b      	ldrh	r3, [r3, #0]
 8010ae2:	0011      	movs	r1, r2
 8010ae4:	0018      	movs	r0, r3
 8010ae6:	f000 f805 	bl	8010af4 <NV_WriteVariable_U8>
 8010aea:	0003      	movs	r3, r0
}
 8010aec:	0018      	movs	r0, r3
 8010aee:	46bd      	mov	sp, r7
 8010af0:	b002      	add	sp, #8
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <NV_WriteVariable_U8>:


bool NV_WriteVariable_U8(const uint16_t address, const uint8_t var)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	0002      	movs	r2, r0
 8010afc:	1dbb      	adds	r3, r7, #6
 8010afe:	801a      	strh	r2, [r3, #0]
 8010b00:	1d7b      	adds	r3, r7, #5
 8010b02:	1c0a      	adds	r2, r1, #0
 8010b04:	701a      	strb	r2, [r3, #0]
	return (HAL_OK == EE_WriteVariable(address, (uint16_t)var | ((uint16_t)(~var) << 8u)));
 8010b06:	1d7b      	adds	r3, r7, #5
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	b21a      	sxth	r2, r3
 8010b0c:	1d7b      	adds	r3, r7, #5
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	43db      	mvns	r3, r3
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	021b      	lsls	r3, r3, #8
 8010b18:	b21b      	sxth	r3, r3
 8010b1a:	4313      	orrs	r3, r2
 8010b1c:	b21b      	sxth	r3, r3
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	1dbb      	adds	r3, r7, #6
 8010b22:	881b      	ldrh	r3, [r3, #0]
 8010b24:	0011      	movs	r1, r2
 8010b26:	0018      	movs	r0, r3
 8010b28:	f7fb fbf4 	bl	800c314 <EE_WriteVariable>
 8010b2c:	0003      	movs	r3, r0
 8010b2e:	425a      	negs	r2, r3
 8010b30:	4153      	adcs	r3, r2
 8010b32:	b2db      	uxtb	r3, r3
}
 8010b34:	0018      	movs	r0, r3
 8010b36:	46bd      	mov	sp, r7
 8010b38:	b002      	add	sp, #8
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <NV_ReadVariable_U8>:
	return NV_ReadVariable_U8(address, (uint8_t*)p_var);
}


bool NV_ReadVariable_U8(const uint16_t address, uint8_t * const p_var)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	0002      	movs	r2, r0
 8010b44:	6039      	str	r1, [r7, #0]
 8010b46:	1dbb      	adds	r3, r7, #6
 8010b48:	801a      	strh	r2, [r3, #0]
	uint16_t nVar;
	const bool readResult = (HAL_OK == EE_ReadVariable(address, &nVar));
 8010b4a:	230c      	movs	r3, #12
 8010b4c:	18fa      	adds	r2, r7, r3
 8010b4e:	1dbb      	adds	r3, r7, #6
 8010b50:	881b      	ldrh	r3, [r3, #0]
 8010b52:	0011      	movs	r1, r2
 8010b54:	0018      	movs	r0, r3
 8010b56:	f7fb fb7b 	bl	800c250 <EE_ReadVariable>
 8010b5a:	0003      	movs	r3, r0
 8010b5c:	001a      	movs	r2, r3
 8010b5e:	200f      	movs	r0, #15
 8010b60:	183b      	adds	r3, r7, r0
 8010b62:	4251      	negs	r1, r2
 8010b64:	414a      	adcs	r2, r1
 8010b66:	701a      	strb	r2, [r3, #0]

	if (false == readResult)
 8010b68:	183b      	adds	r3, r7, r0
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	4053      	eors	r3, r2
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d001      	beq.n	8010b7a <NV_ReadVariable_U8+0x3e>
	{
		return false;
 8010b76:	2300      	movs	r3, #0
 8010b78:	e015      	b.n	8010ba6 <NV_ReadVariable_U8+0x6a>
	}

	if (false == UTIL_NV_ParamInitCheck_U16(nVar))
 8010b7a:	230c      	movs	r3, #12
 8010b7c:	18fb      	adds	r3, r7, r3
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	0018      	movs	r0, r3
 8010b82:	f002 fdb3 	bl	80136ec <UTIL_NV_ParamInitCheck_U16>
 8010b86:	0003      	movs	r3, r0
 8010b88:	001a      	movs	r2, r3
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	4053      	eors	r3, r2
 8010b8e:	b2db      	uxtb	r3, r3
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d001      	beq.n	8010b98 <NV_ReadVariable_U8+0x5c>
	{
		return false;
 8010b94:	2300      	movs	r3, #0
 8010b96:	e006      	b.n	8010ba6 <NV_ReadVariable_U8+0x6a>
	}

	*p_var = nVar;
 8010b98:	230c      	movs	r3, #12
 8010b9a:	18fb      	adds	r3, r7, r3
 8010b9c:	881b      	ldrh	r3, [r3, #0]
 8010b9e:	b2da      	uxtb	r2, r3
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	701a      	strb	r2, [r3, #0]

	return true;
 8010ba4:	2301      	movs	r3, #1
}
 8010ba6:	0018      	movs	r0, r3
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	b004      	add	sp, #16
 8010bac:	bd80      	pop	{r7, pc}
	...

08010bb0 <NV_WipeVariable>:


void NV_WipeVariable(const uint16_t address)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	0002      	movs	r2, r0
 8010bb8:	1dbb      	adds	r3, r7, #6
 8010bba:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(address, 0xFFFFu);
 8010bbc:	4a05      	ldr	r2, [pc, #20]	; (8010bd4 <NV_WipeVariable+0x24>)
 8010bbe:	1dbb      	adds	r3, r7, #6
 8010bc0:	881b      	ldrh	r3, [r3, #0]
 8010bc2:	0011      	movs	r1, r2
 8010bc4:	0018      	movs	r0, r3
 8010bc6:	f7fb fba5 	bl	800c314 <EE_WriteVariable>
}
 8010bca:	46c0      	nop			; (mov r8, r8)
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	b002      	add	sp, #8
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	46c0      	nop			; (mov r8, r8)
 8010bd4:	0000ffff 	.word	0x0000ffff

08010bd8 <NvReadVariableU8>:


uint16_t NvReadVariableU8(uint16_t VirtAddress, uint8_t *pVar)
{
 8010bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	0002      	movs	r2, r0
 8010be0:	6039      	str	r1, [r7, #0]
 8010be2:	1dbb      	adds	r3, r7, #6
 8010be4:	801a      	strh	r2, [r3, #0]
	uint16_t var = 0;
 8010be6:	250c      	movs	r5, #12
 8010be8:	197b      	adds	r3, r7, r5
 8010bea:	2200      	movs	r2, #0
 8010bec:	801a      	strh	r2, [r3, #0]
	uint16_t succ = EE_ReadVariable(VirtAddress, &var);
 8010bee:	260e      	movs	r6, #14
 8010bf0:	19bc      	adds	r4, r7, r6
 8010bf2:	197a      	adds	r2, r7, r5
 8010bf4:	1dbb      	adds	r3, r7, #6
 8010bf6:	881b      	ldrh	r3, [r3, #0]
 8010bf8:	0011      	movs	r1, r2
 8010bfa:	0018      	movs	r0, r3
 8010bfc:	f7fb fb28 	bl	800c250 <EE_ReadVariable>
 8010c00:	0003      	movs	r3, r0
 8010c02:	8023      	strh	r3, [r4, #0]

	if (succ==0)
 8010c04:	19bb      	adds	r3, r7, r6
 8010c06:	881b      	ldrh	r3, [r3, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d121      	bne.n	8010c50 <NvReadVariableU8+0x78>
	{
		if (NV_IS_VARIABLE_VALID(var))
 8010c0c:	197b      	adds	r3, r7, r5
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	43db      	mvns	r3, r3
 8010c12:	22ff      	movs	r2, #255	; 0xff
 8010c14:	4013      	ands	r3, r2
 8010c16:	197a      	adds	r2, r7, r5
 8010c18:	8812      	ldrh	r2, [r2, #0]
 8010c1a:	0a12      	lsrs	r2, r2, #8
 8010c1c:	b292      	uxth	r2, r2
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d106      	bne.n	8010c30 <NvReadVariableU8+0x58>
		{
			*pVar = var&0xFF;
 8010c22:	197b      	adds	r3, r7, r5
 8010c24:	881b      	ldrh	r3, [r3, #0]
 8010c26:	b2da      	uxtb	r2, r3
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	701a      	strb	r2, [r3, #0]
			return NV_READ_VARIABLE_SUCCESS;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	e012      	b.n	8010c56 <NvReadVariableU8+0x7e>
		}
		else if ((var&0xFF) == (var>>8))
 8010c30:	210c      	movs	r1, #12
 8010c32:	187b      	adds	r3, r7, r1
 8010c34:	881b      	ldrh	r3, [r3, #0]
 8010c36:	001a      	movs	r2, r3
 8010c38:	23ff      	movs	r3, #255	; 0xff
 8010c3a:	4013      	ands	r3, r2
 8010c3c:	187a      	adds	r2, r7, r1
 8010c3e:	8812      	ldrh	r2, [r2, #0]
 8010c40:	0a12      	lsrs	r2, r2, #8
 8010c42:	b292      	uxth	r2, r2
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d101      	bne.n	8010c4c <NvReadVariableU8+0x74>
		{
			return NV_VARIABLE_NON_STORED;
 8010c48:	4b05      	ldr	r3, [pc, #20]	; (8010c60 <NvReadVariableU8+0x88>)
 8010c4a:	e004      	b.n	8010c56 <NvReadVariableU8+0x7e>
		}
		else
			return NV_INVALID_VARIABLE;
 8010c4c:	230f      	movs	r3, #15
 8010c4e:	e002      	b.n	8010c56 <NvReadVariableU8+0x7e>
	}
	else
	{
		return succ;
 8010c50:	230e      	movs	r3, #14
 8010c52:	18fb      	adds	r3, r7, r3
 8010c54:	881b      	ldrh	r3, [r3, #0]
	}
}
 8010c56:	0018      	movs	r0, r3
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	b005      	add	sp, #20
 8010c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c5e:	46c0      	nop			; (mov r8, r8)
 8010c60:	0000ffff 	.word	0x0000ffff

08010c64 <TIM6_IRQHandler>:
 * OSLOOP_TIMER_IRQHandler handles the IRQ generated by the timer. Actually, will
 * just be on update and triggers the osloop.
 */
// ****************************************************************************
void OSLOOP_TIMER_IRQHandler(void)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	af00      	add	r7, sp, #0
	OSLOOP_Service();
 8010c68:	f000 f83e 	bl	8010ce8 <OSLOOP_Service>

	TIMER_OSLOOP->SR &= ~(TIM_IT_UPDATE);
 8010c6c:	4b04      	ldr	r3, [pc, #16]	; (8010c80 <TIM6_IRQHandler+0x1c>)
 8010c6e:	691a      	ldr	r2, [r3, #16]
 8010c70:	4b03      	ldr	r3, [pc, #12]	; (8010c80 <TIM6_IRQHandler+0x1c>)
 8010c72:	2101      	movs	r1, #1
 8010c74:	438a      	bics	r2, r1
 8010c76:	611a      	str	r2, [r3, #16]
}
 8010c78:	46c0      	nop			; (mov r8, r8)
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	46c0      	nop			; (mov r8, r8)
 8010c80:	40001000 	.word	0x40001000

08010c84 <OSLOOP_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void OSLOOP_Init(void)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 8010c8a:	f7f2 fa21 	bl	80030d0 <HAL_GetTick>
 8010c8e:	0003      	movs	r3, r0
 8010c90:	607b      	str	r3, [r7, #4]

	ADC_Init(sysTime);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	0018      	movs	r0, r3
 8010c96:	f7f6 fb79 	bl	800738c <ADC_Init>
	IODRV_Init(sysTime);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	0018      	movs	r0, r3
 8010c9e:	f7fe f821 	bl	800ece4 <IODRV_Init>
	ANALOG_Init(sysTime);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	0018      	movs	r0, r3
 8010ca6:	f7f6 fd0f 	bl	80076c8 <ANALOG_Init>
	I2CDRV_Init(sysTime);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	0018      	movs	r0, r3
 8010cae:	f7fd f9bf 	bl	800e030 <I2CDRV_Init>
	HOSTCOMMS_Init(sysTime);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	0018      	movs	r0, r3
 8010cb6:	f7fc fd3d 	bl	800d734 <HOSTCOMMS_Init>

	LED_Init(sysTime);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	0018      	movs	r0, r3
 8010cbe:	f7fe fc85 	bl	800f5cc <LED_Init>

	/* Start the os timer */
	TIMER_OSLOOP->CR1 |= TIM_CR1_CEN;
 8010cc2:	4b08      	ldr	r3, [pc, #32]	; (8010ce4 <OSLOOP_Init+0x60>)
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	4b07      	ldr	r3, [pc, #28]	; (8010ce4 <OSLOOP_Init+0x60>)
 8010cc8:	2101      	movs	r1, #1
 8010cca:	430a      	orrs	r2, r1
 8010ccc:	601a      	str	r2, [r3, #0]
	TIMER_OSLOOP->DIER |= TIM_IT_UPDATE;
 8010cce:	4b05      	ldr	r3, [pc, #20]	; (8010ce4 <OSLOOP_Init+0x60>)
 8010cd0:	68da      	ldr	r2, [r3, #12]
 8010cd2:	4b04      	ldr	r3, [pc, #16]	; (8010ce4 <OSLOOP_Init+0x60>)
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	430a      	orrs	r2, r1
 8010cd8:	60da      	str	r2, [r3, #12]
}
 8010cda:	46c0      	nop			; (mov r8, r8)
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	b002      	add	sp, #8
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	46c0      	nop			; (mov r8, r8)
 8010ce4:	40001000 	.word	0x40001000

08010ce8 <OSLOOP_Service>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void OSLOOP_Service(void)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 8010cee:	f7f2 f9ef 	bl	80030d0 <HAL_GetTick>
 8010cf2:	0003      	movs	r3, r0
 8010cf4:	607b      	str	r3, [r7, #4]
	const uint32_t timeIn = TIMER_OSLOOP->CNT;
 8010cf6:	4b1a      	ldr	r3, [pc, #104]	; (8010d60 <OSLOOP_Service+0x78>)
 8010cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cfa:	603b      	str	r3, [r7, #0]

	ADC_Service(sysTime);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	0018      	movs	r0, r3
 8010d00:	f7f6 fbc8 	bl	8007494 <ADC_Service>
	IODRV_Service(sysTime);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	0018      	movs	r0, r3
 8010d08:	f7fe f81a 	bl	800ed40 <IODRV_Service>
	ANALOG_Service(sysTime);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	0018      	movs	r0, r3
 8010d10:	f7f6 fcf4 	bl	80076fc <ANALOG_Service>

	I2CDRV_Service(sysTime);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	0018      	movs	r0, r3
 8010d18:	f7fd f9f4 	bl	800e104 <I2CDRV_Service>
	HOSTCOMMS_Service(sysTime);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	0018      	movs	r0, r3
 8010d20:	f7fc fdfa 	bl	800d918 <HOSTCOMMS_Service>

	LED_Service(sysTime);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	0018      	movs	r0, r3
 8010d28:	f7fe fcf4 	bl	800f714 <LED_Service>

	m_osloopTimeTrack[m_osloopTimeTrackIdx] = (TIMER_OSLOOP->CNT - timeIn);
 8010d2c:	4b0c      	ldr	r3, [pc, #48]	; (8010d60 <OSLOOP_Service+0x78>)
 8010d2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010d30:	4b0c      	ldr	r3, [pc, #48]	; (8010d64 <OSLOOP_Service+0x7c>)
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	1ac9      	subs	r1, r1, r3
 8010d38:	4b0b      	ldr	r3, [pc, #44]	; (8010d68 <OSLOOP_Service+0x80>)
 8010d3a:	0092      	lsls	r2, r2, #2
 8010d3c:	50d1      	str	r1, [r2, r3]
	m_osloopTimeTrackIdx++;
 8010d3e:	4b09      	ldr	r3, [pc, #36]	; (8010d64 <OSLOOP_Service+0x7c>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	1c5a      	adds	r2, r3, #1
 8010d44:	4b07      	ldr	r3, [pc, #28]	; (8010d64 <OSLOOP_Service+0x7c>)
 8010d46:	601a      	str	r2, [r3, #0]

	if (OSLOOP_LOOP_TRACKER_COUNT == m_osloopTimeTrackIdx)
 8010d48:	4b06      	ldr	r3, [pc, #24]	; (8010d64 <OSLOOP_Service+0x7c>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b10      	cmp	r3, #16
 8010d4e:	d102      	bne.n	8010d56 <OSLOOP_Service+0x6e>
	{
		m_osloopTimeTrackIdx = 0u;
 8010d50:	4b04      	ldr	r3, [pc, #16]	; (8010d64 <OSLOOP_Service+0x7c>)
 8010d52:	2200      	movs	r2, #0
 8010d54:	601a      	str	r2, [r3, #0]
	}
}
 8010d56:	46c0      	nop			; (mov r8, r8)
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	b002      	add	sp, #8
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	46c0      	nop			; (mov r8, r8)
 8010d60:	40001000 	.word	0x40001000
 8010d64:	2000155c 	.word	0x2000155c
 8010d68:	2000151c 	.word	0x2000151c

08010d6c <OSLOOP_Shutdown>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void OSLOOP_Shutdown(void)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	af00      	add	r7, sp, #0
	// Stop the interrupt occuring
	TIMER_OSLOOP->DIER &= ~(TIM_IT_UPDATE);
 8010d70:	4b09      	ldr	r3, [pc, #36]	; (8010d98 <OSLOOP_Shutdown+0x2c>)
 8010d72:	68da      	ldr	r2, [r3, #12]
 8010d74:	4b08      	ldr	r3, [pc, #32]	; (8010d98 <OSLOOP_Shutdown+0x2c>)
 8010d76:	2101      	movs	r1, #1
 8010d78:	438a      	bics	r2, r1
 8010d7a:	60da      	str	r2, [r3, #12]

	// Shutdown all modules for low power
	ADC_Shutdown();
 8010d7c:	f7f6 fb7e 	bl	800747c <ADC_Shutdown>
	IODRV_Shutdown();
 8010d80:	f7fd ffd8 	bl	800ed34 <IODRV_Shutdown>
	ANALOG_Shutdown();
 8010d84:	f7f6 fcb4 	bl	80076f0 <ANALOG_Shutdown>
	I2CDRV_Shutdown();
 8010d88:	f7fd f9ae 	bl	800e0e8 <I2CDRV_Shutdown>

	LED_Shutdown();
 8010d8c:	f7fe fc80 	bl	800f690 <LED_Shutdown>
}
 8010d90:	46c0      	nop			; (mov r8, r8)
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	46c0      	nop			; (mov r8, r8)
 8010d98:	40001000 	.word	0x40001000

08010d9c <OSLOOP_Restart>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void OSLOOP_Restart(void)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b082      	sub	sp, #8
 8010da0:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 8010da2:	f7f2 f995 	bl	80030d0 <HAL_GetTick>
 8010da6:	0003      	movs	r3, r0
 8010da8:	607b      	str	r3, [r7, #4]

	ADC_Init(sysTime);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	0018      	movs	r0, r3
 8010dae:	f7f6 faed 	bl	800738c <ADC_Init>
	IODRV_Init(sysTime);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	0018      	movs	r0, r3
 8010db6:	f7fd ff95 	bl	800ece4 <IODRV_Init>
	ANALOG_Init(sysTime);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	0018      	movs	r0, r3
 8010dbe:	f7f6 fc83 	bl	80076c8 <ANALOG_Init>
	I2CDRV_Init(sysTime);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	0018      	movs	r0, r3
 8010dc6:	f7fd f933 	bl	800e030 <I2CDRV_Init>

	LED_Init(sysTime);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	0018      	movs	r0, r3
 8010dce:	f7fe fbfd 	bl	800f5cc <LED_Init>

	/* Start the os timer */
	TIMER_OSLOOP->CR1 |= TIM_CR1_CEN;
 8010dd2:	4b08      	ldr	r3, [pc, #32]	; (8010df4 <OSLOOP_Restart+0x58>)
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	4b07      	ldr	r3, [pc, #28]	; (8010df4 <OSLOOP_Restart+0x58>)
 8010dd8:	2101      	movs	r1, #1
 8010dda:	430a      	orrs	r2, r1
 8010ddc:	601a      	str	r2, [r3, #0]
	TIMER_OSLOOP->DIER |= TIM_IT_UPDATE;
 8010dde:	4b05      	ldr	r3, [pc, #20]	; (8010df4 <OSLOOP_Restart+0x58>)
 8010de0:	68da      	ldr	r2, [r3, #12]
 8010de2:	4b04      	ldr	r3, [pc, #16]	; (8010df4 <OSLOOP_Restart+0x58>)
 8010de4:	2101      	movs	r1, #1
 8010de6:	430a      	orrs	r2, r1
 8010de8:	60da      	str	r2, [r3, #12]
}
 8010dea:	46c0      	nop			; (mov r8, r8)
 8010dec:	46bd      	mov	sp, r7
 8010dee:	b002      	add	sp, #8
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	46c0      	nop			; (mov r8, r8)
 8010df4:	40001000 	.word	0x40001000

08010df8 <DelayUs>:
__STATIC_INLINE void DelayUs(__IO uint32_t micros) {
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock * 16 / 1000000) / 6;
 8010e00:	4b0d      	ldr	r3, [pc, #52]	; (8010e38 <DelayUs+0x40>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	011b      	lsls	r3, r3, #4
 8010e06:	490d      	ldr	r1, [pc, #52]	; (8010e3c <DelayUs+0x44>)
 8010e08:	0018      	movs	r0, r3
 8010e0a:	f7ef f97b 	bl	8000104 <__udivsi3>
 8010e0e:	0003      	movs	r3, r0
 8010e10:	001a      	movs	r2, r3
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	4353      	muls	r3, r2
 8010e16:	607b      	str	r3, [r7, #4]
	micros >>= 4;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	091b      	lsrs	r3, r3, #4
 8010e1c:	607b      	str	r3, [r7, #4]
	volatile uint32_t dcnt = micros;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	60fb      	str	r3, [r7, #12]
	while (dcnt--);
 8010e22:	46c0      	nop			; (mov r8, r8)
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	1e5a      	subs	r2, r3, #1
 8010e28:	60fa      	str	r2, [r7, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d1fa      	bne.n	8010e24 <DelayUs+0x2c>
}
 8010e2e:	46c0      	nop			; (mov r8, r8)
 8010e30:	46c0      	nop			; (mov r8, r8)
 8010e32:	46bd      	mov	sp, r7
 8010e34:	b004      	add	sp, #16
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	20000000 	.word	0x20000000
 8010e3c:	005b8d80 	.word	0x005b8d80

08010e40 <BUTTON_PowerOnEventCb>:
 * @param	p_button		pointer to button that initiated the event
 * @retval	none
 */
// ****************************************************************************
void BUTTON_PowerOnEventCb(const Button_T * const p_button)
{
 8010e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e42:	b087      	sub	sp, #28
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
	const uint32_t sysTime = HAL_GetTick();
 8010e48:	f7f2 f942 	bl	80030d0 <HAL_GetTick>
 8010e4c:	0003      	movs	r3, r0
 8010e4e:	617b      	str	r3, [r7, #20]

	const bool boostConverterEnabled = POWERSOURCE_IsBoostConverterEnabled();
 8010e50:	2513      	movs	r5, #19
 8010e52:	197c      	adds	r4, r7, r5
 8010e54:	f001 f88a 	bl	8011f6c <POWERSOURCE_IsBoostConverterEnabled>
 8010e58:	0003      	movs	r3, r0
 8010e5a:	7023      	strb	r3, [r4, #0]
	const PowerSourceStatus_T power5vIoStatus = POWERSOURCE_Get5VRailStatus();
 8010e5c:	2612      	movs	r6, #18
 8010e5e:	19bc      	adds	r4, r7, r6
 8010e60:	f001 f8a2 	bl	8011fa8 <POWERSOURCE_Get5VRailStatus>
 8010e64:	0003      	movs	r3, r0
 8010e66:	7023      	strb	r3, [r4, #0]
	const uint32_t lastHostCommandAgeMs = HOSTCOMMS_GetLastCommandAgeMs(sysTime);
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	0018      	movs	r0, r3
 8010e6c:	f7fc fed8 	bl	800dc20 <HOSTCOMMS_GetLastCommandAgeMs>
 8010e70:	0003      	movs	r3, r0
 8010e72:	60fb      	str	r3, [r7, #12]

	// TODO - Check brackets are in the right places
	if ( ( (false == boostConverterEnabled) && (POW_SOURCE_NOT_PRESENT == power5vIoStatus) ) ||
 8010e74:	197b      	adds	r3, r7, r5
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	2201      	movs	r2, #1
 8010e7a:	4053      	eors	r3, r2
 8010e7c:	b2db      	uxtb	r3, r3
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d003      	beq.n	8010e8a <BUTTON_PowerOnEventCb+0x4a>
 8010e82:	19bb      	adds	r3, r7, r6
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00a      	beq.n	8010ea0 <BUTTON_PowerOnEventCb+0x60>
			( MS_TIMEREF_TIMEOUT(m_lastWakeupTimer, sysTime, 12000u) && (lastHostCommandAgeMs > 11000) )
 8010e8a:	4b12      	ldr	r3, [pc, #72]	; (8010ed4 <BUTTON_PowerOnEventCb+0x94>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	697a      	ldr	r2, [r7, #20]
 8010e90:	1ad3      	subs	r3, r2, r3
	if ( ( (false == boostConverterEnabled) && (POW_SOURCE_NOT_PRESENT == power5vIoStatus) ) ||
 8010e92:	4a11      	ldr	r2, [pc, #68]	; (8010ed8 <BUTTON_PowerOnEventCb+0x98>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d912      	bls.n	8010ebe <BUTTON_PowerOnEventCb+0x7e>
			( MS_TIMEREF_TIMEOUT(m_lastWakeupTimer, sysTime, 12000u) && (lastHostCommandAgeMs > 11000) )
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	4a10      	ldr	r2, [pc, #64]	; (8010edc <BUTTON_PowerOnEventCb+0x9c>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d90e      	bls.n	8010ebe <BUTTON_PowerOnEventCb+0x7e>
			)
	{

		if (true == POWERMAN_ResetHost())
 8010ea0:	f000 fcdc 	bl	801185c <POWERMAN_ResetHost>
 8010ea4:	1e03      	subs	r3, r0, #0
 8010ea6:	d00a      	beq.n	8010ebe <BUTTON_PowerOnEventCb+0x7e>
		{
			m_wakeUpOnCharge = WAKEUP_ONCHARGE_DISABLED_VAL;
 8010ea8:	4b0d      	ldr	r3, [pc, #52]	; (8010ee0 <BUTTON_PowerOnEventCb+0xa0>)
 8010eaa:	2201      	movs	r2, #1
 8010eac:	4252      	negs	r2, r2
 8010eae:	801a      	strh	r2, [r3, #0]
			RTC_ClearWakeEvent();
 8010eb0:	f001 fd2c 	bl	801290c <RTC_ClearWakeEvent>
			TASKMAN_ClearIOWakeEvent();
 8010eb4:	f002 fb26 	bl	8013504 <TASKMAN_ClearIOWakeEvent>
			m_delayedPowerOffTimeMs = 0u;
 8010eb8:	4b0a      	ldr	r3, [pc, #40]	; (8010ee4 <BUTTON_PowerOnEventCb+0xa4>)
 8010eba:	2200      	movs	r2, #0
 8010ebc:	601a      	str	r2, [r3, #0]
		}
	}

	BUTTON_ClearEvent(p_button->index);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2221      	movs	r2, #33	; 0x21
 8010ec2:	5c9b      	ldrb	r3, [r3, r2]
 8010ec4:	0018      	movs	r0, r3
 8010ec6:	f7f8 f82b 	bl	8008f20 <BUTTON_ClearEvent>

}
 8010eca:	46c0      	nop			; (mov r8, r8)
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	b007      	add	sp, #28
 8010ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ed2:	46c0      	nop			; (mov r8, r8)
 8010ed4:	20000f3c 	.word	0x20000f3c
 8010ed8:	00002edf 	.word	0x00002edf
 8010edc:	00002af8 	.word	0x00002af8
 8010ee0:	20000f1e 	.word	0x20000f1e
 8010ee4:	20000f28 	.word	0x20000f28

08010ee8 <BUTTON_PowerOffEventCb>:
 * @param	p_button		pointer to button that initiated the event
 * @retval	none
 */
// ****************************************************************************
void BUTTON_PowerOffEventCb(const Button_T * const p_button)
{
 8010ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
	const bool boostConverterEnabled = POWERSOURCE_IsBoostConverterEnabled();
 8010ef0:	250f      	movs	r5, #15
 8010ef2:	197c      	adds	r4, r7, r5
 8010ef4:	f001 f83a 	bl	8011f6c <POWERSOURCE_IsBoostConverterEnabled>
 8010ef8:	0003      	movs	r3, r0
 8010efa:	7023      	strb	r3, [r4, #0]
	const PowerSourceStatus_T power5vIoStatus = POWERSOURCE_Get5VRailStatus();
 8010efc:	260e      	movs	r6, #14
 8010efe:	19bc      	adds	r4, r7, r6
 8010f00:	f001 f852 	bl	8011fa8 <POWERSOURCE_Get5VRailStatus>
 8010f04:	0003      	movs	r3, r0
 8010f06:	7023      	strb	r3, [r4, #0]

	if ( (true == boostConverterEnabled) && (POW_SOURCE_NOT_PRESENT == power5vIoStatus) )
 8010f08:	197b      	adds	r3, r7, r5
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d009      	beq.n	8010f24 <BUTTON_PowerOffEventCb+0x3c>
 8010f10:	19bb      	adds	r3, r7, r6
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d105      	bne.n	8010f24 <BUTTON_PowerOffEventCb+0x3c>
	{
		POWERSOURCE_Set5vBoostEnable(false);
 8010f18:	2000      	movs	r0, #0
 8010f1a:	f000 ff3f 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>
		m_powerButtonPressedEvent = true;
 8010f1e:	4b06      	ldr	r3, [pc, #24]	; (8010f38 <BUTTON_PowerOffEventCb+0x50>)
 8010f20:	2201      	movs	r2, #1
 8010f22:	701a      	strb	r2, [r3, #0]
	}

	BUTTON_ClearEvent(p_button->index); // remove event
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2221      	movs	r2, #33	; 0x21
 8010f28:	5c9b      	ldrb	r3, [r3, r2]
 8010f2a:	0018      	movs	r0, r3
 8010f2c:	f7f7 fff8 	bl	8008f20 <BUTTON_ClearEvent>
}
 8010f30:	46c0      	nop			; (mov r8, r8)
 8010f32:	46bd      	mov	sp, r7
 8010f34:	b005      	add	sp, #20
 8010f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f38:	20000f39 	.word	0x20000f39

08010f3c <BUTTON_PowerResetEventCb>:
 * @param	p_button		pointer to button that initiated the event
 * @retval	none
 */
// ****************************************************************************
void BUTTON_PowerResetEventCb(const Button_T * const p_button)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
	if (true == POWERMAN_ResetHost())
 8010f44:	f000 fc8a 	bl	801185c <POWERMAN_ResetHost>
 8010f48:	1e03      	subs	r3, r0, #0
 8010f4a:	d00a      	beq.n	8010f62 <BUTTON_PowerResetEventCb+0x26>
	{
		m_wakeUpOnCharge = WAKEUP_ONCHARGE_DISABLED_VAL;
 8010f4c:	4b0a      	ldr	r3, [pc, #40]	; (8010f78 <BUTTON_PowerResetEventCb+0x3c>)
 8010f4e:	2201      	movs	r2, #1
 8010f50:	4252      	negs	r2, r2
 8010f52:	801a      	strh	r2, [r3, #0]

		RTC_ClearWakeEvent();
 8010f54:	f001 fcda 	bl	801290c <RTC_ClearWakeEvent>
		TASKMAN_ClearIOWakeEvent();
 8010f58:	f002 fad4 	bl	8013504 <TASKMAN_ClearIOWakeEvent>

		m_delayedPowerOffTimeMs = 0u;
 8010f5c:	4b07      	ldr	r3, [pc, #28]	; (8010f7c <BUTTON_PowerResetEventCb+0x40>)
 8010f5e:	2200      	movs	r2, #0
 8010f60:	601a      	str	r2, [r3, #0]
	}

	BUTTON_ClearEvent(p_button->index);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2221      	movs	r2, #33	; 0x21
 8010f66:	5c9b      	ldrb	r3, [r3, r2]
 8010f68:	0018      	movs	r0, r3
 8010f6a:	f7f7 ffd9 	bl	8008f20 <BUTTON_ClearEvent>
}
 8010f6e:	46c0      	nop			; (mov r8, r8)
 8010f70:	46bd      	mov	sp, r7
 8010f72:	b002      	add	sp, #8
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	46c0      	nop			; (mov r8, r8)
 8010f78:	20000f1e 	.word	0x20000f1e
 8010f7c:	20000f28 	.word	0x20000f28

08010f80 <POWERMAN_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_Init(void)
{
 8010f80:	b590      	push	{r4, r7, lr}
 8010f82:	b083      	sub	sp, #12
 8010f84:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 8010f86:	f7f2 f8a3 	bl	80030d0 <HAL_GetTick>
 8010f8a:	0003      	movs	r3, r0
 8010f8c:	607b      	str	r3, [r7, #4]
	const bool noBatteryTurnOn = CHARGER_GetNoBatteryTurnOnEnable();
 8010f8e:	1cfc      	adds	r4, r7, #3
 8010f90:	f7f8 fdee 	bl	8009b70 <CHARGER_GetNoBatteryTurnOnEnable>
 8010f94:	0003      	movs	r3, r0
 8010f96:	7023      	strb	r3, [r4, #0]
	const bool chargerHasInput = CHARGER_IsChargeSourceAvailable();
 8010f98:	1cbc      	adds	r4, r7, #2
 8010f9a:	f7f8 fdf9 	bl	8009b90 <CHARGER_IsChargeSourceAvailable>
 8010f9e:	0003      	movs	r3, r0
 8010fa0:	7023      	strb	r3, [r4, #0]
	uint8_t tempU8;
	bool nvOk;

	// If not programmed will default to not installed
	NV_ReadVariable_U8(NV_RUN_PIN_CONFIG, (uint8_t*)&m_runPinInstalled);
 8010fa2:	4b4f      	ldr	r3, [pc, #316]	; (80110e0 <POWERMAN_Init+0x160>)
 8010fa4:	0019      	movs	r1, r3
 8010fa6:	2057      	movs	r0, #87	; 0x57
 8010fa8:	f7ff fdc8 	bl	8010b3c <NV_ReadVariable_U8>

	if (EXECUTION_STATE_NORMAL != executionState)
 8010fac:	4b4d      	ldr	r3, [pc, #308]	; (80110e4 <POWERMAN_Init+0x164>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4a4d      	ldr	r2, [pc, #308]	; (80110e8 <POWERMAN_Init+0x168>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d100      	bne.n	8010fb8 <POWERMAN_Init+0x38>
 8010fb6:	e08b      	b.n	80110d0 <POWERMAN_Init+0x150>
	{
		// on mcu power up
		m_wakeUpOnCharge = WAKEUP_ONCHARGE_DISABLED_VAL;
 8010fb8:	4b4c      	ldr	r3, [pc, #304]	; (80110ec <POWERMAN_Init+0x16c>)
 8010fba:	2201      	movs	r2, #1
 8010fbc:	4252      	negs	r2, r2
 8010fbe:	801a      	strh	r2, [r3, #0]
		m_wakeupOnChargeConfig = 0x7Fu;
 8010fc0:	4b4b      	ldr	r3, [pc, #300]	; (80110f0 <POWERMAN_Init+0x170>)
 8010fc2:	227f      	movs	r2, #127	; 0x7f
 8010fc4:	701a      	strb	r2, [r3, #0]

		if (NV_ReadVariable_U8(WAKEUPONCHARGE_CONFIG_NV_ADDR, (uint8_t*)&m_wakeupOnChargeConfig))
 8010fc6:	4b4a      	ldr	r3, [pc, #296]	; (80110f0 <POWERMAN_Init+0x170>)
 8010fc8:	0019      	movs	r1, r3
 8010fca:	2031      	movs	r0, #49	; 0x31
 8010fcc:	f7ff fdb6 	bl	8010b3c <NV_ReadVariable_U8>
 8010fd0:	1e03      	subs	r3, r0, #0
 8010fd2:	d00b      	beq.n	8010fec <POWERMAN_Init+0x6c>
		{
			if (m_wakeupOnChargeConfig <= 100u)
 8010fd4:	4b46      	ldr	r3, [pc, #280]	; (80110f0 <POWERMAN_Init+0x170>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	2b64      	cmp	r3, #100	; 0x64
 8010fda:	d807      	bhi.n	8010fec <POWERMAN_Init+0x6c>
			{
				/* Set last bit in config value to show EE value is valid. */
				m_wakeupOnChargeConfig |= 0x80u;
 8010fdc:	4b44      	ldr	r3, [pc, #272]	; (80110f0 <POWERMAN_Init+0x170>)
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	2280      	movs	r2, #128	; 0x80
 8010fe2:	4252      	negs	r2, r2
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	b2da      	uxtb	r2, r3
 8010fe8:	4b41      	ldr	r3, [pc, #260]	; (80110f0 <POWERMAN_Init+0x170>)
 8010fea:	701a      	strb	r2, [r3, #0]
			}
		}

		if (true == chargerHasInput)
 8010fec:	1cbb      	adds	r3, r7, #2
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d004      	beq.n	8010ffe <POWERMAN_Init+0x7e>
		{	/* Charger is connected */
			m_delayedTurnOnFlag = noBatteryTurnOn;
 8010ff4:	4b3f      	ldr	r3, [pc, #252]	; (80110f4 <POWERMAN_Init+0x174>)
 8010ff6:	1cfa      	adds	r2, r7, #3
 8010ff8:	7812      	ldrb	r2, [r2, #0]
 8010ffa:	701a      	strb	r2, [r3, #0]
 8010ffc:	e01d      	b.n	801103a <POWERMAN_Init+0xba>
		}
		else
		{	/* Charger is not connected */
			m_delayedTurnOnFlag = false;
 8010ffe:	4b3d      	ldr	r3, [pc, #244]	; (80110f4 <POWERMAN_Init+0x174>)
 8011000:	2200      	movs	r2, #0
 8011002:	701a      	strb	r2, [r3, #0]

			if (WAKEUPONCHARGE_NV_INITIALISED)
 8011004:	4b3a      	ldr	r3, [pc, #232]	; (80110f0 <POWERMAN_Init+0x170>)
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	b25b      	sxtb	r3, r3
 801100a:	2b00      	cmp	r3, #0
 801100c:	da15      	bge.n	801103a <POWERMAN_Init+0xba>
			{
				m_wakeUpOnCharge = (m_wakeupOnChargeConfig & 0x7Fu) <= 100u ?
 801100e:	4b38      	ldr	r3, [pc, #224]	; (80110f0 <POWERMAN_Init+0x170>)
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	001a      	movs	r2, r3
 8011014:	237f      	movs	r3, #127	; 0x7f
 8011016:	4013      	ands	r3, r2
 8011018:	2b64      	cmp	r3, #100	; 0x64
 801101a:	d80b      	bhi.n	8011034 <POWERMAN_Init+0xb4>
 801101c:	4b34      	ldr	r3, [pc, #208]	; (80110f0 <POWERMAN_Init+0x170>)
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	b29b      	uxth	r3, r3
 8011022:	227f      	movs	r2, #127	; 0x7f
 8011024:	4013      	ands	r3, r2
 8011026:	b29b      	uxth	r3, r3
 8011028:	1c1a      	adds	r2, r3, #0
 801102a:	0092      	lsls	r2, r2, #2
 801102c:	18d3      	adds	r3, r2, r3
 801102e:	18db      	adds	r3, r3, r3
 8011030:	b29a      	uxth	r2, r3
 8011032:	e000      	b.n	8011036 <POWERMAN_Init+0xb6>
 8011034:	4a30      	ldr	r2, [pc, #192]	; (80110f8 <POWERMAN_Init+0x178>)
 8011036:	4b2d      	ldr	r3, [pc, #180]	; (80110ec <POWERMAN_Init+0x16c>)
 8011038:	801a      	strh	r2, [r3, #0]
										(m_wakeupOnChargeConfig & 0x7Fu) * 10u :
										WAKEUP_ONCHARGE_DISABLED_VAL;
			}
		}

		nvOk = true;
 801103a:	1c7b      	adds	r3, r7, #1
 801103c:	2201      	movs	r2, #1
 801103e:	701a      	strb	r2, [r3, #0]

		nvOk &= NV_ReadVariable_U8(WATCHDOG_CONFIGL_NV_ADDR, &tempU8);
 8011040:	003b      	movs	r3, r7
 8011042:	0019      	movs	r1, r3
 8011044:	2023      	movs	r0, #35	; 0x23
 8011046:	f7ff fd79 	bl	8010b3c <NV_ReadVariable_U8>
 801104a:	0003      	movs	r3, r0
 801104c:	001a      	movs	r2, r3
 801104e:	1c7b      	adds	r3, r7, #1
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	401a      	ands	r2, r3
 8011054:	1c7b      	adds	r3, r7, #1
 8011056:	1e51      	subs	r1, r2, #1
 8011058:	418a      	sbcs	r2, r1
 801105a:	701a      	strb	r2, [r3, #0]
		m_watchdogConfig = tempU8;
 801105c:	003b      	movs	r3, r7
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	b29a      	uxth	r2, r3
 8011062:	4b26      	ldr	r3, [pc, #152]	; (80110fc <POWERMAN_Init+0x17c>)
 8011064:	801a      	strh	r2, [r3, #0]

		nvOk &= NV_ReadVariable_U8(WATCHDOG_CONFIGH_NV_ADDR, &tempU8);
 8011066:	003b      	movs	r3, r7
 8011068:	0019      	movs	r1, r3
 801106a:	2071      	movs	r0, #113	; 0x71
 801106c:	f7ff fd66 	bl	8010b3c <NV_ReadVariable_U8>
 8011070:	0003      	movs	r3, r0
 8011072:	001a      	movs	r2, r3
 8011074:	1c7b      	adds	r3, r7, #1
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	401a      	ands	r2, r3
 801107a:	1c7b      	adds	r3, r7, #1
 801107c:	1e51      	subs	r1, r2, #1
 801107e:	418a      	sbcs	r2, r1
 8011080:	701a      	strb	r2, [r3, #0]

		if (true == nvOk)
 8011082:	1c7b      	adds	r3, r7, #1
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00c      	beq.n	80110a4 <POWERMAN_Init+0x124>
		{
			m_watchdogConfig |= (uint16_t)tempU8 << 8u;
 801108a:	003b      	movs	r3, r7
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	021b      	lsls	r3, r3, #8
 8011090:	b21a      	sxth	r2, r3
 8011092:	4b1a      	ldr	r3, [pc, #104]	; (80110fc <POWERMAN_Init+0x17c>)
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	b21b      	sxth	r3, r3
 8011098:	4313      	orrs	r3, r2
 801109a:	b21b      	sxth	r3, r3
 801109c:	b29a      	uxth	r2, r3
 801109e:	4b17      	ldr	r3, [pc, #92]	; (80110fc <POWERMAN_Init+0x17c>)
 80110a0:	801a      	strh	r2, [r3, #0]
 80110a2:	e002      	b.n	80110aa <POWERMAN_Init+0x12a>
		}
		else
		{
			m_watchdogConfig = 0u;
 80110a4:	4b15      	ldr	r3, [pc, #84]	; (80110fc <POWERMAN_Init+0x17c>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	801a      	strh	r2, [r3, #0]
		}


		m_delayedPowerOffTimeMs = 0u;
 80110aa:	4b15      	ldr	r3, [pc, #84]	; (8011100 <POWERMAN_Init+0x180>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	601a      	str	r2, [r3, #0]
		m_watchdogExpirePeriod = 0u;
 80110b0:	4b14      	ldr	r3, [pc, #80]	; (8011104 <POWERMAN_Init+0x184>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	601a      	str	r2, [r3, #0]
		m_watchdogTimer = 0u;
 80110b6:	4b14      	ldr	r3, [pc, #80]	; (8011108 <POWERMAN_Init+0x188>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	601a      	str	r2, [r3, #0]
		m_watchdogExpired = false;
 80110bc:	4b13      	ldr	r3, [pc, #76]	; (801110c <POWERMAN_Init+0x18c>)
 80110be:	2200      	movs	r2, #0
 80110c0:	701a      	strb	r2, [r3, #0]

		RTC_ClearWakeEvent();
 80110c2:	f001 fc23 	bl	801290c <RTC_ClearWakeEvent>
		TASKMAN_ClearIOWakeEvent();
 80110c6:	f002 fa1d 	bl	8013504 <TASKMAN_ClearIOWakeEvent>
		m_powerButtonPressedEvent = false;
 80110ca:	4b11      	ldr	r3, [pc, #68]	; (8011110 <POWERMAN_Init+0x190>)
 80110cc:	2200      	movs	r2, #0
 80110ce:	701a      	strb	r2, [r3, #0]
	}

	MS_TIMEREF_INIT(m_powerMngmtTaskMsCounter, sysTime);
 80110d0:	4b10      	ldr	r3, [pc, #64]	; (8011114 <POWERMAN_Init+0x194>)
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	601a      	str	r2, [r3, #0]
}
 80110d6:	46c0      	nop			; (mov r8, r8)
 80110d8:	46bd      	mov	sp, r7
 80110da:	b003      	add	sp, #12
 80110dc:	bd90      	pop	{r4, r7, pc}
 80110de:	46c0      	nop			; (mov r8, r8)
 80110e0:	20001564 	.word	0x20001564
 80110e4:	2000185c 	.word	0x2000185c
 80110e8:	aaaaaaaa 	.word	0xaaaaaaaa
 80110ec:	20000f1e 	.word	0x20000f1e
 80110f0:	20000f1c 	.word	0x20000f1c
 80110f4:	20000f20 	.word	0x20000f20
 80110f8:	0000ffff 	.word	0x0000ffff
 80110fc:	20000f2c 	.word	0x20000f2c
 8011100:	20000f28 	.word	0x20000f28
 8011104:	20000f30 	.word	0x20000f30
 8011108:	20000f34 	.word	0x20000f34
 801110c:	20000f38 	.word	0x20000f38
 8011110:	20000f39 	.word	0x20000f39
 8011114:	20001560 	.word	0x20001560

08011118 <POWERMAN_Task>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_Task(void)
{
 8011118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801111a:	b089      	sub	sp, #36	; 0x24
 801111c:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 801111e:	f7f1 ffd7 	bl	80030d0 <HAL_GetTick>
 8011122:	0003      	movs	r3, r0
 8011124:	61fb      	str	r3, [r7, #28]
	const bool chargerHasInput = CHARGER_IsChargeSourceAvailable();
 8011126:	251b      	movs	r5, #27
 8011128:	197c      	adds	r4, r7, r5
 801112a:	f7f8 fd31 	bl	8009b90 <CHARGER_IsChargeSourceAvailable>
 801112e:	0003      	movs	r3, r0
 8011130:	7023      	strb	r3, [r4, #0]
	const bool chargerHasBattery = (CHARGER_BATTERY_NOT_PRESENT != CHARGER_GetBatteryStatus());
 8011132:	f7f8 fd4b 	bl	8009bcc <CHARGER_GetBatteryStatus>
 8011136:	0003      	movs	r3, r0
 8011138:	001a      	movs	r2, r3
 801113a:	261a      	movs	r6, #26
 801113c:	19bb      	adds	r3, r7, r6
 801113e:	3a02      	subs	r2, #2
 8011140:	1e51      	subs	r1, r2, #1
 8011142:	418a      	sbcs	r2, r1
 8011144:	701a      	strb	r2, [r3, #0]
	const uint16_t batteryRsoc = FUELGAUGE_GetSocPt1();
 8011146:	2318      	movs	r3, #24
 8011148:	18fc      	adds	r4, r7, r3
 801114a:	f7fb fd35 	bl	800cbb8 <FUELGAUGE_GetSocPt1>
 801114e:	0003      	movs	r3, r0
 8011150:	8023      	strh	r3, [r4, #0]
	const POWERSOURCE_RPi5VStatus_t pow5vInDetStatus = POWERSOURCE_GetRPi5VPowerStatus();
 8011152:	2117      	movs	r1, #23
 8011154:	187c      	adds	r4, r7, r1
 8011156:	f000 ff31 	bl	8011fbc <POWERSOURCE_GetRPi5VPowerStatus>
 801115a:	0003      	movs	r3, r0
 801115c:	7023      	strb	r3, [r4, #0]
	const uint32_t lastHostCommandAgeMs = HOSTCOMMS_GetLastCommandAgeMs(sysTime);
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	0018      	movs	r0, r3
 8011162:	f7fc fd5d 	bl	800dc20 <HOSTCOMMS_GetLastCommandAgeMs>
 8011166:	0003      	movs	r3, r0
 8011168:	613b      	str	r3, [r7, #16]
	const bool rtcWakeEvent = RTC_GetWakeEvent();
 801116a:	210f      	movs	r1, #15
 801116c:	187c      	adds	r4, r7, r1
 801116e:	f001 fbc3 	bl	80128f8 <RTC_GetWakeEvent>
 8011172:	0003      	movs	r3, r0
 8011174:	7023      	strb	r3, [r4, #0]
	const bool ioWakeEvent = TASKMAN_GetIOWakeEvent();
 8011176:	210e      	movs	r1, #14
 8011178:	187c      	adds	r4, r7, r1
 801117a:	f002 f9b9 	bl	80134f0 <TASKMAN_GetIOWakeEvent>
 801117e:	0003      	movs	r3, r0
 8011180:	7023      	strb	r3, [r4, #0]
	const IODRV_Pin_t * p_gpio26 = IODRV_GetPinInfo(IODRV_PIN_IO1);
 8011182:	2000      	movs	r0, #0
 8011184:	f7fe f866 	bl	800f254 <IODRV_GetPinInfo>
 8011188:	0003      	movs	r3, r0
 801118a:	60bb      	str	r3, [r7, #8]

	bool isWakeupOnCharge;

	if (MS_TIMEREF_TIMEOUT(m_powerMngmtTaskMsCounter, sysTime, POWERMANAGE_TASK_PERIOD_MS))
 801118c:	4b77      	ldr	r3, [pc, #476]	; (801136c <POWERMAN_Task+0x254>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	69fa      	ldr	r2, [r7, #28]
 8011192:	1ad2      	subs	r2, r2, r3
 8011194:	23fa      	movs	r3, #250	; 0xfa
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	429a      	cmp	r2, r3
 801119a:	d200      	bcs.n	801119e <POWERMAN_Task+0x86>
 801119c:	e07e      	b.n	801129c <POWERMAN_Task+0x184>
	{
		MS_TIMEREF_INIT(m_powerMngmtTaskMsCounter, sysTime);
 801119e:	4b73      	ldr	r3, [pc, #460]	; (801136c <POWERMAN_Task+0x254>)
 80111a0:	69fa      	ldr	r2, [r7, #28]
 80111a2:	601a      	str	r2, [r3, #0]

		isWakeupOnCharge = (batteryRsoc >= m_wakeUpOnCharge) && (true == chargerHasInput) && (true == chargerHasBattery);
 80111a4:	4b72      	ldr	r3, [pc, #456]	; (8011370 <POWERMAN_Task+0x258>)
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	2218      	movs	r2, #24
 80111aa:	18ba      	adds	r2, r7, r2
 80111ac:	8812      	ldrh	r2, [r2, #0]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d309      	bcc.n	80111c6 <POWERMAN_Task+0xae>
 80111b2:	197b      	adds	r3, r7, r5
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d005      	beq.n	80111c6 <POWERMAN_Task+0xae>
 80111ba:	19bb      	adds	r3, r7, r6
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d001      	beq.n	80111c6 <POWERMAN_Task+0xae>
 80111c2:	2201      	movs	r2, #1
 80111c4:	e000      	b.n	80111c8 <POWERMAN_Task+0xb0>
 80111c6:	2200      	movs	r2, #0
 80111c8:	1dfb      	adds	r3, r7, #7
 80111ca:	701a      	strb	r2, [r3, #0]
 80111cc:	781a      	ldrb	r2, [r3, #0]
 80111ce:	2101      	movs	r1, #1
 80111d0:	400a      	ands	r2, r1
 80111d2:	701a      	strb	r2, [r3, #0]

		if ( ( isWakeupOnCharge || rtcWakeEvent || ioWakeEvent ) // there is wake-up trigger
 80111d4:	1dfb      	adds	r3, r7, #7
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d109      	bne.n	80111f0 <POWERMAN_Task+0xd8>
 80111dc:	230f      	movs	r3, #15
 80111de:	18fb      	adds	r3, r7, r3
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d104      	bne.n	80111f0 <POWERMAN_Task+0xd8>
 80111e6:	230e      	movs	r3, #14
 80111e8:	18fb      	adds	r3, r7, r3
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d033      	beq.n	8011258 <POWERMAN_Task+0x140>
				&& 	(0u == m_delayedPowerOffTimeMs) // deny wake-up during shutdown
 80111f0:	4b60      	ldr	r3, [pc, #384]	; (8011374 <POWERMAN_Task+0x25c>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d12f      	bne.n	8011258 <POWERMAN_Task+0x140>
				&& 	(false == m_delayedTurnOnFlag)
 80111f8:	4b5f      	ldr	r3, [pc, #380]	; (8011378 <POWERMAN_Task+0x260>)
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	2201      	movs	r2, #1
 80111fe:	4053      	eors	r3, r2
 8011200:	b2db      	uxtb	r3, r3
 8011202:	2b00      	cmp	r3, #0
 8011204:	d028      	beq.n	8011258 <POWERMAN_Task+0x140>
				&& 	( (lastHostCommandAgeMs >= 15000u) && MS_TIMEREF_TIMEOUT(m_lastWakeupTimer, sysTime, 30000u) )
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	4a5c      	ldr	r2, [pc, #368]	; (801137c <POWERMAN_Task+0x264>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d924      	bls.n	8011258 <POWERMAN_Task+0x140>
 801120e:	4b5c      	ldr	r3, [pc, #368]	; (8011380 <POWERMAN_Task+0x268>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	69fa      	ldr	r2, [r7, #28]
 8011214:	1ad3      	subs	r3, r2, r3
 8011216:	4a5b      	ldr	r2, [pc, #364]	; (8011384 <POWERMAN_Task+0x26c>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d91d      	bls.n	8011258 <POWERMAN_Task+0x140>
						//|| (!POW_5V_BOOST_EN_STATUS() && power5vIoStatus == POW_SOURCE_NOT_PRESENT) //  Host is non powered
		   	   	)
		{
			if (true == POWERMAN_ResetHost())
 801121c:	f000 fb1e 	bl	801185c <POWERMAN_ResetHost>
 8011220:	1e03      	subs	r3, r0, #0
 8011222:	d019      	beq.n	8011258 <POWERMAN_Task+0x140>
			{
				m_wakeUpOnCharge = WAKEUP_ONCHARGE_DISABLED_VAL;
 8011224:	4b52      	ldr	r3, [pc, #328]	; (8011370 <POWERMAN_Task+0x258>)
 8011226:	2201      	movs	r2, #1
 8011228:	4252      	negs	r2, r2
 801122a:	801a      	strh	r2, [r3, #0]
				RTC_ClearWakeEvent();
 801122c:	f001 fb6e 	bl	801290c <RTC_ClearWakeEvent>
				TASKMAN_ClearIOWakeEvent();
 8011230:	f002 f968 	bl	8013504 <TASKMAN_ClearIOWakeEvent>
				m_delayedPowerOffTimeMs = 0u;
 8011234:	4b4f      	ldr	r3, [pc, #316]	; (8011374 <POWERMAN_Task+0x25c>)
 8011236:	2200      	movs	r2, #0
 8011238:	601a      	str	r2, [r3, #0]

				if (0u != m_watchdogConfig)
 801123a:	4b53      	ldr	r3, [pc, #332]	; (8011388 <POWERMAN_Task+0x270>)
 801123c:	881b      	ldrh	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d00a      	beq.n	8011258 <POWERMAN_Task+0x140>
				{
					// activate watchdog after wake-up if watchdog config has restore flag
					m_watchdogExpirePeriod = (uint32_t)m_watchdogConfig * 60000u;
 8011242:	4b51      	ldr	r3, [pc, #324]	; (8011388 <POWERMAN_Task+0x270>)
 8011244:	881b      	ldrh	r3, [r3, #0]
 8011246:	001a      	movs	r2, r3
 8011248:	4b50      	ldr	r3, [pc, #320]	; (801138c <POWERMAN_Task+0x274>)
 801124a:	435a      	muls	r2, r3
 801124c:	4b50      	ldr	r3, [pc, #320]	; (8011390 <POWERMAN_Task+0x278>)
 801124e:	601a      	str	r2, [r3, #0]
					m_watchdogTimer = m_watchdogExpirePeriod;
 8011250:	4b4f      	ldr	r3, [pc, #316]	; (8011390 <POWERMAN_Task+0x278>)
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	4b4f      	ldr	r3, [pc, #316]	; (8011394 <POWERMAN_Task+0x27c>)
 8011256:	601a      	str	r2, [r3, #0]
				}
			}
		}


		if ( (0u !=  m_watchdogExpirePeriod) && (lastHostCommandAgeMs > m_watchdogTimer) )
 8011258:	4b4d      	ldr	r3, [pc, #308]	; (8011390 <POWERMAN_Task+0x278>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d01d      	beq.n	801129c <POWERMAN_Task+0x184>
 8011260:	4b4c      	ldr	r3, [pc, #304]	; (8011394 <POWERMAN_Task+0x27c>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	693a      	ldr	r2, [r7, #16]
 8011266:	429a      	cmp	r2, r3
 8011268:	d918      	bls.n	801129c <POWERMAN_Task+0x184>
		{
			if (true == POWERMAN_ResetHost())
 801126a:	f000 faf7 	bl	801185c <POWERMAN_ResetHost>
 801126e:	1e03      	subs	r3, r0, #0
 8011270:	d00d      	beq.n	801128e <POWERMAN_Task+0x176>
			{
				m_wakeUpOnCharge = WAKEUP_ONCHARGE_DISABLED_VAL;
 8011272:	4b3f      	ldr	r3, [pc, #252]	; (8011370 <POWERMAN_Task+0x258>)
 8011274:	2201      	movs	r2, #1
 8011276:	4252      	negs	r2, r2
 8011278:	801a      	strh	r2, [r3, #0]
				m_watchdogExpired = true;
 801127a:	4b47      	ldr	r3, [pc, #284]	; (8011398 <POWERMAN_Task+0x280>)
 801127c:	2201      	movs	r2, #1
 801127e:	701a      	strb	r2, [r3, #0]
				RTC_ClearWakeEvent();
 8011280:	f001 fb44 	bl	801290c <RTC_ClearWakeEvent>
				TASKMAN_ClearIOWakeEvent();
 8011284:	f002 f93e 	bl	8013504 <TASKMAN_ClearIOWakeEvent>
				m_delayedPowerOffTimeMs = 0u;
 8011288:	4b3a      	ldr	r3, [pc, #232]	; (8011374 <POWERMAN_Task+0x25c>)
 801128a:	2200      	movs	r2, #0
 801128c:	601a      	str	r2, [r3, #0]
			}

			m_watchdogTimer += m_watchdogExpirePeriod;
 801128e:	4b41      	ldr	r3, [pc, #260]	; (8011394 <POWERMAN_Task+0x27c>)
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	4b3f      	ldr	r3, [pc, #252]	; (8011390 <POWERMAN_Task+0x278>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	18d2      	adds	r2, r2, r3
 8011298:	4b3e      	ldr	r3, [pc, #248]	; (8011394 <POWERMAN_Task+0x27c>)
 801129a:	601a      	str	r2, [r3, #0]
		}
	}

	if ( m_delayedTurnOnFlag && (MS_TIMEREF_TIMEOUT(m_delayedTurnOnTimer, sysTime, 100u)) )
 801129c:	4b36      	ldr	r3, [pc, #216]	; (8011378 <POWERMAN_Task+0x260>)
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d010      	beq.n	80112c6 <POWERMAN_Task+0x1ae>
 80112a4:	4b3d      	ldr	r3, [pc, #244]	; (801139c <POWERMAN_Task+0x284>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	69fa      	ldr	r2, [r7, #28]
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	2b63      	cmp	r3, #99	; 0x63
 80112ae:	d90a      	bls.n	80112c6 <POWERMAN_Task+0x1ae>
	{
		POWERSOURCE_Set5vBoostEnable(true);
 80112b0:	2001      	movs	r0, #1
 80112b2:	f000 fd73 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>
		m_delayedTurnOnFlag = false;
 80112b6:	4b30      	ldr	r3, [pc, #192]	; (8011378 <POWERMAN_Task+0x260>)
 80112b8:	2200      	movs	r2, #0
 80112ba:	701a      	strb	r2, [r3, #0]

		MS_TIME_COUNTER_INIT(m_lastWakeupTimer);
 80112bc:	f7f1 ff08 	bl	80030d0 <HAL_GetTick>
 80112c0:	0002      	movs	r2, r0
 80112c2:	4b2f      	ldr	r3, [pc, #188]	; (8011380 <POWERMAN_Task+0x268>)
 80112c4:	601a      	str	r2, [r3, #0]
	}

	// Time is set in the future, so need to work in int32 or it'll roll over
	if (0u != m_delayedPowerOffTimeMs)
 80112c6:	4b2b      	ldr	r3, [pc, #172]	; (8011374 <POWERMAN_Task+0x25c>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d022      	beq.n	8011314 <POWERMAN_Task+0x1fc>
	{
		if ( ((int32_t)MS_TIMEREF_DIFF(m_delayedPowerOffTimeMs, sysTime) > 0) ||
 80112ce:	4b29      	ldr	r3, [pc, #164]	; (8011374 <POWERMAN_Task+0x25c>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	69fa      	ldr	r2, [r7, #28]
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	dc0b      	bgt.n	80112f2 <POWERMAN_Task+0x1da>
				((p_gpio26->value == 0u) && (MS_TIMEREF_TIMEOUT(p_gpio26->lastDigitalChangeTime, sysTime, 2000u)))
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	881b      	ldrh	r3, [r3, #0]
		if ( ((int32_t)MS_TIMEREF_DIFF(m_delayedPowerOffTimeMs, sysTime) > 0) ||
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d118      	bne.n	8011314 <POWERMAN_Task+0x1fc>
				((p_gpio26->value == 0u) && (MS_TIMEREF_TIMEOUT(p_gpio26->lastDigitalChangeTime, sysTime, 2000u)))
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	69fa      	ldr	r2, [r7, #28]
 80112e8:	1ad2      	subs	r2, r2, r3
 80112ea:	23fa      	movs	r3, #250	; 0xfa
 80112ec:	00db      	lsls	r3, r3, #3
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d310      	bcc.n	8011314 <POWERMAN_Task+0x1fc>
				)
		{
			if (RPI5V_DETECTION_STATUS_POWERED != pow5vInDetStatus)
 80112f2:	2317      	movs	r3, #23
 80112f4:	18fb      	adds	r3, r7, r3
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	2b02      	cmp	r3, #2
 80112fa:	d002      	beq.n	8011302 <POWERMAN_Task+0x1ea>
			{
				POWERSOURCE_Set5vBoostEnable(false);
 80112fc:	2000      	movs	r0, #0
 80112fe:	f000 fd4d 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>
			}

			// Disable timer
			m_delayedPowerOffTimeMs = 0u;
 8011302:	4b1c      	ldr	r3, [pc, #112]	; (8011374 <POWERMAN_Task+0x25c>)
 8011304:	2200      	movs	r2, #0
 8011306:	601a      	str	r2, [r3, #0]

			/* Turn off led as it keeps flashing! */
			LED_SetRGB(LED_LED2_IDX, 0u, 0u, 0u);
 8011308:	2300      	movs	r3, #0
 801130a:	2200      	movs	r2, #0
 801130c:	2100      	movs	r1, #0
 801130e:	2001      	movs	r0, #1
 8011310:	f7fe fa18 	bl	800f744 <LED_SetRGB>
		}
	}

	if ( (false == chargerHasInput) &&
 8011314:	231b      	movs	r3, #27
 8011316:	18fb      	adds	r3, r7, r3
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	2201      	movs	r2, #1
 801131c:	4053      	eors	r3, r2
 801131e:	b2db      	uxtb	r3, r3
 8011320:	2b00      	cmp	r3, #0
 8011322:	d01f      	beq.n	8011364 <POWERMAN_Task+0x24c>
			(WAKEUP_ONCHARGE_DISABLED_VAL == m_wakeUpOnCharge) &&
 8011324:	4b12      	ldr	r3, [pc, #72]	; (8011370 <POWERMAN_Task+0x258>)
 8011326:	881b      	ldrh	r3, [r3, #0]
	if ( (false == chargerHasInput) &&
 8011328:	4a1d      	ldr	r2, [pc, #116]	; (80113a0 <POWERMAN_Task+0x288>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d11a      	bne.n	8011364 <POWERMAN_Task+0x24c>
			(WAKEUPONCHARGE_NV_INITIALISED)
 801132e:	4b1d      	ldr	r3, [pc, #116]	; (80113a4 <POWERMAN_Task+0x28c>)
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	b25b      	sxtb	r3, r3
			(WAKEUP_ONCHARGE_DISABLED_VAL == m_wakeUpOnCharge) &&
 8011334:	2b00      	cmp	r3, #0
 8011336:	da15      	bge.n	8011364 <POWERMAN_Task+0x24c>
			)
	{
		// setup wake-up on charge if charging stopped, power source removed
		m_wakeUpOnCharge = (m_wakeupOnChargeConfig & 0x7F) <= 100u ? (m_wakeupOnChargeConfig & 0x7Fu) * 10u :
 8011338:	4b1a      	ldr	r3, [pc, #104]	; (80113a4 <POWERMAN_Task+0x28c>)
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	001a      	movs	r2, r3
 801133e:	237f      	movs	r3, #127	; 0x7f
 8011340:	4013      	ands	r3, r2
 8011342:	2b64      	cmp	r3, #100	; 0x64
 8011344:	d80b      	bhi.n	801135e <POWERMAN_Task+0x246>
 8011346:	4b17      	ldr	r3, [pc, #92]	; (80113a4 <POWERMAN_Task+0x28c>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	b29b      	uxth	r3, r3
 801134c:	227f      	movs	r2, #127	; 0x7f
 801134e:	4013      	ands	r3, r2
 8011350:	b29b      	uxth	r3, r3
 8011352:	1c1a      	adds	r2, r3, #0
 8011354:	0092      	lsls	r2, r2, #2
 8011356:	18d3      	adds	r3, r2, r3
 8011358:	18db      	adds	r3, r3, r3
 801135a:	b29a      	uxth	r2, r3
 801135c:	e000      	b.n	8011360 <POWERMAN_Task+0x248>
 801135e:	4a10      	ldr	r2, [pc, #64]	; (80113a0 <POWERMAN_Task+0x288>)
 8011360:	4b03      	ldr	r3, [pc, #12]	; (8011370 <POWERMAN_Task+0x258>)
 8011362:	801a      	strh	r2, [r3, #0]
																	WAKEUP_ONCHARGE_DISABLED_VAL;
	}
}
 8011364:	46c0      	nop			; (mov r8, r8)
 8011366:	46bd      	mov	sp, r7
 8011368:	b009      	add	sp, #36	; 0x24
 801136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801136c:	20001560 	.word	0x20001560
 8011370:	20000f1e 	.word	0x20000f1e
 8011374:	20000f28 	.word	0x20000f28
 8011378:	20000f20 	.word	0x20000f20
 801137c:	00003a97 	.word	0x00003a97
 8011380:	20000f3c 	.word	0x20000f3c
 8011384:	0000752f 	.word	0x0000752f
 8011388:	20000f2c 	.word	0x20000f2c
 801138c:	0000ea60 	.word	0x0000ea60
 8011390:	20000f30 	.word	0x20000f30
 8011394:	20000f34 	.word	0x20000f34
 8011398:	20000f38 	.word	0x20000f38
 801139c:	20000f24 	.word	0x20000f24
 80113a0:	0000ffff 	.word	0x0000ffff
 80113a4:	20000f1c 	.word	0x20000f1c

080113a8 <POWERMAN_SchedulePowerOff>:
 * @param	delayCode		seconds to wait before turning off the boost converter
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_SchedulePowerOff(const uint8_t delayCode)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	0002      	movs	r2, r0
 80113b0:	1dfb      	adds	r3, r7, #7
 80113b2:	701a      	strb	r2, [r3, #0]
	if (delayCode <= 250u)
 80113b4:	1dfb      	adds	r3, r7, #7
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	2bfa      	cmp	r3, #250	; 0xfa
 80113ba:	d815      	bhi.n	80113e8 <POWERMAN_SchedulePowerOff+0x40>
	{
		MS_TIMEREF_INIT(m_delayedPowerOffTimeMs, HAL_GetTick() + (delayCode * 1000u));
 80113bc:	f7f1 fe88 	bl	80030d0 <HAL_GetTick>
 80113c0:	0001      	movs	r1, r0
 80113c2:	1dfb      	adds	r3, r7, #7
 80113c4:	781a      	ldrb	r2, [r3, #0]
 80113c6:	0013      	movs	r3, r2
 80113c8:	015b      	lsls	r3, r3, #5
 80113ca:	1a9b      	subs	r3, r3, r2
 80113cc:	009b      	lsls	r3, r3, #2
 80113ce:	189b      	adds	r3, r3, r2
 80113d0:	00db      	lsls	r3, r3, #3
 80113d2:	18ca      	adds	r2, r1, r3
 80113d4:	4b0a      	ldr	r3, [pc, #40]	; (8011400 <POWERMAN_SchedulePowerOff+0x58>)
 80113d6:	601a      	str	r2, [r3, #0]

		if (m_delayedPowerOffTimeMs == 0u)
 80113d8:	4b09      	ldr	r3, [pc, #36]	; (8011400 <POWERMAN_SchedulePowerOff+0x58>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d10a      	bne.n	80113f6 <POWERMAN_SchedulePowerOff+0x4e>
		{
			m_delayedPowerOffTimeMs = 1u; // 0 is used to indicate non active counter, so avoid that value.
 80113e0:	4b07      	ldr	r3, [pc, #28]	; (8011400 <POWERMAN_SchedulePowerOff+0x58>)
 80113e2:	2201      	movs	r2, #1
 80113e4:	601a      	str	r2, [r3, #0]
	}
	else if (delayCode == 0xFFu)
	{
		m_delayedPowerOffTimeMs = 0u; // deactivate scheduled power off
	}
}
 80113e6:	e006      	b.n	80113f6 <POWERMAN_SchedulePowerOff+0x4e>
	else if (delayCode == 0xFFu)
 80113e8:	1dfb      	adds	r3, r7, #7
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	2bff      	cmp	r3, #255	; 0xff
 80113ee:	d102      	bne.n	80113f6 <POWERMAN_SchedulePowerOff+0x4e>
		m_delayedPowerOffTimeMs = 0u; // deactivate scheduled power off
 80113f0:	4b03      	ldr	r3, [pc, #12]	; (8011400 <POWERMAN_SchedulePowerOff+0x58>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	601a      	str	r2, [r3, #0]
}
 80113f6:	46c0      	nop			; (mov r8, r8)
 80113f8:	46bd      	mov	sp, r7
 80113fa:	b002      	add	sp, #8
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	46c0      	nop			; (mov r8, r8)
 8011400:	20000f28 	.word	0x20000f28

08011404 <POWERMAN_GetPowerOffTime>:
 * @param	none
 * @retval	uint8_t		time in seconds before the boost converter is disabled.
 */
// ****************************************************************************
uint8_t POWERMAN_GetPowerOffTime(void)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 801140a:	f7f1 fe61 	bl	80030d0 <HAL_GetTick>
 801140e:	0003      	movs	r3, r0
 8011410:	607b      	str	r3, [r7, #4]
	const int32_t timeLeft = -MS_TIMEREF_DIFF(m_delayedPowerOffTimeMs, sysTime);
 8011412:	4b10      	ldr	r3, [pc, #64]	; (8011454 <POWERMAN_GetPowerOffTime+0x50>)
 8011414:	681a      	ldr	r2, [r3, #0]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	603b      	str	r3, [r7, #0]

	if (0u != m_delayedPowerOffTimeMs)
 801141c:	4b0d      	ldr	r3, [pc, #52]	; (8011454 <POWERMAN_GetPowerOffTime+0x50>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d011      	beq.n	8011448 <POWERMAN_GetPowerOffTime+0x44>
	{
		if ( (timeLeft > 0) && (timeLeft < (UINT8_MAX * 1000u)) )
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	2b00      	cmp	r3, #0
 8011428:	dd0c      	ble.n	8011444 <POWERMAN_GetPowerOffTime+0x40>
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	4a0a      	ldr	r2, [pc, #40]	; (8011458 <POWERMAN_GetPowerOffTime+0x54>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d808      	bhi.n	8011444 <POWERMAN_GetPowerOffTime+0x40>
		{
			return (uint8_t)(timeLeft / 1000u);
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	22fa      	movs	r2, #250	; 0xfa
 8011436:	0091      	lsls	r1, r2, #2
 8011438:	0018      	movs	r0, r3
 801143a:	f7ee fe63 	bl	8000104 <__udivsi3>
 801143e:	0003      	movs	r3, r0
 8011440:	b2db      	uxtb	r3, r3
 8011442:	e002      	b.n	801144a <POWERMAN_GetPowerOffTime+0x46>
		}
		else
		{
			return 0u;
 8011444:	2300      	movs	r3, #0
 8011446:	e000      	b.n	801144a <POWERMAN_GetPowerOffTime+0x46>
		}
	}
	else
	{
		return 0xFFu;
 8011448:	23ff      	movs	r3, #255	; 0xff
	}
}
 801144a:	0018      	movs	r0, r3
 801144c:	46bd      	mov	sp, r7
 801144e:	b002      	add	sp, #8
 8011450:	bd80      	pop	{r7, pc}
 8011452:	46c0      	nop			; (mov r8, r8)
 8011454:	20000f28 	.word	0x20000f28
 8011458:	0003e417 	.word	0x0003e417

0801145c <POWERMAN_GetPowerButtonPressedStatus>:
 * @retval	bool		false = power off event has not been initiated
 * 						true = power off event has been initiated.
 */
// ****************************************************************************
bool POWERMAN_GetPowerButtonPressedStatus(void)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	af00      	add	r7, sp, #0
	return m_powerButtonPressedEvent;
 8011460:	4b02      	ldr	r3, [pc, #8]	; (801146c <POWERMAN_GetPowerButtonPressedStatus+0x10>)
 8011462:	781b      	ldrb	r3, [r3, #0]
}
 8011464:	0018      	movs	r0, r3
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	46c0      	nop			; (mov r8, r8)
 801146c:	20000f39 	.word	0x20000f39

08011470 <POWERMAN_GetWatchdogExpired>:
 * @retval	bool		false = watchdog timer has not expired
 * 						true = watchdog timer has expired
 */
// ****************************************************************************
bool POWERMAN_GetWatchdogExpired(void)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	af00      	add	r7, sp, #0
	return m_watchdogExpired;
 8011474:	4b02      	ldr	r3, [pc, #8]	; (8011480 <POWERMAN_GetWatchdogExpired+0x10>)
 8011476:	781b      	ldrb	r3, [r3, #0]
}
 8011478:	0018      	movs	r0, r3
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	46c0      	nop			; (mov r8, r8)
 8011480:	20000f38 	.word	0x20000f38

08011484 <POWERMAN_ClearWatchdog>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_ClearWatchdog(void)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	af00      	add	r7, sp, #0
	m_watchdogExpired = false;
 8011488:	4b02      	ldr	r3, [pc, #8]	; (8011494 <POWERMAN_ClearWatchdog+0x10>)
 801148a:	2200      	movs	r2, #0
 801148c:	701a      	strb	r2, [r3, #0]
}
 801148e:	46c0      	nop			; (mov r8, r8)
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	20000f38 	.word	0x20000f38

08011498 <POWERMAN_SetRunPinConfigData>:
 * @param	len			length of config data
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_SetRunPinConfigData(const uint8_t * const p_data, const uint8_t len)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	000a      	movs	r2, r1
 80114a2:	1cfb      	adds	r3, r7, #3
 80114a4:	701a      	strb	r2, [r3, #0]
	if (p_data[0u] > 1u)
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d815      	bhi.n	80114da <POWERMAN_SetRunPinConfigData+0x42>
	{
		return;
	}

	NV_WriteVariable_U8(NV_RUN_PIN_CONFIG, p_data[0u]);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	0019      	movs	r1, r3
 80114b4:	2057      	movs	r0, #87	; 0x57
 80114b6:	f7ff fb1d 	bl	8010af4 <NV_WriteVariable_U8>

	if (false == NV_ReadVariable_U8(NV_RUN_PIN_CONFIG, (uint8_t*)&m_runPinInstalled))
 80114ba:	4b0a      	ldr	r3, [pc, #40]	; (80114e4 <POWERMAN_SetRunPinConfigData+0x4c>)
 80114bc:	0019      	movs	r1, r3
 80114be:	2057      	movs	r0, #87	; 0x57
 80114c0:	f7ff fb3c 	bl	8010b3c <NV_ReadVariable_U8>
 80114c4:	0003      	movs	r3, r0
 80114c6:	001a      	movs	r2, r3
 80114c8:	2301      	movs	r3, #1
 80114ca:	4053      	eors	r3, r2
 80114cc:	b2db      	uxtb	r3, r3
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d004      	beq.n	80114dc <POWERMAN_SetRunPinConfigData+0x44>
	{
		m_runPinInstalled = RUN_PIN_NOT_INSTALLED;
 80114d2:	4b04      	ldr	r3, [pc, #16]	; (80114e4 <POWERMAN_SetRunPinConfigData+0x4c>)
 80114d4:	2200      	movs	r2, #0
 80114d6:	701a      	strb	r2, [r3, #0]
 80114d8:	e000      	b.n	80114dc <POWERMAN_SetRunPinConfigData+0x44>
		return;
 80114da:	46c0      	nop			; (mov r8, r8)
	}
}
 80114dc:	46bd      	mov	sp, r7
 80114de:	b002      	add	sp, #8
 80114e0:	bd80      	pop	{r7, pc}
 80114e2:	46c0      	nop			; (mov r8, r8)
 80114e4:	20001564 	.word	0x20001564

080114e8 <POWERMAN_GetRunPinConfigData>:
 * @param	p_len		length of data written to the buffer
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_GetRunPinConfigData(uint8_t * const p_data, uint16_t * const p_len)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6039      	str	r1, [r7, #0]
	p_data[0u] = m_runPinInstalled;
 80114f2:	4b05      	ldr	r3, [pc, #20]	; (8011508 <POWERMAN_GetRunPinConfigData+0x20>)
 80114f4:	781a      	ldrb	r2, [r3, #0]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	701a      	strb	r2, [r3, #0]
	*p_len = 1u;
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	2201      	movs	r2, #1
 80114fe:	801a      	strh	r2, [r3, #0]
}
 8011500:	46c0      	nop			; (mov r8, r8)
 8011502:	46bd      	mov	sp, r7
 8011504:	b002      	add	sp, #8
 8011506:	bd80      	pop	{r7, pc}
 8011508:	20001564 	.word	0x20001564

0801150c <POWERMAN_SetWatchdogConfigData>:
 * @param	len			length of config data
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_SetWatchdogConfigData(const uint8_t * const p_data, const uint16_t len)
{
 801150c:	b5b0      	push	{r4, r5, r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	000a      	movs	r2, r1
 8011516:	1cbb      	adds	r3, r7, #2
 8011518:	801a      	strh	r2, [r3, #0]
	uint32_t cfg;
	uint8_t tempU8;
	bool nvOk;

	if (len < 2u)
 801151a:	1cbb      	adds	r3, r7, #2
 801151c:	881b      	ldrh	r3, [r3, #0]
 801151e:	2b01      	cmp	r3, #1
 8011520:	d800      	bhi.n	8011524 <POWERMAN_SetWatchdogConfigData+0x18>
 8011522:	e075      	b.n	8011610 <POWERMAN_SetWatchdogConfigData+0x104>
	{
		return;
	}

	cfg = UTIL_FromBytes_U16(&p_data[0u]) & 0x3FFFu;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	0018      	movs	r0, r3
 8011528:	f002 f968 	bl	80137fc <UTIL_FromBytes_U16>
 801152c:	0003      	movs	r3, r0
 801152e:	049b      	lsls	r3, r3, #18
 8011530:	0c9b      	lsrs	r3, r3, #18
 8011532:	60fb      	str	r3, [r7, #12]

	// Drop resolution if time is >= 16384 seconds
	if (0u != (p_data[1u] & 0x40u))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	3301      	adds	r3, #1
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	001a      	movs	r2, r3
 801153c:	2340      	movs	r3, #64	; 0x40
 801153e:	4013      	ands	r3, r2
 8011540:	d007      	beq.n	8011552 <POWERMAN_SetWatchdogConfigData+0x46>
	{
		cfg >>= 2u;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	089b      	lsrs	r3, r3, #2
 8011546:	60fb      	str	r3, [r7, #12]
		cfg |= 0x4000u;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2280      	movs	r2, #128	; 0x80
 801154c:	01d2      	lsls	r2, r2, #7
 801154e:	4313      	orrs	r3, r2
 8011550:	60fb      	str	r3, [r7, #12]
	}

	if (p_data[1u] & 0x80)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	3301      	adds	r3, #1
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	b25b      	sxtb	r3, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	da4e      	bge.n	80115fc <POWERMAN_SetWatchdogConfigData+0xf0>
	{
		m_watchdogConfig = cfg;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	b29a      	uxth	r2, r3
 8011562:	4b2d      	ldr	r3, [pc, #180]	; (8011618 <POWERMAN_SetWatchdogConfigData+0x10c>)
 8011564:	801a      	strh	r2, [r3, #0]
		NV_WriteVariable_U8(WATCHDOG_CONFIGL_NV_ADDR, (uint8_t)(m_watchdogConfig & 0xFFu));
 8011566:	4b2c      	ldr	r3, [pc, #176]	; (8011618 <POWERMAN_SetWatchdogConfigData+0x10c>)
 8011568:	881b      	ldrh	r3, [r3, #0]
 801156a:	b2db      	uxtb	r3, r3
 801156c:	0019      	movs	r1, r3
 801156e:	2023      	movs	r0, #35	; 0x23
 8011570:	f7ff fac0 	bl	8010af4 <NV_WriteVariable_U8>
		NV_WriteVariable_U8(WATCHDOG_CONFIGH_NV_ADDR, (uint8_t)((m_watchdogConfig >> 8u) & 0xFFu));
 8011574:	4b28      	ldr	r3, [pc, #160]	; (8011618 <POWERMAN_SetWatchdogConfigData+0x10c>)
 8011576:	881b      	ldrh	r3, [r3, #0]
 8011578:	0a1b      	lsrs	r3, r3, #8
 801157a:	b29b      	uxth	r3, r3
 801157c:	b2db      	uxtb	r3, r3
 801157e:	0019      	movs	r1, r3
 8011580:	2071      	movs	r0, #113	; 0x71
 8011582:	f7ff fab7 	bl	8010af4 <NV_WriteVariable_U8>

		nvOk = true;
 8011586:	240b      	movs	r4, #11
 8011588:	193b      	adds	r3, r7, r4
 801158a:	2201      	movs	r2, #1
 801158c:	701a      	strb	r2, [r3, #0]

		nvOk &= NV_ReadVariable_U8(WATCHDOG_CONFIGL_NV_ADDR, &tempU8);
 801158e:	250a      	movs	r5, #10
 8011590:	197b      	adds	r3, r7, r5
 8011592:	0019      	movs	r1, r3
 8011594:	2023      	movs	r0, #35	; 0x23
 8011596:	f7ff fad1 	bl	8010b3c <NV_ReadVariable_U8>
 801159a:	0003      	movs	r3, r0
 801159c:	001a      	movs	r2, r3
 801159e:	193b      	adds	r3, r7, r4
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	401a      	ands	r2, r3
 80115a4:	193b      	adds	r3, r7, r4
 80115a6:	1e51      	subs	r1, r2, #1
 80115a8:	418a      	sbcs	r2, r1
 80115aa:	701a      	strb	r2, [r3, #0]
		m_watchdogConfig = tempU8;
 80115ac:	197b      	adds	r3, r7, r5
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	b29a      	uxth	r2, r3
 80115b2:	4b19      	ldr	r3, [pc, #100]	; (8011618 <POWERMAN_SetWatchdogConfigData+0x10c>)
 80115b4:	801a      	strh	r2, [r3, #0]

		nvOk &= NV_ReadVariable_U8(WATCHDOG_CONFIGH_NV_ADDR, &tempU8);
 80115b6:	197b      	adds	r3, r7, r5
 80115b8:	0019      	movs	r1, r3
 80115ba:	2071      	movs	r0, #113	; 0x71
 80115bc:	f7ff fabe 	bl	8010b3c <NV_ReadVariable_U8>
 80115c0:	0003      	movs	r3, r0
 80115c2:	001a      	movs	r2, r3
 80115c4:	193b      	adds	r3, r7, r4
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	401a      	ands	r2, r3
 80115ca:	193b      	adds	r3, r7, r4
 80115cc:	1e51      	subs	r1, r2, #1
 80115ce:	418a      	sbcs	r2, r1
 80115d0:	701a      	strb	r2, [r3, #0]

		if (false == nvOk)
 80115d2:	193b      	adds	r3, r7, r4
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	2201      	movs	r2, #1
 80115d8:	4053      	eors	r3, r2
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d002      	beq.n	80115e6 <POWERMAN_SetWatchdogConfigData+0xda>
		{
			m_watchdogConfig = 0u;
 80115e0:	4b0d      	ldr	r3, [pc, #52]	; (8011618 <POWERMAN_SetWatchdogConfigData+0x10c>)
 80115e2:	2200      	movs	r2, #0
 80115e4:	801a      	strh	r2, [r3, #0]
		}

		if (0u == m_watchdogConfig)
 80115e6:	4b0c      	ldr	r3, [pc, #48]	; (8011618 <POWERMAN_SetWatchdogConfigData+0x10c>)
 80115e8:	881b      	ldrh	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d111      	bne.n	8011612 <POWERMAN_SetWatchdogConfigData+0x106>
		{
			m_watchdogExpirePeriod = 0u;
 80115ee:	4b0b      	ldr	r3, [pc, #44]	; (801161c <POWERMAN_SetWatchdogConfigData+0x110>)
 80115f0:	2200      	movs	r2, #0
 80115f2:	601a      	str	r2, [r3, #0]
			m_watchdogTimer = 0u;
 80115f4:	4b0a      	ldr	r3, [pc, #40]	; (8011620 <POWERMAN_SetWatchdogConfigData+0x114>)
 80115f6:	2200      	movs	r2, #0
 80115f8:	601a      	str	r2, [r3, #0]
 80115fa:	e00a      	b.n	8011612 <POWERMAN_SetWatchdogConfigData+0x106>
		}
	}
	else
	{
		m_watchdogExpirePeriod = cfg * 60000u;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	4a09      	ldr	r2, [pc, #36]	; (8011624 <POWERMAN_SetWatchdogConfigData+0x118>)
 8011600:	435a      	muls	r2, r3
 8011602:	4b06      	ldr	r3, [pc, #24]	; (801161c <POWERMAN_SetWatchdogConfigData+0x110>)
 8011604:	601a      	str	r2, [r3, #0]
		m_watchdogTimer = m_watchdogExpirePeriod;
 8011606:	4b05      	ldr	r3, [pc, #20]	; (801161c <POWERMAN_SetWatchdogConfigData+0x110>)
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	4b05      	ldr	r3, [pc, #20]	; (8011620 <POWERMAN_SetWatchdogConfigData+0x114>)
 801160c:	601a      	str	r2, [r3, #0]
 801160e:	e000      	b.n	8011612 <POWERMAN_SetWatchdogConfigData+0x106>
		return;
 8011610:	46c0      	nop			; (mov r8, r8)
	}

}
 8011612:	46bd      	mov	sp, r7
 8011614:	b004      	add	sp, #16
 8011616:	bdb0      	pop	{r4, r5, r7, pc}
 8011618:	20000f2c 	.word	0x20000f2c
 801161c:	20000f30 	.word	0x20000f30
 8011620:	20000f34 	.word	0x20000f34
 8011624:	0000ea60 	.word	0x0000ea60

08011628 <POWERMAN_GetWatchdogConfigData>:
 * @param	p_len		length of data written to the buffer
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_GetWatchdogConfigData(uint8_t * const p_data, uint16_t * const p_len)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	6039      	str	r1, [r7, #0]
	uint16_t d;

	if (0u != m_watchdogConfig)
 8011632:	4b24      	ldr	r3, [pc, #144]	; (80116c4 <POWERMAN_GetWatchdogConfigData+0x9c>)
 8011634:	881b      	ldrh	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d01b      	beq.n	8011672 <POWERMAN_GetWatchdogConfigData+0x4a>
	{
		d = m_watchdogConfig;
 801163a:	210e      	movs	r1, #14
 801163c:	187b      	adds	r3, r7, r1
 801163e:	4a21      	ldr	r2, [pc, #132]	; (80116c4 <POWERMAN_GetWatchdogConfigData+0x9c>)
 8011640:	8812      	ldrh	r2, [r2, #0]
 8011642:	801a      	strh	r2, [r3, #0]

		if (0u != (d & 0x4000u))
 8011644:	187b      	adds	r3, r7, r1
 8011646:	881a      	ldrh	r2, [r3, #0]
 8011648:	2380      	movs	r3, #128	; 0x80
 801164a:	01db      	lsls	r3, r3, #7
 801164c:	4013      	ands	r3, r2
 801164e:	d008      	beq.n	8011662 <POWERMAN_GetWatchdogConfigData+0x3a>
		{
			d = (d >> 2u) | 0x4000u;
 8011650:	187b      	adds	r3, r7, r1
 8011652:	881b      	ldrh	r3, [r3, #0]
 8011654:	089b      	lsrs	r3, r3, #2
 8011656:	b29a      	uxth	r2, r3
 8011658:	187b      	adds	r3, r7, r1
 801165a:	2180      	movs	r1, #128	; 0x80
 801165c:	01c9      	lsls	r1, r1, #7
 801165e:	430a      	orrs	r2, r1
 8011660:	801a      	strh	r2, [r3, #0]
		}

		d |= 0x8000u;
 8011662:	220e      	movs	r2, #14
 8011664:	18bb      	adds	r3, r7, r2
 8011666:	18ba      	adds	r2, r7, r2
 8011668:	8812      	ldrh	r2, [r2, #0]
 801166a:	4917      	ldr	r1, [pc, #92]	; (80116c8 <POWERMAN_GetWatchdogConfigData+0xa0>)
 801166c:	430a      	orrs	r2, r1
 801166e:	801a      	strh	r2, [r3, #0]
 8011670:	e019      	b.n	80116a6 <POWERMAN_GetWatchdogConfigData+0x7e>
	}
	else
	{
		d = m_watchdogExpirePeriod / 60000u;
 8011672:	4b16      	ldr	r3, [pc, #88]	; (80116cc <POWERMAN_GetWatchdogConfigData+0xa4>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	4916      	ldr	r1, [pc, #88]	; (80116d0 <POWERMAN_GetWatchdogConfigData+0xa8>)
 8011678:	0018      	movs	r0, r3
 801167a:	f7ee fd43 	bl	8000104 <__udivsi3>
 801167e:	0003      	movs	r3, r0
 8011680:	001a      	movs	r2, r3
 8011682:	210e      	movs	r1, #14
 8011684:	187b      	adds	r3, r7, r1
 8011686:	801a      	strh	r2, [r3, #0]

		if (0u != (d & 0x4000u))
 8011688:	187b      	adds	r3, r7, r1
 801168a:	881a      	ldrh	r2, [r3, #0]
 801168c:	2380      	movs	r3, #128	; 0x80
 801168e:	01db      	lsls	r3, r3, #7
 8011690:	4013      	ands	r3, r2
 8011692:	d008      	beq.n	80116a6 <POWERMAN_GetWatchdogConfigData+0x7e>
		{
			 d = (d >> 2u) | 0x4000u;
 8011694:	187b      	adds	r3, r7, r1
 8011696:	881b      	ldrh	r3, [r3, #0]
 8011698:	089b      	lsrs	r3, r3, #2
 801169a:	b29a      	uxth	r2, r3
 801169c:	187b      	adds	r3, r7, r1
 801169e:	2180      	movs	r1, #128	; 0x80
 80116a0:	01c9      	lsls	r1, r1, #7
 80116a2:	430a      	orrs	r2, r1
 80116a4:	801a      	strh	r2, [r3, #0]
		}
	}

	UTIL_ToBytes_U16(d, &p_data[0u]);
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	230e      	movs	r3, #14
 80116aa:	18fb      	adds	r3, r7, r3
 80116ac:	881b      	ldrh	r3, [r3, #0]
 80116ae:	0011      	movs	r1, r2
 80116b0:	0018      	movs	r0, r3
 80116b2:	f002 f8b6 	bl	8013822 <UTIL_ToBytes_U16>

	*p_len = 2;
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	2202      	movs	r2, #2
 80116ba:	801a      	strh	r2, [r3, #0]
}
 80116bc:	46c0      	nop			; (mov r8, r8)
 80116be:	46bd      	mov	sp, r7
 80116c0:	b004      	add	sp, #16
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	20000f2c 	.word	0x20000f2c
 80116c8:	ffff8000 	.word	0xffff8000
 80116cc:	20000f30 	.word	0x20000f30
 80116d0:	0000ea60 	.word	0x0000ea60

080116d4 <POWERMAN_SetWakeupOnChargeData>:
 * @param	len			length of config data
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_SetWakeupOnChargeData(const uint8_t * const p_data, const uint16_t len)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	000a      	movs	r2, r1
 80116de:	1cbb      	adds	r3, r7, #2
 80116e0:	801a      	strh	r2, [r3, #0]
	uint16_t newWakeupVal = (p_data[0u] & 0x7Fu) * 10u;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	b29b      	uxth	r3, r3
 80116e8:	227f      	movs	r2, #127	; 0x7f
 80116ea:	4013      	ands	r3, r2
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	200e      	movs	r0, #14
 80116f0:	183a      	adds	r2, r7, r0
 80116f2:	1c19      	adds	r1, r3, #0
 80116f4:	0089      	lsls	r1, r1, #2
 80116f6:	18cb      	adds	r3, r1, r3
 80116f8:	18db      	adds	r3, r3, r3
 80116fa:	8013      	strh	r3, [r2, #0]

	if (newWakeupVal > 1000u)
 80116fc:	183b      	adds	r3, r7, r0
 80116fe:	881a      	ldrh	r2, [r3, #0]
 8011700:	23fa      	movs	r3, #250	; 0xfa
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	429a      	cmp	r2, r3
 8011706:	d903      	bls.n	8011710 <POWERMAN_SetWakeupOnChargeData+0x3c>
	{
		newWakeupVal = WAKEUP_ONCHARGE_DISABLED_VAL;
 8011708:	183b      	adds	r3, r7, r0
 801170a:	2201      	movs	r2, #1
 801170c:	4252      	negs	r2, r2
 801170e:	801a      	strh	r2, [r3, #0]
	}

	if (p_data[0u] & 0x80u)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	b25b      	sxtb	r3, r3
 8011716:	2b00      	cmp	r3, #0
 8011718:	da27      	bge.n	801176a <POWERMAN_SetWakeupOnChargeData+0x96>
	{
		NV_WriteVariable_U8(WAKEUPONCHARGE_CONFIG_NV_ADDR, (p_data[0u] & 0x7Fu) <= 100u ? p_data[0u] : 0x7Fu);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	001a      	movs	r2, r3
 8011720:	237f      	movs	r3, #127	; 0x7f
 8011722:	4013      	ands	r3, r2
 8011724:	2b64      	cmp	r3, #100	; 0x64
 8011726:	d802      	bhi.n	801172e <POWERMAN_SetWakeupOnChargeData+0x5a>
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	e000      	b.n	8011730 <POWERMAN_SetWakeupOnChargeData+0x5c>
 801172e:	237f      	movs	r3, #127	; 0x7f
 8011730:	0019      	movs	r1, r3
 8011732:	2031      	movs	r0, #49	; 0x31
 8011734:	f7ff f9de 	bl	8010af4 <NV_WriteVariable_U8>

		if (NV_WriteVariable_U8(WAKEUPONCHARGE_CONFIG_NV_ADDR, m_wakeupOnChargeConfig) != NV_READ_VARIABLE_SUCCESS )
 8011738:	4b10      	ldr	r3, [pc, #64]	; (801177c <POWERMAN_SetWakeupOnChargeData+0xa8>)
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	0019      	movs	r1, r3
 801173e:	2031      	movs	r0, #49	; 0x31
 8011740:	f7ff f9d8 	bl	8010af4 <NV_WriteVariable_U8>
 8011744:	1e03      	subs	r3, r0, #0
 8011746:	d008      	beq.n	801175a <POWERMAN_SetWakeupOnChargeData+0x86>
		{
			/* If writing to NV failed then disable wakeup on charge */
			m_wakeupOnChargeConfig = 0x7Fu;
 8011748:	4b0c      	ldr	r3, [pc, #48]	; (801177c <POWERMAN_SetWakeupOnChargeData+0xa8>)
 801174a:	227f      	movs	r2, #127	; 0x7f
 801174c:	701a      	strb	r2, [r3, #0]
			newWakeupVal = WAKEUP_ONCHARGE_DISABLED_VAL;
 801174e:	230e      	movs	r3, #14
 8011750:	18fb      	adds	r3, r7, r3
 8011752:	2201      	movs	r2, #1
 8011754:	4252      	negs	r2, r2
 8011756:	801a      	strh	r2, [r3, #0]
 8011758:	e007      	b.n	801176a <POWERMAN_SetWakeupOnChargeData+0x96>
		}
		else
		{
			m_wakeupOnChargeConfig |= 0x80u;
 801175a:	4b08      	ldr	r3, [pc, #32]	; (801177c <POWERMAN_SetWakeupOnChargeData+0xa8>)
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	2280      	movs	r2, #128	; 0x80
 8011760:	4252      	negs	r2, r2
 8011762:	4313      	orrs	r3, r2
 8011764:	b2da      	uxtb	r2, r3
 8011766:	4b05      	ldr	r3, [pc, #20]	; (801177c <POWERMAN_SetWakeupOnChargeData+0xa8>)
 8011768:	701a      	strb	r2, [r3, #0]
		}
	}

	m_wakeUpOnCharge = newWakeupVal;
 801176a:	4b05      	ldr	r3, [pc, #20]	; (8011780 <POWERMAN_SetWakeupOnChargeData+0xac>)
 801176c:	220e      	movs	r2, #14
 801176e:	18ba      	adds	r2, r7, r2
 8011770:	8812      	ldrh	r2, [r2, #0]
 8011772:	801a      	strh	r2, [r3, #0]
}
 8011774:	46c0      	nop			; (mov r8, r8)
 8011776:	46bd      	mov	sp, r7
 8011778:	b004      	add	sp, #16
 801177a:	bd80      	pop	{r7, pc}
 801177c:	20000f1c 	.word	0x20000f1c
 8011780:	20000f1e 	.word	0x20000f1e

08011784 <POWERMAN_GetWakeupOnChargeData>:
 * @param	p_len		length of data written to the buffer
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_GetWakeupOnChargeData(uint8_t * const p_data, uint16_t * const p_len)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
	if (WAKEUPONCHARGE_NV_INITIALISED)
 801178e:	4b12      	ldr	r3, [pc, #72]	; (80117d8 <POWERMAN_GetWakeupOnChargeData+0x54>)
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	b25b      	sxtb	r3, r3
 8011794:	2b00      	cmp	r3, #0
 8011796:	da04      	bge.n	80117a2 <POWERMAN_GetWakeupOnChargeData+0x1e>
	{
		p_data[0u] = m_wakeupOnChargeConfig;
 8011798:	4b0f      	ldr	r3, [pc, #60]	; (80117d8 <POWERMAN_GetWakeupOnChargeData+0x54>)
 801179a:	781a      	ldrb	r2, [r3, #0]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	701a      	strb	r2, [r3, #0]
 80117a0:	e012      	b.n	80117c8 <POWERMAN_GetWakeupOnChargeData+0x44>
	}
	else
	{
		p_data[0u] = (m_wakeUpOnCharge <= 1000) ? m_wakeUpOnCharge / 10u : 100u;
 80117a2:	4b0e      	ldr	r3, [pc, #56]	; (80117dc <POWERMAN_GetWakeupOnChargeData+0x58>)
 80117a4:	881a      	ldrh	r2, [r3, #0]
 80117a6:	23fa      	movs	r3, #250	; 0xfa
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d809      	bhi.n	80117c2 <POWERMAN_GetWakeupOnChargeData+0x3e>
 80117ae:	4b0b      	ldr	r3, [pc, #44]	; (80117dc <POWERMAN_GetWakeupOnChargeData+0x58>)
 80117b0:	881b      	ldrh	r3, [r3, #0]
 80117b2:	210a      	movs	r1, #10
 80117b4:	0018      	movs	r0, r3
 80117b6:	f7ee fca5 	bl	8000104 <__udivsi3>
 80117ba:	0003      	movs	r3, r0
 80117bc:	b29b      	uxth	r3, r3
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	e000      	b.n	80117c4 <POWERMAN_GetWakeupOnChargeData+0x40>
 80117c2:	2264      	movs	r2, #100	; 0x64
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	701a      	strb	r2, [r3, #0]
	}

	*p_len = 1u;
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	2201      	movs	r2, #1
 80117cc:	801a      	strh	r2, [r3, #0]
}
 80117ce:	46c0      	nop			; (mov r8, r8)
 80117d0:	46bd      	mov	sp, r7
 80117d2:	b002      	add	sp, #8
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	46c0      	nop			; (mov r8, r8)
 80117d8:	20000f1c 	.word	0x20000f1c
 80117dc:	20000f1e 	.word	0x20000f1e

080117e0 <POWERMAN_CanShutDown>:
 * @retval	bool		false = module busy and not convenient to stop CPU
 * 						true = can stop CPU
 */
// ****************************************************************************
bool POWERMAN_CanShutDown(void)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 80117e6:	f7f1 fc73 	bl	80030d0 <HAL_GetTick>
 80117ea:	0003      	movs	r3, r0
 80117ec:	607b      	str	r3, [r7, #4]

	// Make sure pijuice does not sleep if starting up or just about to shutdown
	return (MS_TIMEREF_TIMEOUT(m_lastWakeupTimer, sysTime, 5000u)) && (m_delayedPowerOffTimeMs == 0u);
 80117ee:	4b0b      	ldr	r3, [pc, #44]	; (801181c <POWERMAN_CanShutDown+0x3c>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	687a      	ldr	r2, [r7, #4]
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	4a0a      	ldr	r2, [pc, #40]	; (8011820 <POWERMAN_CanShutDown+0x40>)
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d905      	bls.n	8011808 <POWERMAN_CanShutDown+0x28>
 80117fc:	4b09      	ldr	r3, [pc, #36]	; (8011824 <POWERMAN_CanShutDown+0x44>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d101      	bne.n	8011808 <POWERMAN_CanShutDown+0x28>
 8011804:	2301      	movs	r3, #1
 8011806:	e000      	b.n	801180a <POWERMAN_CanShutDown+0x2a>
 8011808:	2300      	movs	r3, #0
 801180a:	1c1a      	adds	r2, r3, #0
 801180c:	2301      	movs	r3, #1
 801180e:	4013      	ands	r3, r2
 8011810:	b2db      	uxtb	r3, r3
}
 8011812:	0018      	movs	r0, r3
 8011814:	46bd      	mov	sp, r7
 8011816:	b002      	add	sp, #8
 8011818:	bd80      	pop	{r7, pc}
 801181a:	46c0      	nop			; (mov r8, r8)
 801181c:	20000f3c 	.word	0x20000f3c
 8011820:	00001387 	.word	0x00001387
 8011824:	20000f28 	.word	0x20000f28

08011828 <POWERMAN_ClearPowerButtonPressed>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_ClearPowerButtonPressed(void)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	af00      	add	r7, sp, #0
	m_powerButtonPressedEvent = false;
 801182c:	4b02      	ldr	r3, [pc, #8]	; (8011838 <POWERMAN_ClearPowerButtonPressed+0x10>)
 801182e:	2200      	movs	r2, #0
 8011830:	701a      	strb	r2, [r3, #0]
}
 8011832:	46c0      	nop			; (mov r8, r8)
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	20000f39 	.word	0x20000f39

0801183c <POWERMAN_SetWakeupOnChargePcntPt1>:
 * 									the RPi.
 * @retval	none
 */
// ****************************************************************************
void POWERMAN_SetWakeupOnChargePcntPt1(const uint16_t chargeTriggerPcntPt1)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	0002      	movs	r2, r0
 8011844:	1dbb      	adds	r3, r7, #6
 8011846:	801a      	strh	r2, [r3, #0]
	m_wakeUpOnCharge = chargeTriggerPcntPt1;
 8011848:	4b03      	ldr	r3, [pc, #12]	; (8011858 <POWERMAN_SetWakeupOnChargePcntPt1+0x1c>)
 801184a:	1dba      	adds	r2, r7, #6
 801184c:	8812      	ldrh	r2, [r2, #0]
 801184e:	801a      	strh	r2, [r3, #0]
}
 8011850:	46c0      	nop			; (mov r8, r8)
 8011852:	46bd      	mov	sp, r7
 8011854:	b002      	add	sp, #8
 8011856:	bd80      	pop	{r7, pc}
 8011858:	20000f1e 	.word	0x20000f1e

0801185c <POWERMAN_ResetHost>:
 * @retval	bool		false = reset not performed
 * 						true = reset performed
 */
// ****************************************************************************
static bool POWERMAN_ResetHost(void)
{
 801185c:	b590      	push	{r4, r7, lr}
 801185e:	b083      	sub	sp, #12
 8011860:	af00      	add	r7, sp, #0
	const bool boostConverterEnabled = POWERSOURCE_IsBoostConverterEnabled();
 8011862:	1dbc      	adds	r4, r7, #6
 8011864:	f000 fb82 	bl	8011f6c <POWERSOURCE_IsBoostConverterEnabled>
 8011868:	0003      	movs	r3, r0
 801186a:	7023      	strb	r3, [r4, #0]
	const PowerSourceStatus_T power5vIoStatus = POWERSOURCE_Get5VRailStatus();
 801186c:	1d7c      	adds	r4, r7, #5
 801186e:	f000 fb9b 	bl	8011fa8 <POWERSOURCE_Get5VRailStatus>
 8011872:	0003      	movs	r3, r0
 8011874:	7023      	strb	r3, [r4, #0]

	bool result = false;
 8011876:	1dfb      	adds	r3, r7, #7
 8011878:	2200      	movs	r2, #0
 801187a:	701a      	strb	r2, [r3, #0]

	if ( ((true == boostConverterEnabled) || (POW_SOURCE_NOT_PRESENT != power5vIoStatus))
 801187c:	1dbb      	adds	r3, r7, #6
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d103      	bne.n	801188c <POWERMAN_ResetHost+0x30>
 8011884:	1d7b      	adds	r3, r7, #5
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d01a      	beq.n	80118c2 <POWERMAN_ResetHost+0x66>
			&& (RUN_PIN_INSTALLED == m_runPinInstalled)
 801188c:	4b33      	ldr	r3, [pc, #204]	; (801195c <POWERMAN_ResetHost+0x100>)
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	2b01      	cmp	r3, #1
 8011892:	d116      	bne.n	80118c2 <POWERMAN_ResetHost+0x66>
			)
	{
		POWERSOURCE_Set5vBoostEnable(true);
 8011894:	2001      	movs	r0, #1
 8011896:	f000 fa81 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>

		// activate RUN signal
		IODRV_SetPin(IODRV_PIN_RUN,GPIO_PIN_RESET);
 801189a:	2100      	movs	r1, #0
 801189c:	200f      	movs	r0, #15
 801189e:	f7fd fadb 	bl	800ee58 <IODRV_SetPin>
		DelayUs(100);
 80118a2:	2064      	movs	r0, #100	; 0x64
 80118a4:	f7ff faa8 	bl	8010df8 <DelayUs>
		IODRV_SetPin(IODRV_PIN_RUN,GPIO_PIN_SET);
 80118a8:	2101      	movs	r1, #1
 80118aa:	200f      	movs	r0, #15
 80118ac:	f7fd fad4 	bl	800ee58 <IODRV_SetPin>

		// Note wakeup time
		MS_TIME_COUNTER_INIT(m_lastWakeupTimer);
 80118b0:	f7f1 fc0e 	bl	80030d0 <HAL_GetTick>
 80118b4:	0002      	movs	r2, r0
 80118b6:	4b2a      	ldr	r3, [pc, #168]	; (8011960 <POWERMAN_ResetHost+0x104>)
 80118b8:	601a      	str	r2, [r3, #0]
		result = true;
 80118ba:	1dfb      	adds	r3, r7, #7
 80118bc:	2201      	movs	r2, #1
 80118be:	701a      	strb	r2, [r3, #0]
 80118c0:	e045      	b.n	801194e <POWERMAN_ResetHost+0xf2>
	}
	else if (power5vIoStatus == POW_SOURCE_NOT_PRESENT)
 80118c2:	1d7b      	adds	r3, r7, #5
 80118c4:	781b      	ldrb	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d11e      	bne.n	8011908 <POWERMAN_ResetHost+0xac>
	{
		if (true == boostConverterEnabled)
 80118ca:	1dbb      	adds	r3, r7, #6
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d00e      	beq.n	80118f0 <POWERMAN_ResetHost+0x94>
		{
			// if power is already on then first turn power off
			POWERSOURCE_Set5vBoostEnable(false);
 80118d2:	2000      	movs	r0, #0
 80118d4:	f000 fa62 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>

			// schedule turn on after delay
			m_delayedTurnOnFlag = true;
 80118d8:	4b22      	ldr	r3, [pc, #136]	; (8011964 <POWERMAN_ResetHost+0x108>)
 80118da:	2201      	movs	r2, #1
 80118dc:	701a      	strb	r2, [r3, #0]

			// wake up time will be set on delay power up
			MS_TIME_COUNTER_INIT(m_delayedTurnOnTimer);
 80118de:	f7f1 fbf7 	bl	80030d0 <HAL_GetTick>
 80118e2:	0002      	movs	r2, r0
 80118e4:	4b20      	ldr	r3, [pc, #128]	; (8011968 <POWERMAN_ResetHost+0x10c>)
 80118e6:	601a      	str	r2, [r3, #0]

			result = true;
 80118e8:	1dfb      	adds	r3, r7, #7
 80118ea:	2201      	movs	r2, #1
 80118ec:	701a      	strb	r2, [r3, #0]
 80118ee:	e02e      	b.n	801194e <POWERMAN_ResetHost+0xf2>
		}
		else
		{
			// Enable the power
			POWERSOURCE_Set5vBoostEnable(true);
 80118f0:	2001      	movs	r0, #1
 80118f2:	f000 fa53 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>

			// Note wakeup time
			MS_TIME_COUNTER_INIT(m_lastWakeupTimer);
 80118f6:	f7f1 fbeb 	bl	80030d0 <HAL_GetTick>
 80118fa:	0002      	movs	r2, r0
 80118fc:	4b18      	ldr	r3, [pc, #96]	; (8011960 <POWERMAN_ResetHost+0x104>)
 80118fe:	601a      	str	r2, [r3, #0]

			result = true;
 8011900:	1dfb      	adds	r3, r7, #7
 8011902:	2201      	movs	r2, #1
 8011904:	701a      	strb	r2, [r3, #0]
 8011906:	e022      	b.n	801194e <POWERMAN_ResetHost+0xf2>
		}
	}
	else if ( (true == boostConverterEnabled) || (POW_SOURCE_NOT_PRESENT != power5vIoStatus) )
 8011908:	1dbb      	adds	r3, r7, #6
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d103      	bne.n	8011918 <POWERMAN_ResetHost+0xbc>
 8011910:	1d7b      	adds	r3, r7, #5
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d01a      	beq.n	801194e <POWERMAN_ResetHost+0xf2>
	{
		// Change SCL pin to output open drain
		IODRV_SetPinType(IODRV_PIN_RPI_GPIO3, IOTYPE_DIGOUT_OPENDRAIN);
 8011918:	2104      	movs	r1, #4
 801191a:	2016      	movs	r0, #22
 801191c:	f7fd fade 	bl	800eedc <IODRV_SetPinType>

		// Pull down the pin
		IODRV_SetPin(IODRV_PIN_RPI_GPIO3,GPIO_PIN_RESET);
 8011920:	2100      	movs	r1, #0
 8011922:	2016      	movs	r0, #22
 8011924:	f7fd fa98 	bl	800ee58 <IODRV_SetPin>
		DelayUs(100);
 8011928:	2064      	movs	r0, #100	; 0x64
 801192a:	f7ff fa65 	bl	8010df8 <DelayUs>

		// Let the pin go
		IODRV_SetPin(IODRV_PIN_RPI_GPIO3,GPIO_PIN_SET);
 801192e:	2101      	movs	r1, #1
 8011930:	2016      	movs	r0, #22
 8011932:	f7fd fa91 	bl	800ee58 <IODRV_SetPin>

		// PWM open drain is the same as I2C SCL
		IODRV_SetPinType(IODRV_PIN_RPI_GPIO3, IOTYPE_PWM_OPENDRAIN);
 8011936:	2106      	movs	r1, #6
 8011938:	2016      	movs	r0, #22
 801193a:	f7fd facf 	bl	800eedc <IODRV_SetPinType>

		// Note wakeup time
		MS_TIME_COUNTER_INIT(m_lastWakeupTimer);
 801193e:	f7f1 fbc7 	bl	80030d0 <HAL_GetTick>
 8011942:	0002      	movs	r2, r0
 8011944:	4b06      	ldr	r3, [pc, #24]	; (8011960 <POWERMAN_ResetHost+0x104>)
 8011946:	601a      	str	r2, [r3, #0]

		result = true;
 8011948:	1dfb      	adds	r3, r7, #7
 801194a:	2201      	movs	r2, #1
 801194c:	701a      	strb	r2, [r3, #0]
	}

	return result;
 801194e:	1dfb      	adds	r3, r7, #7
 8011950:	781b      	ldrb	r3, [r3, #0]
}
 8011952:	0018      	movs	r0, r3
 8011954:	46bd      	mov	sp, r7
 8011956:	b003      	add	sp, #12
 8011958:	bd90      	pop	{r4, r7, pc}
 801195a:	46c0      	nop			; (mov r8, r8)
 801195c:	20001564 	.word	0x20001564
 8011960:	20000f3c 	.word	0x20000f3c
 8011964:	20000f20 	.word	0x20000f20
 8011968:	20000f24 	.word	0x20000f24

0801196c <GetAdcWDGThreshold>:
void AnalogStart(void);
void AnalogPowerIsGood(void);

void AnalogAdcWDGEnable(uint8_t enable);
HAL_StatusTypeDef AnalogAdcWDGConfig(uint8_t channel, uint16_t voltThresh_mV);
__STATIC_INLINE uint16_t GetAdcWDGThreshold() {
 801196c:	b580      	push	{r7, lr}
 801196e:	af00      	add	r7, sp, #0
	return analogWDGConfig.LowThreshold;
 8011970:	4b02      	ldr	r3, [pc, #8]	; (801197c <GetAdcWDGThreshold+0x10>)
 8011972:	691b      	ldr	r3, [r3, #16]
 8011974:	b29b      	uxth	r3, r3
}
 8011976:	0018      	movs	r0, r3
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	20001998 	.word	0x20001998

08011980 <DelayUs>:
__STATIC_INLINE void DelayUs(__IO uint32_t micros) {
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock * 16 / 1000000) / 6;
 8011988:	4b0d      	ldr	r3, [pc, #52]	; (80119c0 <DelayUs+0x40>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	011b      	lsls	r3, r3, #4
 801198e:	490d      	ldr	r1, [pc, #52]	; (80119c4 <DelayUs+0x44>)
 8011990:	0018      	movs	r0, r3
 8011992:	f7ee fbb7 	bl	8000104 <__udivsi3>
 8011996:	0003      	movs	r3, r0
 8011998:	001a      	movs	r2, r3
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	4353      	muls	r3, r2
 801199e:	607b      	str	r3, [r7, #4]
	micros >>= 4;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	091b      	lsrs	r3, r3, #4
 80119a4:	607b      	str	r3, [r7, #4]
	volatile uint32_t dcnt = micros;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	60fb      	str	r3, [r7, #12]
	while (dcnt--);
 80119aa:	46c0      	nop			; (mov r8, r8)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	1e5a      	subs	r2, r3, #1
 80119b0:	60fa      	str	r2, [r7, #12]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d1fa      	bne.n	80119ac <DelayUs+0x2c>
}
 80119b6:	46c0      	nop			; (mov r8, r8)
 80119b8:	46c0      	nop			; (mov r8, r8)
 80119ba:	46bd      	mov	sp, r7
 80119bc:	b004      	add	sp, #16
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	20000000 	.word	0x20000000
 80119c4:	005b8d80 	.word	0x005b8d80

080119c8 <POWERSOURCE_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_Init(void)
{
 80119c8:	b590      	push	{r4, r7, lr}
 80119ca:	b085      	sub	sp, #20
 80119cc:	af00      	add	r7, sp, #0
	const BatteryProfile_T * currentBatProfile = BATTERY_GetActiveProfileHandle();
 80119ce:	f7f6 fb65 	bl	800809c <BATTERY_GetActiveProfileHandle>
 80119d2:	0003      	movs	r3, r0
 80119d4:	60fb      	str	r3, [r7, #12]
	const uint32_t sysTime = HAL_GetTick();
 80119d6:	f7f1 fb7b 	bl	80030d0 <HAL_GetTick>
 80119da:	0003      	movs	r3, r0
 80119dc:	60bb      	str	r3, [r7, #8]
	const bool chargerHasVIn = (CHARGER_INPUT_NORMAL == CHARGER_GetInputStatus(CHARGER_INPUT_VIN));
 80119de:	2000      	movs	r0, #0
 80119e0:	f7f8 f91e 	bl	8009c20 <CHARGER_GetInputStatus>
 80119e4:	0003      	movs	r3, r0
 80119e6:	001a      	movs	r2, r3
 80119e8:	1dfb      	adds	r3, r7, #7
 80119ea:	4251      	negs	r1, r2
 80119ec:	414a      	adcs	r2, r1
 80119ee:	701a      	strb	r2, [r3, #0]
	const uint16_t vBatMv = ANALOG_GetBatteryMv();
 80119f0:	1d3c      	adds	r4, r7, #4
 80119f2:	f7f5 fed3 	bl	800779c <ANALOG_GetBatteryMv>
 80119f6:	0003      	movs	r3, r0
 80119f8:	8023      	strh	r3, [r4, #0]

	uint8_t tempU8;


	// initialise global variables in the no-init section after power-up
	if (EXECUTION_STATE_POWER_RESET == executionState)
 80119fa:	4b50      	ldr	r3, [pc, #320]	; (8011b3c <POWERSOURCE_Init+0x174>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	4a50      	ldr	r2, [pc, #320]	; (8011b40 <POWERSOURCE_Init+0x178>)
 8011a00:	4293      	cmp	r3, r2
 8011a02:	d111      	bne.n	8011a28 <POWERSOURCE_Init+0x60>
	{
		m_forcedPowerOff = 0u;
 8011a04:	4b4f      	ldr	r3, [pc, #316]	; (8011b44 <POWERSOURCE_Init+0x17c>)
 8011a06:	2200      	movs	r2, #0
 8011a08:	701a      	strb	r2, [r3, #0]
		m_forcedVSysOutputOff = 0u;
 8011a0a:	4b4f      	ldr	r3, [pc, #316]	; (8011b48 <POWERSOURCE_Init+0x180>)
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	701a      	strb	r2, [r3, #0]
		forcedPowerOffCounter = 0u;
 8011a10:	4b4e      	ldr	r3, [pc, #312]	; (8011b4c <POWERSOURCE_Init+0x184>)
 8011a12:	2200      	movs	r2, #0
 8011a14:	601a      	str	r2, [r3, #0]

		m_boostConverterEnabled = false;
 8011a16:	4b4e      	ldr	r3, [pc, #312]	; (8011b50 <POWERSOURCE_Init+0x188>)
 8011a18:	2200      	movs	r2, #0
 8011a1a:	701a      	strb	r2, [r3, #0]
		m_vsysEnabled = false;
 8011a1c:	4b4d      	ldr	r3, [pc, #308]	; (8011b54 <POWERSOURCE_Init+0x18c>)
 8011a1e:	2200      	movs	r2, #0
 8011a20:	701a      	strb	r2, [r3, #0]
		m_vsysSwitchLimit = 5u;
 8011a22:	4b4d      	ldr	r3, [pc, #308]	; (8011b58 <POWERSOURCE_Init+0x190>)
 8011a24:	2205      	movs	r2, #5
 8011a26:	701a      	strb	r2, [r3, #0]
	}

	// Setup module timers
	MS_TIMEREF_INIT(m_lastPowerProcessTime, sysTime);
 8011a28:	4b4c      	ldr	r3, [pc, #304]	; (8011b5c <POWERSOURCE_Init+0x194>)
 8011a2a:	68ba      	ldr	r2, [r7, #8]
 8011a2c:	601a      	str	r2, [r3, #0]
	MS_TIMEREF_INIT(m_lastRPiPowerDetectTimeMs, sysTime);
 8011a2e:	4b4c      	ldr	r3, [pc, #304]	; (8011b60 <POWERSOURCE_Init+0x198>)
 8011a30:	68ba      	ldr	r2, [r7, #8]
 8011a32:	601a      	str	r2, [r3, #0]


	if (NV_ReadVariable_U8(POWER_REGULATOR_CONFIG_NV_ADDR, &tempU8))
 8011a34:	1cfb      	adds	r3, r7, #3
 8011a36:	0019      	movs	r1, r3
 8011a38:	2056      	movs	r0, #86	; 0x56
 8011a3a:	f7ff f87f 	bl	8010b3c <NV_ReadVariable_U8>
 8011a3e:	1e03      	subs	r3, r0, #0
 8011a40:	d007      	beq.n	8011a52 <POWERSOURCE_Init+0x8a>
	{
		if (tempU8 < POW_REGULATOR_MODE_COUNT)
 8011a42:	1cfb      	adds	r3, r7, #3
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	2b02      	cmp	r3, #2
 8011a48:	d803      	bhi.n	8011a52 <POWERSOURCE_Init+0x8a>
		{
			m_powerRegulatorConfig = (PowerRegulatorConfig_T)tempU8;
 8011a4a:	1cfb      	adds	r3, r7, #3
 8011a4c:	781a      	ldrb	r2, [r3, #0]
 8011a4e:	4b45      	ldr	r3, [pc, #276]	; (8011b64 <POWERSOURCE_Init+0x19c>)
 8011a50:	701a      	strb	r2, [r3, #0]
		}
	}


	// Setup battery low voltage threshold
	POWERSOURCE_UpdateBatteryProfile(currentBatProfile);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	0018      	movs	r0, r3
 8011a56:	f000 f899 	bl	8011b8c <POWERSOURCE_UpdateBatteryProfile>


	// maintain regulator state before reset
	if ( true == m_boostConverterEnabled )
 8011a5a:	4b3d      	ldr	r3, [pc, #244]	; (8011b50 <POWERSOURCE_Init+0x188>)
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d021      	beq.n	8011aa6 <POWERSOURCE_Init+0xde>
	{
		// if there is mcu power-on, but reg was on, it can be power lost fault condition, check sources
		if ( (executionState == EXECUTION_STATE_POWER_RESET)
 8011a62:	4b36      	ldr	r3, [pc, #216]	; (8011b3c <POWERSOURCE_Init+0x174>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	4a36      	ldr	r2, [pc, #216]	; (8011b40 <POWERSOURCE_Init+0x178>)
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d116      	bne.n	8011a9a <POWERSOURCE_Init+0xd2>
				&& (vBatMv < m_vbatPowerOffThreshold)
 8011a6c:	4b3e      	ldr	r3, [pc, #248]	; (8011b68 <POWERSOURCE_Init+0x1a0>)
 8011a6e:	881b      	ldrh	r3, [r3, #0]
 8011a70:	1d3a      	adds	r2, r7, #4
 8011a72:	8812      	ldrh	r2, [r2, #0]
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d210      	bcs.n	8011a9a <POWERSOURCE_Init+0xd2>
				&& (false == chargerHasVIn)
 8011a78:	1dfb      	adds	r3, r7, #7
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	2201      	movs	r2, #1
 8011a7e:	4053      	eors	r3, r2
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d009      	beq.n	8011a9a <POWERSOURCE_Init+0xd2>
				)
		{
			POWERSOURCE_Set5vBoostEnable(false);
 8011a86:	2000      	movs	r0, #0
 8011a88:	f000 f988 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>
			m_forcedPowerOff = true;
 8011a8c:	4b2d      	ldr	r3, [pc, #180]	; (8011b44 <POWERSOURCE_Init+0x17c>)
 8011a8e:	2201      	movs	r2, #1
 8011a90:	701a      	strb	r2, [r3, #0]
			POWERMAN_SetWakeupOnChargePcntPt1(5u); // schedule wake up when there is enough energy
 8011a92:	2005      	movs	r0, #5
 8011a94:	f7ff fed2 	bl	801183c <POWERMAN_SetWakeupOnChargePcntPt1>
 8011a98:	e005      	b.n	8011aa6 <POWERSOURCE_Init+0xde>
		}
		else
		{
			// Need to rest the boost enabled flag or it'll just think its already on!
			m_boostConverterEnabled = false;
 8011a9a:	4b2d      	ldr	r3, [pc, #180]	; (8011b50 <POWERSOURCE_Init+0x188>)
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	701a      	strb	r2, [r3, #0]
			POWERSOURCE_Set5vBoostEnable(true);
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	f000 f97b 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>
		}
	}


	// Check if reset cycle was because of a loss of power (boost en on but power on reset)
	if (EXECUTION_STATE_POWER_ON == executionState)
 8011aa6:	4b25      	ldr	r3, [pc, #148]	; (8011b3c <POWERSOURCE_Init+0x174>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d102      	bne.n	8011ab4 <POWERSOURCE_Init+0xec>
	{
		m_vsysSwitchLimit = 5u;
 8011aae:	4b2a      	ldr	r3, [pc, #168]	; (8011b58 <POWERSOURCE_Init+0x190>)
 8011ab0:	2205      	movs	r2, #5
 8011ab2:	701a      	strb	r2, [r3, #0]
	}

	// Set the VSys output current limit
	IODRV_SetPin(IODRV_PIN_ESYSLIM, 21u != m_vsysSwitchLimit);
 8011ab4:	4b28      	ldr	r3, [pc, #160]	; (8011b58 <POWERSOURCE_Init+0x190>)
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	3b15      	subs	r3, #21
 8011aba:	1e5a      	subs	r2, r3, #1
 8011abc:	4193      	sbcs	r3, r2
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	0019      	movs	r1, r3
 8011ac2:	200b      	movs	r0, #11
 8011ac4:	f7fd f9c8 	bl	800ee58 <IODRV_SetPin>

	// Restore previous Vsys enable
	if ( (true == m_vsysEnabled) && (EXECUTION_STATE_POWER_ON != executionState) )
 8011ac8:	4b22      	ldr	r3, [pc, #136]	; (8011b54 <POWERSOURCE_Init+0x18c>)
 8011aca:	781b      	ldrb	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d025      	beq.n	8011b1c <POWERSOURCE_Init+0x154>
 8011ad0:	4b1a      	ldr	r3, [pc, #104]	; (8011b3c <POWERSOURCE_Init+0x174>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d021      	beq.n	8011b1c <POWERSOURCE_Init+0x154>
	{
		if ( (EXECUTION_STATE_POWER_RESET == executionState)  &&
 8011ad8:	4b18      	ldr	r3, [pc, #96]	; (8011b3c <POWERSOURCE_Init+0x174>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4a18      	ldr	r2, [pc, #96]	; (8011b40 <POWERSOURCE_Init+0x178>)
 8011ade:	4293      	cmp	r3, r2
 8011ae0:	d117      	bne.n	8011b12 <POWERSOURCE_Init+0x14a>
				(vBatMv < m_vbatPowerOffThreshold) &&
 8011ae2:	4b21      	ldr	r3, [pc, #132]	; (8011b68 <POWERSOURCE_Init+0x1a0>)
 8011ae4:	881b      	ldrh	r3, [r3, #0]
		if ( (EXECUTION_STATE_POWER_RESET == executionState)  &&
 8011ae6:	1d3a      	adds	r2, r7, #4
 8011ae8:	8812      	ldrh	r2, [r2, #0]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d211      	bcs.n	8011b12 <POWERSOURCE_Init+0x14a>
				(false == chargerHasVIn)
 8011aee:	1dfb      	adds	r3, r7, #7
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	2201      	movs	r2, #1
 8011af4:	4053      	eors	r3, r2
 8011af6:	b2db      	uxtb	r3, r3
				(vBatMv < m_vbatPowerOffThreshold) &&
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d00a      	beq.n	8011b12 <POWERSOURCE_Init+0x14a>
				)
		{
			// Disable vsys
			IODRV_SetPin(IODRV_PIN_EXTVS_EN, false);
 8011afc:	2100      	movs	r1, #0
 8011afe:	2007      	movs	r0, #7
 8011b00:	f7fd f9aa 	bl	800ee58 <IODRV_SetPin>
			m_vsysEnabled = false;
 8011b04:	4b13      	ldr	r3, [pc, #76]	; (8011b54 <POWERSOURCE_Init+0x18c>)
 8011b06:	2200      	movs	r2, #0
 8011b08:	701a      	strb	r2, [r3, #0]

			m_forcedVSysOutputOff = true;
 8011b0a:	4b0f      	ldr	r3, [pc, #60]	; (8011b48 <POWERSOURCE_Init+0x180>)
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	701a      	strb	r2, [r3, #0]
		if ( (EXECUTION_STATE_POWER_RESET == executionState)  &&
 8011b10:	e008      	b.n	8011b24 <POWERSOURCE_Init+0x15c>
		}
		else
		{
			// Enable vsys
			IODRV_SetPin(IODRV_PIN_EXTVS_EN, true);
 8011b12:	2101      	movs	r1, #1
 8011b14:	2007      	movs	r0, #7
 8011b16:	f7fd f99f 	bl	800ee58 <IODRV_SetPin>
		if ( (EXECUTION_STATE_POWER_RESET == executionState)  &&
 8011b1a:	e003      	b.n	8011b24 <POWERSOURCE_Init+0x15c>
		}
	}
	else
	{
		// Disable vsys
		IODRV_SetPin(IODRV_PIN_EXTVS_EN, false);
 8011b1c:	2100      	movs	r1, #0
 8011b1e:	2007      	movs	r0, #7
 8011b20:	f7fd f99a 	bl	800ee58 <IODRV_SetPin>
	}


	// Switch the pin types to output
	IODRV_SetPinType(IODRV_PIN_POW_EN, IOTYPE_DIGOUT_PUSHPULL);
 8011b24:	2103      	movs	r1, #3
 8011b26:	2006      	movs	r0, #6
 8011b28:	f7fd f9d8 	bl	800eedc <IODRV_SetPinType>
	IODRV_SetPinType(IODRV_PIN_EXTVS_EN, IOTYPE_DIGOUT_PUSHPULL);
 8011b2c:	2103      	movs	r1, #3
 8011b2e:	2007      	movs	r0, #7
 8011b30:	f7fd f9d4 	bl	800eedc <IODRV_SetPinType>
}
 8011b34:	46c0      	nop			; (mov r8, r8)
 8011b36:	46bd      	mov	sp, r7
 8011b38:	b005      	add	sp, #20
 8011b3a:	bd90      	pop	{r4, r7, pc}
 8011b3c:	2000185c 	.word	0x2000185c
 8011b40:	11111111 	.word	0x11111111
 8011b44:	20000f40 	.word	0x20000f40
 8011b48:	20000f41 	.word	0x20000f41
 8011b4c:	20000f44 	.word	0x20000f44
 8011b50:	20000f48 	.word	0x20000f48
 8011b54:	20000f49 	.word	0x20000f49
 8011b58:	20000f4a 	.word	0x20000f4a
 8011b5c:	20001578 	.word	0x20001578
 8011b60:	20001570 	.word	0x20001570
 8011b64:	20001580 	.word	0x20001580
 8011b68:	20001566 	.word	0x20001566

08011b6c <POWERSOURCE_Task>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_Task(void)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	af00      	add	r7, sp, #0
	POWERSOURCE_RPi5vDetect();
 8011b70:	f000 fbae 	bl	80122d0 <POWERSOURCE_RPi5vDetect>

	POWERSOURCE_ProcessVINStatus();
 8011b74:	f000 fc4c 	bl	8012410 <POWERSOURCE_ProcessVINStatus>
	POWERSOURCE_Process5VRailStatus();
 8011b78:	f000 fc7e 	bl	8012478 <POWERSOURCE_Process5VRailStatus>

	POWERSOURCE_Process5VRailPower();
 8011b7c:	f000 fb2e 	bl	80121dc <POWERSOURCE_Process5VRailPower>

	POWERSOURCE_CheckPowerValid();
 8011b80:	f000 fa6a 	bl	8012058 <POWERSOURCE_CheckPowerValid>
}
 8011b84:	46c0      	nop			; (mov r8, r8)
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
	...

08011b8c <POWERSOURCE_UpdateBatteryProfile>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_UpdateBatteryProfile(const BatteryProfile_T * const batProfile)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
	m_vbatPowerOffThreshold = (NULL == batProfile) ?
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d006      	beq.n	8011ba8 <POWERSOURCE_UpdateBatteryProfile+0x1c>
								3000u + VBAT_TURNOFF_ADC_THRESHOLD	:
								(batProfile->cutoffVoltage * 20u) + VBAT_TURNOFF_ADC_THRESHOLD;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	7adb      	ldrb	r3, [r3, #11]
 8011b9e:	b29b      	uxth	r3, r3
	m_vbatPowerOffThreshold = (NULL == batProfile) ?
 8011ba0:	2214      	movs	r2, #20
 8011ba2:	4353      	muls	r3, r2
 8011ba4:	b29a      	uxth	r2, r3
 8011ba6:	e000      	b.n	8011baa <POWERSOURCE_UpdateBatteryProfile+0x1e>
 8011ba8:	4a06      	ldr	r2, [pc, #24]	; (8011bc4 <POWERSOURCE_UpdateBatteryProfile+0x38>)
 8011baa:	4b07      	ldr	r3, [pc, #28]	; (8011bc8 <POWERSOURCE_UpdateBatteryProfile+0x3c>)
 8011bac:	801a      	strh	r2, [r3, #0]

	AnalogAdcWDGConfig(ANALOG_CHANNEL_VBAT,  m_vbatPowerOffThreshold);
 8011bae:	4b06      	ldr	r3, [pc, #24]	; (8011bc8 <POWERSOURCE_UpdateBatteryProfile+0x3c>)
 8011bb0:	881b      	ldrh	r3, [r3, #0]
 8011bb2:	0019      	movs	r1, r3
 8011bb4:	2002      	movs	r0, #2
 8011bb6:	f7f5 fe33 	bl	8007820 <AnalogAdcWDGConfig>
}
 8011bba:	46c0      	nop			; (mov r8, r8)
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	b002      	add	sp, #8
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	46c0      	nop			; (mov r8, r8)
 8011bc4:	00000bb8 	.word	0x00000bb8
 8011bc8:	20001566 	.word	0x20001566

08011bcc <POWERSOURCE_SetVSysSwitchState>:
 * @param	switchState		5 = 500mA, 21 = 2100mA, anything else VSys is off.
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_SetVSysSwitchState(uint8_t switchState)
{
 8011bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bce:	b085      	sub	sp, #20
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	0002      	movs	r2, r0
 8011bd4:	1dfb      	adds	r3, r7, #7
 8011bd6:	701a      	strb	r2, [r3, #0]
	const uint16_t vbatAdcVal = ADC_GetAverageValue(ANALOG_CHANNEL_VBAT);
 8011bd8:	250e      	movs	r5, #14
 8011bda:	197c      	adds	r4, r7, r5
 8011bdc:	2002      	movs	r0, #2
 8011bde:	f7f5 fcf7 	bl	80075d0 <ADC_GetAverageValue>
 8011be2:	0003      	movs	r3, r0
 8011be4:	8023      	strh	r3, [r4, #0]
	const uint16_t wdgThreshold = GetAdcWDGThreshold();
 8011be6:	260c      	movs	r6, #12
 8011be8:	19bc      	adds	r4, r7, r6
 8011bea:	f7ff febf 	bl	801196c <GetAdcWDGThreshold>
 8011bee:	0003      	movs	r3, r0
 8011bf0:	8023      	strh	r3, [r4, #0]

	if (5u == switchState)
 8011bf2:	1dfb      	adds	r3, r7, #7
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	2b05      	cmp	r3, #5
 8011bf8:	d12a      	bne.n	8011c50 <POWERSOURCE_SetVSysSwitchState+0x84>
	{
		// Set VSys I limit pin
		IODRV_SetPin(IODRV_PIN_ESYSLIM, true);
 8011bfa:	2101      	movs	r1, #1
 8011bfc:	200b      	movs	r0, #11
 8011bfe:	f7fd f92b 	bl	800ee58 <IODRV_SetPin>

		if ( (vbatAdcVal > wdgThreshold) || (true == POWER_SOURCE_PRESENT) )
 8011c02:	197a      	adds	r2, r7, r5
 8011c04:	19bb      	adds	r3, r7, r6
 8011c06:	8812      	ldrh	r2, [r2, #0]
 8011c08:	881b      	ldrh	r3, [r3, #0]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d814      	bhi.n	8011c38 <POWERSOURCE_SetVSysSwitchState+0x6c>
 8011c0e:	4b30      	ldr	r3, [pc, #192]	; (8011cd0 <POWERSOURCE_SetVSysSwitchState+0x104>)
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	2b03      	cmp	r3, #3
 8011c14:	d00b      	beq.n	8011c2e <POWERSOURCE_SetVSysSwitchState+0x62>
 8011c16:	4b2e      	ldr	r3, [pc, #184]	; (8011cd0 <POWERSOURCE_SetVSysSwitchState+0x104>)
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	2b02      	cmp	r3, #2
 8011c1c:	d007      	beq.n	8011c2e <POWERSOURCE_SetVSysSwitchState+0x62>
 8011c1e:	4b2d      	ldr	r3, [pc, #180]	; (8011cd4 <POWERSOURCE_SetVSysSwitchState+0x108>)
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	2b03      	cmp	r3, #3
 8011c24:	d003      	beq.n	8011c2e <POWERSOURCE_SetVSysSwitchState+0x62>
 8011c26:	4b2b      	ldr	r3, [pc, #172]	; (8011cd4 <POWERSOURCE_SetVSysSwitchState+0x108>)
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	2b02      	cmp	r3, #2
 8011c2c:	d101      	bne.n	8011c32 <POWERSOURCE_SetVSysSwitchState+0x66>
 8011c2e:	2301      	movs	r3, #1
 8011c30:	e000      	b.n	8011c34 <POWERSOURCE_SetVSysSwitchState+0x68>
 8011c32:	2300      	movs	r3, #0
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d106      	bne.n	8011c46 <POWERSOURCE_SetVSysSwitchState+0x7a>
		{
			IODRV_SetPin(IODRV_PIN_EXTVS_EN, true);
 8011c38:	2101      	movs	r1, #1
 8011c3a:	2007      	movs	r0, #7
 8011c3c:	f7fd f90c 	bl	800ee58 <IODRV_SetPin>
			m_vsysEnabled = true;
 8011c40:	4b25      	ldr	r3, [pc, #148]	; (8011cd8 <POWERSOURCE_SetVSysSwitchState+0x10c>)
 8011c42:	2201      	movs	r2, #1
 8011c44:	701a      	strb	r2, [r3, #0]
		}

		m_vsysSwitchLimit = switchState;
 8011c46:	4b25      	ldr	r3, [pc, #148]	; (8011cdc <POWERSOURCE_SetVSysSwitchState+0x110>)
 8011c48:	1dfa      	adds	r2, r7, #7
 8011c4a:	7812      	ldrb	r2, [r2, #0]
 8011c4c:	701a      	strb	r2, [r3, #0]
 8011c4e:	e037      	b.n	8011cc0 <POWERSOURCE_SetVSysSwitchState+0xf4>
	}
	else if (21u == switchState)
 8011c50:	1dfb      	adds	r3, r7, #7
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	2b15      	cmp	r3, #21
 8011c56:	d12c      	bne.n	8011cb2 <POWERSOURCE_SetVSysSwitchState+0xe6>
	{
		// Reset VSys I limit pin
		IODRV_SetPin(IODRV_PIN_ESYSLIM, false);
 8011c58:	2100      	movs	r1, #0
 8011c5a:	200b      	movs	r0, #11
 8011c5c:	f7fd f8fc 	bl	800ee58 <IODRV_SetPin>

		if ( (vbatAdcVal > wdgThreshold) || (true == POWER_SOURCE_PRESENT) )
 8011c60:	230e      	movs	r3, #14
 8011c62:	18fa      	adds	r2, r7, r3
 8011c64:	230c      	movs	r3, #12
 8011c66:	18fb      	adds	r3, r7, r3
 8011c68:	8812      	ldrh	r2, [r2, #0]
 8011c6a:	881b      	ldrh	r3, [r3, #0]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d814      	bhi.n	8011c9a <POWERSOURCE_SetVSysSwitchState+0xce>
 8011c70:	4b17      	ldr	r3, [pc, #92]	; (8011cd0 <POWERSOURCE_SetVSysSwitchState+0x104>)
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	2b03      	cmp	r3, #3
 8011c76:	d00b      	beq.n	8011c90 <POWERSOURCE_SetVSysSwitchState+0xc4>
 8011c78:	4b15      	ldr	r3, [pc, #84]	; (8011cd0 <POWERSOURCE_SetVSysSwitchState+0x104>)
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	2b02      	cmp	r3, #2
 8011c7e:	d007      	beq.n	8011c90 <POWERSOURCE_SetVSysSwitchState+0xc4>
 8011c80:	4b14      	ldr	r3, [pc, #80]	; (8011cd4 <POWERSOURCE_SetVSysSwitchState+0x108>)
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	2b03      	cmp	r3, #3
 8011c86:	d003      	beq.n	8011c90 <POWERSOURCE_SetVSysSwitchState+0xc4>
 8011c88:	4b12      	ldr	r3, [pc, #72]	; (8011cd4 <POWERSOURCE_SetVSysSwitchState+0x108>)
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	d101      	bne.n	8011c94 <POWERSOURCE_SetVSysSwitchState+0xc8>
 8011c90:	2301      	movs	r3, #1
 8011c92:	e000      	b.n	8011c96 <POWERSOURCE_SetVSysSwitchState+0xca>
 8011c94:	2300      	movs	r3, #0
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d106      	bne.n	8011ca8 <POWERSOURCE_SetVSysSwitchState+0xdc>
		{
			IODRV_SetPin(IODRV_PIN_EXTVS_EN, true);
 8011c9a:	2101      	movs	r1, #1
 8011c9c:	2007      	movs	r0, #7
 8011c9e:	f7fd f8db 	bl	800ee58 <IODRV_SetPin>
			m_vsysEnabled = true;
 8011ca2:	4b0d      	ldr	r3, [pc, #52]	; (8011cd8 <POWERSOURCE_SetVSysSwitchState+0x10c>)
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	701a      	strb	r2, [r3, #0]
		}

		m_vsysSwitchLimit = switchState;
 8011ca8:	4b0c      	ldr	r3, [pc, #48]	; (8011cdc <POWERSOURCE_SetVSysSwitchState+0x110>)
 8011caa:	1dfa      	adds	r2, r7, #7
 8011cac:	7812      	ldrb	r2, [r2, #0]
 8011cae:	701a      	strb	r2, [r3, #0]
 8011cb0:	e006      	b.n	8011cc0 <POWERSOURCE_SetVSysSwitchState+0xf4>
	}
	else
	{
		IODRV_SetPin(IODRV_PIN_EXTVS_EN, false);
 8011cb2:	2100      	movs	r1, #0
 8011cb4:	2007      	movs	r0, #7
 8011cb6:	f7fd f8cf 	bl	800ee58 <IODRV_SetPin>
		m_vsysEnabled = false;
 8011cba:	4b07      	ldr	r3, [pc, #28]	; (8011cd8 <POWERSOURCE_SetVSysSwitchState+0x10c>)
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	701a      	strb	r2, [r3, #0]
	}

	m_forcedVSysOutputOff = false;
 8011cc0:	4b07      	ldr	r3, [pc, #28]	; (8011ce0 <POWERSOURCE_SetVSysSwitchState+0x114>)
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	701a      	strb	r2, [r3, #0]
}
 8011cc6:	46c0      	nop			; (mov r8, r8)
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	b005      	add	sp, #20
 8011ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cce:	46c0      	nop			; (mov r8, r8)
 8011cd0:	2000157d 	.word	0x2000157d
 8011cd4:	2000157e 	.word	0x2000157e
 8011cd8:	20000f49 	.word	0x20000f49
 8011cdc:	20000f4a 	.word	0x20000f4a
 8011ce0:	20000f41 	.word	0x20000f41

08011ce4 <POWERSOURCE_GetVSysSwitchState>:
 * @retval	uint8_t		VSsys current limit set point in 0.1A resolution,
 * 						0 = VSys output is off.
 */
// ****************************************************************************
uint8_t POWERSOURCE_GetVSysSwitchState(void)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	af00      	add	r7, sp, #0
	if (true == m_vsysEnabled)
 8011ce8:	4b05      	ldr	r3, [pc, #20]	; (8011d00 <POWERSOURCE_GetVSysSwitchState+0x1c>)
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d002      	beq.n	8011cf6 <POWERSOURCE_GetVSysSwitchState+0x12>
	{
		return m_vsysSwitchLimit;
 8011cf0:	4b04      	ldr	r3, [pc, #16]	; (8011d04 <POWERSOURCE_GetVSysSwitchState+0x20>)
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	e000      	b.n	8011cf8 <POWERSOURCE_GetVSysSwitchState+0x14>
	}
	else
	{
		return 0u;
 8011cf6:	2300      	movs	r3, #0
	}
}
 8011cf8:	0018      	movs	r0, r3
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	46c0      	nop			; (mov r8, r8)
 8011d00:	20000f49 	.word	0x20000f49
 8011d04:	20000f4a 	.word	0x20000f4a

08011d08 <POWERSOURCE_SetRegulatorConfigData>:
 * @param	len			length of the data within the buffer
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_SetRegulatorConfigData(const uint8_t * const p_data, const uint8_t len)
{
 8011d08:	b590      	push	{r4, r7, lr}
 8011d0a:	b085      	sub	sp, #20
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	000a      	movs	r2, r1
 8011d12:	1cfb      	adds	r3, r7, #3
 8011d14:	701a      	strb	r2, [r3, #0]
	uint8_t tempU8;

	if ( (p_data[0u] >= (uint8_t)POW_REGULATOR_MODE_COUNT) || (len < 1u) )
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	2b02      	cmp	r3, #2
 8011d1c:	d825      	bhi.n	8011d6a <POWERSOURCE_SetRegulatorConfigData+0x62>
 8011d1e:	1cfb      	adds	r3, r7, #3
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d021      	beq.n	8011d6a <POWERSOURCE_SetRegulatorConfigData+0x62>
	{
		return;
	}

	EE_WriteVariable(POWER_REGULATOR_CONFIG_NV_ADDR, p_data[0u] | ((uint16_t)(~p_data[0u]) << 8u));
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	b21a      	sxth	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	43db      	mvns	r3, r3
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	021b      	lsls	r3, r3, #8
 8011d38:	b21b      	sxth	r3, r3
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	b21b      	sxth	r3, r3
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	0019      	movs	r1, r3
 8011d42:	2056      	movs	r0, #86	; 0x56
 8011d44:	f7fa fae6 	bl	800c314 <EE_WriteVariable>

	if (NV_ReadVariable_U8(POWER_REGULATOR_CONFIG_NV_ADDR, &tempU8))
 8011d48:	240f      	movs	r4, #15
 8011d4a:	193b      	adds	r3, r7, r4
 8011d4c:	0019      	movs	r1, r3
 8011d4e:	2056      	movs	r0, #86	; 0x56
 8011d50:	f7fe fef4 	bl	8010b3c <NV_ReadVariable_U8>
 8011d54:	1e03      	subs	r3, r0, #0
 8011d56:	d009      	beq.n	8011d6c <POWERSOURCE_SetRegulatorConfigData+0x64>
	{
		if (tempU8 < POW_REGULATOR_MODE_COUNT)
 8011d58:	193b      	adds	r3, r7, r4
 8011d5a:	781b      	ldrb	r3, [r3, #0]
 8011d5c:	2b02      	cmp	r3, #2
 8011d5e:	d805      	bhi.n	8011d6c <POWERSOURCE_SetRegulatorConfigData+0x64>
		{
			m_powerRegulatorConfig = (PowerRegulatorConfig_T)tempU8;
 8011d60:	193b      	adds	r3, r7, r4
 8011d62:	781a      	ldrb	r2, [r3, #0]
 8011d64:	4b03      	ldr	r3, [pc, #12]	; (8011d74 <POWERSOURCE_SetRegulatorConfigData+0x6c>)
 8011d66:	701a      	strb	r2, [r3, #0]
 8011d68:	e000      	b.n	8011d6c <POWERSOURCE_SetRegulatorConfigData+0x64>
		return;
 8011d6a:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	b005      	add	sp, #20
 8011d70:	bd90      	pop	{r4, r7, pc}
 8011d72:	46c0      	nop			; (mov r8, r8)
 8011d74:	20001580 	.word	0x20001580

08011d78 <POWERSOURCE_GetRegulatorConfigData>:
 * @param	p_len		popultaed data length
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_GetRegulatorConfigData(uint8_t * const p_data, uint16_t * const p_len)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b082      	sub	sp, #8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	6039      	str	r1, [r7, #0]
	p_data[0u] = m_powerRegulatorConfig;
 8011d82:	4b05      	ldr	r3, [pc, #20]	; (8011d98 <POWERSOURCE_GetRegulatorConfigData+0x20>)
 8011d84:	781a      	ldrb	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	701a      	strb	r2, [r3, #0]
	*p_len = 1u;
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	801a      	strh	r2, [r3, #0]
}
 8011d90:	46c0      	nop			; (mov r8, r8)
 8011d92:	46bd      	mov	sp, r7
 8011d94:	b002      	add	sp, #8
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	20001580 	.word	0x20001580

08011d9c <POWERSOURCE_Set5vBoostEnable>:
 * 						true = attempt to turn on the boost converter
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_Set5vBoostEnable(const bool enabled)
{
 8011d9c:	b5b0      	push	{r4, r5, r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	0002      	movs	r2, r0
 8011da4:	1dfb      	adds	r3, r7, #7
 8011da6:	701a      	strb	r2, [r3, #0]
	uint16_t vBattMv = ANALOG_GetBatteryMv();
 8011da8:	250c      	movs	r5, #12
 8011daa:	197c      	adds	r4, r7, r5
 8011dac:	f7f5 fcf6 	bl	800779c <ANALOG_GetBatteryMv>
 8011db0:	0003      	movs	r3, r0
 8011db2:	8023      	strh	r3, [r4, #0]
	uint8_t retrys = 2u;
 8011db4:	230f      	movs	r3, #15
 8011db6:	18fb      	adds	r3, r7, r3
 8011db8:	2202      	movs	r2, #2
 8011dba:	701a      	strb	r2, [r3, #0]

	if (m_boostConverterEnabled == enabled)
 8011dbc:	4b4a      	ldr	r3, [pc, #296]	; (8011ee8 <POWERSOURCE_Set5vBoostEnable+0x14c>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	1dfa      	adds	r2, r7, #7
 8011dc2:	7812      	ldrb	r2, [r2, #0]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d100      	bne.n	8011dca <POWERSOURCE_Set5vBoostEnable+0x2e>
 8011dc8:	e088      	b.n	8011edc <POWERSOURCE_Set5vBoostEnable+0x140>
	{
		// Already there.
		return;
	}

	if (true == enabled)
 8011dca:	1dfb      	adds	r3, r7, #7
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d100      	bne.n	8011dd4 <POWERSOURCE_Set5vBoostEnable+0x38>
 8011dd2:	e070      	b.n	8011eb6 <POWERSOURCE_Set5vBoostEnable+0x11a>
	{
		if ( (vBattMv > m_vbatPowerOffThreshold) || (true == POWER_SOURCE_PRESENT) )
 8011dd4:	4b45      	ldr	r3, [pc, #276]	; (8011eec <POWERSOURCE_Set5vBoostEnable+0x150>)
 8011dd6:	881b      	ldrh	r3, [r3, #0]
 8011dd8:	197a      	adds	r2, r7, r5
 8011dda:	8812      	ldrh	r2, [r2, #0]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d815      	bhi.n	8011e0c <POWERSOURCE_Set5vBoostEnable+0x70>
 8011de0:	4b43      	ldr	r3, [pc, #268]	; (8011ef0 <POWERSOURCE_Set5vBoostEnable+0x154>)
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	2b03      	cmp	r3, #3
 8011de6:	d00b      	beq.n	8011e00 <POWERSOURCE_Set5vBoostEnable+0x64>
 8011de8:	4b41      	ldr	r3, [pc, #260]	; (8011ef0 <POWERSOURCE_Set5vBoostEnable+0x154>)
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	2b02      	cmp	r3, #2
 8011dee:	d007      	beq.n	8011e00 <POWERSOURCE_Set5vBoostEnable+0x64>
 8011df0:	4b40      	ldr	r3, [pc, #256]	; (8011ef4 <POWERSOURCE_Set5vBoostEnable+0x158>)
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	2b03      	cmp	r3, #3
 8011df6:	d003      	beq.n	8011e00 <POWERSOURCE_Set5vBoostEnable+0x64>
 8011df8:	4b3e      	ldr	r3, [pc, #248]	; (8011ef4 <POWERSOURCE_Set5vBoostEnable+0x158>)
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	2b02      	cmp	r3, #2
 8011dfe:	d101      	bne.n	8011e04 <POWERSOURCE_Set5vBoostEnable+0x68>
 8011e00:	2301      	movs	r3, #1
 8011e02:	e000      	b.n	8011e06 <POWERSOURCE_Set5vBoostEnable+0x6a>
 8011e04:	2300      	movs	r3, #0
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d000      	beq.n	8011e0c <POWERSOURCE_Set5vBoostEnable+0x70>
 8011e0a:	e069      	b.n	8011ee0 <POWERSOURCE_Set5vBoostEnable+0x144>
		{
			// Turn off LDO
			POWERSOURCE_SetLDOEnable(false);
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	f000 f877 	bl	8011f00 <POWERSOURCE_SetLDOEnable>

			// Switch off the analog watchdog
			AnalogAdcWDGEnable(DISABLE);
 8011e12:	2000      	movs	r0, #0
 8011e14:	f7f5 fd12 	bl	800783c <AnalogAdcWDGEnable>

			// Wait for it to happen
			DelayUs(5u);
 8011e18:	2005      	movs	r0, #5
 8011e1a:	f7ff fdb1 	bl	8011980 <DelayUs>

			// Turn on boost converter
			IODRV_SetPin(IODRV_PIN_POW_EN, true);
 8011e1e:	2101      	movs	r1, #1
 8011e20:	2006      	movs	r0, #6
 8011e22:	f7fd f819 	bl	800ee58 <IODRV_SetPin>

			// If running on battery
			if (false == POWER_SOURCE_PRESENT)
 8011e26:	4b32      	ldr	r3, [pc, #200]	; (8011ef0 <POWERSOURCE_Set5vBoostEnable+0x154>)
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	2b03      	cmp	r3, #3
 8011e2c:	d00b      	beq.n	8011e46 <POWERSOURCE_Set5vBoostEnable+0xaa>
 8011e2e:	4b30      	ldr	r3, [pc, #192]	; (8011ef0 <POWERSOURCE_Set5vBoostEnable+0x154>)
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	2b02      	cmp	r3, #2
 8011e34:	d007      	beq.n	8011e46 <POWERSOURCE_Set5vBoostEnable+0xaa>
 8011e36:	4b2f      	ldr	r3, [pc, #188]	; (8011ef4 <POWERSOURCE_Set5vBoostEnable+0x158>)
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	2b03      	cmp	r3, #3
 8011e3c:	d003      	beq.n	8011e46 <POWERSOURCE_Set5vBoostEnable+0xaa>
 8011e3e:	4b2d      	ldr	r3, [pc, #180]	; (8011ef4 <POWERSOURCE_Set5vBoostEnable+0x158>)
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	2b02      	cmp	r3, #2
 8011e44:	d101      	bne.n	8011e4a <POWERSOURCE_Set5vBoostEnable+0xae>
 8011e46:	2301      	movs	r3, #1
 8011e48:	e000      	b.n	8011e4c <POWERSOURCE_Set5vBoostEnable+0xb0>
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d126      	bne.n	8011e9e <POWERSOURCE_Set5vBoostEnable+0x102>
			{
				// Check to make sure the battery is low impedance
				while (retrys > 0u)
 8011e50:	e014      	b.n	8011e7c <POWERSOURCE_Set5vBoostEnable+0xe0>
				{
					// Wait before checking
					DelayUs(200u);
 8011e52:	20c8      	movs	r0, #200	; 0xc8
 8011e54:	f7ff fd94 	bl	8011980 <DelayUs>

					vBattMv = ANALOG_GetBatteryMv();
 8011e58:	250c      	movs	r5, #12
 8011e5a:	197c      	adds	r4, r7, r5
 8011e5c:	f7f5 fc9e 	bl	800779c <ANALOG_GetBatteryMv>
 8011e60:	0003      	movs	r3, r0
 8011e62:	8023      	strh	r3, [r4, #0]

					if (vBattMv > m_vbatPowerOffThreshold)
 8011e64:	4b21      	ldr	r3, [pc, #132]	; (8011eec <POWERSOURCE_Set5vBoostEnable+0x150>)
 8011e66:	881b      	ldrh	r3, [r3, #0]
 8011e68:	197a      	adds	r2, r7, r5
 8011e6a:	8812      	ldrh	r2, [r2, #0]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d80b      	bhi.n	8011e88 <POWERSOURCE_Set5vBoostEnable+0xec>
					{
						// Happy days
						break;
					}

					retrys--;
 8011e70:	210f      	movs	r1, #15
 8011e72:	187b      	adds	r3, r7, r1
 8011e74:	781a      	ldrb	r2, [r3, #0]
 8011e76:	187b      	adds	r3, r7, r1
 8011e78:	3a01      	subs	r2, #1
 8011e7a:	701a      	strb	r2, [r3, #0]
				while (retrys > 0u)
 8011e7c:	230f      	movs	r3, #15
 8011e7e:	18fb      	adds	r3, r7, r3
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d1e5      	bne.n	8011e52 <POWERSOURCE_Set5vBoostEnable+0xb6>
 8011e86:	e000      	b.n	8011e8a <POWERSOURCE_Set5vBoostEnable+0xee>
						break;
 8011e88:	46c0      	nop			; (mov r8, r8)
				}

				if (0u == retrys)
 8011e8a:	230f      	movs	r3, #15
 8011e8c:	18fb      	adds	r3, r7, r3
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d104      	bne.n	8011e9e <POWERSOURCE_Set5vBoostEnable+0x102>
				{
					// Battery is not in a good enough state to power the system
					IODRV_SetPin(IODRV_PIN_POW_EN, false);
 8011e94:	2100      	movs	r1, #0
 8011e96:	2006      	movs	r0, #6
 8011e98:	f7fc ffde 	bl	800ee58 <IODRV_SetPin>

					return;
 8011e9c:	e021      	b.n	8011ee2 <POWERSOURCE_Set5vBoostEnable+0x146>
				}
			}

			// TODO - Original code pulsed power off-5us-on
			m_boostConverterEnabled = true;
 8011e9e:	4b12      	ldr	r3, [pc, #72]	; (8011ee8 <POWERSOURCE_Set5vBoostEnable+0x14c>)
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	701a      	strb	r2, [r3, #0]

			// Stamp time boost converter is enabled
			MS_TIME_COUNTER_INIT(m_boostOnTimeMs);
 8011ea4:	f7f1 f914 	bl	80030d0 <HAL_GetTick>
 8011ea8:	0002      	movs	r2, r0
 8011eaa:	4b13      	ldr	r3, [pc, #76]	; (8011ef8 <POWERSOURCE_Set5vBoostEnable+0x15c>)
 8011eac:	601a      	str	r2, [r3, #0]

			// Turn on the analog watchdog
			AnalogAdcWDGEnable(ENABLE);
 8011eae:	2001      	movs	r0, #1
 8011eb0:	f7f5 fcc4 	bl	800783c <AnalogAdcWDGEnable>

			return;
 8011eb4:	e015      	b.n	8011ee2 <POWERSOURCE_Set5vBoostEnable+0x146>
		}
	}
	else
	{
		// Turn off LDO
		POWERSOURCE_SetLDOEnable(false);
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	f000 f822 	bl	8011f00 <POWERSOURCE_SetLDOEnable>

		AnalogAdcWDGEnable(DISABLE);
 8011ebc:	2000      	movs	r0, #0
 8011ebe:	f7f5 fcbd 	bl	800783c <AnalogAdcWDGEnable>

		// Turn off the boost converter
		IODRV_SetPin(IODRV_PIN_POW_EN, false);
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	2006      	movs	r0, #6
 8011ec6:	f7fc ffc7 	bl	800ee58 <IODRV_SetPin>

		MS_TIME_COUNTER_INIT(m_lastRPiPowerDetectTimeMs);
 8011eca:	f7f1 f901 	bl	80030d0 <HAL_GetTick>
 8011ece:	0002      	movs	r2, r0
 8011ed0:	4b0a      	ldr	r3, [pc, #40]	; (8011efc <POWERSOURCE_Set5vBoostEnable+0x160>)
 8011ed2:	601a      	str	r2, [r3, #0]

		m_boostConverterEnabled = false;
 8011ed4:	4b04      	ldr	r3, [pc, #16]	; (8011ee8 <POWERSOURCE_Set5vBoostEnable+0x14c>)
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	701a      	strb	r2, [r3, #0]

		return;
 8011eda:	e002      	b.n	8011ee2 <POWERSOURCE_Set5vBoostEnable+0x146>
		return;
 8011edc:	46c0      	nop			; (mov r8, r8)
 8011ede:	e000      	b.n	8011ee2 <POWERSOURCE_Set5vBoostEnable+0x146>
			return;
 8011ee0:	46c0      	nop			; (mov r8, r8)
	}
}
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	b004      	add	sp, #16
 8011ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8011ee8:	20000f48 	.word	0x20000f48
 8011eec:	20001566 	.word	0x20001566
 8011ef0:	2000157d 	.word	0x2000157d
 8011ef4:	2000157e 	.word	0x2000157e
 8011ef8:	2000156c 	.word	0x2000156c
 8011efc:	20001570 	.word	0x20001570

08011f00 <POWERSOURCE_SetLDOEnable>:
 * 						false attempts to turn off the LDO
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_SetLDOEnable(const bool enabled)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	0002      	movs	r2, r0
 8011f08:	1dfb      	adds	r3, r7, #7
 8011f0a:	701a      	strb	r2, [r3, #0]
	if (m_powerRegulatorConfig == POW_REGULATOR_MODE_DCDC)
 8011f0c:	4b0f      	ldr	r3, [pc, #60]	; (8011f4c <POWERSOURCE_SetLDOEnable+0x4c>)
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	2b02      	cmp	r3, #2
 8011f12:	d103      	bne.n	8011f1c <POWERSOURCE_SetLDOEnable+0x1c>
	{
		m_ldoEnabled = false;
 8011f14:	4b0e      	ldr	r3, [pc, #56]	; (8011f50 <POWERSOURCE_SetLDOEnable+0x50>)
 8011f16:	2200      	movs	r2, #0
 8011f18:	701a      	strb	r2, [r3, #0]
 8011f1a:	e00c      	b.n	8011f36 <POWERSOURCE_SetLDOEnable+0x36>
	}
	else if (m_powerRegulatorConfig == POW_REGULATOR_MODE_LDO)
 8011f1c:	4b0b      	ldr	r3, [pc, #44]	; (8011f4c <POWERSOURCE_SetLDOEnable+0x4c>)
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	d104      	bne.n	8011f2e <POWERSOURCE_SetLDOEnable+0x2e>
	{
		m_ldoEnabled = m_boostConverterEnabled;
 8011f24:	4b0b      	ldr	r3, [pc, #44]	; (8011f54 <POWERSOURCE_SetLDOEnable+0x54>)
 8011f26:	781a      	ldrb	r2, [r3, #0]
 8011f28:	4b09      	ldr	r3, [pc, #36]	; (8011f50 <POWERSOURCE_SetLDOEnable+0x50>)
 8011f2a:	701a      	strb	r2, [r3, #0]
 8011f2c:	e003      	b.n	8011f36 <POWERSOURCE_SetLDOEnable+0x36>
	}
	else // Powersource detection mode
	{
		m_ldoEnabled = enabled;
 8011f2e:	4b08      	ldr	r3, [pc, #32]	; (8011f50 <POWERSOURCE_SetLDOEnable+0x50>)
 8011f30:	1dfa      	adds	r2, r7, #7
 8011f32:	7812      	ldrb	r2, [r2, #0]
 8011f34:	701a      	strb	r2, [r3, #0]
	}

	IODRV_SetPin(IODRV_PIN_POWDET_EN, m_ldoEnabled);
 8011f36:	4b06      	ldr	r3, [pc, #24]	; (8011f50 <POWERSOURCE_SetLDOEnable+0x50>)
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	0019      	movs	r1, r3
 8011f3c:	2005      	movs	r0, #5
 8011f3e:	f7fc ff8b 	bl	800ee58 <IODRV_SetPin>
}
 8011f42:	46c0      	nop			; (mov r8, r8)
 8011f44:	46bd      	mov	sp, r7
 8011f46:	b002      	add	sp, #8
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	46c0      	nop			; (mov r8, r8)
 8011f4c:	20001580 	.word	0x20001580
 8011f50:	2000157c 	.word	0x2000157c
 8011f54:	20000f48 	.word	0x20000f48

08011f58 <POWERSOURCE_IsVsysEnabled>:
 * @retval	bool		false = VSys output is off
 * 						true = VSys output is on
 */
// ****************************************************************************
bool POWERSOURCE_IsVsysEnabled(void)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	af00      	add	r7, sp, #0
	return m_vsysEnabled;
 8011f5c:	4b02      	ldr	r3, [pc, #8]	; (8011f68 <POWERSOURCE_IsVsysEnabled+0x10>)
 8011f5e:	781b      	ldrb	r3, [r3, #0]
}
 8011f60:	0018      	movs	r0, r3
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	46c0      	nop			; (mov r8, r8)
 8011f68:	20000f49 	.word	0x20000f49

08011f6c <POWERSOURCE_IsBoostConverterEnabled>:
 * @retval	bool		false = boost converter is disabled
 * 						true = boost converter is enabled
 */
// ****************************************************************************
bool POWERSOURCE_IsBoostConverterEnabled(void)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	af00      	add	r7, sp, #0
	return m_boostConverterEnabled;
 8011f70:	4b02      	ldr	r3, [pc, #8]	; (8011f7c <POWERSOURCE_IsBoostConverterEnabled+0x10>)
 8011f72:	781b      	ldrb	r3, [r3, #0]
}
 8011f74:	0018      	movs	r0, r3
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	46c0      	nop			; (mov r8, r8)
 8011f7c:	20000f48 	.word	0x20000f48

08011f80 <POWERSOURCE_IsLDOEnabled>:
 * @retval	bool		false = LDO disabled
 * 						true = LDO enabled
 */
// ****************************************************************************
bool POWERSOURCE_IsLDOEnabled(void)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	af00      	add	r7, sp, #0
	return m_ldoEnabled;
 8011f84:	4b02      	ldr	r3, [pc, #8]	; (8011f90 <POWERSOURCE_IsLDOEnabled+0x10>)
 8011f86:	781b      	ldrb	r3, [r3, #0]
}
 8011f88:	0018      	movs	r0, r3
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	46c0      	nop			; (mov r8, r8)
 8011f90:	2000157c 	.word	0x2000157c

08011f94 <POWERSOURCE_GetVInStatus>:
 * @param	none
 * @retval	PowerSourceStatus_T		current state of the VIn power input
 */
// ****************************************************************************
PowerSourceStatus_T POWERSOURCE_GetVInStatus(void)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	af00      	add	r7, sp, #0
	return m_powerInStatus;
 8011f98:	4b02      	ldr	r3, [pc, #8]	; (8011fa4 <POWERSOURCE_GetVInStatus+0x10>)
 8011f9a:	781b      	ldrb	r3, [r3, #0]
}
 8011f9c:	0018      	movs	r0, r3
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	46c0      	nop			; (mov r8, r8)
 8011fa4:	2000157d 	.word	0x2000157d

08011fa8 <POWERSOURCE_Get5VRailStatus>:
 * @param	none
 * @retval	PowerSourceStatus_T		current state of the 5V RPi power input
 */
// ****************************************************************************
PowerSourceStatus_T POWERSOURCE_Get5VRailStatus(void)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	af00      	add	r7, sp, #0
	return m_power5vIoStatus;
 8011fac:	4b02      	ldr	r3, [pc, #8]	; (8011fb8 <POWERSOURCE_Get5VRailStatus+0x10>)
 8011fae:	781b      	ldrb	r3, [r3, #0]
}
 8011fb0:	0018      	movs	r0, r3
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	46c0      	nop			; (mov r8, r8)
 8011fb8:	2000157e 	.word	0x2000157e

08011fbc <POWERSOURCE_GetRPi5VPowerStatus>:
 * @param	none
 * @retval	POWERSOURCE_RPi5VStatus_t
 */
// ****************************************************************************
POWERSOURCE_RPi5VStatus_t POWERSOURCE_GetRPi5VPowerStatus(void)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	af00      	add	r7, sp, #0
	return m_rpi5VInDetStatus;
 8011fc0:	4b02      	ldr	r3, [pc, #8]	; (8011fcc <POWERSOURCE_GetRPi5VPowerStatus+0x10>)
 8011fc2:	781b      	ldrb	r3, [r3, #0]
}
 8011fc4:	0018      	movs	r0, r3
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	46c0      	nop			; (mov r8, r8)
 8011fcc:	2000157f 	.word	0x2000157f

08011fd0 <POWERSOURCE_NeedPoll>:
 * @retval	bool		false = module does not require update
 * 						true -= module requires update
 */
// ****************************************************************************
bool POWERSOURCE_NeedPoll(void)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	af00      	add	r7, sp, #0
	return ( (m_rpi5VInDetStatus == RPI5V_DETECTION_STATUS_POWERED) ||
 8011fd4:	4b0a      	ldr	r3, [pc, #40]	; (8012000 <POWERSOURCE_NeedPoll+0x30>)
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2b02      	cmp	r3, #2
 8011fda:	d007      	beq.n	8011fec <POWERSOURCE_NeedPoll+0x1c>
			(MS_TIME_COUNT(m_boostOnTimeMs) < POWERSOURCE_STABLISE_TIME_MS)
 8011fdc:	f7f1 f878 	bl	80030d0 <HAL_GetTick>
 8011fe0:	0002      	movs	r2, r0
 8011fe2:	4b08      	ldr	r3, [pc, #32]	; (8012004 <POWERSOURCE_NeedPoll+0x34>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	1ad3      	subs	r3, r2, r3
	return ( (m_rpi5VInDetStatus == RPI5V_DETECTION_STATUS_POWERED) ||
 8011fe8:	2b63      	cmp	r3, #99	; 0x63
 8011fea:	d801      	bhi.n	8011ff0 <POWERSOURCE_NeedPoll+0x20>
 8011fec:	2301      	movs	r3, #1
 8011fee:	e000      	b.n	8011ff2 <POWERSOURCE_NeedPoll+0x22>
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	1c1a      	adds	r2, r3, #0
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	4013      	ands	r3, r2
 8011ff8:	b2db      	uxtb	r3, r3
			);
}
 8011ffa:	0018      	movs	r0, r3
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	2000157f 	.word	0x2000157f
 8012004:	2000156c 	.word	0x2000156c

08012008 <POWERSOURCE_GetForcedPowerOffStatus>:
 * @retval	bool		false = boost converter not enabled on power reset
 * 						true = boost converter detected enabled on power reset
 */
// ****************************************************************************
bool POWERSOURCE_GetForcedPowerOffStatus(void)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	af00      	add	r7, sp, #0
	return m_forcedPowerOff;
 801200c:	4b02      	ldr	r3, [pc, #8]	; (8012018 <POWERSOURCE_GetForcedPowerOffStatus+0x10>)
 801200e:	781b      	ldrb	r3, [r3, #0]
}
 8012010:	0018      	movs	r0, r3
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
 8012016:	46c0      	nop			; (mov r8, r8)
 8012018:	20000f40 	.word	0x20000f40

0801201c <POWERSOURCE_GetForcedVSysOutputOffStatus>:
 * @retval	bool		false = VSys output not forced off
 * 						true = VSys output forced off
 */
// ****************************************************************************
bool POWERSOURCE_GetForcedVSysOutputOffStatus(void)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	af00      	add	r7, sp, #0
	return m_forcedVSysOutputOff;
 8012020:	4b02      	ldr	r3, [pc, #8]	; (801202c <POWERSOURCE_GetForcedVSysOutputOffStatus+0x10>)
 8012022:	781b      	ldrb	r3, [r3, #0]
}
 8012024:	0018      	movs	r0, r3
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	46c0      	nop			; (mov r8, r8)
 801202c:	20000f41 	.word	0x20000f41

08012030 <POWERSOURCE_ClearForcedPowerOff>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_ClearForcedPowerOff(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	af00      	add	r7, sp, #0
	m_forcedPowerOff = false;
 8012034:	4b02      	ldr	r3, [pc, #8]	; (8012040 <POWERSOURCE_ClearForcedPowerOff+0x10>)
 8012036:	2200      	movs	r2, #0
 8012038:	701a      	strb	r2, [r3, #0]
}
 801203a:	46c0      	nop			; (mov r8, r8)
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	20000f40 	.word	0x20000f40

08012044 <POWERSOURCE_ClearForcedVSysOutputOff>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_ClearForcedVSysOutputOff(void)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	af00      	add	r7, sp, #0
	m_forcedVSysOutputOff = false;
 8012048:	4b02      	ldr	r3, [pc, #8]	; (8012054 <POWERSOURCE_ClearForcedVSysOutputOff+0x10>)
 801204a:	2200      	movs	r2, #0
 801204c:	701a      	strb	r2, [r3, #0]
}
 801204e:	46c0      	nop			; (mov r8, r8)
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	20000f41 	.word	0x20000f41

08012058 <POWERSOURCE_CheckPowerValid>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_CheckPowerValid(void)
{
 8012058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801205a:	b085      	sub	sp, #20
 801205c:	af00      	add	r7, sp, #0
	const uint16_t v5RailMv = ANALOG_Get5VRailMv();
 801205e:	250e      	movs	r5, #14
 8012060:	197c      	adds	r4, r7, r5
 8012062:	f7f5 fbb7 	bl	80077d4 <ANALOG_Get5VRailMv>
 8012066:	0003      	movs	r3, r0
 8012068:	8023      	strh	r3, [r4, #0]
	const uint16_t aVddMv = ANALOG_GetAVDDMv();
 801206a:	260c      	movs	r6, #12
 801206c:	19bc      	adds	r4, r7, r6
 801206e:	f7f5 fb89 	bl	8007784 <ANALOG_GetAVDDMv>
 8012072:	0003      	movs	r3, r0
 8012074:	8023      	strh	r3, [r4, #0]
	const uint16_t vBattMv = ANALOG_GetBatteryMv();
 8012076:	230a      	movs	r3, #10
 8012078:	18fc      	adds	r4, r7, r3
 801207a:	f7f5 fb8f 	bl	800779c <ANALOG_GetBatteryMv>
 801207e:	0003      	movs	r3, r0
 8012080:	8023      	strh	r3, [r4, #0]
	const uint16_t batteryADCValue = ADC_GetAverageValue(ANALOG_CHANNEL_VBAT);
 8012082:	2308      	movs	r3, #8
 8012084:	18fc      	adds	r4, r7, r3
 8012086:	2002      	movs	r0, #2
 8012088:	f7f5 faa2 	bl	80075d0 <ADC_GetAverageValue>
 801208c:	0003      	movs	r3, r0
 801208e:	8023      	strh	r3, [r4, #0]
	const bool chargerHasPowerIn = CHARGER_IsChargeSourceAvailable();
 8012090:	1dfc      	adds	r4, r7, #7
 8012092:	f7f7 fd7d 	bl	8009b90 <CHARGER_IsChargeSourceAvailable>
 8012096:	0003      	movs	r3, r0
 8012098:	7023      	strb	r3, [r4, #0]
	const uint32_t sysTime = HAL_GetTick();
 801209a:	f7f1 f819 	bl	80030d0 <HAL_GetTick>
 801209e:	0003      	movs	r3, r0
 80120a0:	603b      	str	r3, [r7, #0]

	if ( true == m_boostConverterEnabled )
 80120a2:	4b43      	ldr	r3, [pc, #268]	; (80121b0 <POWERSOURCE_CheckPowerValid+0x158>)
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d055      	beq.n	8012156 <POWERSOURCE_CheckPowerValid+0xfe>
	{
		if (false == MS_TIMEREF_TIMEOUT(m_boostOnTimeMs, sysTime, POWERSOURCE_STABLISE_TIME_MS))
 80120aa:	4b42      	ldr	r3, [pc, #264]	; (80121b4 <POWERSOURCE_CheckPowerValid+0x15c>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	683a      	ldr	r2, [r7, #0]
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	2b63      	cmp	r3, #99	; 0x63
 80120b4:	d800      	bhi.n	80120b8 <POWERSOURCE_CheckPowerValid+0x60>
 80120b6:	e076      	b.n	80121a6 <POWERSOURCE_CheckPowerValid+0x14e>
		{
			return;
		}

		if ( (v5RailMv < 2000u) && (aVddMv > 2500u) )
 80120b8:	197b      	adds	r3, r7, r5
 80120ba:	881a      	ldrh	r2, [r3, #0]
 80120bc:	23fa      	movs	r3, #250	; 0xfa
 80120be:	00db      	lsls	r3, r3, #3
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d20b      	bcs.n	80120dc <POWERSOURCE_CheckPowerValid+0x84>
 80120c4:	19bb      	adds	r3, r7, r6
 80120c6:	881b      	ldrh	r3, [r3, #0]
 80120c8:	4a3b      	ldr	r2, [pc, #236]	; (80121b8 <POWERSOURCE_CheckPowerValid+0x160>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d906      	bls.n	80120dc <POWERSOURCE_CheckPowerValid+0x84>
		{
			//5V DCDC is in fault overcurrent state, turn it off to prevent draining battery
			POWERSOURCE_Set5vBoostEnable(false);
 80120ce:	2000      	movs	r0, #0
 80120d0:	f7ff fe64 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>
			m_forcedPowerOff = true;
 80120d4:	4b39      	ldr	r3, [pc, #228]	; (80121bc <POWERSOURCE_CheckPowerValid+0x164>)
 80120d6:	2201      	movs	r2, #1
 80120d8:	701a      	strb	r2, [r3, #0]

			return;
 80120da:	e065      	b.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
		}

		// if no sources connected, turn off 5V regulator and system switch when battery voltage drops below minimum
		if ( (batteryADCValue < GetAdcWDGThreshold())
 80120dc:	f7ff fc46 	bl	801196c <GetAdcWDGThreshold>
 80120e0:	0003      	movs	r3, r0
 80120e2:	001a      	movs	r2, r3
 80120e4:	2308      	movs	r3, #8
 80120e6:	18fb      	adds	r3, r7, r3
 80120e8:	881b      	ldrh	r3, [r3, #0]
 80120ea:	4293      	cmp	r3, r2
 80120ec:	d25c      	bcs.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
				&& (m_rpi5VInDetStatus != RPI5V_DETECTION_STATUS_POWERED)
 80120ee:	4b34      	ldr	r3, [pc, #208]	; (80121c0 <POWERSOURCE_CheckPowerValid+0x168>)
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	2b02      	cmp	r3, #2
 80120f4:	d058      	beq.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
				&& (false == chargerHasPowerIn)
 80120f6:	1dfb      	adds	r3, r7, #7
 80120f8:	781b      	ldrb	r3, [r3, #0]
 80120fa:	2201      	movs	r2, #1
 80120fc:	4053      	eors	r3, r2
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	2b00      	cmp	r3, #0
 8012102:	d051      	beq.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
				)
		{
			if (true == m_vsysEnabled)
 8012104:	4b2f      	ldr	r3, [pc, #188]	; (80121c4 <POWERSOURCE_CheckPowerValid+0x16c>)
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00f      	beq.n	801212c <POWERSOURCE_CheckPowerValid+0xd4>
			{
				// Turn off Vsys and set forced off flag
				IODRV_SetPin(IODRV_PIN_EXTVS_EN, false);
 801210c:	2100      	movs	r1, #0
 801210e:	2007      	movs	r0, #7
 8012110:	f7fc fea2 	bl	800ee58 <IODRV_SetPin>
				m_vsysEnabled = false;
 8012114:	4b2b      	ldr	r3, [pc, #172]	; (80121c4 <POWERSOURCE_CheckPowerValid+0x16c>)
 8012116:	2200      	movs	r2, #0
 8012118:	701a      	strb	r2, [r3, #0]
				m_forcedVSysOutputOff = true;
 801211a:	4b2b      	ldr	r3, [pc, #172]	; (80121c8 <POWERSOURCE_CheckPowerValid+0x170>)
 801211c:	2201      	movs	r2, #1
 801211e:	701a      	strb	r2, [r3, #0]

				// Leave 2 ms for switch to react
				MS_TIME_COUNTER_INIT(forcedPowerOffCounter);
 8012120:	f7f0 ffd6 	bl	80030d0 <HAL_GetTick>
 8012124:	0002      	movs	r2, r0
 8012126:	4b29      	ldr	r3, [pc, #164]	; (80121cc <POWERSOURCE_CheckPowerValid+0x174>)
 8012128:	601a      	str	r2, [r3, #0]

				return;
 801212a:	e03d      	b.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
			}
			else if ( MS_TIME_COUNT(forcedPowerOffCounter) >= 2u)
 801212c:	f7f0 ffd0 	bl	80030d0 <HAL_GetTick>
 8012130:	0002      	movs	r2, r0
 8012132:	4b26      	ldr	r3, [pc, #152]	; (80121cc <POWERSOURCE_CheckPowerValid+0x174>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	1ad3      	subs	r3, r2, r3
 8012138:	2b01      	cmp	r3, #1
 801213a:	d935      	bls.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
			{

				POWERSOURCE_SetLDOEnable(false);
 801213c:	2000      	movs	r0, #0
 801213e:	f7ff fedf 	bl	8011f00 <POWERSOURCE_SetLDOEnable>
				POWERSOURCE_Set5vBoostEnable(false);
 8012142:	2000      	movs	r0, #0
 8012144:	f7ff fe2a 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>

				m_forcedPowerOff = true;
 8012148:	4b1c      	ldr	r3, [pc, #112]	; (80121bc <POWERSOURCE_CheckPowerValid+0x164>)
 801214a:	2201      	movs	r2, #1
 801214c:	701a      	strb	r2, [r3, #0]
				POWERMAN_SetWakeupOnChargePcntPt1(5u); // schedule wake up when power is applied
 801214e:	2005      	movs	r0, #5
 8012150:	f7ff fb74 	bl	801183c <POWERMAN_SetWakeupOnChargePcntPt1>

				return;
 8012154:	e028      	b.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
		}
	}
	else
	{
		// If running on battery with VSys on (RPi is off!) turn off Vsys when it gets too low
		if ( (false == POWER_SOURCE_PRESENT)
 8012156:	4b1e      	ldr	r3, [pc, #120]	; (80121d0 <POWERSOURCE_CheckPowerValid+0x178>)
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	2b03      	cmp	r3, #3
 801215c:	d00b      	beq.n	8012176 <POWERSOURCE_CheckPowerValid+0x11e>
 801215e:	4b1c      	ldr	r3, [pc, #112]	; (80121d0 <POWERSOURCE_CheckPowerValid+0x178>)
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	2b02      	cmp	r3, #2
 8012164:	d007      	beq.n	8012176 <POWERSOURCE_CheckPowerValid+0x11e>
 8012166:	4b1b      	ldr	r3, [pc, #108]	; (80121d4 <POWERSOURCE_CheckPowerValid+0x17c>)
 8012168:	781b      	ldrb	r3, [r3, #0]
 801216a:	2b03      	cmp	r3, #3
 801216c:	d003      	beq.n	8012176 <POWERSOURCE_CheckPowerValid+0x11e>
 801216e:	4b19      	ldr	r3, [pc, #100]	; (80121d4 <POWERSOURCE_CheckPowerValid+0x17c>)
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	2b02      	cmp	r3, #2
 8012174:	d101      	bne.n	801217a <POWERSOURCE_CheckPowerValid+0x122>
 8012176:	2301      	movs	r3, #1
 8012178:	e000      	b.n	801217c <POWERSOURCE_CheckPowerValid+0x124>
 801217a:	2300      	movs	r3, #0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d113      	bne.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
				&& (vBattMv < m_vbatPowerOffThreshold)
 8012180:	4b15      	ldr	r3, [pc, #84]	; (80121d8 <POWERSOURCE_CheckPowerValid+0x180>)
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	220a      	movs	r2, #10
 8012186:	18ba      	adds	r2, r7, r2
 8012188:	8812      	ldrh	r2, [r2, #0]
 801218a:	429a      	cmp	r2, r3
 801218c:	d20c      	bcs.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
				&& (true == m_vsysEnabled)
 801218e:	4b0d      	ldr	r3, [pc, #52]	; (80121c4 <POWERSOURCE_CheckPowerValid+0x16c>)
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d008      	beq.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
				)
		{
			IODRV_SetPin(IODRV_PIN_EXTVS_EN, false);
 8012196:	2100      	movs	r1, #0
 8012198:	2007      	movs	r0, #7
 801219a:	f7fc fe5d 	bl	800ee58 <IODRV_SetPin>
			m_forcedVSysOutputOff = true;
 801219e:	4b0a      	ldr	r3, [pc, #40]	; (80121c8 <POWERSOURCE_CheckPowerValid+0x170>)
 80121a0:	2201      	movs	r2, #1
 80121a2:	701a      	strb	r2, [r3, #0]

			return;
 80121a4:	e000      	b.n	80121a8 <POWERSOURCE_CheckPowerValid+0x150>
			return;
 80121a6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80121a8:	46bd      	mov	sp, r7
 80121aa:	b005      	add	sp, #20
 80121ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ae:	46c0      	nop			; (mov r8, r8)
 80121b0:	20000f48 	.word	0x20000f48
 80121b4:	2000156c 	.word	0x2000156c
 80121b8:	000009c4 	.word	0x000009c4
 80121bc:	20000f40 	.word	0x20000f40
 80121c0:	2000157f 	.word	0x2000157f
 80121c4:	20000f49 	.word	0x20000f49
 80121c8:	20000f41 	.word	0x20000f41
 80121cc:	20000f44 	.word	0x20000f44
 80121d0:	2000157d 	.word	0x2000157d
 80121d4:	2000157e 	.word	0x2000157e
 80121d8:	20001566 	.word	0x20001566

080121dc <POWERSOURCE_Process5VRailPower>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
static void POWERSOURCE_Process5VRailPower(void)
{
 80121dc:	b590      	push	{r4, r7, lr}
 80121de:	b085      	sub	sp, #20
 80121e0:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 80121e2:	f7f0 ff75 	bl	80030d0 <HAL_GetTick>
 80121e6:	0003      	movs	r3, r0
 80121e8:	60fb      	str	r3, [r7, #12]
	const BatteryStatus_T batteryStatus = BATTERY_GetStatus();
 80121ea:	230b      	movs	r3, #11
 80121ec:	18fc      	adds	r4, r7, r3
 80121ee:	f7f5 ff5f 	bl	80080b0 <BATTERY_GetStatus>
 80121f2:	0003      	movs	r3, r0
 80121f4:	7023      	strb	r3, [r4, #0]
	const uint16_t vBattMv = ANALOG_GetBatteryMv();
 80121f6:	2308      	movs	r3, #8
 80121f8:	18fc      	adds	r4, r7, r3
 80121fa:	f7f5 facf 	bl	800779c <ANALOG_GetBatteryMv>
 80121fe:	0003      	movs	r3, r0
 8012200:	8023      	strh	r3, [r4, #0]
	const ChargerStatus_T chargerStatus = CHARGER_GetStatus();
 8012202:	1dfc      	adds	r4, r7, #7
 8012204:	f7f7 fcaa 	bl	8009b5c <CHARGER_GetStatus>
 8012208:	0003      	movs	r3, r0
 801220a:	7023      	strb	r3, [r4, #0]

	if (false == MS_TIMEREF_TIMEOUT(m_lastPowerProcessTime, sysTime, POWERSOURCE_5VRAIL_PROCESS_PERIOD_MS))
 801220c:	4b28      	ldr	r3, [pc, #160]	; (80122b0 <POWERSOURCE_Process5VRailPower+0xd4>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	68fa      	ldr	r2, [r7, #12]
 8012212:	1ad3      	subs	r3, r2, r3
 8012214:	2b63      	cmp	r3, #99	; 0x63
 8012216:	d944      	bls.n	80122a2 <POWERSOURCE_Process5VRailPower+0xc6>
	{
		return;
	}

	MS_TIMEREF_INIT(m_lastPowerProcessTime, sysTime);
 8012218:	4b25      	ldr	r3, [pc, #148]	; (80122b0 <POWERSOURCE_Process5VRailPower+0xd4>)
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	601a      	str	r2, [r3, #0]

	// If running on battery, test to make sure there is enough power to supply the system
	if ( (false == POWER_SOURCE_PRESENT) )
 801221e:	4b25      	ldr	r3, [pc, #148]	; (80122b4 <POWERSOURCE_Process5VRailPower+0xd8>)
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	2b03      	cmp	r3, #3
 8012224:	d00b      	beq.n	801223e <POWERSOURCE_Process5VRailPower+0x62>
 8012226:	4b23      	ldr	r3, [pc, #140]	; (80122b4 <POWERSOURCE_Process5VRailPower+0xd8>)
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	2b02      	cmp	r3, #2
 801222c:	d007      	beq.n	801223e <POWERSOURCE_Process5VRailPower+0x62>
 801222e:	4b22      	ldr	r3, [pc, #136]	; (80122b8 <POWERSOURCE_Process5VRailPower+0xdc>)
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	2b03      	cmp	r3, #3
 8012234:	d003      	beq.n	801223e <POWERSOURCE_Process5VRailPower+0x62>
 8012236:	4b20      	ldr	r3, [pc, #128]	; (80122b8 <POWERSOURCE_Process5VRailPower+0xdc>)
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	2b02      	cmp	r3, #2
 801223c:	d101      	bne.n	8012242 <POWERSOURCE_Process5VRailPower+0x66>
 801223e:	2301      	movs	r3, #1
 8012240:	e000      	b.n	8012244 <POWERSOURCE_Process5VRailPower+0x68>
 8012242:	2300      	movs	r3, #0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d111      	bne.n	801226c <POWERSOURCE_Process5VRailPower+0x90>
	{
		// If battery is low terminal voltage,
		// Note: if there is no power source and no battery, what does that mean?!
		if ( (BAT_STATUS_NOT_PRESENT != batteryStatus) && (vBattMv < m_vbatPowerOffThreshold) )
 8012248:	230b      	movs	r3, #11
 801224a:	18fb      	adds	r3, r7, r3
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	2b03      	cmp	r3, #3
 8012250:	d00c      	beq.n	801226c <POWERSOURCE_Process5VRailPower+0x90>
 8012252:	4b1a      	ldr	r3, [pc, #104]	; (80122bc <POWERSOURCE_Process5VRailPower+0xe0>)
 8012254:	881b      	ldrh	r3, [r3, #0]
 8012256:	2208      	movs	r2, #8
 8012258:	18ba      	adds	r2, r7, r2
 801225a:	8812      	ldrh	r2, [r2, #0]
 801225c:	429a      	cmp	r2, r3
 801225e:	d205      	bcs.n	801226c <POWERSOURCE_Process5VRailPower+0x90>
		{
			POWERSOURCE_Set5vBoostEnable(false);
 8012260:	2000      	movs	r0, #0
 8012262:	f7ff fd9b 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>
			m_forcedPowerOff = true;
 8012266:	4b16      	ldr	r3, [pc, #88]	; (80122c0 <POWERSOURCE_Process5VRailPower+0xe4>)
 8012268:	2201      	movs	r2, #1
 801226a:	701a      	strb	r2, [r3, #0]
		}
	}


	if (MS_TIMEREF_TIMEOUT(m_boostOnTimeMs, sysTime, 95u))
 801226c:	4b15      	ldr	r3, [pc, #84]	; (80122c4 <POWERSOURCE_Process5VRailPower+0xe8>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	68fa      	ldr	r2, [r7, #12]
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	2b5e      	cmp	r3, #94	; 0x5e
 8012276:	d902      	bls.n	801227e <POWERSOURCE_Process5VRailPower+0xa2>
	{
		// Once the dcdc has settled enable the LDO.
		// Note: Will only enable if it has been configured so.
		POWERSOURCE_SetLDOEnable(true);
 8012278:	2001      	movs	r0, #1
 801227a:	f7ff fe41 	bl	8011f00 <POWERSOURCE_SetLDOEnable>
	}


	if (m_rpi5VInDetStatus != RPI5V_DETECTION_STATUS_POWERED)
 801227e:	4b12      	ldr	r3, [pc, #72]	; (80122c8 <POWERSOURCE_Process5VRailPower+0xec>)
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	2b02      	cmp	r3, #2
 8012284:	d10f      	bne.n	80122a6 <POWERSOURCE_Process5VRailPower+0xca>
	{
		return;
	}


	if (CHG_CHARGING_FROM_RPI == chargerStatus)
 8012286:	1dfb      	adds	r3, r7, #7
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	2b04      	cmp	r3, #4
 801228c:	d10c      	bne.n	80122a8 <POWERSOURCE_Process5VRailPower+0xcc>
	{
		if (m_rpiVLowCount > 0u)
 801228e:	4b0f      	ldr	r3, [pc, #60]	; (80122cc <POWERSOURCE_Process5VRailPower+0xf0>)
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d002      	beq.n	801229c <POWERSOURCE_Process5VRailPower+0xc0>
		{
			CHARGER_RPi5vInCurrentLimitStepDown();
 8012296:	f7f7 fb87 	bl	80099a8 <CHARGER_RPi5vInCurrentLimitStepDown>
 801229a:	e005      	b.n	80122a8 <POWERSOURCE_Process5VRailPower+0xcc>
		}
		else
		{
			CHARGER_RPi5vInCurrentLimitStepUp();
 801229c:	f7f7 fb72 	bl	8009984 <CHARGER_RPi5vInCurrentLimitStepUp>
 80122a0:	e002      	b.n	80122a8 <POWERSOURCE_Process5VRailPower+0xcc>
		return;
 80122a2:	46c0      	nop			; (mov r8, r8)
 80122a4:	e000      	b.n	80122a8 <POWERSOURCE_Process5VRailPower+0xcc>
		return;
 80122a6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80122a8:	46bd      	mov	sp, r7
 80122aa:	b005      	add	sp, #20
 80122ac:	bd90      	pop	{r4, r7, pc}
 80122ae:	46c0      	nop			; (mov r8, r8)
 80122b0:	20001578 	.word	0x20001578
 80122b4:	2000157d 	.word	0x2000157d
 80122b8:	2000157e 	.word	0x2000157e
 80122bc:	20001566 	.word	0x20001566
 80122c0:	20000f40 	.word	0x20000f40
 80122c4:	2000156c 	.word	0x2000156c
 80122c8:	2000157f 	.word	0x2000157f
 80122cc:	20001568 	.word	0x20001568

080122d0 <POWERSOURCE_RPi5vDetect>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_RPi5vDetect(void)
{
 80122d0:	b590      	push	{r4, r7, lr}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
	const uint32_t sysTime = HAL_GetTick();
 80122d6:	f7f0 fefb 	bl	80030d0 <HAL_GetTick>
 80122da:	0003      	movs	r3, r0
 80122dc:	607b      	str	r3, [r7, #4]
	const uint16_t v5RailMv = ANALOG_Get5VRailMv();
 80122de:	1cbc      	adds	r4, r7, #2
 80122e0:	f7f5 fa78 	bl	80077d4 <ANALOG_Get5VRailMv>
 80122e4:	0003      	movs	r3, r0
 80122e6:	8023      	strh	r3, [r4, #0]
	const POWERSOURCE_RPi5VStatus_t lastStatus = m_rpi5VInDetStatus;
 80122e8:	1c7b      	adds	r3, r7, #1
 80122ea:	4a41      	ldr	r2, [pc, #260]	; (80123f0 <POWERSOURCE_RPi5vDetect+0x120>)
 80122ec:	7812      	ldrb	r2, [r2, #0]
 80122ee:	701a      	strb	r2, [r3, #0]

	// Check to see if the boost converter has just switched on.
	if (false == MS_TIMEREF_TIMEOUT(m_boostOnTimeMs, sysTime, POWERSOURCE_STABLISE_TIME_MS))
 80122f0:	4b40      	ldr	r3, [pc, #256]	; (80123f4 <POWERSOURCE_RPi5vDetect+0x124>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	1ad3      	subs	r3, r2, r3
 80122f8:	2b63      	cmp	r3, #99	; 0x63
 80122fa:	d800      	bhi.n	80122fe <POWERSOURCE_RPi5vDetect+0x2e>
 80122fc:	e072      	b.n	80123e4 <POWERSOURCE_RPi5vDetect+0x114>
		return;
	}


	// Check to see if its time to have a look at the RPi power - probably should do this all the time!
	if (false == MS_TIMEREF_TIMEOUT(m_lastRPiPowerDetectTimeMs, sysTime, POWERSROUCE_RPI5V_DETECT_PERIOD_MS))
 80122fe:	4b3e      	ldr	r3, [pc, #248]	; (80123f8 <POWERSOURCE_RPi5vDetect+0x128>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	687a      	ldr	r2, [r7, #4]
 8012304:	1ad3      	subs	r3, r2, r3
 8012306:	2b09      	cmp	r3, #9
 8012308:	d800      	bhi.n	801230c <POWERSOURCE_RPi5vDetect+0x3c>
 801230a:	e06d      	b.n	80123e8 <POWERSOURCE_RPi5vDetect+0x118>
	{
		return;
	}

	MS_TIMEREF_INIT(m_lastRPiPowerDetectTimeMs, sysTime);
 801230c:	4b3a      	ldr	r3, [pc, #232]	; (80123f8 <POWERSOURCE_RPi5vDetect+0x128>)
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	601a      	str	r2, [r3, #0]

	// If the boost converter is enabled
	if ( (true == m_boostConverterEnabled) )
 8012312:	4b3a      	ldr	r3, [pc, #232]	; (80123fc <POWERSOURCE_RPi5vDetect+0x12c>)
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d02b      	beq.n	8012372 <POWERSOURCE_RPi5vDetect+0xa2>
	{
		m_rpiVLowCount = 0u;
 801231a:	4b39      	ldr	r3, [pc, #228]	; (8012400 <POWERSOURCE_RPi5vDetect+0x130>)
 801231c:	2200      	movs	r2, #0
 801231e:	701a      	strb	r2, [r3, #0]

		if (false == m_ldoEnabled)
 8012320:	4b38      	ldr	r3, [pc, #224]	; (8012404 <POWERSOURCE_RPi5vDetect+0x134>)
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	2201      	movs	r2, #1
 8012326:	4053      	eors	r3, r2
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b00      	cmp	r3, #0
 801232c:	d006      	beq.n	801233c <POWERSOURCE_RPi5vDetect+0x6c>
		{
			// Can't tell if the RPi is powered without the LDO!
			m_rpi5VInDetStatus = RPI5V_DETECTION_STATUS_UNKNOWN;
 801232e:	4b30      	ldr	r3, [pc, #192]	; (80123f0 <POWERSOURCE_RPi5vDetect+0x120>)
 8012330:	2200      	movs	r2, #0
 8012332:	701a      	strb	r2, [r3, #0]
			MS_TIMEREF_INIT(m_rpiDetTimeMs, sysTime);
 8012334:	4b34      	ldr	r3, [pc, #208]	; (8012408 <POWERSOURCE_RPi5vDetect+0x138>)
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	601a      	str	r2, [r3, #0]
 801233a:	e04a      	b.n	80123d2 <POWERSOURCE_RPi5vDetect+0x102>
		}
		else
		{
			if (v5RailMv > POWERSOURCE_LDO_MV)
 801233c:	1cbb      	adds	r3, r7, #2
 801233e:	881a      	ldrh	r2, [r3, #0]
 8012340:	2396      	movs	r3, #150	; 0x96
 8012342:	015b      	lsls	r3, r3, #5
 8012344:	429a      	cmp	r2, r3
 8012346:	d90d      	bls.n	8012364 <POWERSOURCE_RPi5vDetect+0x94>
			{
				if ( (RPI5V_DETECTION_STATUS_POWERED != m_rpi5VInDetStatus)
 8012348:	4b29      	ldr	r3, [pc, #164]	; (80123f0 <POWERSOURCE_RPi5vDetect+0x120>)
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	2b02      	cmp	r3, #2
 801234e:	d040      	beq.n	80123d2 <POWERSOURCE_RPi5vDetect+0x102>
						&& (true == MS_TIMEREF_TIMEOUT(m_rpiDetTimeMs, sysTime, POWERSOURCE_RPI5V_POWERED_MS)) )
 8012350:	4b2d      	ldr	r3, [pc, #180]	; (8012408 <POWERSOURCE_RPi5vDetect+0x138>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	1ad3      	subs	r3, r2, r3
 8012358:	2b31      	cmp	r3, #49	; 0x31
 801235a:	d93a      	bls.n	80123d2 <POWERSOURCE_RPi5vDetect+0x102>
				{
					// If the voltage on the rail is more than the LDO can supply then the RPi is probably powered
					m_rpi5VInDetStatus = RPI5V_DETECTION_STATUS_POWERED;
 801235c:	4b24      	ldr	r3, [pc, #144]	; (80123f0 <POWERSOURCE_RPi5vDetect+0x120>)
 801235e:	2202      	movs	r2, #2
 8012360:	701a      	strb	r2, [r3, #0]
 8012362:	e036      	b.n	80123d2 <POWERSOURCE_RPi5vDetect+0x102>
				}
			}
			else
			{
				m_rpi5VInDetStatus = RPI5V_DETECTION_STATUS_UNPOWERED;
 8012364:	4b22      	ldr	r3, [pc, #136]	; (80123f0 <POWERSOURCE_RPi5vDetect+0x120>)
 8012366:	2201      	movs	r2, #1
 8012368:	701a      	strb	r2, [r3, #0]

				MS_TIMEREF_INIT(m_rpiDetTimeMs, sysTime);
 801236a:	4b27      	ldr	r3, [pc, #156]	; (8012408 <POWERSOURCE_RPi5vDetect+0x138>)
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	601a      	str	r2, [r3, #0]
 8012370:	e02f      	b.n	80123d2 <POWERSOURCE_RPi5vDetect+0x102>
			}
		}
	}
	else if (v5RailMv > POWERSOURCE_RPI_UNDER_MV)
 8012372:	1cbb      	adds	r3, r7, #2
 8012374:	881b      	ldrh	r3, [r3, #0]
 8012376:	4a25      	ldr	r2, [pc, #148]	; (801240c <POWERSOURCE_RPi5vDetect+0x13c>)
 8012378:	4293      	cmp	r3, r2
 801237a:	d924      	bls.n	80123c6 <POWERSOURCE_RPi5vDetect+0xf6>
	{
		if ( (RPI5V_DETECTION_STATUS_POWERED != m_rpi5VInDetStatus)
 801237c:	4b1c      	ldr	r3, [pc, #112]	; (80123f0 <POWERSOURCE_RPi5vDetect+0x120>)
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	2b02      	cmp	r3, #2
 8012382:	d00b      	beq.n	801239c <POWERSOURCE_RPi5vDetect+0xcc>
				&& (true == MS_TIMEREF_TIMEOUT(m_rpiDetTimeMs, sysTime, POWERSOURCE_RPI5V_POWERED_MS)) )
 8012384:	4b20      	ldr	r3, [pc, #128]	; (8012408 <POWERSOURCE_RPi5vDetect+0x138>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	2b31      	cmp	r3, #49	; 0x31
 801238e:	d905      	bls.n	801239c <POWERSOURCE_RPi5vDetect+0xcc>
		{
			// If the voltage on the rail is more than the LDO can supply then the RPi is probably powered
			m_rpi5VInDetStatus = RPI5V_DETECTION_STATUS_POWERED;
 8012390:	4b17      	ldr	r3, [pc, #92]	; (80123f0 <POWERSOURCE_RPi5vDetect+0x120>)
 8012392:	2202      	movs	r2, #2
 8012394:	701a      	strb	r2, [r3, #0]

			// Enable the boost converter
			POWERSOURCE_Set5vBoostEnable(true);
 8012396:	2001      	movs	r0, #1
 8012398:	f7ff fd00 	bl	8011d9c <POWERSOURCE_Set5vBoostEnable>
		}

		if (v5RailMv <= POWERSOURCE_RPI_LOW_MV)
 801239c:	1cbb      	adds	r3, r7, #2
 801239e:	881a      	ldrh	r2, [r3, #0]
 80123a0:	2396      	movs	r3, #150	; 0x96
 80123a2:	015b      	lsls	r3, r3, #5
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d80a      	bhi.n	80123be <POWERSOURCE_RPi5vDetect+0xee>
		{
			if (m_rpiVLowCount < POWERSOURCE_RPI_VLOW_MAX_COUNT)
 80123a8:	4b15      	ldr	r3, [pc, #84]	; (8012400 <POWERSOURCE_RPi5vDetect+0x130>)
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	2b09      	cmp	r3, #9
 80123ae:	d810      	bhi.n	80123d2 <POWERSOURCE_RPi5vDetect+0x102>
			{
				m_rpiVLowCount++;
 80123b0:	4b13      	ldr	r3, [pc, #76]	; (8012400 <POWERSOURCE_RPi5vDetect+0x130>)
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	3301      	adds	r3, #1
 80123b6:	b2da      	uxtb	r2, r3
 80123b8:	4b11      	ldr	r3, [pc, #68]	; (8012400 <POWERSOURCE_RPi5vDetect+0x130>)
 80123ba:	701a      	strb	r2, [r3, #0]
 80123bc:	e009      	b.n	80123d2 <POWERSOURCE_RPi5vDetect+0x102>
			}
		}
		else
		{
			m_rpiVLowCount = 0u;
 80123be:	4b10      	ldr	r3, [pc, #64]	; (8012400 <POWERSOURCE_RPi5vDetect+0x130>)
 80123c0:	2200      	movs	r2, #0
 80123c2:	701a      	strb	r2, [r3, #0]
 80123c4:	e005      	b.n	80123d2 <POWERSOURCE_RPi5vDetect+0x102>
		}
	}
	else
	{
		MS_TIMEREF_INIT(m_rpiDetTimeMs, sysTime);
 80123c6:	4b10      	ldr	r3, [pc, #64]	; (8012408 <POWERSOURCE_RPi5vDetect+0x138>)
 80123c8:	687a      	ldr	r2, [r7, #4]
 80123ca:	601a      	str	r2, [r3, #0]

		m_rpi5VInDetStatus = RPI5V_DETECTION_STATUS_UNPOWERED;
 80123cc:	4b08      	ldr	r3, [pc, #32]	; (80123f0 <POWERSOURCE_RPi5vDetect+0x120>)
 80123ce:	2201      	movs	r2, #1
 80123d0:	701a      	strb	r2, [r3, #0]
	}


	// Make the charger do some work too.
	if (lastStatus != m_rpi5VInDetStatus)
 80123d2:	4b07      	ldr	r3, [pc, #28]	; (80123f0 <POWERSOURCE_RPi5vDetect+0x120>)
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	1c7a      	adds	r2, r7, #1
 80123d8:	7812      	ldrb	r2, [r2, #0]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d005      	beq.n	80123ea <POWERSOURCE_RPi5vDetect+0x11a>
	{
		CHARGER_RefreshSettings();
 80123de:	f7f7 fb8b 	bl	8009af8 <CHARGER_RefreshSettings>
 80123e2:	e002      	b.n	80123ea <POWERSOURCE_RPi5vDetect+0x11a>
		return;
 80123e4:	46c0      	nop			; (mov r8, r8)
 80123e6:	e000      	b.n	80123ea <POWERSOURCE_RPi5vDetect+0x11a>
		return;
 80123e8:	46c0      	nop			; (mov r8, r8)
	}
}
 80123ea:	46bd      	mov	sp, r7
 80123ec:	b003      	add	sp, #12
 80123ee:	bd90      	pop	{r4, r7, pc}
 80123f0:	2000157f 	.word	0x2000157f
 80123f4:	2000156c 	.word	0x2000156c
 80123f8:	20001570 	.word	0x20001570
 80123fc:	20000f48 	.word	0x20000f48
 8012400:	20001568 	.word	0x20001568
 8012404:	2000157c 	.word	0x2000157c
 8012408:	20001574 	.word	0x20001574
 801240c:	00001194 	.word	0x00001194

08012410 <POWERSOURCE_ProcessVINStatus>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_ProcessVINStatus(void)
{
 8012410:	b590      	push	{r4, r7, lr}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
	const CHARGER_InputStatus_t vinStatus = CHARGER_GetInputStatus(CHARGER_INPUT_VIN);
 8012416:	1dfc      	adds	r4, r7, #7
 8012418:	2000      	movs	r0, #0
 801241a:	f7f7 fc01 	bl	8009c20 <CHARGER_GetInputStatus>
 801241e:	0003      	movs	r3, r0
 8012420:	7023      	strb	r3, [r4, #0]
	const uint8_t chargerDPMActive = CHARGER_IsDPMActive();
 8012422:	f7f7 fc25 	bl	8009c70 <CHARGER_IsDPMActive>
 8012426:	0003      	movs	r3, r0
 8012428:	001a      	movs	r2, r3
 801242a:	1dbb      	adds	r3, r7, #6
 801242c:	701a      	strb	r2, [r3, #0]

	if (CHARGER_INPUT_UVP == vinStatus)
 801242e:	1dfb      	adds	r3, r7, #7
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	2b03      	cmp	r3, #3
 8012434:	d103      	bne.n	801243e <POWERSOURCE_ProcessVINStatus+0x2e>
	{
		m_powerInStatus = POW_SOURCE_NOT_PRESENT;
 8012436:	4b0f      	ldr	r3, [pc, #60]	; (8012474 <POWERSOURCE_ProcessVINStatus+0x64>)
 8012438:	2200      	movs	r2, #0
 801243a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		m_powerInStatus = POW_SOURCE_NORMAL;
	}
}
 801243c:	e016      	b.n	801246c <POWERSOURCE_ProcessVINStatus+0x5c>
	else if ( (CHARGER_INPUT_OVP == vinStatus) || (CHARGER_INPUT_WEAK == vinStatus) )
 801243e:	1dfb      	adds	r3, r7, #7
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	2b01      	cmp	r3, #1
 8012444:	d003      	beq.n	801244e <POWERSOURCE_ProcessVINStatus+0x3e>
 8012446:	1dfb      	adds	r3, r7, #7
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	2b02      	cmp	r3, #2
 801244c:	d103      	bne.n	8012456 <POWERSOURCE_ProcessVINStatus+0x46>
		m_powerInStatus = POW_SOURCE_BAD;
 801244e:	4b09      	ldr	r3, [pc, #36]	; (8012474 <POWERSOURCE_ProcessVINStatus+0x64>)
 8012450:	2201      	movs	r2, #1
 8012452:	701a      	strb	r2, [r3, #0]
}
 8012454:	e00a      	b.n	801246c <POWERSOURCE_ProcessVINStatus+0x5c>
	else if (true == chargerDPMActive)
 8012456:	1dbb      	adds	r3, r7, #6
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	2b01      	cmp	r3, #1
 801245c:	d103      	bne.n	8012466 <POWERSOURCE_ProcessVINStatus+0x56>
		m_powerInStatus = POW_SOURCE_WEAK;
 801245e:	4b05      	ldr	r3, [pc, #20]	; (8012474 <POWERSOURCE_ProcessVINStatus+0x64>)
 8012460:	2202      	movs	r2, #2
 8012462:	701a      	strb	r2, [r3, #0]
}
 8012464:	e002      	b.n	801246c <POWERSOURCE_ProcessVINStatus+0x5c>
		m_powerInStatus = POW_SOURCE_NORMAL;
 8012466:	4b03      	ldr	r3, [pc, #12]	; (8012474 <POWERSOURCE_ProcessVINStatus+0x64>)
 8012468:	2203      	movs	r2, #3
 801246a:	701a      	strb	r2, [r3, #0]
}
 801246c:	46c0      	nop			; (mov r8, r8)
 801246e:	46bd      	mov	sp, r7
 8012470:	b003      	add	sp, #12
 8012472:	bd90      	pop	{r4, r7, pc}
 8012474:	2000157d 	.word	0x2000157d

08012478 <POWERSOURCE_Process5VRailStatus>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void POWERSOURCE_Process5VRailStatus(void)
{
 8012478:	b590      	push	{r4, r7, lr}
 801247a:	b083      	sub	sp, #12
 801247c:	af00      	add	r7, sp, #0
	const bool rpi5vChargeEnable = CHARGER_GetRPi5vInputEnable();
 801247e:	1dfc      	adds	r4, r7, #7
 8012480:	f7f7 fa70 	bl	8009964 <CHARGER_GetRPi5vInputEnable>
 8012484:	0003      	movs	r3, r0
 8012486:	7023      	strb	r3, [r4, #0]
	const CHARGER_InputStatus_t rpi5vChargeStatus = CHARGER_GetInputStatus(CHARGER_INPUT_RPI);
 8012488:	1dbc      	adds	r4, r7, #6
 801248a:	2001      	movs	r0, #1
 801248c:	f7f7 fbc8 	bl	8009c20 <CHARGER_GetInputStatus>
 8012490:	0003      	movs	r3, r0
 8012492:	7023      	strb	r3, [r4, #0]


	if (RPI5V_DETECTION_STATUS_POWERED != m_rpi5VInDetStatus)
 8012494:	4b1e      	ldr	r3, [pc, #120]	; (8012510 <POWERSOURCE_Process5VRailStatus+0x98>)
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	2b02      	cmp	r3, #2
 801249a:	d003      	beq.n	80124a4 <POWERSOURCE_Process5VRailStatus+0x2c>
	{
		m_power5vIoStatus = POW_SOURCE_NOT_PRESENT;
 801249c:	4b1d      	ldr	r3, [pc, #116]	; (8012514 <POWERSOURCE_Process5VRailStatus+0x9c>)
 801249e:	2200      	movs	r2, #0
 80124a0:	701a      	strb	r2, [r3, #0]
			{
				m_power5vIoStatus = POW_SOURCE_NORMAL;
			}
		}
	}
}
 80124a2:	e031      	b.n	8012508 <POWERSOURCE_Process5VRailStatus+0x90>
		m_power5vIoStatus = POW_SOURCE_NORMAL;
 80124a4:	4b1b      	ldr	r3, [pc, #108]	; (8012514 <POWERSOURCE_Process5VRailStatus+0x9c>)
 80124a6:	2203      	movs	r2, #3
 80124a8:	701a      	strb	r2, [r3, #0]
		if (true == rpi5vChargeEnable)
 80124aa:	1dfb      	adds	r3, r7, #7
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d01f      	beq.n	80124f2 <POWERSOURCE_Process5VRailStatus+0x7a>
			if (CHARGER_INPUT_UVP == rpi5vChargeStatus)
 80124b2:	1dbb      	adds	r3, r7, #6
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	2b03      	cmp	r3, #3
 80124b8:	d103      	bne.n	80124c2 <POWERSOURCE_Process5VRailStatus+0x4a>
				m_power5vIoStatus = POW_SOURCE_NOT_PRESENT;
 80124ba:	4b16      	ldr	r3, [pc, #88]	; (8012514 <POWERSOURCE_Process5VRailStatus+0x9c>)
 80124bc:	2200      	movs	r2, #0
 80124be:	701a      	strb	r2, [r3, #0]
}
 80124c0:	e022      	b.n	8012508 <POWERSOURCE_Process5VRailStatus+0x90>
			else if ( (CHARGER_INPUT_OVP == rpi5vChargeStatus) ||
 80124c2:	1dbb      	adds	r3, r7, #6
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d003      	beq.n	80124d2 <POWERSOURCE_Process5VRailStatus+0x5a>
 80124ca:	1dbb      	adds	r3, r7, #6
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	2b02      	cmp	r3, #2
 80124d0:	d103      	bne.n	80124da <POWERSOURCE_Process5VRailStatus+0x62>
				m_power5vIoStatus = POW_SOURCE_BAD;
 80124d2:	4b10      	ldr	r3, [pc, #64]	; (8012514 <POWERSOURCE_Process5VRailStatus+0x9c>)
 80124d4:	2201      	movs	r2, #1
 80124d6:	701a      	strb	r2, [r3, #0]
}
 80124d8:	e016      	b.n	8012508 <POWERSOURCE_Process5VRailStatus+0x90>
			else if (0u != m_rpiVLowCount)
 80124da:	4b0f      	ldr	r3, [pc, #60]	; (8012518 <POWERSOURCE_Process5VRailStatus+0xa0>)
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d003      	beq.n	80124ea <POWERSOURCE_Process5VRailStatus+0x72>
				m_power5vIoStatus = POW_SOURCE_WEAK;
 80124e2:	4b0c      	ldr	r3, [pc, #48]	; (8012514 <POWERSOURCE_Process5VRailStatus+0x9c>)
 80124e4:	2202      	movs	r2, #2
 80124e6:	701a      	strb	r2, [r3, #0]
}
 80124e8:	e00e      	b.n	8012508 <POWERSOURCE_Process5VRailStatus+0x90>
				m_power5vIoStatus = POW_SOURCE_NORMAL;
 80124ea:	4b0a      	ldr	r3, [pc, #40]	; (8012514 <POWERSOURCE_Process5VRailStatus+0x9c>)
 80124ec:	2203      	movs	r2, #3
 80124ee:	701a      	strb	r2, [r3, #0]
}
 80124f0:	e00a      	b.n	8012508 <POWERSOURCE_Process5VRailStatus+0x90>
			if (0u != m_rpiVLowCount)
 80124f2:	4b09      	ldr	r3, [pc, #36]	; (8012518 <POWERSOURCE_Process5VRailStatus+0xa0>)
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d003      	beq.n	8012502 <POWERSOURCE_Process5VRailStatus+0x8a>
				m_power5vIoStatus = POW_SOURCE_WEAK;
 80124fa:	4b06      	ldr	r3, [pc, #24]	; (8012514 <POWERSOURCE_Process5VRailStatus+0x9c>)
 80124fc:	2202      	movs	r2, #2
 80124fe:	701a      	strb	r2, [r3, #0]
}
 8012500:	e002      	b.n	8012508 <POWERSOURCE_Process5VRailStatus+0x90>
				m_power5vIoStatus = POW_SOURCE_NORMAL;
 8012502:	4b04      	ldr	r3, [pc, #16]	; (8012514 <POWERSOURCE_Process5VRailStatus+0x9c>)
 8012504:	2203      	movs	r2, #3
 8012506:	701a      	strb	r2, [r3, #0]
}
 8012508:	46c0      	nop			; (mov r8, r8)
 801250a:	46bd      	mov	sp, r7
 801250c:	b003      	add	sp, #12
 801250e:	bd90      	pop	{r4, r7, pc}
 8012510:	2000157f 	.word	0x2000157f
 8012514:	2000157e 	.word	0x2000157e
 8012518:	20001568 	.word	0x20001568

0801251c <RtcInit>:
static bool m_alarmEventFlag __attribute__((section("no_init")));
static bool m_rtcWakeEvent __attribute__((section("no_init")));


void RtcInit(void)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b082      	sub	sp, #8
 8012520:	af00      	add	r7, sp, #0
	uint8_t i;

	if (EXECUTION_STATE_NORMAL != executionState)
 8012522:	4b14      	ldr	r3, [pc, #80]	; (8012574 <RtcInit+0x58>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	4a14      	ldr	r2, [pc, #80]	; (8012578 <RtcInit+0x5c>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d01e      	beq.n	801256a <RtcInit+0x4e>
	{
		weekDaysSelection = 0xFFu;
 801252c:	4b13      	ldr	r3, [pc, #76]	; (801257c <RtcInit+0x60>)
 801252e:	22ff      	movs	r2, #255	; 0xff
 8012530:	701a      	strb	r2, [r3, #0]
		hoursSelection = 0xFFFFFFFFul;
 8012532:	4b13      	ldr	r3, [pc, #76]	; (8012580 <RtcInit+0x64>)
 8012534:	2201      	movs	r2, #1
 8012536:	4252      	negs	r2, r2
 8012538:	601a      	str	r2, [r3, #0]
		minutesStep = 0u;
 801253a:	4b12      	ldr	r3, [pc, #72]	; (8012584 <RtcInit+0x68>)
 801253c:	2200      	movs	r2, #0
 801253e:	701a      	strb	r2, [r3, #0]
		m_alarmEventFlag = false;
 8012540:	4b11      	ldr	r3, [pc, #68]	; (8012588 <RtcInit+0x6c>)
 8012542:	2200      	movs	r2, #0
 8012544:	701a      	strb	r2, [r3, #0]

		for (i = 0u; i < 17u; i++)
 8012546:	1dfb      	adds	r3, r7, #7
 8012548:	2200      	movs	r2, #0
 801254a:	701a      	strb	r2, [r3, #0]
 801254c:	e009      	b.n	8012562 <RtcInit+0x46>
		{
			rtc_buffer[i] = 0u;
 801254e:	1dfb      	adds	r3, r7, #7
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	4a0e      	ldr	r2, [pc, #56]	; (801258c <RtcInit+0x70>)
 8012554:	2100      	movs	r1, #0
 8012556:	54d1      	strb	r1, [r2, r3]
		for (i = 0u; i < 17u; i++)
 8012558:	1dfb      	adds	r3, r7, #7
 801255a:	781a      	ldrb	r2, [r3, #0]
 801255c:	1dfb      	adds	r3, r7, #7
 801255e:	3201      	adds	r2, #1
 8012560:	701a      	strb	r2, [r3, #0]
 8012562:	1dfb      	adds	r3, r7, #7
 8012564:	781b      	ldrb	r3, [r3, #0]
 8012566:	2b10      	cmp	r3, #16
 8012568:	d9f1      	bls.n	801254e <RtcInit+0x32>
		}
	}
}
 801256a:	46c0      	nop			; (mov r8, r8)
 801256c:	46bd      	mov	sp, r7
 801256e:	b002      	add	sp, #8
 8012570:	bd80      	pop	{r7, pc}
 8012572:	46c0      	nop			; (mov r8, r8)
 8012574:	2000185c 	.word	0x2000185c
 8012578:	aaaaaaaa 	.word	0xaaaaaaaa
 801257c:	20000f8d 	.word	0x20000f8d
 8012580:	20000f90 	.word	0x20000f90
 8012584:	20000f94 	.word	0x20000f94
 8012588:	20000f95 	.word	0x20000f95
 801258c:	20000f4c 	.word	0x20000f4c

08012590 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm callback
  * @param  hrtc : RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *phrtc)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
	m_alarmEventFlag = true;
 8012598:	4b03      	ldr	r3, [pc, #12]	; (80125a8 <HAL_RTC_AlarmAEventCallback+0x18>)
 801259a:	2201      	movs	r2, #1
 801259c:	701a      	strb	r2, [r3, #0]
}
 801259e:	46c0      	nop			; (mov r8, r8)
 80125a0:	46bd      	mov	sp, r7
 80125a2:	b002      	add	sp, #8
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	46c0      	nop			; (mov r8, r8)
 80125a8:	20000f95 	.word	0x20000f95

080125ac <RTC_EvaluateAlarm>:


void RTC_EvaluateAlarm(void)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
	static volatile RTC_TimeTypeDef sTime;
	static RTC_DateTypeDef dateConf;
	uint32_t tempReg;

	if ( (false == m_alarmEventFlag) && (RESET == __HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF)) )
 80125b2:	4bc1      	ldr	r3, [pc, #772]	; (80128b8 <RTC_EvaluateAlarm+0x30c>)
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	2201      	movs	r2, #1
 80125b8:	4053      	eors	r3, r2
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d007      	beq.n	80125d0 <RTC_EvaluateAlarm+0x24>
 80125c0:	4bbe      	ldr	r3, [pc, #760]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	68da      	ldr	r2, [r3, #12]
 80125c6:	2380      	movs	r3, #128	; 0x80
 80125c8:	005b      	lsls	r3, r3, #1
 80125ca:	4013      	ands	r3, r2
 80125cc:	d100      	bne.n	80125d0 <RTC_EvaluateAlarm+0x24>
 80125ce:	e16c      	b.n	80128aa <RTC_EvaluateAlarm+0x2fe>
	{
		return;
	}

	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80125d0:	4bba      	ldr	r3, [pc, #744]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	68db      	ldr	r3, [r3, #12]
 80125d6:	22ff      	movs	r2, #255	; 0xff
 80125d8:	401a      	ands	r2, r3
 80125da:	4bb8      	ldr	r3, [pc, #736]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	49b8      	ldr	r1, [pc, #736]	; (80128c0 <RTC_EvaluateAlarm+0x314>)
 80125e0:	430a      	orrs	r2, r1
 80125e2:	60da      	str	r2, [r3, #12]

	uint8_t weekDayMatch = 0;
 80125e4:	1dfb      	adds	r3, r7, #7
 80125e6:	2200      	movs	r2, #0
 80125e8:	701a      	strb	r2, [r3, #0]

	if (weekDaysSelection != 0xFF || !(sAlarm.AlarmMask&0x80000000))
 80125ea:	4bb6      	ldr	r3, [pc, #728]	; (80128c4 <RTC_EvaluateAlarm+0x318>)
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	2bff      	cmp	r3, #255	; 0xff
 80125f0:	d103      	bne.n	80125fa <RTC_EvaluateAlarm+0x4e>
 80125f2:	4bb5      	ldr	r3, [pc, #724]	; (80128c8 <RTC_EvaluateAlarm+0x31c>)
 80125f4:	695b      	ldr	r3, [r3, #20]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	db25      	blt.n	8012646 <RTC_EvaluateAlarm+0x9a>
	{
		//HAL_RTC_GetDate(&hrtc, &dateConf, RTC_FORMAT_BIN);
		tempReg = hrtc.Instance->DR;
 80125fa:	4bb0      	ldr	r3, [pc, #704]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	603b      	str	r3, [r7, #0]
		tempReg = 0;
 8012602:	2300      	movs	r3, #0
 8012604:	603b      	str	r3, [r7, #0]
		tempReg = hrtc.Instance->DR;
 8012606:	4bad      	ldr	r3, [pc, #692]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	603b      	str	r3, [r7, #0]
		tempReg = 0;
 801260e:	2300      	movs	r3, #0
 8012610:	603b      	str	r3, [r7, #0]
		tempReg = hrtc.Instance->DR;
 8012612:	4baa      	ldr	r3, [pc, #680]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	685b      	ldr	r3, [r3, #4]
 8012618:	603b      	str	r3, [r7, #0]
		dateConf.WeekDay = (tempReg >> 13)&0x07;
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	0b5b      	lsrs	r3, r3, #13
 801261e:	b2db      	uxtb	r3, r3
 8012620:	2207      	movs	r2, #7
 8012622:	4013      	ands	r3, r2
 8012624:	b2da      	uxtb	r2, r3
 8012626:	4ba9      	ldr	r3, [pc, #676]	; (80128cc <RTC_EvaluateAlarm+0x320>)
 8012628:	701a      	strb	r2, [r3, #0]

		if ( (0x01 << (dateConf.WeekDay)) & weekDaysSelection )
 801262a:	4ba6      	ldr	r3, [pc, #664]	; (80128c4 <RTC_EvaluateAlarm+0x318>)
 801262c:	781b      	ldrb	r3, [r3, #0]
 801262e:	001a      	movs	r2, r3
 8012630:	4ba6      	ldr	r3, [pc, #664]	; (80128cc <RTC_EvaluateAlarm+0x320>)
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	411a      	asrs	r2, r3
 8012636:	0013      	movs	r3, r2
 8012638:	2201      	movs	r2, #1
 801263a:	4013      	ands	r3, r2
 801263c:	d006      	beq.n	801264c <RTC_EvaluateAlarm+0xa0>
		{
			weekDayMatch = 1;
 801263e:	1dfb      	adds	r3, r7, #7
 8012640:	2201      	movs	r2, #1
 8012642:	701a      	strb	r2, [r3, #0]
		if ( (0x01 << (dateConf.WeekDay)) & weekDaysSelection )
 8012644:	e002      	b.n	801264c <RTC_EvaluateAlarm+0xa0>
		}
	}
	else
	{
		weekDayMatch = 1;
 8012646:	1dfb      	adds	r3, r7, #7
 8012648:	2201      	movs	r2, #1
 801264a:	701a      	strb	r2, [r3, #0]
	}

	if (weekDayMatch)
 801264c:	1dfb      	adds	r3, r7, #7
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d100      	bne.n	8012656 <RTC_EvaluateAlarm+0xaa>
 8012654:	e12c      	b.n	80128b0 <RTC_EvaluateAlarm+0x304>
	{
		if (hoursSelection != 0xFFFFFFFF || minutesStep > 1)
 8012656:	4b9e      	ldr	r3, [pc, #632]	; (80128d0 <RTC_EvaluateAlarm+0x324>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	3301      	adds	r3, #1
 801265c:	d104      	bne.n	8012668 <RTC_EvaluateAlarm+0xbc>
 801265e:	4b9d      	ldr	r3, [pc, #628]	; (80128d4 <RTC_EvaluateAlarm+0x328>)
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	2b01      	cmp	r3, #1
 8012664:	d800      	bhi.n	8012668 <RTC_EvaluateAlarm+0xbc>
 8012666:	e109      	b.n	801287c <RTC_EvaluateAlarm+0x2d0>
		{
			// TODO - 3 times reading TR? DR not read.
			tempReg = hrtc.Instance->TR;
 8012668:	4b94      	ldr	r3, [pc, #592]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	603b      	str	r3, [r7, #0]
			tempReg = 0;
 8012670:	2300      	movs	r3, #0
 8012672:	603b      	str	r3, [r7, #0]
			tempReg = hrtc.Instance->TR;
 8012674:	4b91      	ldr	r3, [pc, #580]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	603b      	str	r3, [r7, #0]
			tempReg = 0;
 801267c:	2300      	movs	r3, #0
 801267e:	603b      	str	r3, [r7, #0]
			tempReg = hrtc.Instance->TR;
 8012680:	4b8e      	ldr	r3, [pc, #568]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	603b      	str	r3, [r7, #0]


			sTime.Minutes = ((tempReg >> 8)&0x0F) + ((tempReg >> 12)&0x07) * 10;
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	0a1b      	lsrs	r3, r3, #8
 801268c:	b2db      	uxtb	r3, r3
 801268e:	220f      	movs	r2, #15
 8012690:	4013      	ands	r3, r2
 8012692:	b2da      	uxtb	r2, r3
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	0b1b      	lsrs	r3, r3, #12
 8012698:	b2db      	uxtb	r3, r3
 801269a:	2107      	movs	r1, #7
 801269c:	400b      	ands	r3, r1
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	1c19      	adds	r1, r3, #0
 80126a2:	0089      	lsls	r1, r1, #2
 80126a4:	18cb      	adds	r3, r1, r3
 80126a6:	18db      	adds	r3, r3, r3
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	18d3      	adds	r3, r2, r3
 80126ac:	b2da      	uxtb	r2, r3
 80126ae:	4b8a      	ldr	r3, [pc, #552]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 80126b0:	705a      	strb	r2, [r3, #1]

			if ( minutesStep <= 1 || (sTime.Minutes % minutesStep) == 0 )
 80126b2:	4b88      	ldr	r3, [pc, #544]	; (80128d4 <RTC_EvaluateAlarm+0x328>)
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d90d      	bls.n	80126d6 <RTC_EvaluateAlarm+0x12a>
 80126ba:	4b87      	ldr	r3, [pc, #540]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 80126bc:	785b      	ldrb	r3, [r3, #1]
 80126be:	b2da      	uxtb	r2, r3
 80126c0:	4b84      	ldr	r3, [pc, #528]	; (80128d4 <RTC_EvaluateAlarm+0x328>)
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	0019      	movs	r1, r3
 80126c6:	0010      	movs	r0, r2
 80126c8:	f7ed fda2 	bl	8000210 <__aeabi_uidivmod>
 80126cc:	000b      	movs	r3, r1
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d000      	beq.n	80126d6 <RTC_EvaluateAlarm+0x12a>
 80126d4:	e0eb      	b.n	80128ae <RTC_EvaluateAlarm+0x302>
			{
				sTime.Hours = ((tempReg >> 16)&0x0F) + ((tempReg >> 20)&0x07) * 10;
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	0c1b      	lsrs	r3, r3, #16
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	220f      	movs	r2, #15
 80126de:	4013      	ands	r3, r2
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	0d1b      	lsrs	r3, r3, #20
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	2107      	movs	r1, #7
 80126ea:	400b      	ands	r3, r1
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	1c19      	adds	r1, r3, #0
 80126f0:	0089      	lsls	r1, r1, #2
 80126f2:	18cb      	adds	r3, r1, r3
 80126f4:	18db      	adds	r3, r3, r3
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	18d3      	adds	r3, r2, r3
 80126fa:	b2da      	uxtb	r2, r3
 80126fc:	4b76      	ldr	r3, [pc, #472]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 80126fe:	701a      	strb	r2, [r3, #0]
				sTime.TimeFormat = (uint8_t)((tempReg & (RTC_TR_PM)) >> 16);
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	0c1b      	lsrs	r3, r3, #16
 8012704:	b2db      	uxtb	r3, r3
 8012706:	2240      	movs	r2, #64	; 0x40
 8012708:	4013      	ands	r3, r2
 801270a:	b2da      	uxtb	r2, r3
 801270c:	4b72      	ldr	r3, [pc, #456]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 801270e:	70da      	strb	r2, [r3, #3]

				if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8012710:	4b6a      	ldr	r3, [pc, #424]	; (80128bc <RTC_EvaluateAlarm+0x310>)
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d122      	bne.n	801275e <RTC_EvaluateAlarm+0x1b2>
				{
					if ( (0x00000001 << sTime.Hours) & hoursSelection )
 8012718:	4b6f      	ldr	r3, [pc, #444]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 801271a:	781b      	ldrb	r3, [r3, #0]
 801271c:	b2db      	uxtb	r3, r3
 801271e:	001a      	movs	r2, r3
 8012720:	2301      	movs	r3, #1
 8012722:	4093      	lsls	r3, r2
 8012724:	001a      	movs	r2, r3
 8012726:	4b6a      	ldr	r3, [pc, #424]	; (80128d0 <RTC_EvaluateAlarm+0x324>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	4013      	ands	r3, r2
 801272c:	d100      	bne.n	8012730 <RTC_EvaluateAlarm+0x184>
 801272e:	e0be      	b.n	80128ae <RTC_EvaluateAlarm+0x302>
					{
						if ( (rtc_buffer[0x0E]&0x04) && (rtc_buffer[0x0E]&0x01) )
 8012730:	4b6a      	ldr	r3, [pc, #424]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 8012732:	7b9b      	ldrb	r3, [r3, #14]
 8012734:	001a      	movs	r2, r3
 8012736:	2304      	movs	r3, #4
 8012738:	4013      	ands	r3, r2
 801273a:	d008      	beq.n	801274e <RTC_EvaluateAlarm+0x1a2>
 801273c:	4b67      	ldr	r3, [pc, #412]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 801273e:	7b9b      	ldrb	r3, [r3, #14]
 8012740:	001a      	movs	r2, r3
 8012742:	2301      	movs	r3, #1
 8012744:	4013      	ands	r3, r2
 8012746:	d002      	beq.n	801274e <RTC_EvaluateAlarm+0x1a2>
						{
							m_rtcWakeEvent = true;
 8012748:	4b65      	ldr	r3, [pc, #404]	; (80128e0 <RTC_EvaluateAlarm+0x334>)
 801274a:	2201      	movs	r2, #1
 801274c:	701a      	strb	r2, [r3, #0]
						}

						rtc_buffer[0x0F] |= 0x01; // set alarm 1 flag
 801274e:	4b63      	ldr	r3, [pc, #396]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 8012750:	7bdb      	ldrb	r3, [r3, #15]
 8012752:	2201      	movs	r2, #1
 8012754:	4313      	orrs	r3, r2
 8012756:	b2da      	uxtb	r2, r3
 8012758:	4b60      	ldr	r3, [pc, #384]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 801275a:	73da      	strb	r2, [r3, #15]
			if ( minutesStep <= 1 || (sTime.Minutes % minutesStep) == 0 )
 801275c:	e0a7      	b.n	80128ae <RTC_EvaluateAlarm+0x302>
					}
				}
				else if ( sTime.TimeFormat == RTC_HOURFORMAT12_AM )
 801275e:	4b5e      	ldr	r3, [pc, #376]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 8012760:	78db      	ldrb	r3, [r3, #3]
 8012762:	b2db      	uxtb	r3, r3
 8012764:	2b00      	cmp	r3, #0
 8012766:	d144      	bne.n	80127f2 <RTC_EvaluateAlarm+0x246>
				{
					if (sTime.Hours < 12)
 8012768:	4b5b      	ldr	r3, [pc, #364]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	b2db      	uxtb	r3, r3
 801276e:	2b0b      	cmp	r3, #11
 8012770:	d822      	bhi.n	80127b8 <RTC_EvaluateAlarm+0x20c>
					{
						if ( (0x00000001 << sTime.Hours) & hoursSelection )
 8012772:	4b59      	ldr	r3, [pc, #356]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 8012774:	781b      	ldrb	r3, [r3, #0]
 8012776:	b2db      	uxtb	r3, r3
 8012778:	001a      	movs	r2, r3
 801277a:	2301      	movs	r3, #1
 801277c:	4093      	lsls	r3, r2
 801277e:	001a      	movs	r2, r3
 8012780:	4b53      	ldr	r3, [pc, #332]	; (80128d0 <RTC_EvaluateAlarm+0x324>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4013      	ands	r3, r2
 8012786:	d100      	bne.n	801278a <RTC_EvaluateAlarm+0x1de>
 8012788:	e091      	b.n	80128ae <RTC_EvaluateAlarm+0x302>
						{
							if ( (rtc_buffer[0x0E]&0x04) && (rtc_buffer[0x0E]&0x01) )
 801278a:	4b54      	ldr	r3, [pc, #336]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 801278c:	7b9b      	ldrb	r3, [r3, #14]
 801278e:	001a      	movs	r2, r3
 8012790:	2304      	movs	r3, #4
 8012792:	4013      	ands	r3, r2
 8012794:	d008      	beq.n	80127a8 <RTC_EvaluateAlarm+0x1fc>
 8012796:	4b51      	ldr	r3, [pc, #324]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 8012798:	7b9b      	ldrb	r3, [r3, #14]
 801279a:	001a      	movs	r2, r3
 801279c:	2301      	movs	r3, #1
 801279e:	4013      	ands	r3, r2
 80127a0:	d002      	beq.n	80127a8 <RTC_EvaluateAlarm+0x1fc>
							{
								m_rtcWakeEvent = true;
 80127a2:	4b4f      	ldr	r3, [pc, #316]	; (80128e0 <RTC_EvaluateAlarm+0x334>)
 80127a4:	2201      	movs	r2, #1
 80127a6:	701a      	strb	r2, [r3, #0]
							}

							rtc_buffer[0x0F] |= 0x01; // set alarm 1 flag
 80127a8:	4b4c      	ldr	r3, [pc, #304]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 80127aa:	7bdb      	ldrb	r3, [r3, #15]
 80127ac:	2201      	movs	r2, #1
 80127ae:	4313      	orrs	r3, r2
 80127b0:	b2da      	uxtb	r2, r3
 80127b2:	4b4a      	ldr	r3, [pc, #296]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 80127b4:	73da      	strb	r2, [r3, #15]
			if ( minutesStep <= 1 || (sTime.Minutes % minutesStep) == 0 )
 80127b6:	e07a      	b.n	80128ae <RTC_EvaluateAlarm+0x302>
						}
					}
					else if ( 0x00000001 & hoursSelection )
 80127b8:	4b45      	ldr	r3, [pc, #276]	; (80128d0 <RTC_EvaluateAlarm+0x324>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2201      	movs	r2, #1
 80127be:	4013      	ands	r3, r2
 80127c0:	d100      	bne.n	80127c4 <RTC_EvaluateAlarm+0x218>
 80127c2:	e074      	b.n	80128ae <RTC_EvaluateAlarm+0x302>
					{
						if ( (rtc_buffer[0x0E]&0x04) && (rtc_buffer[0x0E]&0x01) )
 80127c4:	4b45      	ldr	r3, [pc, #276]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 80127c6:	7b9b      	ldrb	r3, [r3, #14]
 80127c8:	001a      	movs	r2, r3
 80127ca:	2304      	movs	r3, #4
 80127cc:	4013      	ands	r3, r2
 80127ce:	d008      	beq.n	80127e2 <RTC_EvaluateAlarm+0x236>
 80127d0:	4b42      	ldr	r3, [pc, #264]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 80127d2:	7b9b      	ldrb	r3, [r3, #14]
 80127d4:	001a      	movs	r2, r3
 80127d6:	2301      	movs	r3, #1
 80127d8:	4013      	ands	r3, r2
 80127da:	d002      	beq.n	80127e2 <RTC_EvaluateAlarm+0x236>
						{
							m_rtcWakeEvent = true;
 80127dc:	4b40      	ldr	r3, [pc, #256]	; (80128e0 <RTC_EvaluateAlarm+0x334>)
 80127de:	2201      	movs	r2, #1
 80127e0:	701a      	strb	r2, [r3, #0]
						}

						rtc_buffer[0x0F] |= 0x01; // set alarm 1 flag
 80127e2:	4b3e      	ldr	r3, [pc, #248]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 80127e4:	7bdb      	ldrb	r3, [r3, #15]
 80127e6:	2201      	movs	r2, #1
 80127e8:	4313      	orrs	r3, r2
 80127ea:	b2da      	uxtb	r2, r3
 80127ec:	4b3b      	ldr	r3, [pc, #236]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 80127ee:	73da      	strb	r2, [r3, #15]
			if ( minutesStep <= 1 || (sTime.Minutes % minutesStep) == 0 )
 80127f0:	e05d      	b.n	80128ae <RTC_EvaluateAlarm+0x302>
					}
				}
				else
				{
					if (sTime.Hours < 12)
 80127f2:	4b39      	ldr	r3, [pc, #228]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	2b0b      	cmp	r3, #11
 80127fa:	d822      	bhi.n	8012842 <RTC_EvaluateAlarm+0x296>
					{
						if ( (0x00010000 << sTime.Hours) & hoursSelection )
 80127fc:	4b36      	ldr	r3, [pc, #216]	; (80128d8 <RTC_EvaluateAlarm+0x32c>)
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	b2db      	uxtb	r3, r3
 8012802:	001a      	movs	r2, r3
 8012804:	2380      	movs	r3, #128	; 0x80
 8012806:	025b      	lsls	r3, r3, #9
 8012808:	4093      	lsls	r3, r2
 801280a:	001a      	movs	r2, r3
 801280c:	4b30      	ldr	r3, [pc, #192]	; (80128d0 <RTC_EvaluateAlarm+0x324>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4013      	ands	r3, r2
 8012812:	d04c      	beq.n	80128ae <RTC_EvaluateAlarm+0x302>
						{
							if ( (rtc_buffer[0x0E]&0x04) && (rtc_buffer[0x0E]&0x01) )
 8012814:	4b31      	ldr	r3, [pc, #196]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 8012816:	7b9b      	ldrb	r3, [r3, #14]
 8012818:	001a      	movs	r2, r3
 801281a:	2304      	movs	r3, #4
 801281c:	4013      	ands	r3, r2
 801281e:	d008      	beq.n	8012832 <RTC_EvaluateAlarm+0x286>
 8012820:	4b2e      	ldr	r3, [pc, #184]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 8012822:	7b9b      	ldrb	r3, [r3, #14]
 8012824:	001a      	movs	r2, r3
 8012826:	2301      	movs	r3, #1
 8012828:	4013      	ands	r3, r2
 801282a:	d002      	beq.n	8012832 <RTC_EvaluateAlarm+0x286>
							{
								m_rtcWakeEvent = true;
 801282c:	4b2c      	ldr	r3, [pc, #176]	; (80128e0 <RTC_EvaluateAlarm+0x334>)
 801282e:	2201      	movs	r2, #1
 8012830:	701a      	strb	r2, [r3, #0]
							}

							rtc_buffer[0x0F] |= 0x01; // set alarm 1 flag
 8012832:	4b2a      	ldr	r3, [pc, #168]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 8012834:	7bdb      	ldrb	r3, [r3, #15]
 8012836:	2201      	movs	r2, #1
 8012838:	4313      	orrs	r3, r2
 801283a:	b2da      	uxtb	r2, r3
 801283c:	4b27      	ldr	r3, [pc, #156]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 801283e:	73da      	strb	r2, [r3, #15]
			if ( minutesStep <= 1 || (sTime.Minutes % minutesStep) == 0 )
 8012840:	e035      	b.n	80128ae <RTC_EvaluateAlarm+0x302>
						}
					}
					else if ( 0x00010000 & hoursSelection )
 8012842:	4b23      	ldr	r3, [pc, #140]	; (80128d0 <RTC_EvaluateAlarm+0x324>)
 8012844:	681a      	ldr	r2, [r3, #0]
 8012846:	2380      	movs	r3, #128	; 0x80
 8012848:	025b      	lsls	r3, r3, #9
 801284a:	4013      	ands	r3, r2
 801284c:	d02f      	beq.n	80128ae <RTC_EvaluateAlarm+0x302>
					{
						if ( (rtc_buffer[0x0E]&0x04) && (rtc_buffer[0x0E]&0x01) )
 801284e:	4b23      	ldr	r3, [pc, #140]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 8012850:	7b9b      	ldrb	r3, [r3, #14]
 8012852:	001a      	movs	r2, r3
 8012854:	2304      	movs	r3, #4
 8012856:	4013      	ands	r3, r2
 8012858:	d008      	beq.n	801286c <RTC_EvaluateAlarm+0x2c0>
 801285a:	4b20      	ldr	r3, [pc, #128]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 801285c:	7b9b      	ldrb	r3, [r3, #14]
 801285e:	001a      	movs	r2, r3
 8012860:	2301      	movs	r3, #1
 8012862:	4013      	ands	r3, r2
 8012864:	d002      	beq.n	801286c <RTC_EvaluateAlarm+0x2c0>
						{
							m_rtcWakeEvent = true;
 8012866:	4b1e      	ldr	r3, [pc, #120]	; (80128e0 <RTC_EvaluateAlarm+0x334>)
 8012868:	2201      	movs	r2, #1
 801286a:	701a      	strb	r2, [r3, #0]
						}

						rtc_buffer[0x0F] |= 0x01; // set alarm 1 flag
 801286c:	4b1b      	ldr	r3, [pc, #108]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 801286e:	7bdb      	ldrb	r3, [r3, #15]
 8012870:	2201      	movs	r2, #1
 8012872:	4313      	orrs	r3, r2
 8012874:	b2da      	uxtb	r2, r3
 8012876:	4b19      	ldr	r3, [pc, #100]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 8012878:	73da      	strb	r2, [r3, #15]
			if ( minutesStep <= 1 || (sTime.Minutes % minutesStep) == 0 )
 801287a:	e018      	b.n	80128ae <RTC_EvaluateAlarm+0x302>
				}
			}
		}
		else
		{
			if ( (rtc_buffer[0x0E]&0x04) && (rtc_buffer[0x0E]&0x01) )
 801287c:	4b17      	ldr	r3, [pc, #92]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 801287e:	7b9b      	ldrb	r3, [r3, #14]
 8012880:	001a      	movs	r2, r3
 8012882:	2304      	movs	r3, #4
 8012884:	4013      	ands	r3, r2
 8012886:	d008      	beq.n	801289a <RTC_EvaluateAlarm+0x2ee>
 8012888:	4b14      	ldr	r3, [pc, #80]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 801288a:	7b9b      	ldrb	r3, [r3, #14]
 801288c:	001a      	movs	r2, r3
 801288e:	2301      	movs	r3, #1
 8012890:	4013      	ands	r3, r2
 8012892:	d002      	beq.n	801289a <RTC_EvaluateAlarm+0x2ee>
			{
				m_rtcWakeEvent = true;
 8012894:	4b12      	ldr	r3, [pc, #72]	; (80128e0 <RTC_EvaluateAlarm+0x334>)
 8012896:	2201      	movs	r2, #1
 8012898:	701a      	strb	r2, [r3, #0]
			}

			rtc_buffer[0x0F] |= 0x01; // set alarm 1 flag
 801289a:	4b10      	ldr	r3, [pc, #64]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 801289c:	7bdb      	ldrb	r3, [r3, #15]
 801289e:	2201      	movs	r2, #1
 80128a0:	4313      	orrs	r3, r2
 80128a2:	b2da      	uxtb	r2, r3
 80128a4:	4b0d      	ldr	r3, [pc, #52]	; (80128dc <RTC_EvaluateAlarm+0x330>)
 80128a6:	73da      	strb	r2, [r3, #15]
 80128a8:	e002      	b.n	80128b0 <RTC_EvaluateAlarm+0x304>
		return;
 80128aa:	46c0      	nop			; (mov r8, r8)
 80128ac:	e000      	b.n	80128b0 <RTC_EvaluateAlarm+0x304>
			if ( minutesStep <= 1 || (sTime.Minutes % minutesStep) == 0 )
 80128ae:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80128b0:	46bd      	mov	sp, r7
 80128b2:	b002      	add	sp, #8
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	46c0      	nop			; (mov r8, r8)
 80128b8:	20000f95 	.word	0x20000f95
 80128bc:	2000183c 	.word	0x2000183c
 80128c0:	fffffe7f 	.word	0xfffffe7f
 80128c4:	20000f8d 	.word	0x20000f8d
 80128c8:	20001a5c 	.word	0x20001a5c
 80128cc:	20001584 	.word	0x20001584
 80128d0:	20000f90 	.word	0x20000f90
 80128d4:	20000f94 	.word	0x20000f94
 80128d8:	20001588 	.word	0x20001588
 80128dc:	20000f4c 	.word	0x20000f4c
 80128e0:	20000f96 	.word	0x20000f96

080128e4 <RTC_GetAlarmState>:


bool RTC_GetAlarmState(void)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	af00      	add	r7, sp, #0
	return m_alarmEventFlag;
 80128e8:	4b02      	ldr	r3, [pc, #8]	; (80128f4 <RTC_GetAlarmState+0x10>)
 80128ea:	781b      	ldrb	r3, [r3, #0]
}
 80128ec:	0018      	movs	r0, r3
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	46c0      	nop			; (mov r8, r8)
 80128f4:	20000f95 	.word	0x20000f95

080128f8 <RTC_GetWakeEvent>:


bool RTC_GetWakeEvent(void)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	af00      	add	r7, sp, #0
	return m_rtcWakeEvent;
 80128fc:	4b02      	ldr	r3, [pc, #8]	; (8012908 <RTC_GetWakeEvent+0x10>)
 80128fe:	781b      	ldrb	r3, [r3, #0]
}
 8012900:	0018      	movs	r0, r3
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
 8012906:	46c0      	nop			; (mov r8, r8)
 8012908:	20000f96 	.word	0x20000f96

0801290c <RTC_ClearWakeEvent>:


void RTC_ClearWakeEvent(void)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	af00      	add	r7, sp, #0
	m_rtcWakeEvent = false;
 8012910:	4b02      	ldr	r3, [pc, #8]	; (801291c <RTC_ClearWakeEvent+0x10>)
 8012912:	2200      	movs	r2, #0
 8012914:	701a      	strb	r2, [r3, #0]
}
 8012916:	46c0      	nop			; (mov r8, r8)
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	20000f96 	.word	0x20000f96

08012920 <RtcDs1339ProcessRequest>:


void RtcDs1339ProcessRequest(uint8_t dir, uint8_t command, uint8_t *pData, uint16_t *dataLen)
{
 8012920:	b590      	push	{r4, r7, lr}
 8012922:	b087      	sub	sp, #28
 8012924:	af00      	add	r7, sp, #0
 8012926:	60ba      	str	r2, [r7, #8]
 8012928:	607b      	str	r3, [r7, #4]
 801292a:	240f      	movs	r4, #15
 801292c:	193b      	adds	r3, r7, r4
 801292e:	1c02      	adds	r2, r0, #0
 8012930:	701a      	strb	r2, [r3, #0]
 8012932:	200e      	movs	r0, #14
 8012934:	183b      	adds	r3, r7, r0
 8012936:	1c0a      	adds	r2, r1, #0
 8012938:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	if (command == 0)
 801293a:	183b      	adds	r3, r7, r0
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d141      	bne.n	80129c6 <RtcDs1339ProcessRequest+0xa6>
	{
		if ( dir == I2C_DIRECTION_RECEIVE )
 8012942:	193b      	adds	r3, r7, r4
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	2b01      	cmp	r3, #1
 8012948:	d11f      	bne.n	801298a <RtcDs1339ProcessRequest+0x6a>
		{
			//testRegAdr[0] = pData[0]; // debug only
			RtcReadTime(rtc_buffer, 0);
 801294a:	4b78      	ldr	r3, [pc, #480]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 801294c:	2100      	movs	r1, #0
 801294e:	0018      	movs	r0, r3
 8012950:	f000 f9c8 	bl	8012ce4 <RtcReadTime>

			i = 7;
 8012954:	2317      	movs	r3, #23
 8012956:	18fb      	adds	r3, r7, r3
 8012958:	2207      	movs	r2, #7
 801295a:	701a      	strb	r2, [r3, #0]

			while (i--)
 801295c:	e009      	b.n	8012972 <RtcDs1339ProcessRequest+0x52>
			{
				pData[i] = rtc_buffer[i];
 801295e:	2117      	movs	r1, #23
 8012960:	187b      	adds	r3, r7, r1
 8012962:	781a      	ldrb	r2, [r3, #0]
 8012964:	187b      	adds	r3, r7, r1
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	68b9      	ldr	r1, [r7, #8]
 801296a:	18cb      	adds	r3, r1, r3
 801296c:	496f      	ldr	r1, [pc, #444]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 801296e:	5c8a      	ldrb	r2, [r1, r2]
 8012970:	701a      	strb	r2, [r3, #0]
			while (i--)
 8012972:	2217      	movs	r2, #23
 8012974:	18bb      	adds	r3, r7, r2
 8012976:	781b      	ldrb	r3, [r3, #0]
 8012978:	18ba      	adds	r2, r7, r2
 801297a:	1e59      	subs	r1, r3, #1
 801297c:	7011      	strb	r1, [r2, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d1ed      	bne.n	801295e <RtcDs1339ProcessRequest+0x3e>
			}

			*dataLen = 7;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2207      	movs	r2, #7
 8012986:	801a      	strh	r2, [r3, #0]
 8012988:	e0c5      	b.n	8012b16 <RtcDs1339ProcessRequest+0x1f6>
		}
		else
		{
			//testRegAdrW = pData[0]; // debug only
			i = *dataLen;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	881a      	ldrh	r2, [r3, #0]
 801298e:	2317      	movs	r3, #23
 8012990:	18fb      	adds	r3, r7, r3
 8012992:	701a      	strb	r2, [r3, #0]
			while (i--)
 8012994:	e009      	b.n	80129aa <RtcDs1339ProcessRequest+0x8a>
			{
				rtc_buffer[i] = pData[i];
 8012996:	2117      	movs	r1, #23
 8012998:	187b      	adds	r3, r7, r1
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	68ba      	ldr	r2, [r7, #8]
 801299e:	18d2      	adds	r2, r2, r3
 80129a0:	187b      	adds	r3, r7, r1
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	7811      	ldrb	r1, [r2, #0]
 80129a6:	4a61      	ldr	r2, [pc, #388]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 80129a8:	54d1      	strb	r1, [r2, r3]
			while (i--)
 80129aa:	2217      	movs	r2, #23
 80129ac:	18bb      	adds	r3, r7, r2
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	18ba      	adds	r2, r7, r2
 80129b2:	1e59      	subs	r1, r3, #1
 80129b4:	7011      	strb	r1, [r2, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d1ed      	bne.n	8012996 <RtcDs1339ProcessRequest+0x76>
			}

			RtcWriteTime(rtc_buffer, 0);
 80129ba:	4b5c      	ldr	r3, [pc, #368]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 80129bc:	2100      	movs	r1, #0
 80129be:	0018      	movs	r0, r3
 80129c0:	f000 f8d0 	bl	8012b64 <RtcWriteTime>
 80129c4:	e0a7      	b.n	8012b16 <RtcDs1339ProcessRequest+0x1f6>
		}
	}
	else if (command == 7)
 80129c6:	230e      	movs	r3, #14
 80129c8:	18fb      	adds	r3, r7, r3
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	2b07      	cmp	r3, #7
 80129ce:	d148      	bne.n	8012a62 <RtcDs1339ProcessRequest+0x142>
	{
		if ( dir == I2C_DIRECTION_RECEIVE )
 80129d0:	230f      	movs	r3, #15
 80129d2:	18fb      	adds	r3, r7, r3
 80129d4:	781b      	ldrb	r3, [r3, #0]
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d120      	bne.n	8012a1c <RtcDs1339ProcessRequest+0xfc>
		{
			RtcReadAlarm1(&rtc_buffer[7], 0);
 80129da:	4b55      	ldr	r3, [pc, #340]	; (8012b30 <RtcDs1339ProcessRequest+0x210>)
 80129dc:	2100      	movs	r1, #0
 80129de:	0018      	movs	r0, r3
 80129e0:	f000 fa2a 	bl	8012e38 <RtcReadAlarm1>

			i = 9;
 80129e4:	2317      	movs	r3, #23
 80129e6:	18fb      	adds	r3, r7, r3
 80129e8:	2209      	movs	r2, #9
 80129ea:	701a      	strb	r2, [r3, #0]

			while (i--)
 80129ec:	e00a      	b.n	8012a04 <RtcDs1339ProcessRequest+0xe4>
			{
				pData[i] = rtc_buffer[i + 7];
 80129ee:	2117      	movs	r1, #23
 80129f0:	187b      	adds	r3, r7, r1
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	1dda      	adds	r2, r3, #7
 80129f6:	187b      	adds	r3, r7, r1
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	68b9      	ldr	r1, [r7, #8]
 80129fc:	18cb      	adds	r3, r1, r3
 80129fe:	494b      	ldr	r1, [pc, #300]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 8012a00:	5c8a      	ldrb	r2, [r1, r2]
 8012a02:	701a      	strb	r2, [r3, #0]
			while (i--)
 8012a04:	2217      	movs	r2, #23
 8012a06:	18bb      	adds	r3, r7, r2
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	18ba      	adds	r2, r7, r2
 8012a0c:	1e59      	subs	r1, r3, #1
 8012a0e:	7011      	strb	r1, [r2, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d1ec      	bne.n	80129ee <RtcDs1339ProcessRequest+0xce>
			}

			*dataLen = 9;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2209      	movs	r2, #9
 8012a18:	801a      	strh	r2, [r3, #0]
 8012a1a:	e07c      	b.n	8012b16 <RtcDs1339ProcessRequest+0x1f6>
		}
		else
		{
			i = *dataLen;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	881a      	ldrh	r2, [r3, #0]
 8012a20:	2317      	movs	r3, #23
 8012a22:	18fb      	adds	r3, r7, r3
 8012a24:	701a      	strb	r2, [r3, #0]

			while (i--)
 8012a26:	e00e      	b.n	8012a46 <RtcDs1339ProcessRequest+0x126>
			{
				if (i<9)
 8012a28:	2117      	movs	r1, #23
 8012a2a:	187b      	adds	r3, r7, r1
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	2b08      	cmp	r3, #8
 8012a30:	d809      	bhi.n	8012a46 <RtcDs1339ProcessRequest+0x126>
				{
					rtc_buffer[i + 7] = pData[i];
 8012a32:	187b      	adds	r3, r7, r1
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	68ba      	ldr	r2, [r7, #8]
 8012a38:	18d2      	adds	r2, r2, r3
 8012a3a:	187b      	adds	r3, r7, r1
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	3307      	adds	r3, #7
 8012a40:	7811      	ldrb	r1, [r2, #0]
 8012a42:	4a3a      	ldr	r2, [pc, #232]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 8012a44:	54d1      	strb	r1, [r2, r3]
			while (i--)
 8012a46:	2217      	movs	r2, #23
 8012a48:	18bb      	adds	r3, r7, r2
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	18ba      	adds	r2, r7, r2
 8012a4e:	1e59      	subs	r1, r3, #1
 8012a50:	7011      	strb	r1, [r2, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d1e8      	bne.n	8012a28 <RtcDs1339ProcessRequest+0x108>
				}
			}

			RtcWriteAlarm1(&rtc_buffer[7], 0);
 8012a56:	4b36      	ldr	r3, [pc, #216]	; (8012b30 <RtcDs1339ProcessRequest+0x210>)
 8012a58:	2100      	movs	r1, #0
 8012a5a:	0018      	movs	r0, r3
 8012a5c:	f000 fab2 	bl	8012fc4 <RtcWriteAlarm1>
 8012a60:	e059      	b.n	8012b16 <RtcDs1339ProcessRequest+0x1f6>
		}
	}
	else if (command == 0x0E)
 8012a62:	230e      	movs	r3, #14
 8012a64:	18fb      	adds	r3, r7, r3
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	2b0e      	cmp	r3, #14
 8012a6a:	d113      	bne.n	8012a94 <RtcDs1339ProcessRequest+0x174>
	{
		if (dir == I2C_DIRECTION_RECEIVE)
 8012a6c:	230f      	movs	r3, #15
 8012a6e:	18fb      	adds	r3, r7, r3
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d106      	bne.n	8012a84 <RtcDs1339ProcessRequest+0x164>
		{
			RtcReadControlStatus(pData, dataLen);
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	0011      	movs	r1, r2
 8012a7c:	0018      	movs	r0, r3
 8012a7e:	f000 fc25 	bl	80132cc <RtcReadControlStatus>
 8012a82:	e048      	b.n	8012b16 <RtcDs1339ProcessRequest+0x1f6>
		}
		else
		{
			RtcWriteControlStatus(pData, *dataLen);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	881a      	ldrh	r2, [r3, #0]
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	0011      	movs	r1, r2
 8012a8c:	0018      	movs	r0, r3
 8012a8e:	f000 fbfb 	bl	8013288 <RtcWriteControlStatus>
 8012a92:	e040      	b.n	8012b16 <RtcDs1339ProcessRequest+0x1f6>
		}
	}
	else if (command == 0x0F)
 8012a94:	220e      	movs	r2, #14
 8012a96:	18bb      	adds	r3, r7, r2
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	2b0f      	cmp	r3, #15
 8012a9c:	d120      	bne.n	8012ae0 <RtcDs1339ProcessRequest+0x1c0>
	{
		if (dir == I2C_DIRECTION_RECEIVE)
 8012a9e:	230f      	movs	r3, #15
 8012aa0:	18fb      	adds	r3, r7, r3
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	2b01      	cmp	r3, #1
 8012aa6:	d109      	bne.n	8012abc <RtcDs1339ProcessRequest+0x19c>
		{
			pData[0] = rtc_buffer[command];
 8012aa8:	18bb      	adds	r3, r7, r2
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	4a1f      	ldr	r2, [pc, #124]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 8012aae:	5cd2      	ldrb	r2, [r2, r3]
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	701a      	strb	r2, [r3, #0]
			*dataLen = 1;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	801a      	strh	r2, [r3, #0]
 8012aba:	e02c      	b.n	8012b16 <RtcDs1339ProcessRequest+0x1f6>
		}
		else
		{
			rtc_buffer[command] = rtc_buffer[command] & (pData[0] | 0xFC); // clear A1F, A2F
 8012abc:	200e      	movs	r0, #14
 8012abe:	183b      	adds	r3, r7, r0
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	4a1a      	ldr	r2, [pc, #104]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 8012ac4:	5cd2      	ldrb	r2, [r2, r3]
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	781b      	ldrb	r3, [r3, #0]
 8012aca:	2104      	movs	r1, #4
 8012acc:	4249      	negs	r1, r1
 8012ace:	430b      	orrs	r3, r1
 8012ad0:	b2d9      	uxtb	r1, r3
 8012ad2:	183b      	adds	r3, r7, r0
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	400a      	ands	r2, r1
 8012ad8:	b2d1      	uxtb	r1, r2
 8012ada:	4a14      	ldr	r2, [pc, #80]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 8012adc:	54d1      	strb	r1, [r2, r3]
 8012ade:	e01a      	b.n	8012b16 <RtcDs1339ProcessRequest+0x1f6>
		}
	}
	else if (command >=0 && command < RTC_REGISTERS_NUM)
 8012ae0:	220e      	movs	r2, #14
 8012ae2:	18bb      	adds	r3, r7, r2
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	2b3f      	cmp	r3, #63	; 0x3f
 8012ae8:	d81b      	bhi.n	8012b22 <RtcDs1339ProcessRequest+0x202>
	{
		if (dir == I2C_DIRECTION_TRANSMIT)
 8012aea:	230f      	movs	r3, #15
 8012aec:	18fb      	adds	r3, r7, r3
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d106      	bne.n	8012b02 <RtcDs1339ProcessRequest+0x1e2>
		{
			rtc_buffer[command] = pData[0];
 8012af4:	18bb      	adds	r3, r7, r2
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	68ba      	ldr	r2, [r7, #8]
 8012afa:	7811      	ldrb	r1, [r2, #0]
 8012afc:	4a0b      	ldr	r2, [pc, #44]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 8012afe:	54d1      	strb	r1, [r2, r3]
 8012b00:	e009      	b.n	8012b16 <RtcDs1339ProcessRequest+0x1f6>
		}
		else
		{
			pData[0] = rtc_buffer[command];
 8012b02:	230e      	movs	r3, #14
 8012b04:	18fb      	adds	r3, r7, r3
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	4a08      	ldr	r2, [pc, #32]	; (8012b2c <RtcDs1339ProcessRequest+0x20c>)
 8012b0a:	5cd2      	ldrb	r2, [r2, r3]
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	701a      	strb	r2, [r3, #0]
			*dataLen = 1;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2201      	movs	r2, #1
 8012b14:	801a      	strh	r2, [r3, #0]
	else
	{
		return;
	}

	rtc_buffer_ptr = command;
 8012b16:	4b07      	ldr	r3, [pc, #28]	; (8012b34 <RtcDs1339ProcessRequest+0x214>)
 8012b18:	220e      	movs	r2, #14
 8012b1a:	18ba      	adds	r2, r7, r2
 8012b1c:	7812      	ldrb	r2, [r2, #0]
 8012b1e:	701a      	strb	r2, [r3, #0]
 8012b20:	e000      	b.n	8012b24 <RtcDs1339ProcessRequest+0x204>
		return;
 8012b22:	46c0      	nop			; (mov r8, r8)
}
 8012b24:	46bd      	mov	sp, r7
 8012b26:	b007      	add	sp, #28
 8012b28:	bd90      	pop	{r4, r7, pc}
 8012b2a:	46c0      	nop			; (mov r8, r8)
 8012b2c:	20000f4c 	.word	0x20000f4c
 8012b30:	20000f53 	.word	0x20000f53
 8012b34:	20000f8c 	.word	0x20000f8c

08012b38 <RtcSetPointer>:
	return rtc_buffer_ptr;
}


uint8_t RtcSetPointer(uint8_t val)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	0002      	movs	r2, r0
 8012b40:	1dfb      	adds	r3, r7, #7
 8012b42:	701a      	strb	r2, [r3, #0]
	if (val <= 0x0F)
 8012b44:	1dfb      	adds	r3, r7, #7
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	2b0f      	cmp	r3, #15
 8012b4a:	d803      	bhi.n	8012b54 <RtcSetPointer+0x1c>
		rtc_buffer_ptr = val;
 8012b4c:	4b04      	ldr	r3, [pc, #16]	; (8012b60 <RtcSetPointer+0x28>)
 8012b4e:	1dfa      	adds	r2, r7, #7
 8012b50:	7812      	ldrb	r2, [r2, #0]
 8012b52:	701a      	strb	r2, [r3, #0]

	return 0u;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	0018      	movs	r0, r3
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	b002      	add	sp, #8
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	46c0      	nop			; (mov r8, r8)
 8012b60:	20000f8c 	.word	0x20000f8c

08012b64 <RtcWriteTime>:


void RtcWriteTime(uint8_t *buffer, uint8_t extended)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b088      	sub	sp, #32
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	000a      	movs	r2, r1
 8012b6e:	1cfb      	adds	r3, r7, #3
 8012b70:	701a      	strb	r2, [r3, #0]
	RTC_TimeTypeDef sTime;

	sTime.SecondFraction = 127; // 1s / 256 resolution
 8012b72:	210c      	movs	r1, #12
 8012b74:	187b      	adds	r3, r7, r1
 8012b76:	227f      	movs	r2, #127	; 0x7f
 8012b78:	609a      	str	r2, [r3, #8]
	sTime.Seconds = buffer[0]&0x7F;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	227f      	movs	r2, #127	; 0x7f
 8012b80:	4013      	ands	r3, r2
 8012b82:	b2da      	uxtb	r2, r3
 8012b84:	187b      	adds	r3, r7, r1
 8012b86:	709a      	strb	r2, [r3, #2]
	sTime.Minutes = buffer[1]&0x7F;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	227f      	movs	r2, #127	; 0x7f
 8012b90:	4013      	ands	r3, r2
 8012b92:	b2da      	uxtb	r2, r3
 8012b94:	187b      	adds	r3, r7, r1
 8012b96:	705a      	strb	r2, [r3, #1]

	if (buffer[2] & 0x40)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	3302      	adds	r3, #2
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	001a      	movs	r2, r3
 8012ba0:	2340      	movs	r3, #64	; 0x40
 8012ba2:	4013      	ands	r3, r2
 8012ba4:	d022      	beq.n	8012bec <RtcWriteTime+0x88>
	{
		if (hrtc.Init.HourFormat != RTC_HOURFORMAT_12)
 8012ba6:	4b4e      	ldr	r3, [pc, #312]	; (8012ce0 <RtcWriteTime+0x17c>)
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	2b40      	cmp	r3, #64	; 0x40
 8012bac:	d00a      	beq.n	8012bc4 <RtcWriteTime+0x60>
		{
			hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8012bae:	4b4c      	ldr	r3, [pc, #304]	; (8012ce0 <RtcWriteTime+0x17c>)
 8012bb0:	2240      	movs	r2, #64	; 0x40
 8012bb2:	605a      	str	r2, [r3, #4]
			if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8012bb4:	4b4a      	ldr	r3, [pc, #296]	; (8012ce0 <RtcWriteTime+0x17c>)
 8012bb6:	0018      	movs	r0, r3
 8012bb8:	f7f2 fe20 	bl	80057fc <HAL_RTC_Init>
 8012bbc:	1e03      	subs	r3, r0, #0
 8012bbe:	d001      	beq.n	8012bc4 <RtcWriteTime+0x60>
			{
				Error_Handler();
 8012bc0:	f7ef fd58 	bl	8002674 <Error_Handler>
			}
		}
		sTime.TimeFormat = buffer[2] & 0x20 ? RTC_HOURFORMAT12_PM : RTC_HOURFORMAT12_AM;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	3302      	adds	r3, #2
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	005b      	lsls	r3, r3, #1
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	2240      	movs	r2, #64	; 0x40
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	b2da      	uxtb	r2, r3
 8012bd4:	210c      	movs	r1, #12
 8012bd6:	187b      	adds	r3, r7, r1
 8012bd8:	70da      	strb	r2, [r3, #3]
		sTime.Hours = buffer[2] & 0x1F;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	3302      	adds	r3, #2
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	221f      	movs	r2, #31
 8012be2:	4013      	ands	r3, r2
 8012be4:	b2da      	uxtb	r2, r3
 8012be6:	187b      	adds	r3, r7, r1
 8012be8:	701a      	strb	r2, [r3, #0]
 8012bea:	e017      	b.n	8012c1c <RtcWriteTime+0xb8>
	}
	else
	{
		if (hrtc.Init.HourFormat != RTC_HOURFORMAT_24)
 8012bec:	4b3c      	ldr	r3, [pc, #240]	; (8012ce0 <RtcWriteTime+0x17c>)
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d00a      	beq.n	8012c0a <RtcWriteTime+0xa6>
		{
			hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012bf4:	4b3a      	ldr	r3, [pc, #232]	; (8012ce0 <RtcWriteTime+0x17c>)
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	605a      	str	r2, [r3, #4]
			if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8012bfa:	4b39      	ldr	r3, [pc, #228]	; (8012ce0 <RtcWriteTime+0x17c>)
 8012bfc:	0018      	movs	r0, r3
 8012bfe:	f7f2 fdfd 	bl	80057fc <HAL_RTC_Init>
 8012c02:	1e03      	subs	r3, r0, #0
 8012c04:	d001      	beq.n	8012c0a <RtcWriteTime+0xa6>
			{
				Error_Handler();
 8012c06:	f7ef fd35 	bl	8002674 <Error_Handler>
			}
		}
		sTime.Hours = buffer[2]&0x3F;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	3302      	adds	r3, #2
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	223f      	movs	r2, #63	; 0x3f
 8012c12:	4013      	ands	r3, r2
 8012c14:	b2da      	uxtb	r2, r3
 8012c16:	230c      	movs	r3, #12
 8012c18:	18fb      	adds	r3, r7, r3
 8012c1a:	701a      	strb	r2, [r3, #0]
	}

	RTC_DateTypeDef dateConf;
	dateConf.WeekDay = buffer[3];
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	78da      	ldrb	r2, [r3, #3]
 8012c20:	2108      	movs	r1, #8
 8012c22:	187b      	adds	r3, r7, r1
 8012c24:	701a      	strb	r2, [r3, #0]
	dateConf.Date = buffer[4];
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	791a      	ldrb	r2, [r3, #4]
 8012c2a:	187b      	adds	r3, r7, r1
 8012c2c:	709a      	strb	r2, [r3, #2]
	dateConf.Month = buffer[5];
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	795a      	ldrb	r2, [r3, #5]
 8012c32:	187b      	adds	r3, r7, r1
 8012c34:	705a      	strb	r2, [r3, #1]
	dateConf.Year = buffer[6];
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	799a      	ldrb	r2, [r3, #6]
 8012c3a:	187b      	adds	r3, r7, r1
 8012c3c:	70da      	strb	r2, [r3, #3]

	if (extended)
 8012c3e:	1cfb      	adds	r3, r7, #3
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d030      	beq.n	8012ca8 <RtcWriteTime+0x144>
	{
		sTime.SubSeconds = buffer[7];
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	3307      	adds	r3, #7
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	001a      	movs	r2, r3
 8012c4e:	210c      	movs	r1, #12
 8012c50:	187b      	adds	r3, r7, r1
 8012c52:	605a      	str	r2, [r3, #4]

		if ((buffer[8]&0x03) == 2)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	3308      	adds	r3, #8
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	001a      	movs	r2, r3
 8012c5c:	2303      	movs	r3, #3
 8012c5e:	4013      	ands	r3, r2
 8012c60:	2b02      	cmp	r3, #2
 8012c62:	d104      	bne.n	8012c6e <RtcWriteTime+0x10a>
		{
			sTime.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
 8012c64:	187b      	adds	r3, r7, r1
 8012c66:	2280      	movs	r2, #128	; 0x80
 8012c68:	0292      	lsls	r2, r2, #10
 8012c6a:	60da      	str	r2, [r3, #12]
 8012c6c:	e011      	b.n	8012c92 <RtcWriteTime+0x12e>
		}
		else if ((buffer[8]&0x03) == 1)
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	3308      	adds	r3, #8
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	001a      	movs	r2, r3
 8012c76:	2303      	movs	r3, #3
 8012c78:	4013      	ands	r3, r2
 8012c7a:	2b01      	cmp	r3, #1
 8012c7c:	d105      	bne.n	8012c8a <RtcWriteTime+0x126>
		{
			sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
 8012c7e:	230c      	movs	r3, #12
 8012c80:	18fb      	adds	r3, r7, r3
 8012c82:	2280      	movs	r2, #128	; 0x80
 8012c84:	0252      	lsls	r2, r2, #9
 8012c86:	60da      	str	r2, [r3, #12]
 8012c88:	e003      	b.n	8012c92 <RtcWriteTime+0x12e>
		}
		else
		{
			sTime.DayLightSaving =  RTC_DAYLIGHTSAVING_NONE;
 8012c8a:	230c      	movs	r3, #12
 8012c8c:	18fb      	adds	r3, r7, r3
 8012c8e:	2200      	movs	r2, #0
 8012c90:	60da      	str	r2, [r3, #12]
		}

		sTime.StoreOperation = (buffer[8]&0x04) ? RTC_STOREOPERATION_SET : RTC_STOREOPERATION_RESET;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	3308      	adds	r3, #8
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	041a      	lsls	r2, r3, #16
 8012c9a:	2380      	movs	r3, #128	; 0x80
 8012c9c:	02db      	lsls	r3, r3, #11
 8012c9e:	401a      	ands	r2, r3
 8012ca0:	230c      	movs	r3, #12
 8012ca2:	18fb      	adds	r3, r7, r3
 8012ca4:	611a      	str	r2, [r3, #16]
 8012ca6:	e009      	b.n	8012cbc <RtcWriteTime+0x158>
	}
	else
	{
		sTime.SubSeconds = 0;
 8012ca8:	210c      	movs	r1, #12
 8012caa:	187b      	adds	r3, r7, r1
 8012cac:	2200      	movs	r2, #0
 8012cae:	605a      	str	r2, [r3, #4]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012cb0:	187b      	adds	r3, r7, r1
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	60da      	str	r2, [r3, #12]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012cb6:	187b      	adds	r3, r7, r1
 8012cb8:	2200      	movs	r2, #0
 8012cba:	611a      	str	r2, [r3, #16]
	}

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8012cbc:	230c      	movs	r3, #12
 8012cbe:	18f9      	adds	r1, r7, r3
 8012cc0:	4b07      	ldr	r3, [pc, #28]	; (8012ce0 <RtcWriteTime+0x17c>)
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	0018      	movs	r0, r3
 8012cc6:	f7f2 fe2d 	bl	8005924 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &dateConf, RTC_FORMAT_BCD);
 8012cca:	2308      	movs	r3, #8
 8012ccc:	18f9      	adds	r1, r7, r3
 8012cce:	4b04      	ldr	r3, [pc, #16]	; (8012ce0 <RtcWriteTime+0x17c>)
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	0018      	movs	r0, r3
 8012cd4:	f7f2 ff40 	bl	8005b58 <HAL_RTC_SetDate>
}
 8012cd8:	46c0      	nop			; (mov r8, r8)
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	b008      	add	sp, #32
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	2000183c 	.word	0x2000183c

08012ce4 <RtcReadTime>:

void RtcReadTime(uint8_t *buffer, uint8_t extended) {
 8012ce4:	b590      	push	{r4, r7, lr}
 8012ce6:	b089      	sub	sp, #36	; 0x24
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	000a      	movs	r2, r1
 8012cee:	1cfb      	adds	r3, r7, #3
 8012cf0:	701a      	strb	r2, [r3, #0]
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8012cf2:	240c      	movs	r4, #12
 8012cf4:	1939      	adds	r1, r7, r4
 8012cf6:	4b4f      	ldr	r3, [pc, #316]	; (8012e34 <RtcReadTime+0x150>)
 8012cf8:	2201      	movs	r2, #1
 8012cfa:	0018      	movs	r0, r3
 8012cfc:	f7f2 fece 	bl	8005a9c <HAL_RTC_GetTime>
	buffer[0] = sTime.Seconds & 0x7F;
 8012d00:	0021      	movs	r1, r4
 8012d02:	187b      	adds	r3, r7, r1
 8012d04:	789b      	ldrb	r3, [r3, #2]
 8012d06:	227f      	movs	r2, #127	; 0x7f
 8012d08:	4013      	ands	r3, r2
 8012d0a:	b2da      	uxtb	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	701a      	strb	r2, [r3, #0]
	buffer[1] = sTime.Minutes;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	3301      	adds	r3, #1
 8012d14:	187a      	adds	r2, r7, r1
 8012d16:	7852      	ldrb	r2, [r2, #1]
 8012d18:	701a      	strb	r2, [r3, #0]
	if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 8012d1a:	4b46      	ldr	r3, [pc, #280]	; (8012e34 <RtcReadTime+0x150>)
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	2b40      	cmp	r3, #64	; 0x40
 8012d20:	d11f      	bne.n	8012d62 <RtcReadTime+0x7e>
		buffer[2] = sTime.Hours;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	3302      	adds	r3, #2
 8012d26:	187a      	adds	r2, r7, r1
 8012d28:	7812      	ldrb	r2, [r2, #0]
 8012d2a:	701a      	strb	r2, [r3, #0]
		buffer[2] |= sTime.TimeFormat == RTC_HOURFORMAT12_PM ? 0x20 : 0;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	3302      	adds	r3, #2
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	b25a      	sxtb	r2, r3
 8012d34:	187b      	adds	r3, r7, r1
 8012d36:	78db      	ldrb	r3, [r3, #3]
 8012d38:	2b40      	cmp	r3, #64	; 0x40
 8012d3a:	d101      	bne.n	8012d40 <RtcReadTime+0x5c>
 8012d3c:	2320      	movs	r3, #32
 8012d3e:	e000      	b.n	8012d42 <RtcReadTime+0x5e>
 8012d40:	2300      	movs	r3, #0
 8012d42:	4313      	orrs	r3, r2
 8012d44:	b25a      	sxtb	r2, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	3302      	adds	r3, #2
 8012d4a:	b2d2      	uxtb	r2, r2
 8012d4c:	701a      	strb	r2, [r3, #0]
		buffer[2] |= 0x40;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	3302      	adds	r3, #2
 8012d52:	781a      	ldrb	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	3302      	adds	r3, #2
 8012d58:	2140      	movs	r1, #64	; 0x40
 8012d5a:	430a      	orrs	r2, r1
 8012d5c:	b2d2      	uxtb	r2, r2
 8012d5e:	701a      	strb	r2, [r3, #0]
 8012d60:	e005      	b.n	8012d6e <RtcReadTime+0x8a>
	} else {
		buffer[2] = sTime.Hours;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	3302      	adds	r3, #2
 8012d66:	220c      	movs	r2, #12
 8012d68:	18ba      	adds	r2, r7, r2
 8012d6a:	7812      	ldrb	r2, [r2, #0]
 8012d6c:	701a      	strb	r2, [r3, #0]
	}

	RTC_DateTypeDef dateConf;
	HAL_RTC_GetDate(&hrtc, &dateConf, RTC_FORMAT_BCD);
 8012d6e:	2408      	movs	r4, #8
 8012d70:	1939      	adds	r1, r7, r4
 8012d72:	4b30      	ldr	r3, [pc, #192]	; (8012e34 <RtcReadTime+0x150>)
 8012d74:	2201      	movs	r2, #1
 8012d76:	0018      	movs	r0, r3
 8012d78:	f7f2 ff94 	bl	8005ca4 <HAL_RTC_GetDate>
	buffer[3] = dateConf.WeekDay;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	3303      	adds	r3, #3
 8012d80:	0021      	movs	r1, r4
 8012d82:	187a      	adds	r2, r7, r1
 8012d84:	7812      	ldrb	r2, [r2, #0]
 8012d86:	701a      	strb	r2, [r3, #0]
	buffer[4] = dateConf.Date;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	187a      	adds	r2, r7, r1
 8012d8e:	7892      	ldrb	r2, [r2, #2]
 8012d90:	701a      	strb	r2, [r3, #0]
	buffer[5] = dateConf.Month;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	3305      	adds	r3, #5
 8012d96:	187a      	adds	r2, r7, r1
 8012d98:	7852      	ldrb	r2, [r2, #1]
 8012d9a:	701a      	strb	r2, [r3, #0]
	buffer[6] = dateConf.Year;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	3306      	adds	r3, #6
 8012da0:	187a      	adds	r2, r7, r1
 8012da2:	78d2      	ldrb	r2, [r2, #3]
 8012da4:	701a      	strb	r2, [r3, #0]

	if (extended) {
 8012da6:	1cfb      	adds	r3, r7, #3
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d03e      	beq.n	8012e2c <RtcReadTime+0x148>
		buffer[7] = sTime.SubSeconds;
 8012dae:	210c      	movs	r1, #12
 8012db0:	187b      	adds	r3, r7, r1
 8012db2:	685a      	ldr	r2, [r3, #4]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	3307      	adds	r3, #7
 8012db8:	b2d2      	uxtb	r2, r2
 8012dba:	701a      	strb	r2, [r3, #0]
		buffer[8] = 0;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	3308      	adds	r3, #8
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	701a      	strb	r2, [r3, #0]
		if (sTime.DayLightSaving == RTC_DAYLIGHTSAVING_SUB1H) {
 8012dc4:	187b      	adds	r3, r7, r1
 8012dc6:	68da      	ldr	r2, [r3, #12]
 8012dc8:	2380      	movs	r3, #128	; 0x80
 8012dca:	029b      	lsls	r3, r3, #10
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d109      	bne.n	8012de4 <RtcReadTime+0x100>
			buffer[8] |= 2&0x03;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	3308      	adds	r3, #8
 8012dd4:	781a      	ldrb	r2, [r3, #0]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	3308      	adds	r3, #8
 8012dda:	2102      	movs	r1, #2
 8012ddc:	430a      	orrs	r2, r1
 8012dde:	b2d2      	uxtb	r2, r2
 8012de0:	701a      	strb	r2, [r3, #0]
 8012de2:	e00f      	b.n	8012e04 <RtcReadTime+0x120>
		} else if (sTime.DayLightSaving == RTC_DAYLIGHTSAVING_ADD1H) {
 8012de4:	230c      	movs	r3, #12
 8012de6:	18fb      	adds	r3, r7, r3
 8012de8:	68da      	ldr	r2, [r3, #12]
 8012dea:	2380      	movs	r3, #128	; 0x80
 8012dec:	025b      	lsls	r3, r3, #9
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d108      	bne.n	8012e04 <RtcReadTime+0x120>
			buffer[8] |= 1&0x03;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	3308      	adds	r3, #8
 8012df6:	781a      	ldrb	r2, [r3, #0]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	3308      	adds	r3, #8
 8012dfc:	2101      	movs	r1, #1
 8012dfe:	430a      	orrs	r2, r1
 8012e00:	b2d2      	uxtb	r2, r2
 8012e02:	701a      	strb	r2, [r3, #0]
		}
		buffer[8] |= (sTime.StoreOperation == RTC_STOREOPERATION_SET) ? 0x04 : 0;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	3308      	adds	r3, #8
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	b25a      	sxtb	r2, r3
 8012e0c:	230c      	movs	r3, #12
 8012e0e:	18fb      	adds	r3, r7, r3
 8012e10:	6919      	ldr	r1, [r3, #16]
 8012e12:	2380      	movs	r3, #128	; 0x80
 8012e14:	02db      	lsls	r3, r3, #11
 8012e16:	4299      	cmp	r1, r3
 8012e18:	d101      	bne.n	8012e1e <RtcReadTime+0x13a>
 8012e1a:	2304      	movs	r3, #4
 8012e1c:	e000      	b.n	8012e20 <RtcReadTime+0x13c>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	4313      	orrs	r3, r2
 8012e22:	b25a      	sxtb	r2, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	3308      	adds	r3, #8
 8012e28:	b2d2      	uxtb	r2, r2
 8012e2a:	701a      	strb	r2, [r3, #0]
	}
}
 8012e2c:	46c0      	nop			; (mov r8, r8)
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	b009      	add	sp, #36	; 0x24
 8012e32:	bd90      	pop	{r4, r7, pc}
 8012e34:	2000183c 	.word	0x2000183c

08012e38 <RtcReadAlarm1>:

void RtcReadAlarm1(uint8_t *buffer, uint8_t extended)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	000a      	movs	r2, r1
 8012e42:	1cfb      	adds	r3, r7, #3
 8012e44:	701a      	strb	r2, [r3, #0]
	HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8012e46:	2380      	movs	r3, #128	; 0x80
 8012e48:	005a      	lsls	r2, r3, #1
 8012e4a:	4959      	ldr	r1, [pc, #356]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012e4c:	4859      	ldr	r0, [pc, #356]	; (8012fb4 <RtcReadAlarm1+0x17c>)
 8012e4e:	2301      	movs	r3, #1
 8012e50:	f7f3 f8c8 	bl	8005fe4 <HAL_RTC_GetAlarm>

	buffer[0] = sAlarm.AlarmTime.Seconds | (sAlarm.AlarmMask&0x80);
 8012e54:	4b56      	ldr	r3, [pc, #344]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012e56:	789a      	ldrb	r2, [r3, #2]
 8012e58:	4b55      	ldr	r3, [pc, #340]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012e5a:	695b      	ldr	r3, [r3, #20]
 8012e5c:	b2db      	uxtb	r3, r3
 8012e5e:	217f      	movs	r1, #127	; 0x7f
 8012e60:	438b      	bics	r3, r1
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	4313      	orrs	r3, r2
 8012e66:	b2da      	uxtb	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmMask >>= 8;
 8012e6c:	4b50      	ldr	r3, [pc, #320]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012e6e:	695b      	ldr	r3, [r3, #20]
 8012e70:	0a1a      	lsrs	r2, r3, #8
 8012e72:	4b4f      	ldr	r3, [pc, #316]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012e74:	615a      	str	r2, [r3, #20]
	buffer[1] = sAlarm.AlarmTime.Minutes | (sAlarm.AlarmMask&0x80);
 8012e76:	4b4e      	ldr	r3, [pc, #312]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012e78:	7859      	ldrb	r1, [r3, #1]
 8012e7a:	4b4d      	ldr	r3, [pc, #308]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012e7c:	695b      	ldr	r3, [r3, #20]
 8012e7e:	b2db      	uxtb	r3, r3
 8012e80:	227f      	movs	r2, #127	; 0x7f
 8012e82:	4393      	bics	r3, r2
 8012e84:	b2da      	uxtb	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	3301      	adds	r3, #1
 8012e8a:	430a      	orrs	r2, r1
 8012e8c:	b2d2      	uxtb	r2, r2
 8012e8e:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmMask >>= 8;
 8012e90:	4b47      	ldr	r3, [pc, #284]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012e92:	695b      	ldr	r3, [r3, #20]
 8012e94:	0a1a      	lsrs	r2, r3, #8
 8012e96:	4b46      	ldr	r3, [pc, #280]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012e98:	615a      	str	r2, [r3, #20]

	if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8012e9a:	4b46      	ldr	r3, [pc, #280]	; (8012fb4 <RtcReadAlarm1+0x17c>)
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	2b40      	cmp	r3, #64	; 0x40
 8012ea0:	d127      	bne.n	8012ef2 <RtcReadAlarm1+0xba>
	{
		buffer[2] = sAlarm.AlarmTime.Hours;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	3302      	adds	r3, #2
 8012ea6:	4a42      	ldr	r2, [pc, #264]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012ea8:	7812      	ldrb	r2, [r2, #0]
 8012eaa:	701a      	strb	r2, [r3, #0]
		buffer[2] |= sAlarm.AlarmTime.TimeFormat == RTC_HOURFORMAT12_PM ? 0x20 : 0;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	3302      	adds	r3, #2
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	b25a      	sxtb	r2, r3
 8012eb4:	4b3e      	ldr	r3, [pc, #248]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012eb6:	78db      	ldrb	r3, [r3, #3]
 8012eb8:	2b40      	cmp	r3, #64	; 0x40
 8012eba:	d101      	bne.n	8012ec0 <RtcReadAlarm1+0x88>
 8012ebc:	2320      	movs	r3, #32
 8012ebe:	e000      	b.n	8012ec2 <RtcReadAlarm1+0x8a>
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	4313      	orrs	r3, r2
 8012ec4:	b25a      	sxtb	r2, r3
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	3302      	adds	r3, #2
 8012eca:	b2d2      	uxtb	r2, r2
 8012ecc:	701a      	strb	r2, [r3, #0]
		buffer[2] |= 0x40 | (sAlarm.AlarmMask&0x80);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	3302      	adds	r3, #2
 8012ed2:	781a      	ldrb	r2, [r3, #0]
 8012ed4:	4b36      	ldr	r3, [pc, #216]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012ed6:	695b      	ldr	r3, [r3, #20]
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	217f      	movs	r1, #127	; 0x7f
 8012edc:	438b      	bics	r3, r1
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	4313      	orrs	r3, r2
 8012ee2:	b2da      	uxtb	r2, r3
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	3302      	adds	r3, #2
 8012ee8:	2140      	movs	r1, #64	; 0x40
 8012eea:	430a      	orrs	r2, r1
 8012eec:	b2d2      	uxtb	r2, r2
 8012eee:	701a      	strb	r2, [r3, #0]
 8012ef0:	e00c      	b.n	8012f0c <RtcReadAlarm1+0xd4>
	}
	else
	{
		buffer[2] = sAlarm.AlarmTime.Hours | (sAlarm.AlarmMask&0x80);
 8012ef2:	4b2f      	ldr	r3, [pc, #188]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012ef4:	7819      	ldrb	r1, [r3, #0]
 8012ef6:	4b2e      	ldr	r3, [pc, #184]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012ef8:	695b      	ldr	r3, [r3, #20]
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	227f      	movs	r2, #127	; 0x7f
 8012efe:	4393      	bics	r3, r2
 8012f00:	b2da      	uxtb	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	3302      	adds	r3, #2
 8012f06:	430a      	orrs	r2, r1
 8012f08:	b2d2      	uxtb	r2, r2
 8012f0a:	701a      	strb	r2, [r3, #0]
	}

	sAlarm.AlarmMask >>= 8;
 8012f0c:	4b28      	ldr	r3, [pc, #160]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012f0e:	695b      	ldr	r3, [r3, #20]
 8012f10:	0a1a      	lsrs	r2, r3, #8
 8012f12:	4b27      	ldr	r3, [pc, #156]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012f14:	615a      	str	r2, [r3, #20]
	buffer[3] = sAlarm.AlarmDateWeekDay;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	3303      	adds	r3, #3
 8012f1a:	4a25      	ldr	r2, [pc, #148]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012f1c:	2120      	movs	r1, #32
 8012f1e:	5c52      	ldrb	r2, [r2, r1]
 8012f20:	701a      	strb	r2, [r3, #0]
	buffer[3] |= (sAlarm.AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_WEEKDAY) ? 0x40 : 0;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	3303      	adds	r3, #3
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	b25a      	sxtb	r2, r3
 8012f2a:	4b21      	ldr	r3, [pc, #132]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012f2c:	69d9      	ldr	r1, [r3, #28]
 8012f2e:	2380      	movs	r3, #128	; 0x80
 8012f30:	05db      	lsls	r3, r3, #23
 8012f32:	4299      	cmp	r1, r3
 8012f34:	d101      	bne.n	8012f3a <RtcReadAlarm1+0x102>
 8012f36:	2340      	movs	r3, #64	; 0x40
 8012f38:	e000      	b.n	8012f3c <RtcReadAlarm1+0x104>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	4313      	orrs	r3, r2
 8012f3e:	b25a      	sxtb	r2, r3
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	3303      	adds	r3, #3
 8012f44:	b2d2      	uxtb	r2, r2
 8012f46:	701a      	strb	r2, [r3, #0]
	buffer[3] |= (sAlarm.AlarmMask&0x80);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	3303      	adds	r3, #3
 8012f4c:	7819      	ldrb	r1, [r3, #0]
 8012f4e:	4b18      	ldr	r3, [pc, #96]	; (8012fb0 <RtcReadAlarm1+0x178>)
 8012f50:	695b      	ldr	r3, [r3, #20]
 8012f52:	b2db      	uxtb	r3, r3
 8012f54:	227f      	movs	r2, #127	; 0x7f
 8012f56:	4393      	bics	r3, r2
 8012f58:	b2da      	uxtb	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	3303      	adds	r3, #3
 8012f5e:	430a      	orrs	r2, r1
 8012f60:	b2d2      	uxtb	r2, r2
 8012f62:	701a      	strb	r2, [r3, #0]

	if (extended)
 8012f64:	1cfb      	adds	r3, r7, #3
 8012f66:	781b      	ldrb	r3, [r3, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d01d      	beq.n	8012fa8 <RtcReadAlarm1+0x170>
	{
		buffer[4] = hoursSelection;
 8012f6c:	4b12      	ldr	r3, [pc, #72]	; (8012fb8 <RtcReadAlarm1+0x180>)
 8012f6e:	681a      	ldr	r2, [r3, #0]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	3304      	adds	r3, #4
 8012f74:	b2d2      	uxtb	r2, r2
 8012f76:	701a      	strb	r2, [r3, #0]
		buffer[5] = hoursSelection >> 8;
 8012f78:	4b0f      	ldr	r3, [pc, #60]	; (8012fb8 <RtcReadAlarm1+0x180>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	0a1a      	lsrs	r2, r3, #8
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	3305      	adds	r3, #5
 8012f82:	b2d2      	uxtb	r2, r2
 8012f84:	701a      	strb	r2, [r3, #0]
		buffer[6] = hoursSelection >> 16;
 8012f86:	4b0c      	ldr	r3, [pc, #48]	; (8012fb8 <RtcReadAlarm1+0x180>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	0c1a      	lsrs	r2, r3, #16
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	3306      	adds	r3, #6
 8012f90:	b2d2      	uxtb	r2, r2
 8012f92:	701a      	strb	r2, [r3, #0]

		buffer[7] = minutesStep;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	3307      	adds	r3, #7
 8012f98:	4a08      	ldr	r2, [pc, #32]	; (8012fbc <RtcReadAlarm1+0x184>)
 8012f9a:	7812      	ldrb	r2, [r2, #0]
 8012f9c:	701a      	strb	r2, [r3, #0]
		buffer[8] = weekDaysSelection;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	3308      	adds	r3, #8
 8012fa2:	4a07      	ldr	r2, [pc, #28]	; (8012fc0 <RtcReadAlarm1+0x188>)
 8012fa4:	7812      	ldrb	r2, [r2, #0]
 8012fa6:	701a      	strb	r2, [r3, #0]
	}
}
 8012fa8:	46c0      	nop			; (mov r8, r8)
 8012faa:	46bd      	mov	sp, r7
 8012fac:	b002      	add	sp, #8
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	20001a5c 	.word	0x20001a5c
 8012fb4:	2000183c 	.word	0x2000183c
 8012fb8:	20000f90 	.word	0x20000f90
 8012fbc:	20000f94 	.word	0x20000f94
 8012fc0:	20000f8d 	.word	0x20000f8d

08012fc4 <RtcWriteAlarm1>:

void RtcWriteAlarm1(uint8_t *buffer, uint8_t extended)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	000a      	movs	r2, r1
 8012fce:	1cfb      	adds	r3, r7, #3
 8012fd0:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Seconds = buffer[0] & 0x7F;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	227f      	movs	r2, #127	; 0x7f
 8012fd8:	4013      	ands	r3, r2
 8012fda:	b2da      	uxtb	r2, r3
 8012fdc:	4ba3      	ldr	r3, [pc, #652]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8012fde:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.Minutes = buffer[1] & 0x7F;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	227f      	movs	r2, #127	; 0x7f
 8012fe8:	4013      	ands	r3, r2
 8012fea:	b2da      	uxtb	r2, r3
 8012fec:	4b9f      	ldr	r3, [pc, #636]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8012fee:	705a      	strb	r2, [r3, #1]

	if (buffer[2] & 0x40)
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	3302      	adds	r3, #2
 8012ff4:	781b      	ldrb	r3, [r3, #0]
 8012ff6:	001a      	movs	r2, r3
 8012ff8:	2340      	movs	r3, #64	; 0x40
 8012ffa:	4013      	ands	r3, r2
 8012ffc:	d04b      	beq.n	8013096 <RtcWriteAlarm1+0xd2>
	{
		if (hrtc.Init.HourFormat != RTC_HOURFORMAT_12)
 8012ffe:	4b9c      	ldr	r3, [pc, #624]	; (8013270 <RtcWriteAlarm1+0x2ac>)
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	2b40      	cmp	r3, #64	; 0x40
 8013004:	d034      	beq.n	8013070 <RtcWriteAlarm1+0xac>
		{
			// convert hour format to 24 if different
			uint8_t binHours = (buffer[2]&0x0F) + ((buffer[2]&0x10)?10:0);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	3302      	adds	r3, #2
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	220f      	movs	r2, #15
 801300e:	4013      	ands	r3, r2
 8013010:	b2d9      	uxtb	r1, r3
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	3302      	adds	r3, #2
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	001a      	movs	r2, r3
 801301a:	2310      	movs	r3, #16
 801301c:	4013      	ands	r3, r2
 801301e:	d001      	beq.n	8013024 <RtcWriteAlarm1+0x60>
 8013020:	230a      	movs	r3, #10
 8013022:	e000      	b.n	8013026 <RtcWriteAlarm1+0x62>
 8013024:	2300      	movs	r3, #0
 8013026:	200f      	movs	r0, #15
 8013028:	183a      	adds	r2, r7, r0
 801302a:	185b      	adds	r3, r3, r1
 801302c:	7013      	strb	r3, [r2, #0]
			if (buffer[2]&0x20) {
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	3302      	adds	r3, #2
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	001a      	movs	r2, r3
 8013036:	2320      	movs	r3, #32
 8013038:	4013      	ands	r3, r2
 801303a:	d009      	beq.n	8013050 <RtcWriteAlarm1+0x8c>
				if (binHours < 12) binHours += 12;
 801303c:	183b      	adds	r3, r7, r0
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	2b0b      	cmp	r3, #11
 8013042:	d80d      	bhi.n	8013060 <RtcWriteAlarm1+0x9c>
 8013044:	183b      	adds	r3, r7, r0
 8013046:	183a      	adds	r2, r7, r0
 8013048:	7812      	ldrb	r2, [r2, #0]
 801304a:	320c      	adds	r2, #12
 801304c:	701a      	strb	r2, [r3, #0]
 801304e:	e007      	b.n	8013060 <RtcWriteAlarm1+0x9c>
			} else {
				if (binHours > 11) binHours = 0;
 8013050:	220f      	movs	r2, #15
 8013052:	18bb      	adds	r3, r7, r2
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	2b0b      	cmp	r3, #11
 8013058:	d902      	bls.n	8013060 <RtcWriteAlarm1+0x9c>
 801305a:	18bb      	adds	r3, r7, r2
 801305c:	2200      	movs	r2, #0
 801305e:	701a      	strb	r2, [r3, #0]
			}
			sAlarm.AlarmTime.Hours = binHour24ToBcd[binHours];
 8013060:	230f      	movs	r3, #15
 8013062:	18fb      	adds	r3, r7, r3
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	4a83      	ldr	r2, [pc, #524]	; (8013274 <RtcWriteAlarm1+0x2b0>)
 8013068:	5cd2      	ldrb	r2, [r2, r3]
 801306a:	4b80      	ldr	r3, [pc, #512]	; (801326c <RtcWriteAlarm1+0x2a8>)
 801306c:	701a      	strb	r2, [r3, #0]
 801306e:	e057      	b.n	8013120 <RtcWriteAlarm1+0x15c>
		}
		else
		{
			sAlarm.AlarmTime.Hours = buffer[2] & 0x1F;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	3302      	adds	r3, #2
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	221f      	movs	r2, #31
 8013078:	4013      	ands	r3, r2
 801307a:	b2da      	uxtb	r2, r3
 801307c:	4b7b      	ldr	r3, [pc, #492]	; (801326c <RtcWriteAlarm1+0x2a8>)
 801307e:	701a      	strb	r2, [r3, #0]
			sAlarm.AlarmTime.TimeFormat = buffer[2] & 0x20 ? RTC_HOURFORMAT12_PM : RTC_HOURFORMAT12_AM;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	3302      	adds	r3, #2
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	005b      	lsls	r3, r3, #1
 8013088:	b2db      	uxtb	r3, r3
 801308a:	2240      	movs	r2, #64	; 0x40
 801308c:	4013      	ands	r3, r2
 801308e:	b2da      	uxtb	r2, r3
 8013090:	4b76      	ldr	r3, [pc, #472]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013092:	70da      	strb	r2, [r3, #3]
 8013094:	e044      	b.n	8013120 <RtcWriteAlarm1+0x15c>
		}
	}
	else
	{
		if (hrtc.Init.HourFormat != RTC_HOURFORMAT_24)
 8013096:	4b76      	ldr	r3, [pc, #472]	; (8013270 <RtcWriteAlarm1+0x2ac>)
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d038      	beq.n	8013110 <RtcWriteAlarm1+0x14c>
		{
			// convert hour format to 12 if different
			uint8_t binHours = (buffer[2]&0x0F) + ((buffer[2]&0x10)?10:0) + ((buffer[2]&0x20)?10:0);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	3302      	adds	r3, #2
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	220f      	movs	r2, #15
 80130a6:	4013      	ands	r3, r2
 80130a8:	b2da      	uxtb	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	3302      	adds	r3, #2
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	0019      	movs	r1, r3
 80130b2:	2310      	movs	r3, #16
 80130b4:	400b      	ands	r3, r1
 80130b6:	d001      	beq.n	80130bc <RtcWriteAlarm1+0xf8>
 80130b8:	230a      	movs	r3, #10
 80130ba:	e000      	b.n	80130be <RtcWriteAlarm1+0xfa>
 80130bc:	2300      	movs	r3, #0
 80130be:	189b      	adds	r3, r3, r2
 80130c0:	b2d9      	uxtb	r1, r3
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	3302      	adds	r3, #2
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	001a      	movs	r2, r3
 80130ca:	2320      	movs	r3, #32
 80130cc:	4013      	ands	r3, r2
 80130ce:	d001      	beq.n	80130d4 <RtcWriteAlarm1+0x110>
 80130d0:	230a      	movs	r3, #10
 80130d2:	e000      	b.n	80130d6 <RtcWriteAlarm1+0x112>
 80130d4:	2300      	movs	r3, #0
 80130d6:	200e      	movs	r0, #14
 80130d8:	183a      	adds	r2, r7, r0
 80130da:	185b      	adds	r3, r3, r1
 80130dc:	7013      	strb	r3, [r2, #0]
			uint8_t h = binHour24ToBcdAmPm[binHours];
 80130de:	183b      	adds	r3, r7, r0
 80130e0:	781a      	ldrb	r2, [r3, #0]
 80130e2:	200d      	movs	r0, #13
 80130e4:	183b      	adds	r3, r7, r0
 80130e6:	4964      	ldr	r1, [pc, #400]	; (8013278 <RtcWriteAlarm1+0x2b4>)
 80130e8:	5c8a      	ldrb	r2, [r1, r2]
 80130ea:	701a      	strb	r2, [r3, #0]
			sAlarm.AlarmTime.Hours = h & 0x1F;
 80130ec:	0001      	movs	r1, r0
 80130ee:	187b      	adds	r3, r7, r1
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	221f      	movs	r2, #31
 80130f4:	4013      	ands	r3, r2
 80130f6:	b2da      	uxtb	r2, r3
 80130f8:	4b5c      	ldr	r3, [pc, #368]	; (801326c <RtcWriteAlarm1+0x2a8>)
 80130fa:	701a      	strb	r2, [r3, #0]
			sAlarm.AlarmTime.TimeFormat = h & 0x20 ? RTC_HOURFORMAT12_PM : RTC_HOURFORMAT12_AM;
 80130fc:	187b      	adds	r3, r7, r1
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	005b      	lsls	r3, r3, #1
 8013102:	b2db      	uxtb	r3, r3
 8013104:	2240      	movs	r2, #64	; 0x40
 8013106:	4013      	ands	r3, r2
 8013108:	b2da      	uxtb	r2, r3
 801310a:	4b58      	ldr	r3, [pc, #352]	; (801326c <RtcWriteAlarm1+0x2a8>)
 801310c:	70da      	strb	r2, [r3, #3]
 801310e:	e007      	b.n	8013120 <RtcWriteAlarm1+0x15c>
		}
		else
		{
			sAlarm.AlarmTime.Hours = buffer[2]&0x3F;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	3302      	adds	r3, #2
 8013114:	781b      	ldrb	r3, [r3, #0]
 8013116:	223f      	movs	r2, #63	; 0x3f
 8013118:	4013      	ands	r3, r2
 801311a:	b2da      	uxtb	r2, r3
 801311c:	4b53      	ldr	r3, [pc, #332]	; (801326c <RtcWriteAlarm1+0x2a8>)
 801311e:	701a      	strb	r2, [r3, #0]
		}
	}

	sAlarm.AlarmDateWeekDaySel = (buffer[3] & 0x40) ? RTC_ALARMDATEWEEKDAYSEL_WEEKDAY : RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	3303      	adds	r3, #3
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	061a      	lsls	r2, r3, #24
 8013128:	2380      	movs	r3, #128	; 0x80
 801312a:	05db      	lsls	r3, r3, #23
 801312c:	401a      	ands	r2, r3
 801312e:	4b4f      	ldr	r3, [pc, #316]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013130:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = buffer[3] & 0x3F;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	3303      	adds	r3, #3
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	223f      	movs	r2, #63	; 0x3f
 801313a:	4013      	ands	r3, r2
 801313c:	b2d9      	uxtb	r1, r3
 801313e:	4b4b      	ldr	r3, [pc, #300]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013140:	2220      	movs	r2, #32
 8013142:	5499      	strb	r1, [r3, r2]

	sAlarm.AlarmMask = buffer[3]&0x80;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	3303      	adds	r3, #3
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	001a      	movs	r2, r3
 801314c:	2380      	movs	r3, #128	; 0x80
 801314e:	401a      	ands	r2, r3
 8013150:	4b46      	ldr	r3, [pc, #280]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013152:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmMask <<= 8;
 8013154:	4b45      	ldr	r3, [pc, #276]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013156:	695b      	ldr	r3, [r3, #20]
 8013158:	021a      	lsls	r2, r3, #8
 801315a:	4b44      	ldr	r3, [pc, #272]	; (801326c <RtcWriteAlarm1+0x2a8>)
 801315c:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmMask |= buffer[2]&0x80;
 801315e:	4b43      	ldr	r3, [pc, #268]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013160:	695a      	ldr	r2, [r3, #20]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	3302      	adds	r3, #2
 8013166:	781b      	ldrb	r3, [r3, #0]
 8013168:	0019      	movs	r1, r3
 801316a:	2380      	movs	r3, #128	; 0x80
 801316c:	400b      	ands	r3, r1
 801316e:	431a      	orrs	r2, r3
 8013170:	4b3e      	ldr	r3, [pc, #248]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013172:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmMask <<= 8;
 8013174:	4b3d      	ldr	r3, [pc, #244]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013176:	695b      	ldr	r3, [r3, #20]
 8013178:	021a      	lsls	r2, r3, #8
 801317a:	4b3c      	ldr	r3, [pc, #240]	; (801326c <RtcWriteAlarm1+0x2a8>)
 801317c:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmMask |= buffer[1]&0x80;
 801317e:	4b3b      	ldr	r3, [pc, #236]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013180:	695a      	ldr	r2, [r3, #20]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	3301      	adds	r3, #1
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	0019      	movs	r1, r3
 801318a:	2380      	movs	r3, #128	; 0x80
 801318c:	400b      	ands	r3, r1
 801318e:	431a      	orrs	r2, r3
 8013190:	4b36      	ldr	r3, [pc, #216]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013192:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmMask <<= 8;
 8013194:	4b35      	ldr	r3, [pc, #212]	; (801326c <RtcWriteAlarm1+0x2a8>)
 8013196:	695b      	ldr	r3, [r3, #20]
 8013198:	021a      	lsls	r2, r3, #8
 801319a:	4b34      	ldr	r3, [pc, #208]	; (801326c <RtcWriteAlarm1+0x2a8>)
 801319c:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmMask |= buffer[0]&0x80;
 801319e:	4b33      	ldr	r3, [pc, #204]	; (801326c <RtcWriteAlarm1+0x2a8>)
 80131a0:	695a      	ldr	r2, [r3, #20]
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	0019      	movs	r1, r3
 80131a8:	2380      	movs	r3, #128	; 0x80
 80131aa:	400b      	ands	r3, r1
 80131ac:	431a      	orrs	r2, r3
 80131ae:	4b2f      	ldr	r3, [pc, #188]	; (801326c <RtcWriteAlarm1+0x2a8>)
 80131b0:	615a      	str	r2, [r3, #20]

	if (extended)
 80131b2:	1cfb      	adds	r3, r7, #3
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d044      	beq.n	8013244 <RtcWriteAlarm1+0x280>
	{
		hoursSelection = buffer[6];
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	3306      	adds	r3, #6
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	001a      	movs	r2, r3
 80131c2:	4b2e      	ldr	r3, [pc, #184]	; (801327c <RtcWriteAlarm1+0x2b8>)
 80131c4:	601a      	str	r2, [r3, #0]
		hoursSelection <<= 8;
 80131c6:	4b2d      	ldr	r3, [pc, #180]	; (801327c <RtcWriteAlarm1+0x2b8>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	021a      	lsls	r2, r3, #8
 80131cc:	4b2b      	ldr	r3, [pc, #172]	; (801327c <RtcWriteAlarm1+0x2b8>)
 80131ce:	601a      	str	r2, [r3, #0]
		hoursSelection |= buffer[5];
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	3305      	adds	r3, #5
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	001a      	movs	r2, r3
 80131d8:	4b28      	ldr	r3, [pc, #160]	; (801327c <RtcWriteAlarm1+0x2b8>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	431a      	orrs	r2, r3
 80131de:	4b27      	ldr	r3, [pc, #156]	; (801327c <RtcWriteAlarm1+0x2b8>)
 80131e0:	601a      	str	r2, [r3, #0]
		hoursSelection <<= 8;
 80131e2:	4b26      	ldr	r3, [pc, #152]	; (801327c <RtcWriteAlarm1+0x2b8>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	021a      	lsls	r2, r3, #8
 80131e8:	4b24      	ldr	r3, [pc, #144]	; (801327c <RtcWriteAlarm1+0x2b8>)
 80131ea:	601a      	str	r2, [r3, #0]
		hoursSelection |= buffer[4];
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	3304      	adds	r3, #4
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	001a      	movs	r2, r3
 80131f4:	4b21      	ldr	r3, [pc, #132]	; (801327c <RtcWriteAlarm1+0x2b8>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	431a      	orrs	r2, r3
 80131fa:	4b20      	ldr	r3, [pc, #128]	; (801327c <RtcWriteAlarm1+0x2b8>)
 80131fc:	601a      	str	r2, [r3, #0]
		minutesStep = buffer[7];
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	79da      	ldrb	r2, [r3, #7]
 8013202:	4b1f      	ldr	r3, [pc, #124]	; (8013280 <RtcWriteAlarm1+0x2bc>)
 8013204:	701a      	strb	r2, [r3, #0]
		weekDaysSelection = buffer[8];
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	7a1a      	ldrb	r2, [r3, #8]
 801320a:	4b1e      	ldr	r3, [pc, #120]	; (8013284 <RtcWriteAlarm1+0x2c0>)
 801320c:	701a      	strb	r2, [r3, #0]

		if (!(buffer[0] || buffer[1] || buffer[2] || buffer[3]))
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d120      	bne.n	8013258 <RtcWriteAlarm1+0x294>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	3301      	adds	r3, #1
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d11b      	bne.n	8013258 <RtcWriteAlarm1+0x294>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	3302      	adds	r3, #2
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d116      	bne.n	8013258 <RtcWriteAlarm1+0x294>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	3303      	adds	r3, #3
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d111      	bne.n	8013258 <RtcWriteAlarm1+0x294>
		{
			HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8013234:	2380      	movs	r3, #128	; 0x80
 8013236:	005a      	lsls	r2, r3, #1
 8013238:	4b0d      	ldr	r3, [pc, #52]	; (8013270 <RtcWriteAlarm1+0x2ac>)
 801323a:	0011      	movs	r1, r2
 801323c:	0018      	movs	r0, r3
 801323e:	f7f2 fe73 	bl	8005f28 <HAL_RTC_DeactivateAlarm>
 8013242:	e009      	b.n	8013258 <RtcWriteAlarm1+0x294>
		}

	}
	else
	{
		hoursSelection = 0xFFFFFFFF;
 8013244:	4b0d      	ldr	r3, [pc, #52]	; (801327c <RtcWriteAlarm1+0x2b8>)
 8013246:	2201      	movs	r2, #1
 8013248:	4252      	negs	r2, r2
 801324a:	601a      	str	r2, [r3, #0]
		weekDaysSelection = 0xFF;
 801324c:	4b0d      	ldr	r3, [pc, #52]	; (8013284 <RtcWriteAlarm1+0x2c0>)
 801324e:	22ff      	movs	r2, #255	; 0xff
 8013250:	701a      	strb	r2, [r3, #0]
		minutesStep = 0;
 8013252:	4b0b      	ldr	r3, [pc, #44]	; (8013280 <RtcWriteAlarm1+0x2bc>)
 8013254:	2200      	movs	r2, #0
 8013256:	701a      	strb	r2, [r3, #0]
	}

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
 8013258:	4904      	ldr	r1, [pc, #16]	; (801326c <RtcWriteAlarm1+0x2a8>)
 801325a:	4b05      	ldr	r3, [pc, #20]	; (8013270 <RtcWriteAlarm1+0x2ac>)
 801325c:	2201      	movs	r2, #1
 801325e:	0018      	movs	r0, r3
 8013260:	f7f2 fd70 	bl	8005d44 <HAL_RTC_SetAlarm_IT>
}
 8013264:	46c0      	nop			; (mov r8, r8)
 8013266:	46bd      	mov	sp, r7
 8013268:	b004      	add	sp, #16
 801326a:	bd80      	pop	{r7, pc}
 801326c:	20001a5c 	.word	0x20001a5c
 8013270:	2000183c 	.word	0x2000183c
 8013274:	08014834 	.word	0x08014834
 8013278:	0801484c 	.word	0x0801484c
 801327c:	20000f90 	.word	0x20000f90
 8013280:	20000f94 	.word	0x20000f94
 8013284:	20000f8d 	.word	0x20000f8d

08013288 <RtcWriteControlStatus>:

void RtcWriteControlStatus(uint8_t *buffer, uint16_t dataLen) {
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	000a      	movs	r2, r1
 8013292:	1cbb      	adds	r3, r7, #2
 8013294:	801a      	strh	r2, [r3, #0]
	rtc_buffer[0x0E] = buffer[0];
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	781a      	ldrb	r2, [r3, #0]
 801329a:	4b0b      	ldr	r3, [pc, #44]	; (80132c8 <RtcWriteControlStatus+0x40>)
 801329c:	739a      	strb	r2, [r3, #14]
	if (dataLen > 1) {
 801329e:	1cbb      	adds	r3, r7, #2
 80132a0:	881b      	ldrh	r3, [r3, #0]
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d90c      	bls.n	80132c0 <RtcWriteControlStatus+0x38>
		//if ((pData[1]&0x01) == 0x00) // deactivate alarm interrupt signal
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		rtc_buffer[0x0E + 1] = rtc_buffer[0x0E + 1]&(buffer[1] | 0xFC); // clear A1F, A2F
 80132a6:	4b08      	ldr	r3, [pc, #32]	; (80132c8 <RtcWriteControlStatus+0x40>)
 80132a8:	7bdb      	ldrb	r3, [r3, #15]
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	3201      	adds	r2, #1
 80132ae:	7812      	ldrb	r2, [r2, #0]
 80132b0:	2104      	movs	r1, #4
 80132b2:	4249      	negs	r1, r1
 80132b4:	430a      	orrs	r2, r1
 80132b6:	b2d2      	uxtb	r2, r2
 80132b8:	4013      	ands	r3, r2
 80132ba:	b2da      	uxtb	r2, r3
 80132bc:	4b02      	ldr	r3, [pc, #8]	; (80132c8 <RtcWriteControlStatus+0x40>)
 80132be:	73da      	strb	r2, [r3, #15]
	}
}
 80132c0:	46c0      	nop			; (mov r8, r8)
 80132c2:	46bd      	mov	sp, r7
 80132c4:	b002      	add	sp, #8
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	20000f4c 	.word	0x20000f4c

080132cc <RtcReadControlStatus>:

void RtcReadControlStatus(uint8_t *buffer, uint16_t *dataLen)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
	buffer[0] = rtc_buffer[0x0E];
 80132d6:	4b08      	ldr	r3, [pc, #32]	; (80132f8 <RtcReadControlStatus+0x2c>)
 80132d8:	7b9a      	ldrb	r2, [r3, #14]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	701a      	strb	r2, [r3, #0]
	buffer[1] = rtc_buffer[0x0E + 1];
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	3301      	adds	r3, #1
 80132e2:	4a05      	ldr	r2, [pc, #20]	; (80132f8 <RtcReadControlStatus+0x2c>)
 80132e4:	7bd2      	ldrb	r2, [r2, #15]
 80132e6:	701a      	strb	r2, [r3, #0]
	*dataLen = 2;
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	2202      	movs	r2, #2
 80132ec:	801a      	strh	r2, [r3, #0]
}
 80132ee:	46c0      	nop			; (mov r8, r8)
 80132f0:	46bd      	mov	sp, r7
 80132f2:	b002      	add	sp, #8
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	46c0      	nop			; (mov r8, r8)
 80132f8:	20000f4c 	.word	0x20000f4c

080132fc <TASKMAN_Init>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void TASKMAN_Init(void)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	af00      	add	r7, sp, #0
	// TODO - Correct spelling!
	NvSetDataInitialized();
 8013300:	f7fd fbd0 	bl	8010aa4 <NvSetDataInitialized>

	E2_Init();
 8013304:	f7f8 fd09 	bl	800bd1a <E2_Init>

	ISENSE_Init();
 8013308:	f7fc feec 	bl	80100e4 <ISENSE_Init>
	BATTERY_Init();
 801330c:	f7f4 fc0c 	bl	8007b28 <BATTERY_Init>
	BUTTON_Init();
 8013310:	f7f5 fc76 	bl	8008c00 <BUTTON_Init>
	CHARGER_Init();
 8013314:	f7f6 f9bc 	bl	8009690 <CHARGER_Init>
	POWERSOURCE_Init();
 8013318:	f7fe fb56 	bl	80119c8 <POWERSOURCE_Init>
	FUELGAUGE_Init();
 801331c:	f7f9 fa40 	bl	800c7a0 <FUELGAUGE_Init>

	POWERMAN_Init();
 8013320:	f7fd fe2e 	bl	8010f80 <POWERMAN_Init>

	BUTTON_Init();
 8013324:	f7f5 fc6c 	bl	8008c00 <BUTTON_Init>

	RtcInit();
 8013328:	f7ff f8f8 	bl	801251c <RtcInit>
	IoControlInit();
 801332c:	f7fb fa98 	bl	800e860 <IoControlInit>

	MS_TIME_COUNTER_INIT(m_lastTaskRunTimeMs);
 8013330:	f7ef fece 	bl	80030d0 <HAL_GetTick>
 8013334:	0002      	movs	r2, r0
 8013336:	4b08      	ldr	r3, [pc, #32]	; (8013358 <TASKMAN_Init+0x5c>)
 8013338:	601a      	str	r2, [r3, #0]
	MS_TIME_COUNTER_INIT(m_lowPowerDelayTimer);
 801333a:	f7ef fec9 	bl	80030d0 <HAL_GetTick>
 801333e:	0002      	movs	r2, r0
 8013340:	4b06      	ldr	r3, [pc, #24]	; (801335c <TASKMAN_Init+0x60>)
 8013342:	601a      	str	r2, [r3, #0]

	HOSTCOMMS_PiJuiceAddressSetEnable(true);
 8013344:	2001      	movs	r0, #1
 8013346:	f7fa fac7 	bl	800d8d8 <HOSTCOMMS_PiJuiceAddressSetEnable>

	m_runState = TASKMAN_RUNSTATE_NORMAL;
 801334a:	4b05      	ldr	r3, [pc, #20]	; (8013360 <TASKMAN_Init+0x64>)
 801334c:	2200      	movs	r2, #0
 801334e:	701a      	strb	r2, [r3, #0]
}
 8013350:	46c0      	nop			; (mov r8, r8)
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	46c0      	nop			; (mov r8, r8)
 8013358:	200015e4 	.word	0x200015e4
 801335c:	200015e8 	.word	0x200015e8
 8013360:	200015ec 	.word	0x200015ec

08013364 <TASKMAN_Run>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void TASKMAN_Run(void)
{
 8013364:	b590      	push	{r4, r7, lr}
 8013366:	b085      	sub	sp, #20
 8013368:	af00      	add	r7, sp, #0
	bool needEventPoll;
	uint32_t sysTime;

	while(true)
	{
		sysTime = HAL_GetTick();
 801336a:	f7ef feb1 	bl	80030d0 <HAL_GetTick>
 801336e:	0003      	movs	r3, r0
 8013370:	60fb      	str	r3, [r7, #12]

		powerManagerCanShutdown = POWERMAN_CanShutDown();
 8013372:	230b      	movs	r3, #11
 8013374:	18fc      	adds	r4, r7, r3
 8013376:	f7fe fa33 	bl	80117e0 <POWERMAN_CanShutDown>
 801337a:	0003      	movs	r3, r0
 801337c:	7023      	strb	r3, [r4, #0]
		lastHostCommandAge = HOSTCOMMS_GetLastCommandAgeMs(sysTime);
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	0018      	movs	r0, r3
 8013382:	f7fa fc4d 	bl	800dc20 <HOSTCOMMS_GetLastCommandAgeMs>
 8013386:	0003      	movs	r3, r0
 8013388:	607b      	str	r3, [r7, #4]
		rtcWakeEvent = RTC_GetWakeEvent();
 801338a:	1cfc      	adds	r4, r7, #3
 801338c:	f7ff fab4 	bl	80128f8 <RTC_GetWakeEvent>
 8013390:	0003      	movs	r3, r0
 8013392:	7023      	strb	r3, [r4, #0]

		needEventPoll = CHARGER_RequirePoll()
 8013394:	f7f6 fbca 	bl	8009b2c <CHARGER_RequirePoll>
 8013398:	1e03      	subs	r3, r0, #0
							|| (EXTI_EVENT_NONE != m_extiEvent)
							|| lastHostCommandAge < 10u
							|| rtcWakeEvent
							|| POWERSOURCE_NeedPoll()
							|| RTC_GetAlarmState();
 801339a:	d112      	bne.n	80133c2 <TASKMAN_Run+0x5e>
							|| (EXTI_EVENT_NONE != m_extiEvent)
 801339c:	4b48      	ldr	r3, [pc, #288]	; (80134c0 <TASKMAN_Run+0x15c>)
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10e      	bne.n	80133c2 <TASKMAN_Run+0x5e>
							|| lastHostCommandAge < 10u
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2b09      	cmp	r3, #9
 80133a8:	d90b      	bls.n	80133c2 <TASKMAN_Run+0x5e>
							|| rtcWakeEvent
 80133aa:	1cfb      	adds	r3, r7, #3
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d107      	bne.n	80133c2 <TASKMAN_Run+0x5e>
							|| POWERSOURCE_NeedPoll()
 80133b2:	f7fe fe0d 	bl	8011fd0 <POWERSOURCE_NeedPoll>
 80133b6:	1e03      	subs	r3, r0, #0
 80133b8:	d103      	bne.n	80133c2 <TASKMAN_Run+0x5e>
							|| RTC_GetAlarmState();
 80133ba:	f7ff fa93 	bl	80128e4 <RTC_GetAlarmState>
 80133be:	1e03      	subs	r3, r0, #0
 80133c0:	d001      	beq.n	80133c6 <TASKMAN_Run+0x62>
 80133c2:	2201      	movs	r2, #1
 80133c4:	e000      	b.n	80133c8 <TASKMAN_Run+0x64>
 80133c6:	2200      	movs	r2, #0
		needEventPoll = CHARGER_RequirePoll()
 80133c8:	1cbb      	adds	r3, r7, #2
 80133ca:	701a      	strb	r2, [r3, #0]
 80133cc:	781a      	ldrb	r2, [r3, #0]
 80133ce:	2101      	movs	r1, #1
 80133d0:	400a      	ands	r2, r1
 80133d2:	701a      	strb	r2, [r3, #0]

		if (false == needEventPoll)
 80133d4:	1cbb      	adds	r3, r7, #2
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	2201      	movs	r2, #1
 80133da:	4053      	eors	r3, r2
 80133dc:	b2db      	uxtb	r3, r3
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d027      	beq.n	8013432 <TASKMAN_Run+0xce>
		{
			if ( /*(
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	4a37      	ldr	r2, [pc, #220]	; (80134c4 <TASKMAN_Run+0x160>)
 80133e6:	4293      	cmp	r3, r2
 80133e8:	d91b      	bls.n	8013422 <TASKMAN_Run+0xbe>
					(ANALOG_Get5VRailMa() <= 50) ||
					( (ANALOG_Get5VRailMv() < 4600u) && IODRV_ReadPinValue(IODRV_PIN_EXTVS_EN)) ) &&*/
					(lastHostCommandAge > 5000u) &&
					MS_TIMEREF_TIMEOUT(m_lowPowerDelayTimer, sysTime, 22u) &&
 80133ea:	4b37      	ldr	r3, [pc, #220]	; (80134c8 <TASKMAN_Run+0x164>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	68fa      	ldr	r2, [r7, #12]
 80133f0:	1ad3      	subs	r3, r2, r3
					(lastHostCommandAge > 5000u) &&
 80133f2:	2b15      	cmp	r3, #21
 80133f4:	d915      	bls.n	8013422 <TASKMAN_Run+0xbe>
					MS_TIMEREF_TIMEOUT(m_lowPowerDelayTimer, sysTime, 22u) &&
 80133f6:	230b      	movs	r3, #11
 80133f8:	18fb      	adds	r3, r7, r3
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d010      	beq.n	8013422 <TASKMAN_Run+0xbe>
					(true == powerManagerCanShutdown) &&
					(CHG_NO_VALID_SOURCE == CHARGER_GetStatus()) &&
 8013400:	f7f6 fbac 	bl	8009b5c <CHARGER_GetStatus>
 8013404:	1e03      	subs	r3, r0, #0
					(true == powerManagerCanShutdown) &&
 8013406:	d10c      	bne.n	8013422 <TASKMAN_Run+0xbe>
					(false == BUTTON_IsButtonActive())
 8013408:	f7f5 fdd0 	bl	8008fac <BUTTON_IsButtonActive>
 801340c:	0003      	movs	r3, r0
 801340e:	001a      	movs	r2, r3
 8013410:	2301      	movs	r3, #1
 8013412:	4053      	eors	r3, r2
 8013414:	b2db      	uxtb	r3, r3
					(CHG_NO_VALID_SOURCE == CHARGER_GetStatus()) &&
 8013416:	2b00      	cmp	r3, #0
 8013418:	d003      	beq.n	8013422 <TASKMAN_Run+0xbe>
					)
			{

				m_runState = TASKMAN_RUNSTATE_LOW_POWER;
 801341a:	4b2c      	ldr	r3, [pc, #176]	; (80134cc <TASKMAN_Run+0x168>)
 801341c:	2202      	movs	r2, #2
 801341e:	701a      	strb	r2, [r3, #0]
 8013420:	e002      	b.n	8013428 <TASKMAN_Run+0xc4>
			}
			else
			{
				m_runState = TASKMAN_RUNSTATE_SLEEP;
 8013422:	4b2a      	ldr	r3, [pc, #168]	; (80134cc <TASKMAN_Run+0x168>)
 8013424:	2201      	movs	r2, #1
 8013426:	701a      	strb	r2, [r3, #0]
			}

			TASKMAN_WaitInterrupt();
 8013428:	f000 f876 	bl	8013518 <TASKMAN_WaitInterrupt>

			m_runState = TASKMAN_RUNSTATE_NORMAL;
 801342c:	4b27      	ldr	r3, [pc, #156]	; (80134cc <TASKMAN_Run+0x168>)
 801342e:	2200      	movs	r2, #0
 8013430:	701a      	strb	r2, [r3, #0]
		}


		if (EXTI_EVENT_I2C == m_extiEvent)
 8013432:	4b23      	ldr	r3, [pc, #140]	; (80134c0 <TASKMAN_Run+0x15c>)
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	2b02      	cmp	r3, #2
 8013438:	d101      	bne.n	801343e <TASKMAN_Run+0xda>
		{
			HOSTCOMMS_SetInterrupt();
 801343a:	f7fa fbff 	bl	800dc3c <HOSTCOMMS_SetInterrupt>
		}

		m_extiEvent = EXTI_EVENT_NONE;
 801343e:	4b20      	ldr	r3, [pc, #128]	; (80134c0 <TASKMAN_Run+0x15c>)
 8013440:	2200      	movs	r2, #0
 8013442:	701a      	strb	r2, [r3, #0]


		// Do not disturb i2c transfer if this is i2c interrupt wakeup
		if ( (MS_TIME_COUNT(m_lastTaskRunTimeMs) >= TASKMAN_TASK_PERIOD_MS) || needEventPoll )
 8013444:	f7ef fe44 	bl	80030d0 <HAL_GetTick>
 8013448:	0002      	movs	r2, r0
 801344a:	4b21      	ldr	r3, [pc, #132]	; (80134d0 <TASKMAN_Run+0x16c>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	2b13      	cmp	r3, #19
 8013452:	d803      	bhi.n	801345c <TASKMAN_Run+0xf8>
 8013454:	1cbb      	adds	r3, r7, #2
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d086      	beq.n	801336a <TASKMAN_Run+0x6>
		{
			MS_TIME_COUNTER_INIT(m_lastTaskRunTimeMs);
 801345c:	f7ef fe38 	bl	80030d0 <HAL_GetTick>
 8013460:	0002      	movs	r2, r0
 8013462:	4b1b      	ldr	r3, [pc, #108]	; (80134d0 <TASKMAN_Run+0x16c>)
 8013464:	601a      	str	r2, [r3, #0]

			CHARGER_Task();
 8013466:	f7f6 f9c5 	bl	80097f4 <CHARGER_Task>
			FUELGAUGE_Task();
 801346a:	f7f9 f9f7 	bl	800c85c <FUELGAUGE_Task>
			BATTERY_Task();
 801346e:	f7f4 fb7b 	bl	8007b68 <BATTERY_Task>
			POWERSOURCE_Task();
 8013472:	f7fe fb7b 	bl	8011b6c <POWERSOURCE_Task>
			ISENSE_Task();
 8013476:	f7fc fe63 	bl	8010140 <ISENSE_Task>

			RTC_EvaluateAlarm();
 801347a:	f7ff f897 	bl	80125ac <RTC_EvaluateAlarm>

			BUTTON_Task();
 801347e:	f7f5 fbe9 	bl	8008c54 <BUTTON_Task>
			POWERMAN_Task();
 8013482:	f7fd fe49 	bl	8011118 <POWERMAN_Task>

			HOSTCOMMS_Task();
 8013486:	f7fa fb13 	bl	800dab0 <HOSTCOMMS_Task>

			CHARGER_Task();
 801348a:	f7f6 f9b3 	bl	80097f4 <CHARGER_Task>

			m_taskmanLoopTimeTrack[m_taskloopTrackIdx] = MS_TIMEREF_DIFF(m_lastTaskRunTimeMs, HAL_GetTick());
 801348e:	f7ef fe1f 	bl	80030d0 <HAL_GetTick>
 8013492:	4b0f      	ldr	r3, [pc, #60]	; (80134d0 <TASKMAN_Run+0x16c>)
 8013494:	6819      	ldr	r1, [r3, #0]
 8013496:	4b0f      	ldr	r3, [pc, #60]	; (80134d4 <TASKMAN_Run+0x170>)
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	1a41      	subs	r1, r0, r1
 801349c:	4b0e      	ldr	r3, [pc, #56]	; (80134d8 <TASKMAN_Run+0x174>)
 801349e:	0092      	lsls	r2, r2, #2
 80134a0:	50d1      	str	r1, [r2, r3]
			m_taskloopTrackIdx++;
 80134a2:	4b0c      	ldr	r3, [pc, #48]	; (80134d4 <TASKMAN_Run+0x170>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	1c5a      	adds	r2, r3, #1
 80134a8:	4b0a      	ldr	r3, [pc, #40]	; (80134d4 <TASKMAN_Run+0x170>)
 80134aa:	601a      	str	r2, [r3, #0]
			if (m_taskloopTrackIdx == TASKMAN_LOOP_TRACKER_COUNT)
 80134ac:	4b09      	ldr	r3, [pc, #36]	; (80134d4 <TASKMAN_Run+0x170>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b10      	cmp	r3, #16
 80134b2:	d000      	beq.n	80134b6 <TASKMAN_Run+0x152>
 80134b4:	e759      	b.n	801336a <TASKMAN_Run+0x6>
			{
				m_taskloopTrackIdx = 0u;
 80134b6:	4b07      	ldr	r3, [pc, #28]	; (80134d4 <TASKMAN_Run+0x170>)
 80134b8:	2200      	movs	r2, #0
 80134ba:	601a      	str	r2, [r3, #0]
		sysTime = HAL_GetTick();
 80134bc:	e755      	b.n	801336a <TASKMAN_Run+0x6>
 80134be:	46c0      	nop			; (mov r8, r8)
 80134c0:	200015ed 	.word	0x200015ed
 80134c4:	00001388 	.word	0x00001388
 80134c8:	200015e8 	.word	0x200015e8
 80134cc:	200015ec 	.word	0x200015ec
 80134d0:	200015e4 	.word	0x200015e4
 80134d4:	200015dc 	.word	0x200015dc
 80134d8:	2000159c 	.word	0x2000159c

080134dc <TASKMAN_GetRunState>:
 * @param	none
 * @retval	m_runState		current running state of the system
 */
// ****************************************************************************
TASKMAN_RunState_t TASKMAN_GetRunState(void)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	af00      	add	r7, sp, #0
	return m_runState;
 80134e0:	4b02      	ldr	r3, [pc, #8]	; (80134ec <TASKMAN_GetRunState+0x10>)
 80134e2:	781b      	ldrb	r3, [r3, #0]
}
 80134e4:	0018      	movs	r0, r3
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	46c0      	nop			; (mov r8, r8)
 80134ec:	200015ec 	.word	0x200015ec

080134f0 <TASKMAN_GetIOWakeEvent>:
 * @retval	bool			false = no user configured IO wake event occurred
 * 							true = user configured IO wake event occurred
 */
// ****************************************************************************
bool TASKMAN_GetIOWakeEvent(void)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	af00      	add	r7, sp, #0
	return m_ioWakeupEvent;
 80134f4:	4b02      	ldr	r3, [pc, #8]	; (8013500 <TASKMAN_GetIOWakeEvent+0x10>)
 80134f6:	781b      	ldrb	r3, [r3, #0]
}
 80134f8:	0018      	movs	r0, r3
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}
 80134fe:	46c0      	nop			; (mov r8, r8)
 8013500:	200015ee 	.word	0x200015ee

08013504 <TASKMAN_ClearIOWakeEvent>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void TASKMAN_ClearIOWakeEvent(void)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	af00      	add	r7, sp, #0
	m_ioWakeupEvent = false;
 8013508:	4b02      	ldr	r3, [pc, #8]	; (8013514 <TASKMAN_ClearIOWakeEvent+0x10>)
 801350a:	2200      	movs	r2, #0
 801350c:	701a      	strb	r2, [r3, #0]
}
 801350e:	46c0      	nop			; (mov r8, r8)
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	200015ee 	.word	0x200015ee

08013518 <TASKMAN_WaitInterrupt>:
 * @param	none
 * @retval	none
 */
// ****************************************************************************
void TASKMAN_WaitInterrupt(void)
{
 8013518:	b590      	push	{r4, r7, lr}
 801351a:	b08f      	sub	sp, #60	; 0x3c
 801351c:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef sleepTime_rtc, wakeTime_rtc;
	uint32_t sleepTime, wakeTime;
	uint8_t tempU8;

	if (TASKMAN_RUNSTATE_LOW_POWER == m_runState)
 801351e:	4b54      	ldr	r3, [pc, #336]	; (8013670 <TASKMAN_WaitInterrupt+0x158>)
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	2b02      	cmp	r3, #2
 8013524:	d000      	beq.n	8013528 <TASKMAN_WaitInterrupt+0x10>
 8013526:	e096      	b.n	8013656 <TASKMAN_WaitInterrupt+0x13e>
	{
		HAL_SuspendTick();
 8013528:	f7ef fe00 	bl	800312c <HAL_SuspendTick>

		// Stop the background tasks
		OSLOOP_Shutdown();
 801352c:	f7fd fc1e 	bl	8010d6c <OSLOOP_Shutdown>

	    HAL_RTC_GetTime(&hrtc, &sleepTime_rtc, RTC_FORMAT_BIN);
 8013530:	2418      	movs	r4, #24
 8013532:	1939      	adds	r1, r7, r4
 8013534:	4b4f      	ldr	r3, [pc, #316]	; (8013674 <TASKMAN_WaitInterrupt+0x15c>)
 8013536:	2200      	movs	r2, #0
 8013538:	0018      	movs	r0, r3
 801353a:	f7f2 faaf 	bl	8005a9c <HAL_RTC_GetTime>
	    (void)RTC->DR;
 801353e:	4b4e      	ldr	r3, [pc, #312]	; (8013678 <TASKMAN_WaitInterrupt+0x160>)
 8013540:	685b      	ldr	r3, [r3, #4]

	    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, TASKMAN_SLEEP_SETTING, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8013542:	2380      	movs	r3, #128	; 0x80
 8013544:	0199      	lsls	r1, r3, #6
 8013546:	4b4b      	ldr	r3, [pc, #300]	; (8013674 <TASKMAN_WaitInterrupt+0x15c>)
 8013548:	2200      	movs	r2, #0
 801354a:	0018      	movs	r0, r3
 801354c:	f7f2 fe90 	bl	8006270 <HAL_RTCEx_SetWakeUpTimer_IT>
	    	// Wait for the rtc to do its thing
	    }

#else
	    // Shutdown
		HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8013550:	2101      	movs	r1, #1
 8013552:	2000      	movs	r0, #0
 8013554:	f7f1 fc02 	bl	8004d5c <HAL_PWR_EnterSTOPMode>
#endif

		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8013558:	4b46      	ldr	r3, [pc, #280]	; (8013674 <TASKMAN_WaitInterrupt+0x15c>)
 801355a:	0018      	movs	r0, r3
 801355c:	f7f2 ff46 	bl	80063ec <HAL_RTCEx_DeactivateWakeUpTimer>

	    HAL_RTC_GetTime(&hrtc, &wakeTime_rtc, RTC_FORMAT_BIN);
 8013560:	1d39      	adds	r1, r7, #4
 8013562:	4b44      	ldr	r3, [pc, #272]	; (8013674 <TASKMAN_WaitInterrupt+0x15c>)
 8013564:	2200      	movs	r2, #0
 8013566:	0018      	movs	r0, r3
 8013568:	f7f2 fa98 	bl	8005a9c <HAL_RTC_GetTime>
	    (void)RTC->DR;
 801356c:	4b42      	ldr	r3, [pc, #264]	; (8013678 <TASKMAN_WaitInterrupt+0x160>)
 801356e:	685b      	ldr	r3, [r3, #4]

	    sleepTime = (sleepTime_rtc.Hours * 3600) + (sleepTime_rtc.Minutes * 60) + (sleepTime_rtc.Seconds);
 8013570:	0020      	movs	r0, r4
 8013572:	183b      	adds	r3, r7, r0
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	001a      	movs	r2, r3
 8013578:	0013      	movs	r3, r2
 801357a:	011b      	lsls	r3, r3, #4
 801357c:	1a9b      	subs	r3, r3, r2
 801357e:	011a      	lsls	r2, r3, #4
 8013580:	1ad2      	subs	r2, r2, r3
 8013582:	0113      	lsls	r3, r2, #4
 8013584:	001a      	movs	r2, r3
 8013586:	0011      	movs	r1, r2
 8013588:	183b      	adds	r3, r7, r0
 801358a:	785b      	ldrb	r3, [r3, #1]
 801358c:	001a      	movs	r2, r3
 801358e:	0013      	movs	r3, r2
 8013590:	011b      	lsls	r3, r3, #4
 8013592:	1a9b      	subs	r3, r3, r2
 8013594:	009b      	lsls	r3, r3, #2
 8013596:	18cb      	adds	r3, r1, r3
 8013598:	183a      	adds	r2, r7, r0
 801359a:	7892      	ldrb	r2, [r2, #2]
 801359c:	189b      	adds	r3, r3, r2
 801359e:	637b      	str	r3, [r7, #52]	; 0x34
	    wakeTime = (wakeTime_rtc.Hours * 3600) + (wakeTime_rtc.Minutes * 60) + (wakeTime_rtc.Seconds);
 80135a0:	1d3b      	adds	r3, r7, #4
 80135a2:	781b      	ldrb	r3, [r3, #0]
 80135a4:	001a      	movs	r2, r3
 80135a6:	0013      	movs	r3, r2
 80135a8:	011b      	lsls	r3, r3, #4
 80135aa:	1a9b      	subs	r3, r3, r2
 80135ac:	011a      	lsls	r2, r3, #4
 80135ae:	1ad2      	subs	r2, r2, r3
 80135b0:	0113      	lsls	r3, r2, #4
 80135b2:	001a      	movs	r2, r3
 80135b4:	0011      	movs	r1, r2
 80135b6:	1d3b      	adds	r3, r7, #4
 80135b8:	785b      	ldrb	r3, [r3, #1]
 80135ba:	001a      	movs	r2, r3
 80135bc:	0013      	movs	r3, r2
 80135be:	011b      	lsls	r3, r3, #4
 80135c0:	1a9b      	subs	r3, r3, r2
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	18cb      	adds	r3, r1, r3
 80135c6:	1d3a      	adds	r2, r7, #4
 80135c8:	7892      	ldrb	r2, [r2, #2]
 80135ca:	189b      	adds	r3, r3, r2
 80135cc:	633b      	str	r3, [r7, #48]	; 0x30
	    m_lastSleepTimeMs = (wakeTime - sleepTime) * 1000u;
 80135ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135d2:	1ad2      	subs	r2, r2, r3
 80135d4:	0013      	movs	r3, r2
 80135d6:	015b      	lsls	r3, r3, #5
 80135d8:	1a9b      	subs	r3, r3, r2
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	189b      	adds	r3, r3, r2
 80135de:	00db      	lsls	r3, r3, #3
 80135e0:	001a      	movs	r2, r3
 80135e2:	4b26      	ldr	r3, [pc, #152]	; (801367c <TASKMAN_WaitInterrupt+0x164>)
 80135e4:	601a      	str	r2, [r3, #0]

	    tempU8 = (uint8_t)(wakeTime_rtc.SubSeconds & 0xFFu);
 80135e6:	1d3b      	adds	r3, r7, #4
 80135e8:	685a      	ldr	r2, [r3, #4]
 80135ea:	212f      	movs	r1, #47	; 0x2f
 80135ec:	187b      	adds	r3, r7, r1
 80135ee:	701a      	strb	r2, [r3, #0]
	    tempU8 -= (uint8_t)(sleepTime_rtc.SubSeconds & 0xFFu);
 80135f0:	183b      	adds	r3, r7, r0
 80135f2:	685b      	ldr	r3, [r3, #4]
 80135f4:	b2da      	uxtb	r2, r3
 80135f6:	187b      	adds	r3, r7, r1
 80135f8:	0008      	movs	r0, r1
 80135fa:	1879      	adds	r1, r7, r1
 80135fc:	7809      	ldrb	r1, [r1, #0]
 80135fe:	1a8a      	subs	r2, r1, r2
 8013600:	701a      	strb	r2, [r3, #0]

	    // Add on the ms from the subseconds timer
	    m_lastSleepTimeMs += UTIL_FixMul_U32_U16(257003ul, tempU8);
 8013602:	183b      	adds	r3, r7, r0
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	b29b      	uxth	r3, r3
 8013608:	4a1d      	ldr	r2, [pc, #116]	; (8013680 <TASKMAN_WaitInterrupt+0x168>)
 801360a:	0019      	movs	r1, r3
 801360c:	0010      	movs	r0, r2
 801360e:	f000 f88a 	bl	8013726 <UTIL_FixMul_U32_U16>
 8013612:	0003      	movs	r3, r0
 8013614:	001a      	movs	r2, r3
 8013616:	4b19      	ldr	r3, [pc, #100]	; (801367c <TASKMAN_WaitInterrupt+0x164>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	18d2      	adds	r2, r2, r3
 801361c:	4b17      	ldr	r3, [pc, #92]	; (801367c <TASKMAN_WaitInterrupt+0x164>)
 801361e:	601a      	str	r2, [r3, #0]

	    uwTick += m_lastSleepTimeMs;
 8013620:	4b18      	ldr	r3, [pc, #96]	; (8013684 <TASKMAN_WaitInterrupt+0x16c>)
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	4b15      	ldr	r3, [pc, #84]	; (801367c <TASKMAN_WaitInterrupt+0x164>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	18d2      	adds	r2, r2, r3
 801362a:	4b16      	ldr	r3, [pc, #88]	; (8013684 <TASKMAN_WaitInterrupt+0x16c>)
 801362c:	601a      	str	r2, [r3, #0]

	    HAL_ResumeTick();
 801362e:	f7ef fd8b 	bl	8003148 <HAL_ResumeTick>

		// Restart background tasks
	    OSLOOP_Restart();
 8013632:	f7fd fbb3 	bl	8010d9c <OSLOOP_Restart>

		while(false == ADC_GetFilterReady())
 8013636:	46c0      	nop			; (mov r8, r8)
 8013638:	f7f4 f82c 	bl	8007694 <ADC_GetFilterReady>
 801363c:	0003      	movs	r3, r0
 801363e:	001a      	movs	r2, r3
 8013640:	2301      	movs	r3, #1
 8013642:	4053      	eors	r3, r2
 8013644:	b2db      	uxtb	r3, r3
 8013646:	2b00      	cmp	r3, #0
 8013648:	d1f6      	bne.n	8013638 <TASKMAN_WaitInterrupt+0x120>
		{
			// Wait for ADC to become ready
		}

		MS_TIME_COUNTER_INIT(m_lowPowerDelayTimer);
 801364a:	f7ef fd41 	bl	80030d0 <HAL_GetTick>
 801364e:	0002      	movs	r2, r0
 8013650:	4b0d      	ldr	r3, [pc, #52]	; (8013688 <TASKMAN_WaitInterrupt+0x170>)
 8013652:	601a      	str	r2, [r3, #0]
	}
	else if (TASKMAN_RUNSTATE_SLEEP == m_runState)
	{
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	}
}
 8013654:	e007      	b.n	8013666 <TASKMAN_WaitInterrupt+0x14e>
	else if (TASKMAN_RUNSTATE_SLEEP == m_runState)
 8013656:	4b06      	ldr	r3, [pc, #24]	; (8013670 <TASKMAN_WaitInterrupt+0x158>)
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	2b01      	cmp	r3, #1
 801365c:	d103      	bne.n	8013666 <TASKMAN_WaitInterrupt+0x14e>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 801365e:	2101      	movs	r1, #1
 8013660:	2000      	movs	r0, #0
 8013662:	f7f1 fb5f 	bl	8004d24 <HAL_PWR_EnterSLEEPMode>
}
 8013666:	46c0      	nop			; (mov r8, r8)
 8013668:	46bd      	mov	sp, r7
 801366a:	b00f      	add	sp, #60	; 0x3c
 801366c:	bd90      	pop	{r4, r7, pc}
 801366e:	46c0      	nop			; (mov r8, r8)
 8013670:	200015ec 	.word	0x200015ec
 8013674:	2000183c 	.word	0x2000183c
 8013678:	40002800 	.word	0x40002800
 801367c:	200015e0 	.word	0x200015e0
 8013680:	0003ebeb 	.word	0x0003ebeb
 8013684:	20001970 	.word	0x20001970
 8013688:	200015e8 	.word	0x200015e8

0801368c <HAL_GPIO_EXTI_Callback>:
 * 			such that they do not overlap on ports and are always be unique by
 * 			pin reference.
 */
// ****************************************************************************
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	0002      	movs	r2, r0
 8013694:	1dbb      	adds	r3, r7, #6
 8013696:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_0)
 8013698:	1dbb      	adds	r3, r7, #6
 801369a:	881b      	ldrh	r3, [r3, #0]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d105      	bne.n	80136ac <HAL_GPIO_EXTI_Callback+0x20>
	{
		// CH_INT
		CHARGER_SetInterrupt();
 80136a0:	f7f6 fa20 	bl	8009ae4 <CHARGER_SetInterrupt>
		m_extiEvent = EXTI_EVENT_CHARGER;
 80136a4:	4b0f      	ldr	r3, [pc, #60]	; (80136e4 <HAL_GPIO_EXTI_Callback+0x58>)
 80136a6:	2201      	movs	r2, #1
 80136a8:	701a      	strb	r2, [r3, #0]
	else
	{
		// SW1, SW2, SW3
		m_extiEvent = EXTI_EVENT_USER;
	}
}
 80136aa:	e017      	b.n	80136dc <HAL_GPIO_EXTI_Callback+0x50>
	else if (GPIO_Pin == GPIO_PIN_7)
 80136ac:	1dbb      	adds	r3, r7, #6
 80136ae:	881b      	ldrh	r3, [r3, #0]
 80136b0:	2b80      	cmp	r3, #128	; 0x80
 80136b2:	d103      	bne.n	80136bc <HAL_GPIO_EXTI_Callback+0x30>
		m_extiEvent = EXTI_EVENT_I2C;
 80136b4:	4b0b      	ldr	r3, [pc, #44]	; (80136e4 <HAL_GPIO_EXTI_Callback+0x58>)
 80136b6:	2202      	movs	r2, #2
 80136b8:	701a      	strb	r2, [r3, #0]
}
 80136ba:	e00f      	b.n	80136dc <HAL_GPIO_EXTI_Callback+0x50>
	else if (GPIO_Pin == GPIO_PIN_8)
 80136bc:	1dbb      	adds	r3, r7, #6
 80136be:	881a      	ldrh	r2, [r3, #0]
 80136c0:	2380      	movs	r3, #128	; 0x80
 80136c2:	005b      	lsls	r3, r3, #1
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d106      	bne.n	80136d6 <HAL_GPIO_EXTI_Callback+0x4a>
		m_extiEvent = EXTI_EVENT_IO2;
 80136c8:	4b06      	ldr	r3, [pc, #24]	; (80136e4 <HAL_GPIO_EXTI_Callback+0x58>)
 80136ca:	2204      	movs	r2, #4
 80136cc:	701a      	strb	r2, [r3, #0]
		m_ioWakeupEvent = true;
 80136ce:	4b06      	ldr	r3, [pc, #24]	; (80136e8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80136d0:	2201      	movs	r2, #1
 80136d2:	701a      	strb	r2, [r3, #0]
}
 80136d4:	e002      	b.n	80136dc <HAL_GPIO_EXTI_Callback+0x50>
		m_extiEvent = EXTI_EVENT_USER;
 80136d6:	4b03      	ldr	r3, [pc, #12]	; (80136e4 <HAL_GPIO_EXTI_Callback+0x58>)
 80136d8:	2203      	movs	r2, #3
 80136da:	701a      	strb	r2, [r3, #0]
}
 80136dc:	46c0      	nop			; (mov r8, r8)
 80136de:	46bd      	mov	sp, r7
 80136e0:	b002      	add	sp, #8
 80136e2:	bd80      	pop	{r7, pc}
 80136e4:	200015ed 	.word	0x200015ed
 80136e8:	200015ee 	.word	0x200015ee

080136ec <UTIL_NV_ParamInitCheck_U16>:
 * @retval	bool		true = parameter is looking initialised
 * 						false = parameter is not looking initialised
 */
// ****************************************************************************
bool UTIL_NV_ParamInitCheck_U16(const uint16_t parameter)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b084      	sub	sp, #16
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	0002      	movs	r2, r0
 80136f4:	1dbb      	adds	r3, r7, #6
 80136f6:	801a      	strh	r2, [r3, #0]
	uint8_t chk = (parameter >> 8u) ^ 0xFF;
 80136f8:	1dbb      	adds	r3, r7, #6
 80136fa:	881b      	ldrh	r3, [r3, #0]
 80136fc:	0a1b      	lsrs	r3, r3, #8
 80136fe:	b29b      	uxth	r3, r3
 8013700:	b2da      	uxtb	r2, r3
 8013702:	210f      	movs	r1, #15
 8013704:	187b      	adds	r3, r7, r1
 8013706:	43d2      	mvns	r2, r2
 8013708:	701a      	strb	r2, [r3, #0]

	return (parameter & 0x00FFu) == (uint16_t)chk;
 801370a:	1dbb      	adds	r3, r7, #6
 801370c:	881b      	ldrh	r3, [r3, #0]
 801370e:	22ff      	movs	r2, #255	; 0xff
 8013710:	401a      	ands	r2, r3
 8013712:	187b      	adds	r3, r7, r1
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	1ad3      	subs	r3, r2, r3
 8013718:	425a      	negs	r2, r3
 801371a:	4153      	adcs	r3, r2
 801371c:	b2db      	uxtb	r3, r3
}
 801371e:	0018      	movs	r0, r3
 8013720:	46bd      	mov	sp, r7
 8013722:	b004      	add	sp, #16
 8013724:	bd80      	pop	{r7, pc}

08013726 <UTIL_FixMul_U32_U16>:
 * @param	value 		uint16_t parameter vaue
 * @retval	uint16_t 	muiltiplied value
 */
// ****************************************************************************
uint16_t UTIL_FixMul_U32_U16(const uint32_t fixmul, const uint16_t value)
{
 8013726:	b580      	push	{r7, lr}
 8013728:	b084      	sub	sp, #16
 801372a:	af00      	add	r7, sp, #0
 801372c:	6078      	str	r0, [r7, #4]
 801372e:	000a      	movs	r2, r1
 8013730:	1cbb      	adds	r3, r7, #2
 8013732:	801a      	strh	r2, [r3, #0]
	/* Apply fixed point multipler */
	uint32_t result = (value * fixmul);
 8013734:	1cbb      	adds	r3, r7, #2
 8013736:	881a      	ldrh	r2, [r3, #0]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	4353      	muls	r3, r2
 801373c:	60fb      	str	r3, [r7, #12]

	// Round up if halfway there
	if (0u != (result & 0x8000u))
 801373e:	68fa      	ldr	r2, [r7, #12]
 8013740:	2380      	movs	r3, #128	; 0x80
 8013742:	021b      	lsls	r3, r3, #8
 8013744:	4013      	ands	r3, r2
 8013746:	d005      	beq.n	8013754 <UTIL_FixMul_U32_U16+0x2e>
	{
		result += 0x10000u;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2280      	movs	r2, #128	; 0x80
 801374c:	0252      	lsls	r2, r2, #9
 801374e:	4694      	mov	ip, r2
 8013750:	4463      	add	r3, ip
 8013752:	60fb      	str	r3, [r7, #12]
	}

	return (uint16_t)(result >> 16u);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	0c1b      	lsrs	r3, r3, #16
 8013758:	b29b      	uxth	r3, r3
}
 801375a:	0018      	movs	r0, r3
 801375c:	46bd      	mov	sp, r7
 801375e:	b004      	add	sp, #16
 8013760:	bd80      	pop	{r7, pc}

08013762 <UTIL_FixMul_U32_S16>:
 * @param	value 		int16_t value to multiply
 * @retval	int16_t		multiplied return value
 */
// ****************************************************************************
int16_t UTIL_FixMul_U32_S16(const uint32_t fixmul, const int16_t value)
{
 8013762:	b590      	push	{r4, r7, lr}
 8013764:	b085      	sub	sp, #20
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]
 801376a:	000a      	movs	r2, r1
 801376c:	1cbb      	adds	r3, r7, #2
 801376e:	801a      	strh	r2, [r3, #0]
	const bool negative = (value < 0);
 8013770:	240f      	movs	r4, #15
 8013772:	193b      	adds	r3, r7, r4
 8013774:	1cba      	adds	r2, r7, #2
 8013776:	8812      	ldrh	r2, [r2, #0]
 8013778:	0bd2      	lsrs	r2, r2, #15
 801377a:	701a      	strb	r2, [r3, #0]
	const uint32_t result = UTIL_FixMul_U32_U16(fixmul, abs(value));
 801377c:	1cbb      	adds	r3, r7, #2
 801377e:	2200      	movs	r2, #0
 8013780:	5e9b      	ldrsh	r3, [r3, r2]
 8013782:	17da      	asrs	r2, r3, #31
 8013784:	189b      	adds	r3, r3, r2
 8013786:	4053      	eors	r3, r2
 8013788:	b29a      	uxth	r2, r3
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	0011      	movs	r1, r2
 801378e:	0018      	movs	r0, r3
 8013790:	f7ff ffc9 	bl	8013726 <UTIL_FixMul_U32_U16>
 8013794:	0003      	movs	r3, r0
 8013796:	60bb      	str	r3, [r7, #8]

	return (true == negative) ? -result : result;
 8013798:	193b      	adds	r3, r7, r4
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d005      	beq.n	80137ac <UTIL_FixMul_U32_S16+0x4a>
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	425b      	negs	r3, r3
 80137a6:	b29b      	uxth	r3, r3
 80137a8:	b21b      	sxth	r3, r3
 80137aa:	e001      	b.n	80137b0 <UTIL_FixMul_U32_S16+0x4e>
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	b21b      	sxth	r3, r3
}
 80137b0:	0018      	movs	r0, r3
 80137b2:	46bd      	mov	sp, r7
 80137b4:	b005      	add	sp, #20
 80137b6:	bd90      	pop	{r4, r7, pc}

080137b8 <UTIL_FixMulInverse_U16_U16>:
 * @retval	bool		true = conversion sucessful
 * 						false = conversion unsuccesful
 */
// ****************************************************************************
bool UTIL_FixMulInverse_U16_U16(const uint16_t realVal, const uint16_t divValue, uint32_t * const p_result)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	603a      	str	r2, [r7, #0]
 80137c0:	1dbb      	adds	r3, r7, #6
 80137c2:	1c02      	adds	r2, r0, #0
 80137c4:	801a      	strh	r2, [r3, #0]
 80137c6:	1d3b      	adds	r3, r7, #4
 80137c8:	1c0a      	adds	r2, r1, #0
 80137ca:	801a      	strh	r2, [r3, #0]
	if (divValue == 0u)
 80137cc:	1d3b      	adds	r3, r7, #4
 80137ce:	881b      	ldrh	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d101      	bne.n	80137d8 <UTIL_FixMulInverse_U16_U16+0x20>
	{
		// Could end badly
		return false;
 80137d4:	2300      	movs	r3, #0
 80137d6:	e00d      	b.n	80137f4 <UTIL_FixMulInverse_U16_U16+0x3c>
	}

	// TODO - Consider overflow

	*p_result = (realVal << 16u) / divValue;
 80137d8:	1dbb      	adds	r3, r7, #6
 80137da:	881b      	ldrh	r3, [r3, #0]
 80137dc:	041a      	lsls	r2, r3, #16
 80137de:	1d3b      	adds	r3, r7, #4
 80137e0:	881b      	ldrh	r3, [r3, #0]
 80137e2:	0019      	movs	r1, r3
 80137e4:	0010      	movs	r0, r2
 80137e6:	f7ec fd17 	bl	8000218 <__divsi3>
 80137ea:	0003      	movs	r3, r0
 80137ec:	001a      	movs	r2, r3
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	601a      	str	r2, [r3, #0]

	return true;
 80137f2:	2301      	movs	r3, #1
}
 80137f4:	0018      	movs	r0, r3
 80137f6:	46bd      	mov	sp, r7
 80137f8:	b002      	add	sp, #8
 80137fa:	bd80      	pop	{r7, pc}

080137fc <UTIL_FromBytes_U16>:
 * @param	p_data		pointer to buffer containing 2 bytes ordered little endian
 * @retval	uint16_t	result
 */
// ****************************************************************************
uint16_t UTIL_FromBytes_U16(const uint8_t * const p_data)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
	return (uint16_t)p_data[0u] | ((uint16_t)p_data[1u] << 8u);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	781b      	ldrb	r3, [r3, #0]
 8013808:	b21a      	sxth	r2, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	3301      	adds	r3, #1
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	021b      	lsls	r3, r3, #8
 8013812:	b21b      	sxth	r3, r3
 8013814:	4313      	orrs	r3, r2
 8013816:	b21b      	sxth	r3, r3
 8013818:	b29b      	uxth	r3, r3
}
 801381a:	0018      	movs	r0, r3
 801381c:	46bd      	mov	sp, r7
 801381e:	b002      	add	sp, #8
 8013820:	bd80      	pop	{r7, pc}

08013822 <UTIL_ToBytes_U16>:
 * @retval	none
 *
 */
// ****************************************************************************
void UTIL_ToBytes_U16(const uint16_t value, uint8_t * const p_destBuffer)
{
 8013822:	b580      	push	{r7, lr}
 8013824:	b082      	sub	sp, #8
 8013826:	af00      	add	r7, sp, #0
 8013828:	0002      	movs	r2, r0
 801382a:	6039      	str	r1, [r7, #0]
 801382c:	1dbb      	adds	r3, r7, #6
 801382e:	801a      	strh	r2, [r3, #0]
	p_destBuffer[0u] = (uint8_t)(value & 0xFFu);
 8013830:	1dbb      	adds	r3, r7, #6
 8013832:	881b      	ldrh	r3, [r3, #0]
 8013834:	b2da      	uxtb	r2, r3
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	701a      	strb	r2, [r3, #0]
	p_destBuffer[1u] = (uint8_t)((value >> 8u) & 0xFFu);
 801383a:	1dbb      	adds	r3, r7, #6
 801383c:	881b      	ldrh	r3, [r3, #0]
 801383e:	0a1b      	lsrs	r3, r3, #8
 8013840:	b29a      	uxth	r2, r3
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	3301      	adds	r3, #1
 8013846:	b2d2      	uxtb	r2, r2
 8013848:	701a      	strb	r2, [r3, #0]
}
 801384a:	46c0      	nop			; (mov r8, r8)
 801384c:	46bd      	mov	sp, r7
 801384e:	b002      	add	sp, #8
 8013850:	bd80      	pop	{r7, pc}
	...

08013854 <__libc_init_array>:
 8013854:	b570      	push	{r4, r5, r6, lr}
 8013856:	2600      	movs	r6, #0
 8013858:	4d0c      	ldr	r5, [pc, #48]	; (801388c <__libc_init_array+0x38>)
 801385a:	4c0d      	ldr	r4, [pc, #52]	; (8013890 <__libc_init_array+0x3c>)
 801385c:	1b64      	subs	r4, r4, r5
 801385e:	10a4      	asrs	r4, r4, #2
 8013860:	42a6      	cmp	r6, r4
 8013862:	d109      	bne.n	8013878 <__libc_init_array+0x24>
 8013864:	2600      	movs	r6, #0
 8013866:	f000 f82b 	bl	80138c0 <_init>
 801386a:	4d0a      	ldr	r5, [pc, #40]	; (8013894 <__libc_init_array+0x40>)
 801386c:	4c0a      	ldr	r4, [pc, #40]	; (8013898 <__libc_init_array+0x44>)
 801386e:	1b64      	subs	r4, r4, r5
 8013870:	10a4      	asrs	r4, r4, #2
 8013872:	42a6      	cmp	r6, r4
 8013874:	d105      	bne.n	8013882 <__libc_init_array+0x2e>
 8013876:	bd70      	pop	{r4, r5, r6, pc}
 8013878:	00b3      	lsls	r3, r6, #2
 801387a:	58eb      	ldr	r3, [r5, r3]
 801387c:	4798      	blx	r3
 801387e:	3601      	adds	r6, #1
 8013880:	e7ee      	b.n	8013860 <__libc_init_array+0xc>
 8013882:	00b3      	lsls	r3, r6, #2
 8013884:	58eb      	ldr	r3, [r5, r3]
 8013886:	4798      	blx	r3
 8013888:	3601      	adds	r6, #1
 801388a:	e7f2      	b.n	8013872 <__libc_init_array+0x1e>
 801388c:	08014864 	.word	0x08014864
 8013890:	08014864 	.word	0x08014864
 8013894:	08014864 	.word	0x08014864
 8013898:	08014868 	.word	0x08014868

0801389c <memcpy>:
 801389c:	2300      	movs	r3, #0
 801389e:	b510      	push	{r4, lr}
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d100      	bne.n	80138a6 <memcpy+0xa>
 80138a4:	bd10      	pop	{r4, pc}
 80138a6:	5ccc      	ldrb	r4, [r1, r3]
 80138a8:	54c4      	strb	r4, [r0, r3]
 80138aa:	3301      	adds	r3, #1
 80138ac:	e7f8      	b.n	80138a0 <memcpy+0x4>

080138ae <memset>:
 80138ae:	0003      	movs	r3, r0
 80138b0:	1882      	adds	r2, r0, r2
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d100      	bne.n	80138b8 <memset+0xa>
 80138b6:	4770      	bx	lr
 80138b8:	7019      	strb	r1, [r3, #0]
 80138ba:	3301      	adds	r3, #1
 80138bc:	e7f9      	b.n	80138b2 <memset+0x4>
	...

080138c0 <_init>:
 80138c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138c2:	46c0      	nop			; (mov r8, r8)
 80138c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138c6:	bc08      	pop	{r3}
 80138c8:	469e      	mov	lr, r3
 80138ca:	4770      	bx	lr

080138cc <_fini>:
 80138cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ce:	46c0      	nop			; (mov r8, r8)
 80138d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138d2:	bc08      	pop	{r3}
 80138d4:	469e      	mov	lr, r3
 80138d6:	4770      	bx	lr
